{
  createCache(-1,true);
  for (int i=0; i < KEYS_CNT; i++)   cache.put(i,i);
  printStat();
  assertEquals(cache.localMetrics().getCacheEvictions(),cache.localMetrics().getSwapPuts());
  assertEquals(KEYS_CNT,cache.localMetrics().getSwapGets());
  assertEquals(0,cache.localMetrics().getSwapHits());
  assertEquals(0f,cache.localMetrics().getSwapHitPercentage());
  assertEquals(KEYS_CNT,cache.localMetrics().getSwapMisses());
  assertEquals(100f,cache.localMetrics().getSwapMissPercentage());
  assertEquals(0,cache.localMetrics().getSwapRemovals());
  assertEquals(cache.localMetrics().getCacheEvictions(),cache.localMetrics().getSwapEntriesCount());
  for (int i=0; i < KEYS_CNT; i++)   cache.get(i);
  printStat();
  assertEquals(cache.localMetrics().getCacheEvictions(),cache.localMetrics().getSwapPuts());
  assertEquals(KEYS_CNT * 2,cache.localMetrics().getSwapGets());
  assertEquals(KEYS_CNT,cache.localMetrics().getSwapHits());
  assertEquals(100 * KEYS_CNT / (KEYS_CNT * 2.0),cache.localMetrics().getSwapHitPercentage(),0.1);
  assertEquals(KEYS_CNT,cache.localMetrics().getSwapMisses());
  assertEquals(100 * KEYS_CNT / (KEYS_CNT * 2.0),cache.localMetrics().getSwapMissPercentage(),0.1);
  assertEquals(KEYS_CNT,cache.localMetrics().getSwapRemovals());
  assertEquals(KEYS_CNT - MAX_SIZE,cache.localMetrics().getSwapEntriesCount());
  for (int i=KEYS_CNT; i < KEYS_CNT * 2; i++)   cache.get(i);
  printStat();
  assertEquals(cache.localMetrics().getCacheEvictions(),cache.localMetrics().getSwapPuts());
  assertEquals(KEYS_CNT * 3,cache.localMetrics().getSwapGets());
  assertEquals(KEYS_CNT,cache.localMetrics().getSwapHits());
  assertEquals(100 / 3.0,cache.localMetrics().getSwapHitPercentage(),0.1);
  assertEquals(KEYS_CNT * 2,cache.localMetrics().getSwapMisses());
  assertEquals(100 - (100 / 3.0),cache.localMetrics().getSwapMissPercentage(),0.1);
  assertEquals(KEYS_CNT,cache.localMetrics().getSwapRemovals());
  assertEquals(KEYS_CNT - MAX_SIZE,cache.localMetrics().getSwapEntriesCount());
  for (int i=0; i < KEYS_CNT; i++)   cache.remove(i);
  printStat();
  assertEquals(cache.localMetrics().getCacheEvictions(),cache.localMetrics().getSwapPuts());
  assertEquals(KEYS_CNT * 4 - MAX_SIZE,cache.localMetrics().getSwapGets());
  assertEquals(KEYS_CNT * 2 - MAX_SIZE,cache.localMetrics().getSwapHits());
  assertEquals(100 * (KEYS_CNT * 2.0 - MAX_SIZE) / (KEYS_CNT * 4.0 - MAX_SIZE),cache.localMetrics().getSwapHitPercentage(),0.1);
  assertEquals(KEYS_CNT * 2,cache.localMetrics().getSwapMisses());
  assertEquals(100 * KEYS_CNT * 2.0 / (KEYS_CNT * 4.0 - MAX_SIZE),cache.localMetrics().getSwapMissPercentage(),0.1);
  assertEquals(KEYS_CNT * 2 - MAX_SIZE,cache.localMetrics().getSwapRemovals());
  assertEquals(0,cache.localMetrics().getSwapEntriesCount());
}
