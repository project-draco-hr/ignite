{
  try {
    if (out.exists()) {
      MessageBox.Result choice=askOverwrite.confirm(out.getName());
      if (CANCEL == choice)       throw new IllegalStateException("XML generation was canceled!");
      if (NO == choice || NO_TO_ALL == choice)       return;
    }
    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
    Document doc=docBuilder.newDocument();
    doc.setXmlStandalone(true);
    Element beans=addElement(doc,doc,"beans");
    beans.setAttribute("xmlns","http://www.springframework.org/schema/beans");
    beans.setAttribute("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
    beans.setAttribute("xmlns:util","http://www.springframework.org/schema/util");
    beans.setAttribute("xsi:schemaLocation","http://www.springframework.org/schema/beans " + "http://www.springframework.org/schema/beans/spring-beans.xsd " + "http://www.springframework.org/schema/util "+ "http://www.springframework.org/schema/util/spring-util.xsd");
    for (    GridCacheQueryTypeMetadata item : meta)     addTypeMetadata(doc,beans,pkg,item);
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,"yes");
    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","4");
    transformer.transform(new DOMSource(doc),new StreamResult(out));
  }
 catch (  ParserConfigurationException|TransformerException e) {
    throw new IllegalStateException(e);
  }
}
