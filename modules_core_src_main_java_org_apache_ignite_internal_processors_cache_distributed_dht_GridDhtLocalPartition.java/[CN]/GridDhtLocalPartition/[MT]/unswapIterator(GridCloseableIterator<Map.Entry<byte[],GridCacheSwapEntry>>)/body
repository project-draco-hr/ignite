{
  if (it == null)   return null;
  return new Iterator<GridDhtCacheEntry>(){
    /** 
 */
    KeyCacheObject lastKey;
    @Override public boolean hasNext(){
      return it.hasNext();
    }
    @Override public GridDhtCacheEntry next(){
      Map.Entry<byte[],GridCacheSwapEntry> entry=it.next();
      byte[] keyBytes=entry.getKey();
      try {
        lastKey=cctx.toCacheKeyObject(keyBytes);
        GridDhtCacheEntry res=(GridDhtCacheEntry)cctx.cache().entryEx(lastKey,false);
        res.unswap(true,true);
        return res;
      }
 catch (      IgniteCheckedException e) {
        throw new CacheException(e);
      }
    }
    @Override public void remove(){
      if (lastKey == null)       throw new IllegalStateException();
      map.remove(lastKey);
      try {
        cctx.swap().remove(lastKey);
      }
 catch (      IgniteCheckedException e) {
        U.error(log,"Failed to remove swap entry for key: " + lastKey);
      }
    }
  }
;
}
