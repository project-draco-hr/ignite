{
  if (it == null)   return null;
  return new Iterator<GridDhtCacheEntry>(){
    /** 
 */
    GridDhtCacheEntry lastEntry;
    @Override public boolean hasNext(){
      return it.hasNext();
    }
    @Override public GridDhtCacheEntry next(){
      Map.Entry<byte[],GridCacheSwapEntry> entry=it.next();
      byte[] keyBytes=entry.getKey();
      while (true) {
        try {
          KeyCacheObject key=cctx.toCacheKeyObject(keyBytes);
          lastEntry=(GridDhtCacheEntry)cctx.cache().entryEx(key,false);
          lastEntry.unswap(true);
          return lastEntry;
        }
 catch (        GridCacheEntryRemovedException e) {
          if (log.isDebugEnabled())           log.debug("Got removed entry: " + lastEntry);
        }
catch (        IgniteCheckedException e) {
          throw new CacheException(e);
        }
      }
    }
    @Override public void remove(){
      map.removeEntry(lastEntry);
    }
  }
;
}
