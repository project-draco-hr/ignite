{
  GridFileLock fileLock=GridLoadTestUtils.fileLock();
  fileLock.lock();
  try {
    final int noThreads=args.length > 0 ? Integer.parseInt(args[0]) : 64;
    final int duration=args.length > 1 ? Integer.parseInt(args[1]) : 0;
    final String outputFileName=args.length > 2 ? args[2] : null;
    X.println("Thread count: " + noThreads);
    g=G.start("modules/tests/config/jobs-load-client.xml");
    warmUp(noThreads);
    final Thread collector=new Thread(new Runnable(){
      @SuppressWarnings("BusyWait") @Override public void run(){
        GridCumulativeAverage avgTxPerSec=new GridCumulativeAverage();
        try {
          while (!finish) {
            Thread.sleep(UPDATE_INTERVAL_SEC * 1000);
            long txPerSec=txCnt.sumThenReset() / UPDATE_INTERVAL_SEC;
            X.println(">>>");
            X.println(">>> Transactions/s: " + txPerSec);
            avgTxPerSec.update(txPerSec);
          }
        }
 catch (        InterruptedException ignored) {
          X.println(">>> Interrupted.");
          Thread.currentThread().interrupt();
        }
        X.println(">>> Average Transactions/s: " + avgTxPerSec);
        if (outputFileName != null) {
          try {
            X.println("Writing results to file: " + outputFileName);
            GridLoadTestUtils.appendLineToFile(outputFileName,"%s,%d",GridLoadTestUtils.DATE_TIME_FORMAT.format(new Date()),avgTxPerSec.get());
          }
 catch (          IOException e) {
            X.error("Failed to output results to file.",e);
          }
        }
      }
    }
);
    X.println("Running main test...");
    Thread timer=null;
    try {
      ExecutorService pool=Executors.newFixedThreadPool(noThreads);
      Collection<Callable<Object>> clients=new ArrayList<>(noThreads);
      for (int i=0; i < noThreads; i++)       clients.add(new GridJobExecutionLoadTestClient());
      collector.start();
      if (duration > 0) {
        timer=new Thread(new Runnable(){
          @Override public void run(){
            try {
              Thread.sleep(duration * 1000);
              finish=true;
            }
 catch (            InterruptedException ignored) {
              X.println(">>> Interrupted.");
            }
          }
        }
);
        timer.start();
      }
      pool.invokeAll(clients);
      collector.interrupt();
      pool.shutdown();
    }
  finally {
      if (collector != null && !collector.isInterrupted())       collector.interrupt();
      if (timer != null)       timer.interrupt();
      G.stopAll(true);
    }
  }
  finally {
    fileLock.close();
  }
}
