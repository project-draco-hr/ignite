{
  if (clusterProps.instances() <= tasks.size())   return null;
  double cpus=-1;
  double mem=-1;
  double disk=-1;
  for (  Protos.Resource resource : offer.getResourcesList()) {
    if (resource.getName().equals(CPUS)) {
      if (resource.getType().equals(Protos.Value.Type.SCALAR))       cpus=resource.getScalar().getValue();
 else       log.debug("Cpus resource was not a scalar: {}" + resource.getType());
    }
 else     if (resource.getName().equals(MEM)) {
      if (resource.getType().equals(Protos.Value.Type.SCALAR))       mem=resource.getScalar().getValue();
 else       log.debug("Mem resource was not a scalar: {}",resource.getType());
    }
 else     if (resource.getName().equals(DISK))     if (resource.getType().equals(Protos.Value.Type.SCALAR))     disk=resource.getScalar().getValue();
 else     log.debug("Disk resource was not a scalar: {}",resource.getType());
  }
  if (cpus < clusterProps.minCpuPerNode() || mem < clusterProps.minMemoryPerNode()) {
    log.debug("Offer not sufficient for slave request: {}",offer.getResourcesList());
    return null;
  }
  double totalCpus=0;
  double totalMem=0;
  double totalDisk=0;
  for (  IgniteTask task : tasks.values()) {
    totalCpus+=task.cpuCores();
    totalMem+=task.mem();
    totalDisk+=task.disk();
  }
  cpus=Math.min(clusterProps.cpus() - totalCpus,Math.min(cpus,clusterProps.cpusPerNode()));
  mem=Math.min(clusterProps.memory() - totalMem,Math.min(mem,clusterProps.memoryPerNode()));
  disk=Math.min(clusterProps.disk() - totalDisk,Math.min(disk,clusterProps.diskPerNode()));
  if (cpus > 0 && mem > 0)   return new IgniteTask(offer.getHostname(),cpus,mem,disk);
 else {
    log.debug("Offer not sufficient for slave request: {}",offer.getResourcesList());
    return null;
  }
}
