{
  final String taskId=taskStatus.getTaskId().getValue();
  log.info("statusUpdate() task {} is in state {}",taskId,taskStatus.getState());
switch (taskStatus.getState()) {
case TASK_FAILED:
case TASK_FINISHED:
synchronized (mux) {
      IgniteTask failedTask=tasks.remove(taskId);
      if (failedTask != null) {
        List<Protos.Request> requests=new ArrayList<>();
        Protos.Request request=Protos.Request.newBuilder().addResources(Protos.Resource.newBuilder().setType(Protos.Value.Type.SCALAR).setName(MEM).setScalar(Protos.Value.Scalar.newBuilder().setValue(failedTask.mem()))).addResources(Protos.Resource.newBuilder().setType(Protos.Value.Type.SCALAR).setName(CPUS).setScalar(Protos.Value.Scalar.newBuilder().setValue(failedTask.cpuCores()))).build();
        requests.add(request);
        schedulerDriver.requestResources(requests);
      }
    }
  break;
}
}
