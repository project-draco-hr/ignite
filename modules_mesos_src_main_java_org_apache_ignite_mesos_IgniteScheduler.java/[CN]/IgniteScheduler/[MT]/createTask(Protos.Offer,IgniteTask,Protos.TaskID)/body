{
  Protos.CommandInfo.Builder builder=Protos.CommandInfo.newBuilder().setEnvironment(Protos.Environment.newBuilder().addVariables(Protos.Environment.Variable.newBuilder().setName("IGNITE_TCP_DISCOVERY_ADDRESSES").setValue(getAddress(offer.getHostname())))).addUris(Protos.CommandInfo.URI.newBuilder().setValue(clusterProps.ignitePackageUrl() != null ? clusterProps.ignitePackageUrl() : resourceProvider.igniteUrl()).setExtract(true)).addUris(Protos.CommandInfo.URI.newBuilder().setValue(clusterProps.igniteConfigUrl() != null ? clusterProps.igniteConfigUrl() : resourceProvider.igniteConfigUrl()));
  if (resourceProvider.resourceUrl() != null || clusterProps.usersLibsUrl() != null) {
    if (clusterProps.igniteConfigUrl() != null) {
      builder.addUris(Protos.CommandInfo.URI.newBuilder().setValue(clusterProps.igniteConfigUrl()).setExtract(true));
      String[] split=clusterProps.igniteConfigUrl().split("/");
      builder.setValue("cp *.jar ./gridgain-community-*/libs/ " + "&& ./gridgain-community-*/bin/ignite.sh " + split[split.length - 1] + " -J-Xmx"+ String.valueOf((int)igniteTask.mem() + "m")+ " -J-Xms"+ String.valueOf((int)igniteTask.mem())+ "m");
    }
 else {
      for (      String url : resourceProvider.resourceUrl())       builder.addUris(Protos.CommandInfo.URI.newBuilder().setValue(url));
      builder.setValue("cp *.jar ./gridgain-community-*/libs/ " + "&& ./gridgain-community-*/bin/ignite.sh " + resourceProvider.configName() + " -J-Xmx"+ String.valueOf((int)igniteTask.mem() + "m")+ " -J-Xms"+ String.valueOf((int)igniteTask.mem())+ "m");
    }
  }
 else   builder.setValue("./gridgain-community-*/bin/ignite.sh " + resourceProvider.configName() + " -J-Xmx"+ String.valueOf((int)igniteTask.mem() + "m")+ " -J-Xms"+ String.valueOf((int)igniteTask.mem())+ "m");
  return Protos.TaskInfo.newBuilder().setName("Ignite node " + taskId.getValue()).setTaskId(taskId).setSlaveId(offer.getSlaveId()).setCommand(builder).addResources(Protos.Resource.newBuilder().setName(CPUS).setType(Protos.Value.Type.SCALAR).setScalar(Protos.Value.Scalar.newBuilder().setValue(igniteTask.cpuCores()))).addResources(Protos.Resource.newBuilder().setName(MEM).setType(Protos.Value.Type.SCALAR).setScalar(Protos.Value.Scalar.newBuilder().setValue(igniteTask.mem()))).addResources(Protos.Resource.newBuilder().setName(DISK).setType(Protos.Value.Type.SCALAR).setScalar(Protos.Value.Scalar.newBuilder().setValue(igniteTask.disk()))).build();
}
