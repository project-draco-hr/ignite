{
  GridClientData dfltData=client.data();
  TestKey1 key1=new TestKey1(false,(byte)10,(short)11,'a',100,Long.MAX_VALUE,1.1f,10.1,"str1");
  TestValue1 val1=new TestValue1(new boolean[]{true,false},new byte[]{0,-1,2,Byte.MAX_VALUE},new short[]{3,-4,5,Short.MAX_VALUE},new char[]{'a','b','c'},new int[]{Integer.MAX_VALUE,-1},new long[]{Long.MAX_VALUE,-1,1},new float[]{1.1f,-1.1f},new double[]{1.1f,-1.1f});
  dfltData.put(key1,val1);
  assertEquals(val1,dfltData.get(key1));
  key1=new TestKey1(false,(byte)10,(short)11,'a',100,Long.MAX_VALUE,1.1f,10.1,"str2");
  assertEquals(null,dfltData.get(key1));
  TestKey2 key2=new TestKey2(false,(byte)10,(short)11,'a',100,Long.MAX_VALUE,1.1f,10.1,"str1",null);
  dfltData.put(key2,val1);
  assertEquals(val1,dfltData.get(key2));
  key2=new TestKey2(false,(byte)10,(short)11,'a',100,Long.MAX_VALUE,1.1f,10.1,"str1",1.1);
  assertNull(dfltData.get(key2));
  key2=new TestKey2(false,(byte)10,(short)11,'a',100,Long.MAX_VALUE,1.1f,10.1,"str1",UUID.randomUUID());
  val1=new TestValue1(null,null,null,null,null,null,null,null);
  dfltData.put(key2,val1);
  assertEquals(val1,dfltData.get(key2));
  val1=new TestValue1(new boolean[]{},new byte[]{},new short[]{},new char[]{},new int[]{},new long[]{},new float[]{},new double[]{});
  dfltData.put(key2,val1);
  assertEquals(val1,dfltData.get(key2));
  TestPortable p1=new TestPortable(1,null,"a");
  TestPortable p2=new TestPortable(2,new HashMap<String,String>(),"a");
  TestPortable p3=new TestPortable(2,F.asMap("1","11","2","22"),"a");
  Map<Object,Object> map=new HashMap<>();
  map.put(1,p1);
  map.put("2",p2);
  map.put(3L,p3);
  map.put("4",null);
  Collection<Object> col=new ArrayList<>();
  col.add(p1);
  col.add(1);
  col.add(p2);
  col.add(null);
  col.add(p3);
  TestValue2 val2=new TestValue2(new boolean[]{true,false},null,new short[]{3,-4,5,Short.MAX_VALUE},new char[]{'a','b','c'},new int[]{Integer.MAX_VALUE,-1},new long[]{Long.MAX_VALUE,-1,1},new float[]{1.1f,-1.1f},new double[]{1.1f,-1.1f},map,col);
  dfltData.put(key2,val2);
  assertEquals(val2,dfltData.get(key2));
  val2=new TestValue2(new boolean[]{true,false},null,new short[]{3,-4,5,Short.MAX_VALUE},new char[]{'a','b','c'},new int[]{Integer.MAX_VALUE,-1},new long[]{Long.MAX_VALUE,-1,1},new float[]{1.1f,-1.1f},new double[]{1.1f,-1.1f},null,null);
  dfltData.put(key2,val2);
  assertEquals(val2,dfltData.get(key2));
}
