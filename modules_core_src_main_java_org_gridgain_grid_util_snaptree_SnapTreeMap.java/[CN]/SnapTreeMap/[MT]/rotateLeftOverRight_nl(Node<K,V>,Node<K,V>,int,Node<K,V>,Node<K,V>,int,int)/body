{
  final long nodeOVL=n.shrinkOVL;
  final long rightOVL=nR.shrinkOVL;
  final Node<K,V> nPL=nParent.left;
  final Node<K,V> nRLL=nRL.unsharedLeft();
  final Node<K,V> nRLR=nRL.unsharedRight();
  final int hRLL=height(nRLL);
  n.shrinkOVL=beginChange(nodeOVL);
  nR.shrinkOVL=beginChange(rightOVL);
  n.right=nRLL;
  if (nRLL != null) {
    nRLL.parent=n;
  }
  nR.left=nRLR;
  if (nRLR != null) {
    nRLR.parent=nR;
  }
  nRL.right=nR;
  nR.parent=nRL;
  nRL.left=n;
  n.parent=nRL;
  if (nPL == n) {
    nParent.left=nRL;
  }
 else {
    nParent.right=nRL;
  }
  nRL.parent=nParent;
  final int hNRepl=1 + Math.max(hL,hRLL);
  n.height=hNRepl;
  final int hRRepl=1 + Math.max(hRLR,hRR);
  nR.height=hRRepl;
  nRL.height=1 + Math.max(hNRepl,hRRepl);
  n.shrinkOVL=endChange(nodeOVL);
  nR.shrinkOVL=endChange(rightOVL);
  assert(Math.abs(hRR - hRLR) <= 1);
  final int balN=hRLL - hL;
  if (balN < -1 || balN > 1) {
    return n;
  }
  if ((nRLL == null || hL == 0) && n.vOpt == null) {
    return n;
  }
  final int balRL=hRRepl - hNRepl;
  if (balRL < -1 || balRL > 1) {
    return nRL;
  }
  return fixHeight_nl(nParent);
}
