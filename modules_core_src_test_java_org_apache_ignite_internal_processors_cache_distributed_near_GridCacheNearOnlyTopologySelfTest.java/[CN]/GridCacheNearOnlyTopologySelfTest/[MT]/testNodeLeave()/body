{
  try {
    cache=true;
    for (int i=0; i < 2; i++) {
      cilent=i == 0;
      Ignite ignite=startGrid(i);
      if (cilent)       ignite.createNearCache(null,new NearCacheConfiguration());
    }
    for (int i=0; i < 10; i++)     grid(1).cache(null).put(i,i);
    final Ignite igniteNearOnly=grid(0);
    final IgniteCache<Object,Object> nearOnly=igniteNearOnly.cache(null);
    for (int i=0; i < 10; i++) {
      assertEquals(i,nearOnly.get(i));
      assertEquals(i,nearOnly.localPeek(i,CachePeekMode.ONHEAP));
    }
    stopGrid(1);
    for (int i=0; i < 10; i++) {
      assertNull(nearOnly.localPeek(i,CachePeekMode.ONHEAP));
      final int key=i;
      GridTestUtils.assertThrowsWithCause(new Callable<Object>(){
        @Override public Object call() throws Exception {
          return nearOnly.get(key);
        }
      }
,ClusterTopologyCheckedException.class);
    }
    GridTestUtils.assertThrows(log,new Callable<Object>(){
      @Override public Object call() throws Exception {
        try (Transaction tx=igniteNearOnly.transactions().txStart(OPTIMISTIC,REPEATABLE_READ)){
          nearOnly.put("key","val");
          tx.commit();
        }
         return null;
      }
    }
,ClusterTopologyException.class,null);
    GridTestUtils.assertThrowsWithCause(new Callable<Object>(){
      @Override public Object call() throws Exception {
        try (Transaction tx=igniteNearOnly.transactions().txStart(PESSIMISTIC,REPEATABLE_READ)){
          nearOnly.put("key","val");
          tx.commit();
        }
         return null;
      }
    }
,ClusterTopologyCheckedException.class);
  }
  finally {
    stopAllGrids();
  }
}
