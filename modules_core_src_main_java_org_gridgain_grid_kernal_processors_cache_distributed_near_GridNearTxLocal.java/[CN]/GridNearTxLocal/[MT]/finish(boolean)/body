{
  if (log.isDebugEnabled())   log.debug("Finishing near local tx [tx=" + this + ", commit="+ commit+ "]");
  if (commit) {
    if (!state(COMMITTING)) {
      GridCacheTxState state=state();
      if (state != COMMITTING && state != COMMITTED)       throw new IgniteCheckedException("Invalid transaction state for commit [state=" + state() + ", tx="+ this+ ']');
 else {
        if (log.isDebugEnabled())         log.debug("Invalid transaction state for commit (another thread is committing): " + this);
        return false;
      }
    }
  }
 else {
    if (!state(ROLLING_BACK)) {
      if (log.isDebugEnabled())       log.debug("Invalid transaction state for rollback [state=" + state() + ", tx="+ this+ ']');
      return false;
    }
  }
  IgniteCheckedException err=null;
  try {
    if (commit && !isRollbackOnly())     userCommit();
 else     userRollback();
  }
 catch (  IgniteCheckedException e) {
    err=e;
    commit=false;
    if (!isRollbackOnly()) {
      invalidate=true;
      systemInvalidate(true);
      U.warn(log,"Set transaction invalidation flag to true due to error [tx=" + this + ", err="+ err+ ']');
    }
  }
  if (err != null) {
    state(UNKNOWN);
    throw err;
  }
 else {
    if (commit) {
      if (!onePhaseCommit()) {
        if (!state(COMMITTED)) {
          state(UNKNOWN);
          throw new IgniteCheckedException("Invalid transaction state for commit: " + this);
        }
      }
    }
 else {
      if (!state(ROLLED_BACK)) {
        state(UNKNOWN);
        throw new IgniteCheckedException("Invalid transaction state for rollback: " + this);
      }
    }
  }
  return true;
}
