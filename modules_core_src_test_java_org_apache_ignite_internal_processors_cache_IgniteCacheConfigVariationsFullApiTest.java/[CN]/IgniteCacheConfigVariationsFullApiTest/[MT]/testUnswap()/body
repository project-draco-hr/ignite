{
  if (swapEnabled() && !offheapEnabled()) {
    IgniteCache<String,Integer> cache=jcache();
    List<String> keys=primaryKeysForCache(3);
    String k1=keys.get(0);
    String k2=keys.get(1);
    String k3=keys.get(2);
    cache.getAndPut(k1,1);
    cache.getAndPut(k2,2);
    cache.getAndPut(k3,3);
    final AtomicInteger swapEvts=new AtomicInteger(0);
    final AtomicInteger unswapEvts=new AtomicInteger(0);
    Collection<String> locKeys=new HashSet<>();
    if (grid(0).context().cache().cache(cacheName()).context().affinityNode()) {
      Iterable<Cache.Entry<String,Integer>> entries=cache.localEntries(PRIMARY,BACKUP);
      for (      Cache.Entry<String,Integer> entry : entries)       locKeys.add(entry.getKey());
      info("Local keys (primary + backup): " + locKeys);
    }
    for (int i=0; i < gridCount(); i++)     grid(i).events().localListen(new SwapEvtsLocalListener(swapEvts,unswapEvts),EVT_CACHE_OBJECT_SWAPPED,EVT_CACHE_OBJECT_UNSWAPPED);
    cache.localEvict(F.asList(k2,k3));
    if (memoryMode() == OFFHEAP_TIERED) {
      assertNotNull(cache.localPeek(k1,ONHEAP,OFFHEAP));
      assertNotNull(cache.localPeek(k2,ONHEAP,OFFHEAP));
      assertNotNull(cache.localPeek(k3,ONHEAP,OFFHEAP));
    }
 else {
      assertNotNull(cache.localPeek(k1,ONHEAP,OFFHEAP));
      assertNull(cache.localPeek(k2,ONHEAP,OFFHEAP));
      assertNull(cache.localPeek(k3,ONHEAP,OFFHEAP));
    }
    int cnt=0;
    if (locKeys.contains(k2) && swapEnabled()) {
      assertNull(cache.localPeek(k2,ONHEAP));
      cache.localPromote(Collections.singleton(k2));
      assertEquals((Integer)2,cache.localPeek(k2,ONHEAP));
      if (swapAfterLocalEvict())       cnt++;
    }
 else {
      cache.localPromote(Collections.singleton(k2));
      assertNull(cache.localPeek(k2,ONHEAP));
    }
    if (locKeys.contains(k3) && swapEnabled()) {
      assertNull(cache.localPeek(k3,ONHEAP));
      cache.localPromote(Collections.singleton(k3));
      assertEquals((Integer)3,cache.localPeek(k3,ONHEAP));
      if (swapAfterLocalEvict())       cnt++;
    }
 else {
      cache.localPromote(Collections.singleton(k3));
      assertNull(cache.localPeek(k3,ONHEAP));
    }
    assertEquals(cnt,swapEvts.get());
    assertEquals(cnt,unswapEvts.get());
    cache.localEvict(Collections.singleton(k1));
    assertEquals((Integer)1,cache.get(k1));
    if (locKeys.contains(k1) && swapAfterLocalEvict())     cnt++;
    assertEquals(cnt,swapEvts.get());
    assertEquals(cnt,unswapEvts.get());
    cache.clear();
    cache.getAndPut(k1,1);
    cache.getAndPut(k2,2);
    cache.getAndPut(k3,3);
    swapEvts.set(0);
    unswapEvts.set(0);
    cache.localEvict(Collections.singleton(k2));
    cache.localEvict(Collections.singleton(k3));
    if (memoryMode() == OFFHEAP_TIERED) {
      assertNotNull(cache.localPeek(k1,ONHEAP,OFFHEAP));
      assertNotNull(cache.localPeek(k2,ONHEAP,OFFHEAP));
      assertNotNull(cache.localPeek(k3,ONHEAP,OFFHEAP));
    }
 else {
      assertNotNull(cache.localPeek(k1,ONHEAP,OFFHEAP));
      assertNull(cache.localPeek(k2,ONHEAP,OFFHEAP));
      assertNull(cache.localPeek(k3,ONHEAP,OFFHEAP));
    }
    cache.localPromote(F.asSet(k2,k3));
    cnt=0;
    if (locKeys.contains(k2) && swapAfterLocalEvict())     cnt++;
    if (locKeys.contains(k3) && swapAfterLocalEvict())     cnt++;
    assertEquals(cnt,swapEvts.get());
    assertEquals(cnt,unswapEvts.get());
  }
}
