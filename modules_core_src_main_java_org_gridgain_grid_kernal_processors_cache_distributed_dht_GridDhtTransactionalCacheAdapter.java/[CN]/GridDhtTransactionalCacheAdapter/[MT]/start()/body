{
  super.start();
  preldr=new GridDhtPreloader<>(ctx);
  preldr.start();
  ctx.io().addHandler(ctx.cacheId(),GridNearGetRequest.class,new CI2<UUID,GridNearGetRequest<K,V>>(){
    @Override public void apply(    UUID nodeId,    GridNearGetRequest<K,V> req){
      processNearGetRequest(nodeId,req);
    }
  }
);
  ctx.io().addHandler(ctx.cacheId(),GridDhtTxPrepareResponse.class,new CI2<UUID,GridDhtTxPrepareResponse<K,V>>(){
    @Override public void apply(    UUID nodeId,    GridDhtTxPrepareResponse<K,V> res){
      processDhtTxPrepareResponse(nodeId,res);
    }
  }
);
  ctx.io().addHandler(ctx.cacheId(),GridDhtTxFinishResponse.class,new CI2<UUID,GridDhtTxFinishResponse<K,V>>(){
    @Override public void apply(    UUID nodeId,    GridDhtTxFinishResponse<K,V> req){
      processDhtTxFinishResponse(nodeId,req);
    }
  }
);
  ctx.io().addHandler(ctx.cacheId(),GridNearLockRequest.class,new CI2<UUID,GridNearLockRequest<K,V>>(){
    @Override public void apply(    UUID nodeId,    GridNearLockRequest<K,V> req){
      processNearLockRequest(nodeId,req);
    }
  }
);
  ctx.io().addHandler(ctx.cacheId(),GridDhtLockRequest.class,new CI2<UUID,GridDhtLockRequest<K,V>>(){
    @Override public void apply(    UUID nodeId,    GridDhtLockRequest<K,V> req){
      processDhtLockRequest(nodeId,req);
    }
  }
);
  ctx.io().addHandler(ctx.cacheId(),GridDhtLockResponse.class,new CI2<UUID,GridDhtLockResponse<K,V>>(){
    @Override public void apply(    UUID nodeId,    GridDhtLockResponse<K,V> req){
      processDhtLockResponse(nodeId,req);
    }
  }
);
  ctx.io().addHandler(ctx.cacheId(),GridNearUnlockRequest.class,new CI2<UUID,GridNearUnlockRequest<K,V>>(){
    @Override public void apply(    UUID nodeId,    GridNearUnlockRequest<K,V> req){
      processNearUnlockRequest(nodeId,req);
    }
  }
);
  ctx.io().addHandler(ctx.cacheId(),GridDhtUnlockRequest.class,new CI2<UUID,GridDhtUnlockRequest<K,V>>(){
    @Override public void apply(    UUID nodeId,    GridDhtUnlockRequest<K,V> req){
      processDhtUnlockRequest(nodeId,req);
    }
  }
);
}
