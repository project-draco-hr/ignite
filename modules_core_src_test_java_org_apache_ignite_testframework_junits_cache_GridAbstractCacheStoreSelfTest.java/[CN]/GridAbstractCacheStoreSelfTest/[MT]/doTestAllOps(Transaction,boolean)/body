{
  try {
    ses.newSession(tx);
    store.write(new CacheEntryImpl<>("key1","val1"));
    if (tx != null && commit) {
      store.sessionEnd(true);
      tx=new DummyTx();
      ses.newSession(tx);
    }
    if (tx == null || commit)     assertEquals("val1",store.load("key1"));
    Collection<Cache.Entry<? extends Object,? extends Object>> col=new ArrayList<>();
    col.add(new CacheEntryImpl<>("key2","val2"));
    col.add(new CacheEntryImpl<>("key3","val3"));
    store.writeAll(col);
    if (tx != null && commit) {
      store.sessionEnd(true);
      tx=new DummyTx();
    }
    if (tx == null || commit) {
      Map<Object,Object> loaded=store.loadAll(Arrays.asList("key1","key2","key3","no_such_key"));
      for (      Map.Entry<Object,Object> e : loaded.entrySet()) {
        Object key=e.getKey();
        Object val=e.getValue();
        if ("key1".equals(key))         assertEquals("val1",val);
        if ("key2".equals(key))         assertEquals("val2",val);
        if ("key3".equals(key))         assertEquals("val3",val);
        if ("no_such_key".equals(key))         fail();
      }
      assertEquals(3,loaded.size());
    }
    store.deleteAll(Arrays.asList("key2","key3"));
    if (tx != null && commit) {
      store.sessionEnd(true);
      tx=new DummyTx();
      ses.newSession(tx);
    }
    if (tx == null || commit) {
      assertNull(store.load("key2"));
      assertNull(store.load("key3"));
      assertEquals("val1",store.load("key1"));
    }
    store.delete("key1");
    if (tx != null && commit) {
      store.sessionEnd(true);
      tx=new DummyTx();
      ses.newSession(tx);
    }
    if (tx == null || commit)     assertNull(store.load("key1"));
  }
  finally {
    if (tx != null) {
      store.sessionEnd(false);
      ses.newSession(null);
    }
  }
}
