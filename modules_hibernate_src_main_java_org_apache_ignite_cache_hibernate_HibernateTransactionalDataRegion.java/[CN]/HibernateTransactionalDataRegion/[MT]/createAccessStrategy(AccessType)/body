{
switch (accessType) {
case READ_ONLY:
    return new HibernateReadOnlyAccessStrategy(ignite,cache);
case NONSTRICT_READ_WRITE:
  return new HibernateNonStrictAccessStrategy(ignite,cache,factory.threadLocalForCache(cache.name()));
case READ_WRITE:
if (cache.configuration().getAtomicityMode() != TRANSACTIONAL) throw new CacheException("Hibernate READ-WRITE access strategy must have Ignite cache with " + "'TRANSACTIONAL' atomicity mode: " + cache.name());
return new HibernateReadWriteAccessStrategy(ignite,cache,factory.threadLocalForCache(cache.name()));
case TRANSACTIONAL:
if (cache.configuration().getAtomicityMode() != TRANSACTIONAL) throw new CacheException("Hibernate TRANSACTIONAL access strategy must have Ignite cache with " + "'TRANSACTIONAL' atomicity mode: " + cache.name());
if (cache.configuration().getTransactionManagerLookupClassName() == null) {
TransactionConfiguration txCfg=ignite.configuration().getTransactionConfiguration();
if (txCfg == null || txCfg.getTxManagerLookupClassName() == null) throw new CacheException("Hibernate TRANSACTIONAL access strategy must have Ignite with " + "TransactionManagerLookup configured (see IgniteConfiguration." + "getTransactionConfiguration().getTxManagerLookupClassName()): "+ cache.name());
}
return new HibernateTransactionalAccessStrategy(ignite,cache);
default :
throw new IllegalArgumentException("Unknown Hibernate access type: " + accessType);
}
}
