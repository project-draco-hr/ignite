{
  final GridCache<Integer,String> c=grid().cache(null);
  for (int i=0; i < 100; i++) {
    multithreaded(new Callable<Object>(){
      @SuppressWarnings("UnusedAssignment") @Override public Object call() throws Exception {
        Iterator<String> it1=c.values().iterator();
        Iterator<Cache.Entry<Integer,String>> it2=c.entrySet().iterator();
        Iterator<Integer> it3=c.keySet().iterator();
        for (int i=0; i < 1000; i++) {
          c.put(i,String.valueOf(i));
          if (i == 0) {
            it1.hasNext();
            it2.hasNext();
            it3.hasNext();
          }
        }
        it1=null;
        it2=null;
        it3=null;
        System.gc();
        return null;
      }
    }
,10);
    for (int r=0; r < 10; r++) {
      System.gc();
      c.get(100);
      if (local().map.iteratorMapSize() == 0)       break;
 else       U.sleep(500);
    }
    assertEquals(0,local().map.iteratorMapSize());
  }
}
