{
  if (!valid(-1))   return null;
  boolean rmv=false;
  try {
    while (true) {
      GridCacheVersion ver;
      V val;
synchronized (this) {
        if (checkExpired()) {
          rmv=markObsolete(cctx.versions().next(this.ver));
          return null;
        }
        checkObsolete();
        ver=this.ver;
        val=rawGetOrUnmarshalUnlocked();
      }
      if (!cctx.isAll(wrap(false),filter))       return F.t(CU.<V>failed(failFast));
      if (F.isEmptyOrNulls(filter) || ver.equals(version()))       return F.t(val);
    }
  }
  finally {
    if (rmv)     cctx.cache().map().removeEntry(this);
  }
}
