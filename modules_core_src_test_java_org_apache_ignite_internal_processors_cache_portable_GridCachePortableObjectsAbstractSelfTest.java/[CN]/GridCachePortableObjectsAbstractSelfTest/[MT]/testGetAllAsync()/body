{
  IgniteCache<Integer,TestObject> c=jcache(0);
  IgniteCache<Integer,TestObject> cacheAsync=c.withAsync();
  for (int i=0; i < ENTRY_CNT; i++)   c.put(i,new TestObject(i));
  for (int i=0; i < ENTRY_CNT; ) {
    Set<Integer> keys=new HashSet<>();
    for (int j=0; j < 10; j++)     keys.add(i++);
    cacheAsync.getAll(keys);
    Map<Integer,TestObject> objs=cacheAsync.<Map<Integer,TestObject>>future().get();
    assertEquals(10,objs.size());
    for (    Map.Entry<Integer,TestObject> e : objs.entrySet())     assertEquals(e.getKey().intValue(),e.getValue().val);
  }
  IgniteCache<Integer,PortableObject> kpc=keepPortableCache();
  IgniteCache<Integer,PortableObject> cachePortableAsync=kpc.withAsync();
  for (int i=0; i < ENTRY_CNT; ) {
    Set<Integer> keys=new HashSet<>();
    for (int j=0; j < 10; j++)     keys.add(i++);
    cachePortableAsync.getAll(keys);
    Map<Integer,PortableObject> objs=cachePortableAsync.<Map<Integer,PortableObject>>future().get();
    assertEquals(10,objs.size());
    for (    Map.Entry<Integer,PortableObject> e : objs.entrySet())     assertEquals(new Integer(e.getKey().intValue()),e.getValue().field("val"));
  }
}
