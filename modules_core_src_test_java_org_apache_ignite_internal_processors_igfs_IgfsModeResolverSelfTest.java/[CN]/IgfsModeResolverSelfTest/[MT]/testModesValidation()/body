{
  try {
    IgfsUtils.preparePathModes(DUAL_SYNC,Arrays.asList(new T2<>(new IgfsPath("/a/"),PRIMARY),new T2<>(new IgfsPath("/a/b/"),DUAL_ASYNC)),new HashSet<IgfsPath>());
    fail("IgniteCheckedException expected");
  }
 catch (  IgniteCheckedException ice) {
  }
  for (  IgfsMode m : IgfsMode.values()) {
    if (m != IgfsMode.PRIMARY) {
      try {
        IgfsUtils.preparePathModes(PRIMARY,Arrays.asList(new T2<>(new IgfsPath("/a/"),DUAL_ASYNC)),new HashSet<IgfsPath>());
        fail("IgniteCheckedException expected");
      }
 catch (      IgniteCheckedException ice) {
      }
    }
  }
  List<T2<IgfsPath,IgfsMode>> modes=IgfsUtils.preparePathModes(DUAL_SYNC,Arrays.asList(new T2<>(new IgfsPath("/a"),PRIMARY),new T2<>(new IgfsPath("/c/d/"),PRIMARY),new T2<>(new IgfsPath("/c/d/e/f"),PRIMARY)),new HashSet<IgfsPath>());
  assertNotNull(modes);
  assertEquals(2,modes.size());
  assertEquals(modes,Arrays.asList(new T2<>(new IgfsPath("/c/d/"),PRIMARY),new T2<>(new IgfsPath("/a"),PRIMARY)));
  modes=IgfsUtils.preparePathModes(DUAL_SYNC,Arrays.asList(new T2<>(new IgfsPath("/a/b"),DUAL_ASYNC),new T2<>(new IgfsPath("/a/b/c"),DUAL_SYNC),new T2<>(new IgfsPath("/a/b/c/d"),DUAL_ASYNC)),new HashSet<IgfsPath>());
  assertNotNull(modes);
  assertEquals(modes.size(),3);
  assertEquals(modes,Arrays.asList(new T2<>(new IgfsPath("/a/b/c/d"),DUAL_ASYNC),new T2<>(new IgfsPath("/a/b/c"),DUAL_SYNC),new T2<>(new IgfsPath("/a/b"),DUAL_ASYNC)));
}
