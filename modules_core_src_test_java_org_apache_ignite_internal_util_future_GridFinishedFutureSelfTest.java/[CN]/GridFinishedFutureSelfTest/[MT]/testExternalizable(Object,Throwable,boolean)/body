{
  GridKernalContext ctx=((IgniteKernal)grid()).context();
  Marshaller m=new OptimizedMarshaller();
  ClassLoader clsLdr=getClass().getClassLoader();
  IgniteInternalFuture<Object> orig=t == null ? new GridFinishedFuture<>(ctx,ex) : new GridFinishedFuture<>(ctx,t);
  orig.syncNotify(syncNotify);
  GridFinishedFuture<Object> fut=m.unmarshal(m.marshal(orig),clsLdr);
  assertEquals(t,GridTestUtils.getFieldValue(fut,"t"));
  if (ex == null)   assertNull(GridTestUtils.<Throwable>getFieldValue(fut,"err"));
 else {
    assertEquals(ex.getClass(),GridTestUtils.<Throwable>getFieldValue(fut,"err").getClass());
    assertEquals(ex.getMessage(),GridTestUtils.<Throwable>getFieldValue(fut,"err").getMessage());
  }
  assertEquals(syncNotify,GridTestUtils.<Boolean>getFieldValue(fut,"syncNotify").booleanValue());
  assertEquals(ctx.gridName(),GridTestUtils.<GridKernalContext>getFieldValue(fut,"ctx").gridName());
  final CountDownLatch done=new CountDownLatch(1);
  fut.listenAsync(new CI1<IgniteInternalFuture<Object>>(){
    @Override public void apply(    IgniteInternalFuture<Object> t){
      done.countDown();
    }
  }
);
  if (syncNotify)   assertEquals("Expect notification is already complete.",0,done.getCount());
 else   assertTrue("Wait until notification completes asynchronously.",done.await(100,MILLISECONDS));
}
