{
  final int KEYS=10;
  for (int i=0; i < KEYS; i++)   cache(0).put(String.valueOf(i),i);
  for (int g=0; g < gridCount(); g++) {
    for (int i=0; i < KEYS; i++)     assertNotNull(cache(g).peek(String.valueOf(i)));
  }
  Collection<IgniteFuture<IgniteEvent>> futs=new ArrayList<>();
  for (int g=0; g < gridCount(); g++)   futs.add(waitForLocalEvent(grid(g).events(),nodeEvent(grid(g).localNode().id()),EVT_CACHE_ENTRY_EVICTED));
  for (int i=0; i < KEYS; i++)   assertTrue(cache(0).evict(String.valueOf(i)));
  for (  IgniteFuture<IgniteEvent> fut : futs)   fut.get(3000);
  boolean evicted=GridTestUtils.waitForCondition(new PA(){
    @Override public boolean apply(){
      for (int g=0; g < gridCount(); g++) {
        for (int i=0; i < KEYS; i++) {
          if (cache(g).peek(String.valueOf(i)) != null) {
            log.info("Non-null value, will wait [grid=" + g + ", key="+ i+ ']');
            return false;
          }
        }
      }
      return true;
    }
  }
,3000);
  assertTrue(evicted);
}
