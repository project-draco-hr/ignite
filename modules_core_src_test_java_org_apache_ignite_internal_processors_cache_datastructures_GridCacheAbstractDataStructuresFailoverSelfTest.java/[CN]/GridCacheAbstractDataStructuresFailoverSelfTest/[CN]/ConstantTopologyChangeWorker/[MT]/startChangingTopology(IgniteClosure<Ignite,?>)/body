{
  final AtomicInteger nodeIdx=new AtomicInteger(G.allGrids().size());
  return GridTestUtils.runMultiThreadedAsync(new CA(){
    @Override public void apply(){
      try {
        for (int i=0; i < TOP_CHANGE_CNT; i++) {
          if (failed.get())           return;
          int idx=nodeIdx.getAndIncrement();
          Thread.currentThread().setName("thread-" + getTestGridName(idx));
          try {
            log.info("Start node: " + getTestGridName(idx));
            Ignite g=startGrid(idx);
            cb.apply(g);
          }
  finally {
            stopGrid(idx);
          }
        }
      }
 catch (      Exception e) {
        if (failed.compareAndSet(false,true))         throw F.wrap(e);
      }
    }
  }
,topChangeThreads,"topology-change-thread");
}
