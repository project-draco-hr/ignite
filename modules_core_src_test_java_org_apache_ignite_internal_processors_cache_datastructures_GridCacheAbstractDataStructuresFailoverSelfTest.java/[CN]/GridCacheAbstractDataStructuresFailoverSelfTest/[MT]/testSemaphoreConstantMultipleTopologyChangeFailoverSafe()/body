{
  fail("https://issues.apache.org/jira/browse/IGNITE-1977");
  final int numPermits=3;
  try (IgniteSemaphore s=grid(0).semaphore(STRUCTURE_NAME,numPermits,true,true)){
    try {
      IgniteInternalFuture<?> fut=GridTestUtils.runMultiThreadedAsync(new CA(){
        @Override public void apply(){
          try {
            for (int i=0; i < TOP_CHANGE_CNT; i++) {
              Collection<String> names=new GridLeanSet<>(3);
              try {
                for (int j=0; j < numPermits; j++) {
                  String name=UUID.randomUUID().toString();
                  names.add(name);
                  log.info("Start node: " + name);
                  Ignite g=startGrid(name);
                  final IgniteSemaphore sem=g.semaphore(STRUCTURE_NAME,TOP_CHANGE_CNT,true,true);
                  assertNotNull(sem);
                  sem.acquire();
                  if (i == TOP_CHANGE_CNT - 1)                   sem.release();
                }
              }
  finally {
                if (i != TOP_CHANGE_CNT - 1)                 for (                String name : names) {
                  stopGrid(name);
                  awaitPartitionMapExchange();
                }
              }
            }
          }
 catch (          Exception e) {
            throw F.wrap(e);
          }
        }
      }
,TOP_CHANGE_THREAD_CNT,"topology-change-thread");
      while (!fut.isDone()) {
        s.release();
        s.acquire();
      }
      fut.get();
      int val=s.availablePermits();
      assertEquals(val,numPermits);
      for (      Ignite g : G.allGrids())       assertEquals(val,g.semaphore(STRUCTURE_NAME,0,true,true).availablePermits());
    }
  finally {
      grid(0).semaphore(STRUCTURE_NAME,0,true,true).close();
    }
  }
 }
