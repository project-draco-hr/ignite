{
  List<String> keys=new ArrayList<>(5);
  info("Generating keys for test...");
  IgniteCache<String,Integer> cache0=jcache(0);
  for (int i=0; i < 5; i++) {
    while (true) {
      String key=UUID.randomUUID().toString();
      if (ignite(0).affinity(null).isPrimary(grid(0).localNode(),key) && ignite(0).affinity(null).isBackup(grid(1).localNode(),key)) {
        keys.add(key);
        cache0.put(key,i);
        break;
      }
    }
  }
  info("Finished generating keys for test.");
  IgniteCache<String,Integer> cache2=jcache(2);
  assertEquals(Integer.valueOf(0),cache2.get(keys.get(0)));
  assertEquals(Integer.valueOf(1),cache2.get(keys.get(1)));
  assertEquals(0,cache0.localSize(NEAR));
  assertEquals(5,cache0.localSize(CachePeekMode.ALL) - cache0.localSize(NEAR));
  IgniteCache<String,Integer> cache1=jcache(1);
  assertEquals(0,cache1.localSize(NEAR));
  assertEquals(5,cache1.localSize(CachePeekMode.ALL) - cache1.localSize(NEAR));
  assertEquals(nearEnabled() ? 2 : 0,cache2.localSize(NEAR));
  assertEquals(0,cache2.localSize(CachePeekMode.ALL) - cache2.localSize(NEAR));
}
