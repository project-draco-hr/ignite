{
  System.gc();
  final AtomicInteger idx=new AtomicInteger();
  final CountDownLatch latch1=new CountDownLatch(1);
  IgniteFuture<?> fut1=GridTestUtils.runMultiThreadedAsync(new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      latch1.await();
      int i;
      do {
        i=idx.getAndIncrement();
        q.add(i);
      }
 while (i < 20000000);
      return null;
    }
  }
,10,"test-thread");
  long start=System.currentTimeMillis();
  latch1.countDown();
  fut1.get();
  long time=System.currentTimeMillis() - start;
  X.println("    Multithreaded add time: " + time);
  final CountDownLatch latch2=new CountDownLatch(1);
  IgniteFuture<?> fut2=GridTestUtils.runMultiThreadedAsync(new Callable<Object>(){
    @SuppressWarnings("StatementWithEmptyBody") @Nullable @Override public Object call() throws Exception {
      latch2.await();
      while (q.poll() != null) {
      }
      return null;
    }
  }
,10,"test-thread");
  start=System.currentTimeMillis();
  latch2.countDown();
  fut2.get();
  time=System.currentTimeMillis() - start;
  X.println("    Multithreaded poll time: " + time);
}
