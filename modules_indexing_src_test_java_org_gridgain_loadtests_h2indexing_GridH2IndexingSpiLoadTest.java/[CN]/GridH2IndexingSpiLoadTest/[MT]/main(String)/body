{
  final Properties p=loadProperties();
  final int MAX_SIZE=getInt(p,"max-entries-count",500000);
  final int MAX_NAMES=getInt(p,"max-names-count",100);
  IgniteConfiguration c=new IgniteConfiguration();
  GridTcpDiscoverySpi discoSpi=new GridTcpDiscoverySpi();
  discoSpi.setIpFinder(new GridTcpDiscoveryVmIpFinder(true));
  c.setDiscoverySpi(discoSpi);
  IgniteOptimizedMarshaller m=new IgniteOptimizedMarshaller();
  m.setClassNames(F.asList(GridTestEntity.class.getName()));
  c.setMarshaller(m);
  GridH2IndexingSpi indexing=new GridH2IndexingSpi();
  long offheap=getLong(p,"offheap-size",3000000000L);
  if (1 == getInt(p,"offheap-enabled",1))   indexing.setMaxOffHeapMemory(offheap);
  boolean enableIndexing=1 == getInt(p,"indexing-enabled",1);
  if (enableIndexing)   c.setIndexingSpi(indexing);
  GridCacheConfiguration cc=new GridCacheConfiguration();
  cc.setName("local");
  cc.setCacheMode(GridCacheMode.LOCAL);
  cc.setStartSize(MAX_SIZE);
  cc.setWriteSynchronizationMode(FULL_SYNC);
  cc.setQueryIndexEnabled(enableIndexing);
  cc.setDistributionMode(PARTITIONED_ONLY);
  cc.setStoreValueBytes(false);
  cc.setSwapEnabled(false);
  cc.setOffHeapMaxMemory(0);
  c.setCacheConfiguration(cc);
  c.setIncludeEventTypes(EVT_TASK_FAILED,EVT_TASK_FINISHED,EVT_JOB_MAPPED);
  final Ignite g=G.start(c);
  final GridCache<Long,GridTestEntity> cache=g.cache("local");
  Random rnd=new Random();
  for (int i=0; i < MAX_SIZE; i++) {
    if (rnd.nextBoolean())     cache.put((long)i,new GridTestEntity(Integer.toHexString(rnd.nextInt(MAX_NAMES)),new Date()));
    if (i % 10000 == 0)     System.out.println(i);
  }
  List<Runner> rs=F.asList(new Runner("put",1000,getInt(p,"put-threads",8)){
    @Override protected void doRun(    Random rnd) throws Exception {
      cache.put((long)rnd.nextInt(MAX_SIZE),new GridTestEntity(Integer.toHexString(rnd.nextInt(MAX_NAMES)),null));
    }
  }
.start(),new Runner("remove",1000,getInt(p,"remove-threads",2)){
    @Override protected void doRun(    Random rnd) throws Exception {
      cache.remove((long)rnd.nextInt(MAX_SIZE));
    }
  }
.start(),new Runner("query",10,getInt(p,"query-threads",8)){
    @Override protected void doRun(    Random rnd) throws Exception {
      GridCacheQuery<Map.Entry<Long,GridTestEntity>> qry=cache.queries().createSqlQuery(GridTestEntity.class,"name = ?");
      qry.execute(Integer.toHexString(rnd.nextInt(MAX_NAMES))).get();
    }
  }
.start());
  for (; ; ) {
    U.sleep(getInt(p,"print-period",3000));
    for (    Runner r : rs)     r.print();
    long bytes=indexing.getAllocatedOffHeapMemory();
    System.out.println("offheap bytes: " + bytes);
    System.out.println();
  }
}
