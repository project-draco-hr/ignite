{
  Class<? extends Annotation>[] filtered=ioc.filter(dep,job,jobInjections);
  if (filtered.length > 0) {
    for (    Class<? extends Annotation> annCls : filtered) {
      if (annCls == GridTaskSessionResource.class)       injectBasicResource(job,GridTaskSessionResource.class,ses,dep,taskCls);
 else       if (annCls == GridJobContextResource.class)       ioc.inject(job,GridJobContextResource.class,new GridResourceJobContextInjector(jobCtx),dep,taskCls);
 else       if (annCls == GridInstanceResource.class)       ioc.inject(job,GridInstanceResource.class,gridInjector,dep,taskCls);
 else       if (annCls == GridExecutorServiceResource.class)       ioc.inject(job,GridExecutorServiceResource.class,execInjector,dep,taskCls);
 else       if (annCls == GridLocalNodeIdResource.class)       ioc.inject(job,GridLocalNodeIdResource.class,nodeIdInjector,dep,taskCls);
 else       if (annCls == GridLocalHostResource.class)       ioc.inject(job,GridLocalHostResource.class,locHostInjector,dep,taskCls);
 else       if (annCls == GridMBeanServerResource.class)       ioc.inject(job,GridMBeanServerResource.class,mbeanSrvInjector,dep,taskCls);
 else       if (annCls == GridHomeResource.class)       ioc.inject(job,GridHomeResource.class,ggHomeInjector,dep,taskCls);
 else       if (annCls == GridNameResource.class)       ioc.inject(job,GridNameResource.class,ggNameInjector,dep,taskCls);
 else       if (annCls == GridMarshallerResource.class)       ioc.inject(job,GridMarshallerResource.class,marshInjector,dep,taskCls);
 else       if (annCls == GridLoggerResource.class)       ioc.inject(job,GridLoggerResource.class,logInjector,dep,taskCls);
 else       if (annCls == GridUserResource.class)       ioc.inject(job,GridUserResource.class,customInjector,dep,taskCls);
 else {
        for (        GridBiTuple<Class<? extends Annotation>,GridResourceInjector> t : rsrcCtx.injectors()) {
          if (t.get1() == annCls)           ioc.inject(job,t.get1(),t.get2(),dep,taskCls);
        }
      }
    }
  }
}
