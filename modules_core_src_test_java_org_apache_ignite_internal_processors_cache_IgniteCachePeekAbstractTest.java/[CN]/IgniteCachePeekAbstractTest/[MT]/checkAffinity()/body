{
  IgniteCache<Integer,String> cache0=jcache(0);
  Integer key=nearKey(cache0);
  final String val="1";
  cache0.put(key,val);
  assertEquals(val,cache(0).peek(key));
  assertEquals(val,cache0.localPeek(key,NEAR));
  assertEquals(val,cache0.localPeek(key,ALL));
  assertNull(cache0.localPeek(key,PRIMARY));
  assertNull(cache0.localPeek(key,BACKUP));
  CacheAffinity<Integer> aff=ignite(0).affinity(null);
  for (int i=1; i < gridCount(); i++) {
    IgniteCache<Integer,String> cache=jcache(i);
    assertNull(cache.localPeek(key,NEAR));
    if (aff.isPrimary(ignite(i).cluster().localNode(),key)) {
      assertEquals(val,cache.localPeek(key,PRIMARY));
      assertEquals(val,cache.localPeek(key,ALL));
      assertNull(cache.localPeek(key,BACKUP));
      assertNull(cache.localPeek(key,NEAR));
    }
 else     if (aff.isBackup(ignite(i).cluster().localNode(),key)) {
      assertEquals(val,cache.localPeek(key,BACKUP));
      assertEquals(val,cache.localPeek(key,ALL));
      assertNull(cache.localPeek(key,PRIMARY));
      assertNull(cache.localPeek(key,NEAR));
    }
 else {
      assertNull(cache.localPeek(key,ALL));
      assertNull(cache.localPeek(key,PRIMARY));
      assertNull(cache.localPeek(key,BACKUP));
      assertNull(cache.localPeek(key,NEAR));
    }
  }
}
