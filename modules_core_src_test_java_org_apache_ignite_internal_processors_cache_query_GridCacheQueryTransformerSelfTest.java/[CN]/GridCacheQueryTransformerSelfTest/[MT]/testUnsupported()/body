{
  final IgniteCache<Integer,Integer> cache=grid().createCache("test-cache");
  final IgniteClosure<Cache.Entry<Integer,Integer>,Integer> transformer=new IgniteClosure<Cache.Entry<Integer,Integer>,Integer>(){
    @Override public Integer apply(    Cache.Entry<Integer,Integer> e){
      return null;
    }
  }
;
  try {
    GridTestUtils.assertThrows(log,new Callable<Object>(){
      @Override public Object call() throws Exception {
        cache.query(new SqlQuery<Integer,Integer>(Integer.class,"clause"),transformer);
        return null;
      }
    }
,UnsupportedOperationException.class,"Transformers are supported only for SCAN queries.");
    GridTestUtils.assertThrows(log,new Callable<Object>(){
      @Override public Object call() throws Exception {
        cache.query(new SqlFieldsQuery("clause"),new IgniteClosure<List<?>,Object>(){
          @Override public Object apply(          List<?> objects){
            return null;
          }
        }
);
        return null;
      }
    }
,UnsupportedOperationException.class,"Transformers are supported only for SCAN queries.");
    GridTestUtils.assertThrows(log,new Callable<Object>(){
      @Override public Object call() throws Exception {
        cache.query(new TextQuery<Integer,Integer>(Integer.class,"clause"),transformer);
        return null;
      }
    }
,UnsupportedOperationException.class,"Transformers are supported only for SCAN queries.");
    GridTestUtils.assertThrows(log,new Callable<Object>(){
      @Override public Object call() throws Exception {
        cache.query(new SpiQuery<Integer,Integer>(),transformer);
        return null;
      }
    }
,UnsupportedOperationException.class,"Transformers are supported only for SCAN queries.");
    GridTestUtils.assertThrows(log,new Callable<Object>(){
      @Override public Object call() throws Exception {
        cache.query(new ContinuousQuery<Integer,Integer>(),transformer);
        return null;
      }
    }
,UnsupportedOperationException.class,"Transformers are supported only for SCAN queries.");
  }
  finally {
    cache.destroy();
  }
}
