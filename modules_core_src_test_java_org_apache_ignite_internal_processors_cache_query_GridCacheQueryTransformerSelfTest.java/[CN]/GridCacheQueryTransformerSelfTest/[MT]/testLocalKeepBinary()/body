{
  IgniteCache<Integer,Value> cache=grid().createCache("test-cache");
  try {
    for (int i=0; i < 50; i++)     cache.put(i,new Value("str" + i,i * 100));
    Collection<List<Integer>> lists=grid().compute().broadcast(new IgniteCallable<List<Integer>>(){
      @IgniteInstanceResource private Ignite ignite;
      @Override public List<Integer> call() throws Exception {
        IgniteClosure<Cache.Entry<Integer,BinaryObject>,Integer> transformer=new IgniteClosure<Cache.Entry<Integer,BinaryObject>,Integer>(){
          @Override public Integer apply(          Cache.Entry<Integer,BinaryObject> e){
            return e.getValue().field("idx");
          }
        }
;
        return ignite.cache("test-cache").withKeepBinary().query(new ScanQuery<Integer,BinaryObject>().setLocal(true),transformer).getAll();
      }
    }
);
    List<Integer> res=new ArrayList<>(F.flatCollections(lists));
    assertEquals(50,res.size());
    Collections.sort(res);
    for (int i=0; i < 50; i++)     assertEquals(i * 100,res.get(i).intValue());
  }
  finally {
    cache.destroy();
  }
}
