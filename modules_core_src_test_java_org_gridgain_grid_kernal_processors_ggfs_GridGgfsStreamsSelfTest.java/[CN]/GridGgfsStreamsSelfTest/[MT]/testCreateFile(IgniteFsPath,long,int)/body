{
  info("Create file [path=" + path + ", size="+ size+ ", salt="+ salt+ ']');
  final AtomicInteger cnt=new AtomicInteger(0);
  final Collection<IgniteFsPath> cleanUp=new ConcurrentLinkedQueue<>();
  long time=runMultiThreaded(new Callable<Object>(){
    @Override public Object call() throws Exception {
      int id=cnt.incrementAndGet();
      IgniteFsPath f=new IgniteFsPath(path.parent(),"asdf" + (id > 1 ? "-" + id : ""));
      try (GridGgfsOutputStream out=fs.create(f,0,true,null,0,1024,null)){
        assertNotNull(out);
        cleanUp.add(f);
        U.copy(new GridGgfsTestInputStream(size,salt),out);
      }
       return null;
    }
  }
,WRITING_THREADS_CNT,"perform-multi-thread-writing");
  if (time > 0) {
    double rate=size * 1000. / time / 1024 / 1024;
    info(String.format("Write file [path=%s, size=%d kB, rate=%2.1f MB/s]",path,WRITING_THREADS_CNT * size / 1024,WRITING_THREADS_CNT * rate));
  }
  info("Read and validate saved file: " + path);
  final InputStream expIn=new GridGgfsTestInputStream(size,salt);
  final GridGgfsInputStream actIn=fs.open(path,CFG_BLOCK_SIZE * READING_THREADS_CNT * 11 / 10);
  assertEqualStreams(expIn,actIn,size,null);
  final Random rnd=new Random();
  runMultiThreaded(new Callable<Object>(){
    @Override public Object call() throws Exception {
      long skip=Math.abs(rnd.nextLong() % (size + 1));
      long range=Math.min(size - skip,rnd.nextInt(CFG_BLOCK_SIZE * 400));
      assertEqualStreams(new GridGgfsTestInputStream(size,salt),actIn,range,skip);
      return null;
    }
  }
,READING_THREADS_CNT,"validate-multi-thread-reading");
  expIn.close();
  actIn.close();
  info("Get stored file info: " + path);
  IgniteFsFile desc=fs.info(path);
  info("Validate stored file info: " + desc);
  assertNotNull(desc);
  if (log.isDebugEnabled())   log.debug("File descriptor: " + desc);
  Collection<IgniteFsBlockLocation> aff=fs.affinity(path,0,desc.length());
  assertFalse("Affinity: " + aff,desc.length() != 0 && aff.isEmpty());
  int blockSize=desc.blockSize();
  assertEquals("File size",size,desc.length());
  assertEquals("Binary block size",CFG_BLOCK_SIZE,blockSize);
  assertEquals("Type",true,desc.isFile());
  assertEquals("Type",false,desc.isDirectory());
  info("Cleanup files: " + cleanUp);
  for (  IgniteFsPath f : cleanUp) {
    fs.delete(f,true);
    assertNull(fs.info(f));
  }
}
