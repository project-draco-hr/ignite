{
  GridCache<String,Integer> cache=cache(0);
  Map<Integer,Collection<String>> partMap=new HashMap<>();
  for (int i=0; i < 1000; i++) {
    String key=String.valueOf(i);
    int part=cache.affinity().partition(key);
    cache.put(key,i);
    Collection<String> keys=partMap.get(part);
    if (keys == null) {
      keys=new LinkedList<>();
      partMap.put(part,keys);
    }
    keys.add(key);
  }
  Collection<String> deleted=new LinkedList<>();
  for (  Map.Entry<Integer,Collection<String>> entry : partMap.entrySet()) {
    int part=entry.getKey();
    Collection<String> vals=entry.getValue();
    String key=F.first(vals);
    for (int i=0; i < gridCount(); i++) {
      Ignite g=grid(i);
      GridCache<String,Integer> nodeCache=g.cache(null);
      if (offheapTiered(nodeCache))       continue;
      Set<CacheEntry<String,Integer>> partEntrySet=nodeCache.entrySet(part);
      if (nodeCache.affinity().isPrimaryOrBackup(g.cluster().localNode(),key)) {
        assertTrue(partEntrySet.contains(nodeCache.entry(key)));
        deleted.add(key);
        assertTrue(partEntrySet.remove(nodeCache.entry(key)));
        break;
      }
    }
  }
  for (  String delKey : deleted) {
    for (int i=0; i < gridCount(); i++)     assertNull(grid(i).cache(null).get(delKey));
  }
}
