{
  InetAddress locHost;
  try {
    locHost=U.resolveLocalHost(ctx.config().getLocalHost());
  }
 catch (  IOException e) {
    throw new GridException("Failed to resolve local host to bind address: " + ctx.config().getLocalHost(),e);
  }
  System.setProperty(GG_JETTY_HOST,locHost.getHostAddress());
  jettyHnd=new GridJettyRestHandler(hnd,new C1<String,Boolean>(){
    @Override public Boolean apply(    String tok){
      return F.isEmpty(secretKey) || authenticate(tok);
    }
  }
,log);
  String jettyPath=ctx.config().getRestJettyPath();
  final URL cfgUrl;
  if (jettyPath == null) {
    cfgUrl=null;
    if (log.isDebugEnabled())     log.debug("Jetty configuration file is not provided, using defaults.");
  }
 else {
    cfgUrl=U.resolveGridGainUrl(jettyPath);
    if (cfgUrl == null)     throw new GridSpiException("Invalid Jetty configuration file: " + jettyPath);
 else     if (log.isDebugEnabled())     log.debug("Jetty configuration file: " + cfgUrl);
  }
  loadJettyConfiguration(cfgUrl);
  AbstractNetworkConnector connector=getJettyConnector();
  try {
    host=InetAddress.getByName(connector.getHost());
  }
 catch (  UnknownHostException e) {
    throw new GridException("Failed to resolve Jetty host address: " + connector.getHost(),e);
  }
  int initPort=connector.getPort();
  int lastPort=initPort + ctx.config().getRestPortRange() - 1;
  for (port=initPort; port <= lastPort; port++) {
    connector.setPort(port);
    if (startJetty()) {
      if (log.isInfoEnabled())       log.info(startInfo());
      return;
    }
  }
  U.warn(log,"Failed to start Jetty REST server (possibly all ports in range are in use) " + "[firstPort=" + initPort + ", lastPort="+ lastPort+ ']');
}
