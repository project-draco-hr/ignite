{
  if (log.isDebugEnabled())   log.debug("Starting DHT preloader...");
  cctx.io().addHandler(cctx.cacheId(),GridDhtForceKeysRequest.class,new MessageHandler<GridDhtForceKeysRequest>(){
    @Override public void onMessage(    ClusterNode node,    GridDhtForceKeysRequest msg){
      processForceKeysRequest(node,msg);
    }
  }
);
  cctx.io().addHandler(cctx.cacheId(),GridDhtForceKeysResponse.class,new MessageHandler<GridDhtForceKeysResponse>(){
    @Override public void onMessage(    ClusterNode node,    GridDhtForceKeysResponse msg){
      processForceKeyResponse(node,msg);
    }
  }
);
  cctx.io().addHandler(cctx.cacheId(),GridDhtAffinityAssignmentRequest.class,new MessageHandler<GridDhtAffinityAssignmentRequest>(){
    @Override protected void onMessage(    ClusterNode node,    GridDhtAffinityAssignmentRequest msg){
      processAffinityAssignmentRequest(node,msg);
    }
  }
);
  cctx.io().addHandler(cctx.cacheId(),GridDhtAffinityAssignmentResponse.class,new MessageHandler<GridDhtAffinityAssignmentResponse>(){
    @Override protected void onMessage(    ClusterNode node,    GridDhtAffinityAssignmentResponse msg){
      processAffinityAssignmentResponse(node,msg);
    }
  }
);
  supplyPool=new GridDhtPartitionSupplyPool<>(cctx,busyLock);
  demandPool=new GridDhtPartitionDemandPool<>(cctx,busyLock);
  cctx.events().addListener(discoLsnr,EVT_NODE_JOINED,EVT_NODE_LEFT,EVT_NODE_FAILED);
}
