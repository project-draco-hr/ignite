{
  final AffinityTopologyVersion topVer=req.topologyVersion();
  if (log.isDebugEnabled())   log.debug("Processing affinity assignment request [node=" + node + ", req="+ req+ ']');
  cctx.affinity().affinityReadyFuture(req.topologyVersion()).listen(new CI1<IgniteInternalFuture<AffinityTopologyVersion>>(){
    @Override public void apply(    IgniteInternalFuture<AffinityTopologyVersion> fut){
      if (log.isDebugEnabled())       log.debug("Affinity is ready for topology version, will send response [topVer=" + topVer + ", node="+ node+ ']');
      List<List<ClusterNode>> assignment=cctx.affinity().assignments(topVer);
      try {
        cctx.io().send(node,new GridDhtAffinityAssignmentResponse(cctx.cacheId(),topVer,assignment),AFFINITY_POOL);
      }
 catch (      IgniteCheckedException e) {
        U.error(log,"Failed to send affinity assignment response to remote node [node=" + node + ']',e);
      }
    }
  }
);
}
