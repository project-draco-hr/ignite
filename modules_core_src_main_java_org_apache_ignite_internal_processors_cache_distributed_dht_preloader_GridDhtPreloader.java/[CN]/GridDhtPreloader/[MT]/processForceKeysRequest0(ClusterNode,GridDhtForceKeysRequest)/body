{
  if (!enterBusy())   return;
  try {
    ClusterNode loc=cctx.localNode();
    GridDhtForceKeysResponse res=new GridDhtForceKeysResponse(cctx.cacheId(),msg.futureId(),msg.miniId());
    for (    KeyCacheObject k : msg.keys()) {
      int p=cctx.affinity().partition(k);
      GridDhtLocalPartition locPart=top.localPartition(p,AffinityTopologyVersion.NONE,false);
      if (locPart == null && !top.owners(p).contains(loc))       res.addMissed(k);
      GridCacheEntryEx entry;
      if (cctx.isSwapOrOffheapEnabled()) {
        entry=cctx.dht().entryEx(k,true);
        entry.unswap();
      }
 else       entry=cctx.dht().peekEx(k);
      if (entry != null) {
        GridCacheEntryInfo info=entry.info();
        if (info != null && !info.isNew())         res.addInfo(info);
      }
 else       if (log.isDebugEnabled())       log.debug("Key is not present in DHT cache: " + k);
    }
    if (log.isDebugEnabled())     log.debug("Sending force key response [node=" + node.id() + ", res="+ res+ ']');
    cctx.io().send(node,res,cctx.ioPolicy());
  }
 catch (  ClusterTopologyCheckedException ignore) {
    if (log.isDebugEnabled())     log.debug("Received force key request form failed node (will ignore) [nodeId=" + node.id() + ", req="+ msg+ ']');
  }
catch (  IgniteCheckedException e) {
    U.error(log,"Failed to reply to force key request [nodeId=" + node.id() + ", req="+ msg+ ']',e);
  }
 finally {
    leaveBusy();
  }
}
