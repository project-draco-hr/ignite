{
  TestObjectContainer c=new TestObjectContainer();
  BinaryObjectBuilderImpl mutableObj=wrap(c);
  mutableObj.setField("intField",1);
  mutableObj.setField("intArrField",new int[]{1});
  mutableObj.setField("arrField",new String[]{"1"});
  mutableObj.setField("strField","1");
  mutableObj.setField("colField",Lists.newArrayList("1"));
  mutableObj.setField("mapField",Maps.newHashMap(ImmutableMap.of(1,"1")));
  mutableObj.setField("enumField",TestObjectEnum.A);
  mutableObj.setField("enumArrField",new Enum[]{TestObjectEnum.A});
  mutableObj.build();
  BinaryType metadata=portables().metadata(c.getClass());
  assertTrue(metadata.fieldNames().containsAll(Arrays.asList("intField","intArrField","arrField","strField","colField","mapField","enumField","enumArrField")));
  assertEquals("int",metadata.fieldTypeName("intField"));
  assertEquals("int[]",metadata.fieldTypeName("intArrField"));
  assertEquals("String[]",metadata.fieldTypeName("arrField"));
  assertEquals("String",metadata.fieldTypeName("strField"));
  assertEquals("Collection",metadata.fieldTypeName("colField"));
  assertEquals("Map",metadata.fieldTypeName("mapField"));
  assertEquals("Enum",metadata.fieldTypeName("enumField"));
  assertEquals("Enum[]",metadata.fieldTypeName("enumArrField"));
}
