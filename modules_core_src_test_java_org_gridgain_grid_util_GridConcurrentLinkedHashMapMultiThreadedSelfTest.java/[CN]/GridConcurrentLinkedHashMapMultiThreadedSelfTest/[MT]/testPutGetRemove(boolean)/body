{
  info(">>> Test grid concurrent linked hash map iterator...");
  final ConcurrentLinkedHashMap<Integer,String> linkedMap=new ConcurrentLinkedHashMap<>();
  Collection<Integer> original=new HashSet<>();
  final int keyCnt=10000;
  if (!clear)   for (int i=0; i < keyCnt; i++) {
    linkedMap.put(i,"value" + i);
    original.add(i);
  }
  long start=System.currentTimeMillis();
  GridFuture<?> fut=multithreadedAsync(new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      Random rnd=new Random();
      int iterCnt=100000;
      for (int i=0; i < iterCnt; i++) {
        int key=rnd.nextInt(keyCnt);
        if (clear) {
          linkedMap.put(key,"value" + key);
          linkedMap.get(key);
          linkedMap.remove(key);
        }
 else {
          linkedMap.get(key);
          linkedMap.remove(key);
          linkedMap.put(key,"value" + key);
        }
      }
      return null;
    }
  }
,10,"updater");
  fut.get();
  Set<Integer> keys=linkedMap.keySet();
  if (clear)   assertTrue("Keys must not be in map " + keys,keys.isEmpty());
 else {
    original.removeAll(keys);
    assertTrue("Keys must be in map: " + original,original.isEmpty());
  }
  info(">>> put get remove test complete [duration = " + (System.currentTimeMillis() - start) + ']');
}
