{
  GridFileLock fileLock=GridLoadTestUtils.fileLock();
  fileLock.lock();
  try {
    int threadCnt=args.length == 0 ? 64 : Integer.parseInt(args[0]);
    final int duration=args.length < 2 ? 0 : Integer.parseInt(args[1]);
    final String outputFileName=args.length < 3 ? null : args[2];
    final AtomicLong tasksCnt=new AtomicLong();
    final AtomicBoolean finish=new AtomicBoolean();
    ExecutorService pool=Executors.newFixedThreadPool(threadCnt);
    Collection<Callable<Object>> producers=new ArrayList<>(threadCnt);
    Thread collector=null;
    Thread timer=null;
    try {
      final Grid g=G.start("modules/core/src/test/config/grid-job-load.xml");
      X.println("Warming up...");
      GridLoadTestUtils.runMultithreadedInLoop(new Callable<Object>(){
        @Override public Object call() throws GridException {
          g.compute().execute(GridJobExecutionLoadTestTask.class,null).get();
          return null;
        }
      }
,threadCnt,WARM_UP_DURATION);
      System.gc();
      X.println("Running main test.");
      for (int i=0; i < threadCnt; i++)       producers.add(new Callable<Object>(){
        @SuppressWarnings({"unchecked","InfiniteLoopStatement"}) @Override public Object call() throws Exception {
          while (!finish.get()) {
            try {
              g.compute().execute(GridJobExecutionLoadTestTask.class,null).get();
              tasksCnt.incrementAndGet();
            }
 catch (            GridComputeTaskCancelledException ignored) {
            }
catch (            GridException e) {
              e.printStackTrace();
            }
          }
          return null;
        }
      }
);
      collector=new Thread(new Runnable(){
        @SuppressWarnings({"BusyWait","InfiniteLoopStatement"}) @Override public void run(){
          GridCumulativeAverage avgTasksPerSec=new GridCumulativeAverage();
          try {
            while (!finish.get()) {
              long cnt0=tasksCnt.get();
              Thread.sleep(UPDATE_INTERVAL_SEC * 1000);
              long cnt1=tasksCnt.get();
              long curTasksPerSec=(cnt1 - cnt0) / UPDATE_INTERVAL_SEC;
              X.println(">>> Tasks/s: " + curTasksPerSec);
              avgTasksPerSec.update(curTasksPerSec);
            }
          }
 catch (          InterruptedException ignored) {
            X.println(">>> Interrupted.");
            Thread.currentThread().interrupt();
          }
          X.println(">>> Average tasks/s: " + avgTasksPerSec);
          if (outputFileName != null) {
            X.println("Writing test results to a file: " + outputFileName);
            try {
              GridLoadTestUtils.appendLineToFile(outputFileName,"%s,%d",GridLoadTestUtils.DATE_TIME_FORMAT.format(new Date()),avgTasksPerSec.get());
            }
 catch (            IOException e) {
              X.error("Failed to output to a file",e);
            }
          }
        }
      }
);
      collector.start();
      if (duration > 0) {
        timer=new Thread(new Runnable(){
          @Override public void run(){
            try {
              Thread.sleep(duration * 1000);
              finish.set(true);
            }
 catch (            InterruptedException ignored) {
            }
          }
        }
);
        timer.start();
      }
      pool.invokeAll(producers);
      X.println("All done, stopping.");
      collector.interrupt();
      pool.shutdown();
    }
  finally {
      if (collector != null && !collector.isInterrupted())       collector.interrupt();
      if (timer != null)       timer.interrupt();
      G.stopAll(true);
    }
  }
  finally {
    fileLock.close();
  }
}
