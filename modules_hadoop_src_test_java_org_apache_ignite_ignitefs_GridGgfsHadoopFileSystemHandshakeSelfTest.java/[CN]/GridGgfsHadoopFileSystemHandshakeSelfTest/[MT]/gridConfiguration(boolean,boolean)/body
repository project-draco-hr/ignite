{
  IgniteConfiguration cfg=super.getConfiguration(dfltGridName ? null : GRID_NAME);
  cfg.setLocalHost("127.0.0.1");
  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();
  discoSpi.setIpFinder(IP_FINDER);
  cfg.setDiscoverySpi(discoSpi);
  TcpCommunicationSpi commSpi=new TcpCommunicationSpi();
  commSpi.setSharedMemoryPort(-1);
  cfg.setCommunicationSpi(commSpi);
  CacheConfiguration metaCacheCfg=defaultCacheConfiguration();
  metaCacheCfg.setName("replicated");
  metaCacheCfg.setCacheMode(REPLICATED);
  metaCacheCfg.setWriteSynchronizationMode(FULL_SYNC);
  metaCacheCfg.setQueryIndexEnabled(false);
  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);
  CacheConfiguration dataCacheCfg=defaultCacheConfiguration();
  dataCacheCfg.setName("partitioned");
  dataCacheCfg.setCacheMode(PARTITIONED);
  dataCacheCfg.setDistributionMode(PARTITIONED_ONLY);
  dataCacheCfg.setWriteSynchronizationMode(FULL_SYNC);
  dataCacheCfg.setAffinityMapper(new IgniteFsGroupDataBlocksKeyMapper(128));
  dataCacheCfg.setBackups(0);
  dataCacheCfg.setQueryIndexEnabled(false);
  dataCacheCfg.setAtomicityMode(TRANSACTIONAL);
  cfg.setCacheConfiguration(metaCacheCfg,dataCacheCfg);
  IgniteFsConfiguration ggfsCfg=new IgniteFsConfiguration();
  ggfsCfg.setDataCacheName("partitioned");
  ggfsCfg.setMetaCacheName("replicated");
  ggfsCfg.setName(dfltGgfsName ? null : GGFS_NAME);
  ggfsCfg.setPrefetchBlocks(1);
  ggfsCfg.setDefaultMode(PRIMARY);
  ggfsCfg.setIpcEndpointConfiguration(new HashMap<String,String>(){
{
      put("type","tcp");
      put("port",String.valueOf(DFLT_IPC_PORT));
    }
  }
);
  ggfsCfg.setManagementPort(-1);
  ggfsCfg.setBlockSize(512 * 1024);
  cfg.setGgfsConfiguration(ggfsCfg);
  return cfg;
}
