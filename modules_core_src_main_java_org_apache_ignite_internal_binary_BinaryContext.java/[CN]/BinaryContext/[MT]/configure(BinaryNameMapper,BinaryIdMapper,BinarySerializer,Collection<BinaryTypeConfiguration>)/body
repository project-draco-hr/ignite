{
  TypeDescriptors descs=new TypeDescriptors();
  Map<String,String> affFields=new HashMap<>();
  if (!F.isEmpty(igniteCfg.getCacheKeyConfiguration())) {
    for (    CacheKeyConfiguration keyCfg : igniteCfg.getCacheKeyConfiguration())     affFields.put(keyCfg.getTypeName(),keyCfg.getAffinityKeyFieldName());
  }
  if (typeCfgs != null) {
    for (    BinaryTypeConfiguration typeCfg : typeCfgs) {
      String clsName=typeCfg.getTypeName();
      if (clsName == null)       throw new BinaryObjectException("Class name is required for binary type configuration.");
      BinaryIdMapper idMapper=globalIdMapper;
      if (typeCfg.getIdMapper() != null)       idMapper=typeCfg.getIdMapper();
      BinaryNameMapper nameMapper=globalNameMapper;
      if (typeCfg.getNameMapper() != null)       nameMapper=typeCfg.getNameMapper();
      BinaryInternalMapper mapper=resolveMapper(nameMapper,idMapper);
      BinarySerializer serializer=globalSerializer;
      if (typeCfg.getSerializer() != null)       serializer=typeCfg.getSerializer();
      if (clsName.endsWith(".*")) {
        String pkgName=clsName.substring(0,clsName.length() - 2);
        for (        String clsName0 : classesInPackage(pkgName))         descs.add(clsName0,mapper,serializer,affFields.get(clsName0),typeCfg.isEnum(),true);
      }
 else       descs.add(clsName,mapper,serializer,affFields.get(clsName),typeCfg.isEnum(),false);
    }
  }
  for (  TypeDescriptor desc : descs.descriptors())   registerUserType(desc.clsName,desc.mapper,desc.serializer,desc.affKeyFieldName,desc.isEnum);
  BinaryInternalMapper globalMapper=resolveMapper(globalNameMapper,globalIdMapper);
  for (  Map.Entry<String,String> entry : affFields.entrySet()) {
    String typeName=entry.getKey();
    int typeId=globalMapper.typeId(typeName);
    affKeyFieldNames.putIfAbsent(typeId,entry.getValue());
  }
  addSystemClassAffinityKey(CollocatedSetItemKey.class);
  addSystemClassAffinityKey(CollocatedQueueItemKey.class);
}
