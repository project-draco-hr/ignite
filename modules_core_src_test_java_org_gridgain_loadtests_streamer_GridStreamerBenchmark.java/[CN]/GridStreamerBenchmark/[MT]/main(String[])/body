{
  if (args.length == 0)   throw new IllegalArgumentException("Configuration path is not provided.");
  String cfgPath=args.length > 0 ? args[0] : "modules/core/src/test/config/streamer/average/spring-streamer-average-local.xml";
  boolean worker=args.length > 1 && "-w".equalsIgnoreCase(args[1]);
  Collection<GridStreamerLoad> loads=worker ? null : loads(cfgPath);
  Grid grid=G.start(cfgPath);
  Collection<Thread> loadThreads=new HashSet<>();
  if (loads != null && !loads.isEmpty()) {
    for (    GridStreamerLoad load : loads) {
      final GridStreamer streamer=grid.streamer(load.getName());
      if (streamer == null)       throw new Exception("Steamer is not found: " + load.getName());
      List<GridInClosure<GridStreamer>> clos=load.getClosures();
      if (clos != null && !clos.isEmpty()) {
        for (        final GridInClosure<GridStreamer> clo : clos) {
          Thread t=new Thread(new Runnable(){
            @Override public void run(){
              try {
                clo.apply(streamer);
              }
 catch (              Exception e) {
                X.println("Exception during execution of closure for streamer " + "[streamer=" + streamer.name() + ", closure="+ clo+ ", err="+ e.getMessage()+ ']');
                e.printStackTrace();
              }
            }
          }
);
          loadThreads.add(t);
          t.start();
        }
      }
    }
  }
  System.out.println("Press enter to stop running benchmark.");
  try (BufferedReader in=new BufferedReader(new InputStreamReader(System.in))){
    in.readLine();
  }
   for (  Thread t : loadThreads)   t.interrupt();
  for (  Thread t : loadThreads)   t.join();
}
