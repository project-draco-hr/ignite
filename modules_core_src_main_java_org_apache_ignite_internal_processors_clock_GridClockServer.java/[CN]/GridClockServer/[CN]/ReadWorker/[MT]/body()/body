{
  DatagramPacket packet=new DatagramPacket(new byte[GridClockMessage.PACKET_SIZE],GridClockMessage.PACKET_SIZE);
  while (!isCancelled()) {
    try {
      sock.receive(packet);
      if (log.isDebugEnabled())       log.debug("Received clock sync message from remote node [host=" + packet.getAddress() + ", port="+ packet.getPort()+ ']');
      GridClockMessage msg=GridClockMessage.fromBytes(packet.getData(),packet.getOffset(),packet.getLength());
      clockSync.onMessageReceived(msg,packet.getAddress(),packet.getPort());
    }
 catch (    IgniteCheckedException e) {
      U.warn(log,"Failed to assemble clock server message (will ignore the packet) [host=" + packet.getAddress() + ", port="+ packet.getPort()+ ", err="+ e.getMessage()+ ']');
    }
catch (    IOException e) {
      if (!isCancelled())       U.warn(log,"Failed to receive message on datagram socket: " + e);
    }
  }
}
