{
  this.ctx=ctx;
  clockSync=ctx.clockSync();
  log=ctx.log(GridClockServer.class);
  try {
    int startPort=ctx.config().getTimeServerPortBase();
    int portRange=ctx.config().getTimeServerPortRange();
    int endPort=portRange == 0 ? startPort : startPort + portRange - 1;
    InetAddress locHost;
    if (F.isEmpty(ctx.config().getLocalHost())) {
      try {
        locHost=U.getLocalHost();
      }
 catch (      IOException e) {
        locHost=InetAddress.getLoopbackAddress();
        U.warn(log,"Failed to get local host address, will use loopback address: " + locHost);
      }
    }
 else     locHost=InetAddress.getByName(ctx.config().getLocalHost());
    for (int p=startPort; p <= endPort; p++) {
      try {
        sock=new DatagramSocket(p,locHost);
        if (log.isDebugEnabled())         log.debug("Successfully bound time server [host=" + locHost + ", port="+ p+ ']');
        break;
      }
 catch (      SocketException e) {
        if (log.isDebugEnabled())         log.debug("Failed to bind time server socket [host=" + locHost + ", port="+ p+ ", err="+ e.getMessage()+ ']');
      }
    }
    if (sock == null)     throw new IgniteCheckedException("Failed to bind time server socket within specified port range " + "[locHost=" + locHost + ", startPort="+ startPort+ ", endPort="+ endPort+ ']');
  }
 catch (  IOException e) {
    throw new IgniteCheckedException("Failed to start time server (failed to get local host address)",e);
  }
}
