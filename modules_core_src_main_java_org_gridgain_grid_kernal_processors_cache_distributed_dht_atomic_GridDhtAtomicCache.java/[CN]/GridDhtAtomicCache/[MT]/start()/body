{
  hasBackups=ctx.config().getBackups() > 0;
  preldr=new GridDhtPreloader<>(ctx);
  preldr.start();
  ctx.io().addHandler(GridNearGetRequest.class,new CI2<UUID,GridNearGetRequest<K,V>>(){
    @Override public void apply(    UUID nodeId,    GridNearGetRequest<K,V> req){
      processNearGetRequest(nodeId,req);
    }
  }
);
  ctx.io().addHandler(GridNearAtomicUpdateRequest.class,new CI2<UUID,GridNearAtomicUpdateRequest<K,V>>(){
    @Override public void apply(    UUID nodeId,    GridNearAtomicUpdateRequest<K,V> req){
      processNearAtomicUpdateRequest(nodeId,req);
    }
  }
);
  ctx.io().addHandler(GridNearAtomicUpdateResponse.class,new CI2<UUID,GridNearAtomicUpdateResponse<K,V>>(){
    @Override public void apply(    UUID nodeId,    GridNearAtomicUpdateResponse<K,V> res){
      processNearAtomicUpdateResponse(nodeId,res);
    }
  }
);
  ctx.io().addHandler(GridDhtAtomicUpdateRequest.class,new CI2<UUID,GridDhtAtomicUpdateRequest<K,V>>(){
    @Override public void apply(    UUID nodeId,    GridDhtAtomicUpdateRequest<K,V> req){
      processDhtAtomicUpdateRequest(nodeId,req);
    }
  }
);
  ctx.io().addHandler(GridDhtAtomicUpdateResponse.class,new CI2<UUID,GridDhtAtomicUpdateResponse<K,V>>(){
    @Override public void apply(    UUID nodeId,    GridDhtAtomicUpdateResponse<K,V> res){
      processDhtAtomicUpdateResponse(nodeId,res);
    }
  }
);
  ctx.io().addHandler(GridDhtAtomicDeferredUpdateResponse.class,new CI2<UUID,GridDhtAtomicDeferredUpdateResponse<K,V>>(){
    @Override public void apply(    UUID nodeId,    GridDhtAtomicDeferredUpdateResponse<K,V> res){
      processDhtAtomicDeferredUpdateResponse(nodeId,res);
    }
  }
);
  if (near == null) {
    ctx.io().addHandler(GridNearGetResponse.class,new CI2<UUID,GridNearGetResponse<K,V>>(){
      @Override public void apply(      UUID nodeId,      GridNearGetResponse<K,V> res){
        processNearGetResponse(nodeId,res);
      }
    }
);
  }
}
