{
  ctx.checkSecurity(GridSecurityPermission.CACHE_READ);
  if (F.isEmpty(keys))   return new GridFinishedFuture<>(ctx.kernalContext(),Collections.<K,V>emptyMap());
  long topVer=ctx.affinity().affinityTopologyVersion();
  if (!reload && !forcePrimary) {
    Map<K,V> locVals=new HashMap<>(keys.size(),1.0f);
    GridCacheVersion obsoleteVer=null;
    boolean success=true;
    for (    K key : keys) {
      GridCacheEntryEx<K,V> entry=null;
      while (true) {
        try {
          entry=ctx.isSwapOrOffheapEnabled() ? entryEx(key) : peekEx(key);
          if (entry != null) {
            boolean isNew=entry.isNewLocked();
            V v=entry.innerGet(null,true,false,true,true,true,true,subjId,filter);
            if (v == null) {
              if (obsoleteVer == null)               obsoleteVer=context().versions().next();
              if (isNew && entry.markObsoleteIfEmpty(obsoleteVer))               removeIfObsolete(key);
              success=false;
            }
 else {
              if (ctx.portableEnabled() && deserializePortable && v instanceof GridPortableObject)               v=((GridPortableObject<V>)v).deserialize();
              locVals.put(key,v);
            }
          }
 else           success=false;
          break;
        }
 catch (        GridCacheEntryRemovedException ignored) {
        }
catch (        GridCacheFilterFailedException ignored) {
          break;
        }
catch (        GridDhtInvalidPartitionException ignored) {
          success=false;
          break;
        }
catch (        GridException e) {
          return new GridFinishedFuture<>(ctx.kernalContext(),e);
        }
 finally {
          if (entry != null)           ctx.evicts().touch(entry,topVer);
        }
      }
      if (!success)       break;
    }
    if (success)     return ctx.wrapCloneMap(new GridFinishedFuture<>(ctx.kernalContext(),locVals));
  }
  GridPartitionedGetFuture<K,V> fut=new GridPartitionedGetFuture<>(ctx,keys,topVer,reload,forcePrimary,filter,subjId,deserializePortable);
  fut.init();
  return ctx.wrapCloneMap(fut);
}
