{
  if (true)   return;
  if (ctx.isDaemon())   return;
  depCache=ctx.cache().utilityCache(GridServiceDeploymentKey.class,GridServiceDeployment.class);
  assignCache=ctx.cache().utilityCache(GridServiceAssignmentsKey.class,GridServiceAssignments.class);
  ctx.event().addLocalEventListener(topLsnr,EVTS_DISCOVERY);
  try {
    if (ctx.deploy().enabled())     ctx.cache().internalCache(UTILITY_CACHE_NAME).context().deploy().ignoreOwnership(true);
    cfgQry=(GridCacheContinuousQueryAdapter<GridServiceDeploymentKey,GridServiceDeployment>)depCache.queries().createContinuousQuery();
    cfgQry.localCallback(new DeploymentListener());
    cfgQry.execute(ctx.grid().forLocal(),true);
    assignQry=(GridCacheContinuousQueryAdapter<GridServiceAssignmentsKey,GridServiceAssignments>)assignCache.queries().createContinuousQuery();
    assignQry.localCallback(new AssignmentListener());
    assignQry.execute(ctx.grid().forLocal(),true);
  }
  finally {
    if (ctx.deploy().enabled())     ctx.cache().internalCache(UTILITY_CACHE_NAME).context().deploy().ignoreOwnership(false);
  }
  GridServiceConfiguration[] cfgs=ctx.config().getServiceConfiguration();
  if (cfgs != null) {
    Collection<GridFuture<?>> futs=new ArrayList<>();
    for (    GridServiceConfiguration c : ctx.config().getServiceConfiguration())     futs.add(deploy(c,false));
    for (    GridFuture<?> f : futs)     f.get();
  }
  if (log.isDebugEnabled())   log.debug("Started service processor.");
}
