{
  validate(cfg);
  try {
    GridFutureAdapter<?> fut=new GridFutureAdapter<>(ctx);
    GridFutureAdapter<?> old;
    if ((old=futs.putIfAbsent(cfg.getName(),fut)) != null) {
      if (failDups) {
        fut.onDone(new GridException("Failed to deploy service " + "(service exists and must be undeployed first): " + cfg.getName()));
        return fut;
      }
      fut=old;
    }
 else     if (!depCache.putxIfAbsent(new GridServiceDeploymentKey(cfg.getName()),new GridServiceDeployment(ctx.localNodeId(),cfg))) {
      futs.remove(cfg.getName());
      if (failDups)       fut.onDone(new GridException("Failed to deploy service " + "(service already exists and must be undeployed first): " + cfg.getName()));
 else {
        fut.onDone();
        GridServiceDeployment dep=depCache.get(new GridServiceDeploymentKey(cfg.getName()));
        if (!dep.configuration().equals(cfg))         U.warn(log,"Service already deployed with different configuration (will ignore) [deployed=" + dep.configuration() + ", new="+ cfg+ ']');
      }
    }
    return fut;
  }
 catch (  GridException e) {
    log.error("Failed to deploy service: " + cfg.getName(),e);
    return new GridFinishedFuture<>(ctx,e);
  }
}
