{
  A.notNull(cfg,"cfg");
  validate(cfg);
  while (true) {
    try {
      GridFutureAdapter<?> fut=new GridFutureAdapter<>(ctx);
      GridFutureAdapter<?> old;
      if ((old=depFuts.putIfAbsent(cfg.getName(),fut)) != null) {
        if (failDups) {
          fut.onDone(new GridException("Failed to deploy service " + "(service exists and must be undeployed first): " + cfg.getName()));
          return fut;
        }
        fut=old;
      }
 else {
        GridServiceDeploymentKey key=new GridServiceDeploymentKey(cfg.getName());
        GridServiceDeployment dep;
        GridServiceDeployment insertDep=new GridServiceDeployment(ctx.localNodeId(),cfg);
        if ((dep=(GridServiceDeployment)depCache.putIfAbsent(key,insertDep)) != null) {
          depFuts.remove(cfg.getName());
          if (failDups)           fut.onDone(new GridException("Failed to deploy service " + "(service already exists and must be undeployed first): " + cfg.getName()));
 else {
            fut.onDone();
            if (!dep.configuration().equals(cfg))             U.warn(log,"Service already deployed with different configuration (will ignore) " + "[deployed=" + dep.configuration() + ", new="+ cfg+ ']');
          }
        }
      }
      return fut;
    }
 catch (    GridTopologyException e) {
      if (log.isDebugEnabled())       log.debug("Topology changed while deploying service (will retry): " + e.getMessage());
    }
catch (    GridException e) {
      log.error("Failed to deploy service: " + cfg.getName(),e);
      return new GridFinishedFuture<>(ctx,e);
    }
  }
}
