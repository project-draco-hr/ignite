{
  if (log.isDebugEnabled())   log.debug("Starting cache query index...");
  System.setProperty("h2.serializeJavaObject","false");
  System.setProperty("h2.objectCacheMaxPerElementSize","0");
  if (SysProperties.serializeJavaObject) {
    U.warn(log,"Serialization of Java objects in H2 was enabled.");
    SysProperties.serializeJavaObject=false;
  }
  if (Utils.serializer != null)   U.warn(log,"Custom H2 serialization is already configured, will override.");
  Utils.serializer=h2Serializer();
  String dbName=(ctx != null ? ctx.localNodeId() : UUID.randomUUID()).toString();
  dbUrl="jdbc:h2:mem:" + dbName + DB_OPTIONS;
  org.h2.Driver.load();
  try {
    if (getString(IGNITE_H2_DEBUG_CONSOLE) != null) {
      Connection c=DriverManager.getConnection(dbUrl);
      WebServer webSrv=new WebServer();
      Server web=new Server(webSrv,"-webPort","0");
      web.start();
      String url=webSrv.addSession(c);
      try {
        Server.openBrowser(url);
      }
 catch (      Exception e) {
        U.warn(log,"Failed to open browser: " + e.getMessage());
      }
    }
  }
 catch (  SQLException e) {
    throw new IgniteCheckedException(e);
  }
  if (ctx == null)   marshaller=new JdkMarshaller();
 else {
    this.ctx=ctx;
    nodeId=ctx.localNodeId();
    marshaller=ctx.config().getMarshaller();
    mapQryExec=new GridMapQueryExecutor();
    rdcQryExec=new GridReduceQueryExecutor();
    mapQryExec.start(ctx,this);
    rdcQryExec.start(ctx,this);
  }
}
