{
  return p2pEnabled ? new JavaObjectSerializer(){
    /** 
 */
    private volatile Map<ClassLoader,Byte> ldr2id=Collections.emptyMap();
    /** 
 */
    private volatile Map<Byte,ClassLoader> id2ldr=Collections.emptyMap();
    /** 
 */
    private byte ldrIdGen=Byte.MIN_VALUE;
    /** 
 */
    private final Lock lock=new ReentrantLock();
    @Override public byte[] serialize(    Object obj) throws Exception {
      ClassLoader ldr=obj.getClass().getClassLoader();
      Byte ldrId=ldr2id.get(ldr);
      if (ldrId == null) {
        lock.lock();
        try {
          ldrId=ldr2id.get(ldr);
          if (ldrId == null) {
            ldrId=ldrIdGen++;
            if (id2ldr.containsKey(ldrId))             throw new IgniteException("Failed to add new peer-to-peer class loader.");
            Map<Byte,ClassLoader> id2ldr0=new HashMap<>(id2ldr);
            Map<ClassLoader,Byte> ldr2id0=new IdentityHashMap<>(ldr2id);
            id2ldr0.put(ldrId,ldr);
            ldr2id0.put(ldr,ldrId);
            ldr2id=ldr2id0;
            id2ldr=id2ldr0;
          }
        }
  finally {
          lock.unlock();
        }
      }
      byte[] bytes=marshaller.marshal(obj);
      int len=bytes.length;
      bytes=Arrays.copyOf(bytes,len + 1);
      bytes[len]=ldrId;
      return bytes;
    }
    @Override public Object deserialize(    byte[] bytes) throws Exception {
      int last=bytes.length - 1;
      byte ldrId=bytes[last];
      ClassLoader ldr=id2ldr.get(ldrId);
      if (ldr == null)       throw new IllegalStateException("Class loader was not found: " + ldrId);
      bytes=Arrays.copyOf(bytes,last);
      return marshaller.unmarshal(bytes,ldr);
    }
  }
 : new JavaObjectSerializer(){
    @Override public byte[] serialize(    Object obj) throws Exception {
      return marshaller.marshal(obj);
    }
    @Override public Object deserialize(    byte[] bytes) throws Exception {
      return marshaller.unmarshal(bytes,null);
    }
  }
;
}
