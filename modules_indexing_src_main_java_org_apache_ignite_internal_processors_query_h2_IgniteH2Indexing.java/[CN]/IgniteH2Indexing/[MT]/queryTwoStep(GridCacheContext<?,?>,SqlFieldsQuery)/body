{
  final String space=cctx.name();
  final String sqlQry=qry.getSql();
  Connection c=connectionForSpace(space);
  final boolean enforceJoinOrder=qry.isEnforceJoinOrder();
  final boolean distributedJoins=qry.isDistributedJoins() && cctx.isPartitioned();
  final boolean grpByCollocated=qry.isCollocated();
  GridCacheTwoStepQuery twoStepQry;
  List<GridQueryFieldMetadata> meta;
  final TwoStepCachedQueryKey cachedQryKey=new TwoStepCachedQueryKey(space,sqlQry,grpByCollocated,distributedJoins,enforceJoinOrder);
  TwoStepCachedQuery cachedQry=twoStepCache.get(cachedQryKey);
  if (cachedQry != null) {
    twoStepQry=cachedQry.twoStepQry.copy(qry.getArgs());
    meta=cachedQry.meta;
  }
 else {
    final UUID locNodeId=ctx.localNodeId();
    setupConnection(c,distributedJoins,enforceJoinOrder);
    GridH2QueryContext.set(new GridH2QueryContext(locNodeId,locNodeId,0,PREPARE).distributedJoins(distributedJoins));
    PreparedStatement stmt;
    boolean cachesCreated=false;
    try {
      while (true) {
        try {
          stmt=prepareStatement(c,sqlQry,false);
          break;
        }
 catch (        SQLException e) {
          if (!cachesCreated && e.getErrorCode() == ErrorCode.SCHEMA_NOT_FOUND_1) {
            try {
              ctx.cache().createMissingCaches();
            }
 catch (            IgniteCheckedException e1) {
              throw new CacheException("Failed to create missing caches.",e);
            }
            cachesCreated=true;
          }
 else           throw new CacheException("Failed to parse query: " + sqlQry,e);
        }
      }
    }
  finally {
      GridH2QueryContext.clearThreadLocal();
    }
    try {
      bindParameters(stmt,F.asList(qry.getArgs()));
      twoStepQry=GridSqlQuerySplitter.split((JdbcPreparedStatement)stmt,qry.getArgs(),grpByCollocated,distributedJoins);
      List<Integer> caches;
      List<Integer> extraCaches=null;
      if (!twoStepQry.schemas().isEmpty()) {
        Collection<String> spaces=new ArrayList<>(twoStepQry.schemas().size());
        caches=new ArrayList<>(twoStepQry.schemas().size() + 1);
        caches.add(cctx.cacheId());
        for (        String schema : twoStepQry.schemas()) {
          String space0=space(schema);
          spaces.add(space0);
          if (!F.eq(space0,space)) {
            int cacheId=CU.cacheId(space0);
            caches.add(cacheId);
            if (extraCaches == null)             extraCaches=new ArrayList<>();
            extraCaches.add(cacheId);
          }
        }
        twoStepQry.spaces(spaces);
      }
 else {
        caches=Collections.singletonList(cctx.cacheId());
        extraCaches=null;
      }
      twoStepQry.caches(caches);
      twoStepQry.extraCaches(extraCaches);
      meta=meta(stmt.getMetaData());
    }
 catch (    IgniteCheckedException e) {
      throw new CacheException("Failed to bind parameters: [qry=" + sqlQry + ", params="+ Arrays.deepToString(qry.getArgs())+ "]",e);
    }
catch (    SQLException e) {
      throw new CacheException(e);
    }
 finally {
      U.close(stmt,log);
    }
  }
  if (log.isDebugEnabled())   log.debug("Parsed query: `" + sqlQry + "` into two step query: "+ twoStepQry);
  twoStepQry.pageSize(qry.getPageSize());
  QueryCursorImpl<List<?>> cursor=new QueryCursorImpl<>(runQueryTwoStep(cctx,twoStepQry,cctx.keepBinary(),enforceJoinOrder));
  cursor.fieldsMeta(meta);
  if (cachedQry == null && !twoStepQry.explain()) {
    cachedQry=new TwoStepCachedQuery(meta,twoStepQry.copy(null));
    twoStepCache.putIfAbsent(cachedQryKey,cachedQry);
  }
  return cursor;
}
