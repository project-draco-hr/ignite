{
  plc=new GridCacheFifoEvictionPolicy<>(100);
  try {
    Grid g=startGrid(1);
    Integer affKey=1;
    GridCache<Object,Integer> cache=g.cache(null);
    GridCacheTx tx=cache.txStartPartition(cache.affinity().partition(affKey),PESSIMISTIC,REPEATABLE_READ,0,5);
    try {
      for (int i=0; i < 5; i++)       cache.put(new GridCacheAffinityKey<Object>(i,affKey),i);
      tx.commit();
    }
  finally {
      tx.close();
    }
    assertEquals(5,((GridCacheFifoEvictionPolicy)plc).queue().size());
    tx=cache.txStartPartition(cache.affinity().partition(affKey),PESSIMISTIC,REPEATABLE_READ,0,5);
    try {
      for (int i=0; i < 5; i++)       cache.remove(new GridCacheAffinityKey<Object>(i,affKey));
      tx.commit();
    }
  finally {
      tx.close();
    }
    assertEquals(0,((GridCacheFifoEvictionPolicy)plc).queue().size());
  }
  finally {
    stopAllGrids();
  }
}
