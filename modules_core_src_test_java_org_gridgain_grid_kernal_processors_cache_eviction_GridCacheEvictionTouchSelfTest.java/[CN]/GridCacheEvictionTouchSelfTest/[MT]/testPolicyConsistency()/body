{
  plc=new GridCacheFifoEvictionPolicy<Object,Object>(500);
  try {
    Grid grid=startGrid(1);
    final GridCache<Integer,Integer> cache=grid.cache(null);
    final Random rnd=new Random();
    try (GridCacheTx tx=cache.txStart()){
      int iterCnt=20;
      int keyCnt=5000;
      for (int i=0; i < iterCnt; i++) {
        int j=rnd.nextInt(keyCnt);
        if (rnd.nextBoolean())         cache.putx(j,j);
 else         cache.remove(j);
        if (i != 0 && i % 1000 == 0)         info("Stats [iterCnt=" + i + ", size="+ cache.size()+ ']');
      }
      GridCacheFifoEvictionPolicy<Integer,Integer> plc0=(GridCacheFifoEvictionPolicy<Integer,Integer>)plc;
      if (!plc0.queue().isEmpty()) {
        for (        GridCacheEntry<Integer,Integer> e : plc0.queue())         U.warn(log,"Policy queue item: " + e);
        fail("Test failed, see logs for details.");
      }
      tx.commit();
    }
   }
 catch (  Throwable t) {
    error("Test failed.",t);
    fail("Test failed, see logs for details.");
  }
 finally {
    stopAllGrids();
  }
}
