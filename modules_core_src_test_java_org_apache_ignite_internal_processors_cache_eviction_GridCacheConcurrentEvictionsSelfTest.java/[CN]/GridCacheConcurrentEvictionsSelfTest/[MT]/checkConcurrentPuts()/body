{
  try {
    Ignite ignite=startGrid(1);
    final IgniteCache<Integer,Integer> cache=ignite.jcache(null);
    for (int i=0; i < warmUpPutsCnt; i++) {
      cache.put(i,i);
      if (i != 0 && i % 1000 == 0)       info("Warm up puts count: " + i);
    }
    info("Cache size: " + cache.size());
    cache.removeAll();
    final AtomicInteger idx=new AtomicInteger();
    int threadCnt=30;
    long start=System.currentTimeMillis();
    IgniteInternalFuture<?> fut=multithreadedAsync(new Callable<Object>(){
      @Override public Object call() throws Exception {
        for (int i=0; i < iterCnt; i++) {
          int j=idx.incrementAndGet();
          cache.put(j,j);
          if (i != 0 && i % 10000 == 0)           info("Stats [putsCnt=" + i + ", size="+ cache.size()+ ']');
        }
        return null;
      }
    }
,threadCnt);
    fut.get();
    info("Test results [threadCnt=" + threadCnt + ", iterCnt="+ iterCnt+ ", cacheSize="+ cache.size()+ ", duration="+ (System.currentTimeMillis() - start)+ ']');
  }
  finally {
    stopAllGrids();
  }
}
