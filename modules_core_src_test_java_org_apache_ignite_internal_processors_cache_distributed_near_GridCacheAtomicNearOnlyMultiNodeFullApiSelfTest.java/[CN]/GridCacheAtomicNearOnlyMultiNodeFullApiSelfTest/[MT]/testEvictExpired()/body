{
  if (isMultiJvm())   fail("https://issues.apache.org/jira/browse/IGNITE-1113");
  IgniteCache<String,Integer> cache=jcache();
  final String key=primaryKeysForCache(cache,1).get(0);
  cache.put(key,1);
  assertEquals((Integer)1,cache.get(key));
  long ttl=500;
  grid(0).cache(null).withExpiryPolicy(new TouchedExpiryPolicy(new Duration(MILLISECONDS,ttl))).put(key,1);
  boolean wait=waitForCondition(new GridAbsPredicate(){
    @Override public boolean apply(){
      for (int i=0; i < gridCount(); i++) {
        if (peek(jcache(i),key) != null)         return false;
      }
      return true;
    }
  }
,ttl + 1000);
  assertTrue("Failed to wait for entry expiration.",wait);
  cache.localEvict(Collections.singleton(key));
  assertNull(cache.localPeek(key,CachePeekMode.ONHEAP));
  cache.localPromote(Collections.singleton(key));
  assertNull(cache.localPeek(key,CachePeekMode.ONHEAP));
  assertTrue(cache.localSize() == 0);
  load(cache,key,true);
  Affinity<String> aff=ignite(0).affinity(null);
  for (int i=0; i < gridCount(); i++) {
    if (aff.isPrimaryOrBackup(grid(i).cluster().localNode(),key))     assertEquals((Integer)1,peek(jcache(i),key));
  }
}
