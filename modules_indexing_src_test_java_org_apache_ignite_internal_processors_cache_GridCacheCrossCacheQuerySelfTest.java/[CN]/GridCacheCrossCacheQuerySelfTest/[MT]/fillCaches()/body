{
  int idGen=0;
  GridCacheAdapter<Integer,Object> dimCache=((IgniteKernal)ignite).internalCache("replicated");
  List<DimStore> dimStores=new ArrayList<>();
  List<DimProduct> dimProds=new ArrayList<>();
  for (int i=0; i < 2; i++) {
    int id=idGen++;
    DimStore v=new DimStore(id,"Store" + id);
    dimCache.getAndPut(id,v);
    dimStores.add(v);
  }
  for (int i=0; i < 5; i++) {
    int id=idGen++;
    DimProduct v=new DimProduct(id,"Product" + id);
    dimCache.getAndPut(id,v);
    dimProds.add(v);
  }
  GridCacheAdapter<Integer,FactPurchase> factCache=((IgniteKernal)ignite).internalCache("partitioned");
  Collections.sort(dimStores,new Comparator<DimStore>(){
    @Override public int compare(    DimStore o1,    DimStore o2){
      return o1.getId() > o2.getId() ? 1 : o1.getId() < o2.getId() ? -1 : 0;
    }
  }
);
  Collections.sort(dimProds,new Comparator<DimProduct>(){
    @Override public int compare(    DimProduct o1,    DimProduct o2){
      return o1.getId() > o2.getId() ? 1 : o1.getId() < o2.getId() ? -1 : 0;
    }
  }
);
  for (int i=0; i < 10; i++) {
    int id=idGen++;
    DimStore store=dimStores.get(i % dimStores.size());
    DimProduct prod=dimProds.get(i % dimProds.size());
    factCache.getAndPut(id,new FactPurchase(id,prod.getId(),store.getId(),i + 5));
  }
}
