{
  GridCacheQueriesEx<Integer,FactPurchase> qx=(GridCacheQueriesEx<Integer,FactPurchase>)((IgniteKernal)ignite).<Integer,FactPurchase>cache("partitioned").queries();
  Set<Integer> set1=new HashSet<>();
  X.println("___ simple");
  for (  List<?> o : qx.executeTwoStepQuery("partitioned","select f.productId, p.name, f.price " + "from FactPurchase f, \"replicated\".DimProduct p where p.id = f.productId ").getAll()) {
    X.println("___ -> " + o);
    set1.add((Integer)o.get(0));
  }
  assertFalse(set1.isEmpty());
  Set<Integer> set0=new HashSet<>();
  X.println("___ GROUP BY");
  for (  List<?> o : qx.executeTwoStepQuery("partitioned","select productId from FactPurchase group by productId").getAll()) {
    X.println("___ -> " + o);
    assertTrue(set0.add((Integer)o.get(0)));
  }
  assertEquals(set0,set1);
  X.println("___ GROUP BY AVG MIN MAX SUM COUNT(*) COUNT(x)");
  Set<String> names=new HashSet<>();
  for (  List<?> o : qx.executeTwoStepQuery("partitioned","select p.name, avg(f.price), min(f.price), max(f.price), sum(f.price), count(*), " + "count(nullif(f.price, 5)) " + "from FactPurchase f, \"replicated\".DimProduct p "+ "where p.id = f.productId "+ "group by f.productId, p.name").getAll()) {
    X.println("___ -> " + o);
    assertTrue(names.add((String)o.get(0)));
    assertEquals(i(o,4),i(o,2) + i(o,3));
  }
  X.println("___ SUM HAVING");
  for (  List<?> o : qx.executeTwoStepQuery("partitioned","select p.name, sum(f.price) s " + "from FactPurchase f, \"replicated\".DimProduct p " + "where p.id = f.productId "+ "group by f.productId, p.name "+ "having s >= 15").getAll()) {
    X.println("___ -> " + o);
    assertTrue(i(o,1) >= 15);
  }
  X.println("___ DISTINCT ORDER BY TOP");
  int top=6;
  for (  List<?> o : qx.executeTwoStepQuery("partitioned","select top 3 distinct productId " + "from FactPurchase f " + "order by productId desc ").getAll()) {
    X.println("___ -> " + o);
    assertEquals(top--,o.get(0));
  }
  X.println("___ DISTINCT ORDER BY OFFSET LIMIT");
  top=5;
  for (  List<?> o : qx.executeTwoStepQuery("partitioned","select distinct productId " + "from FactPurchase f " + "order by productId desc "+ "limit 2 offset 1").getAll()) {
    X.println("___ -> " + o);
    assertEquals(top--,o.get(0));
  }
  assertEquals(3,top);
}
