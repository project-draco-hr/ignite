{
  try {
    final CacheConfiguration cfg=new CacheConfiguration();
    cfg.setName(DYNAMIC_CACHE_NAME);
    cfg.setNodeFilter(NODE_FILTER);
    grid(0).getOrCreateCache(cfg);
    grid(0).getOrCreateCache(cfg);
    GridTestUtils.assertThrows(log,new Callable<Object>(){
      @Override public Object call() throws Exception {
        return grid(0).getOrCreateCache(cfg,new NearCacheConfiguration());
      }
    }
,CacheException.class,null);
    GridTestUtils.assertThrows(log,new Callable<Object>(){
      @Override public Object call() throws Exception {
        return grid(0).getOrCreateNearCache(DYNAMIC_CACHE_NAME,new NearCacheConfiguration());
      }
    }
,CacheException.class,null);
    testAttribute=false;
    startGrid(nodeCount());
    startGrid(nodeCount() + 1);
    try {
      IgniteEx nearGrid=grid(nodeCount());
      nearGrid.getOrCreateCache(cfg,new NearCacheConfiguration());
      nearGrid.getOrCreateNearCache(DYNAMIC_CACHE_NAME,new NearCacheConfiguration());
      GridCacheContext<Object,Object> nCtx=((IgniteKernal)nearGrid).internalCache(DYNAMIC_CACHE_NAME).context();
      assertTrue(nCtx.isNear());
      assertFalse(nCtx.affinityNode());
      IgniteEx clientGrid=grid(nodeCount() + 1);
      clientGrid.getOrCreateCache(cfg);
      clientGrid.getOrCreateCache(cfg);
      GridCacheContext<Object,Object> cCtx=((IgniteKernal)clientGrid).internalCache(DYNAMIC_CACHE_NAME).context();
      assertFalse(cCtx.isNear());
      assertFalse(cCtx.affinityNode());
    }
  finally {
      stopGrid(nodeCount() + 1);
      stopGrid(nodeCount());
    }
  }
  finally {
    grid(0).destroyCache(DYNAMIC_CACHE_NAME);
  }
}
