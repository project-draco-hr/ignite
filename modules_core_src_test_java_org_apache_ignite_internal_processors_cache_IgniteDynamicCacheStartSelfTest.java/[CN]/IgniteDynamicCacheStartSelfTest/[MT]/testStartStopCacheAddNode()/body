{
  final IgniteKernal kernal=(IgniteKernal)grid(0);
  CacheConfiguration ccfg=new CacheConfiguration();
  ccfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);
  ccfg.setName(CACHE_NAME);
  kernal.context().cache().dynamicStartCache(ccfg,F.<ClusterNode>alwaysTrue()).get();
  startGrid(nodeCount());
  try {
    IgniteCache<Object,Object> cache=ignite(nodeCount()).jcache(CACHE_NAME);
    cache.put("1","1");
    for (int g=0; g < nodeCount(); g++)     assertEquals("1",grid(g).jcache(CACHE_NAME).get("1"));
    kernal.context().cache().dynamicStopCache(CACHE_NAME).get();
    info(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
    info(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
    info(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
    info(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
    startGrid(nodeCount() + 1);
    for (int g=0; g < nodeCount(); g++) {
      final IgniteKernal kernal0=(IgniteKernal)grid(g);
      for (      IgniteInternalFuture f : kernal0.context().cache().context().exchange().exchangeFutures())       f.get();
      GridTestUtils.assertThrows(log,new Callable<Object>(){
        @Override public Object call() throws Exception {
          return kernal0.jcache(CACHE_NAME);
        }
      }
,IllegalArgumentException.class,null);
    }
  }
  finally {
    stopGrid(nodeCount() + 1);
    stopGrid(nodeCount());
  }
}
