{
  try {
    testAttribute=false;
    startGrid(nodeCount());
    final IgniteKernal kernal=(IgniteKernal)grid(0);
    CacheConfiguration ccfg=new CacheConfiguration();
    ccfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);
    ccfg.setName(DYNAMIC_CACHE_NAME);
    kernal.context().cache().dynamicStartCache(ccfg,NODE_FILTER).get();
    startGrid(nodeCount() + 1);
    for (int i=0; i < 100; i++)     grid(0).jcache(DYNAMIC_CACHE_NAME).put(i,i);
    for (int i=0; i < 100; i++)     assertEquals(i,grid(1).jcache(DYNAMIC_CACHE_NAME).get(i));
    info("Affinity nodes: " + grid(0).affinity(DYNAMIC_CACHE_NAME).mapKeyToPrimaryAndBackups(0));
    for (int g=0; g < nodeCount(); g++) {
      for (int i=0; i < 100; i++) {
        assertFalse(grid(g).affinity(DYNAMIC_CACHE_NAME).mapKeyToPrimaryAndBackups(i).contains(grid(nodeCount()).cluster().localNode()));
        assertFalse(grid(g).affinity(DYNAMIC_CACHE_NAME).mapKeyToPrimaryAndBackups(i).contains(grid(nodeCount() + 1).cluster().localNode()));
      }
    }
    for (int g=0; g < nodeCount() + 2; g++) {
      final IgniteKernal kernal0=(IgniteKernal)grid(g);
      for (      IgniteInternalFuture f : kernal0.context().cache().context().exchange().exchangeFutures())       f.get();
      if (g < nodeCount())       assertNotNull(grid(g).jcache(DYNAMIC_CACHE_NAME));
 else       GridTestUtils.assertThrows(log,new Callable<Object>(){
        @Override public Object call() throws Exception {
          return kernal0.jcache(DYNAMIC_CACHE_NAME);
        }
      }
,IllegalArgumentException.class,null);
    }
    kernal.context().cache().dynamicStopCache(DYNAMIC_CACHE_NAME).get();
    stopGrid(nodeCount() + 1);
    stopGrid(nodeCount());
  }
  finally {
    testAttribute=true;
  }
}
