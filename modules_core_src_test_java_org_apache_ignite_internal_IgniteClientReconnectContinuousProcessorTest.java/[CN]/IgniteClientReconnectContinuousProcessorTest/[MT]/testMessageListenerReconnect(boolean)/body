{
  Ignite client=grid(serverCount());
  assertTrue(client.cluster().localNode().isClient());
  Ignite srv=clientRouter(client);
  TestTcpDiscoverySpi srvSpi=spi(srv);
  final String topic="testTopic";
  MessageListener locLsnr=new MessageListener();
  UUID opId=client.message().remoteListen(topic,new RemoteMessageListener());
  client.message().localListen(topic,locLsnr);
  final CountDownLatch reconnectLatch=new CountDownLatch(1);
  client.events().localListen(new IgnitePredicate<Event>(){
    @Override public boolean apply(    Event evt){
      if (evt.type() == EVT_CLIENT_NODE_RECONNECTED) {
        info("Reconnected: " + evt);
        reconnectLatch.countDown();
      }
      return true;
    }
  }
,EVT_CLIENT_NODE_RECONNECTED);
  srvSpi.failNode(client.cluster().localNode().id(),null);
  waitReconnectEvent(reconnectLatch);
  locLsnr.latch=new CountDownLatch(1);
  latch=new CountDownLatch(2);
  client.message().send(topic,"msg1");
  assertTrue(locLsnr.latch.await(5000,MILLISECONDS));
  assertTrue(latch.await(5000,MILLISECONDS));
  locLsnr.latch=new CountDownLatch(1);
  latch=new CountDownLatch(2);
  srv.message().send(topic,"msg2");
  assertTrue(locLsnr.latch.await(5000,MILLISECONDS));
  assertTrue(latch.await(5000,MILLISECONDS));
  log.info("Stop listen, should not get remote messages anymore.");
  (stopFromClient ? client : srv).message().stopRemoteListen(opId);
  srv.message().send(topic,"msg3");
  locLsnr.latch=new CountDownLatch(1);
  latch=new CountDownLatch(1);
  assertTrue(locLsnr.latch.await(5000,MILLISECONDS));
  assertFalse(latch.await(3000,MILLISECONDS));
  log.info("New nodes should not register stopped listeners.");
  startGrid(serverCount() + 1);
  srv.message().send(topic,"msg4");
  locLsnr.latch=new CountDownLatch(1);
  latch=new CountDownLatch(1);
  assertTrue(locLsnr.latch.await(5000,MILLISECONDS));
  assertFalse(latch.await(3000,MILLISECONDS));
  stopGrid(serverCount() + 1);
}
