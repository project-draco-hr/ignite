{
switch (type) {
case BYTE:
    stream.writeByte((byte)val);
  break;
case SHORT:
stream.writeShort((short)val);
break;
case INT:
stream.writeInt((int)val);
break;
case LONG:
stream.writeLong((long)val);
break;
case FLOAT:
stream.writeFloat((float)val);
break;
case DOUBLE:
stream.writeDouble((double)val);
break;
case CHAR:
stream.writeChar((char)val);
break;
case BOOLEAN:
stream.writeBoolean((boolean)val);
break;
case BYTE_ARR:
stream.writeByteArray((byte[])val);
break;
case SHORT_ARR:
stream.writeShortArray((short[])val);
break;
case INT_ARR:
stream.writeIntArray((int[])val);
break;
case LONG_ARR:
stream.writeLongArray((long[])val);
break;
case FLOAT_ARR:
stream.writeFloatArray((float[])val);
break;
case DOUBLE_ARR:
stream.writeDoubleArray((double[])val);
break;
case CHAR_ARR:
stream.writeCharArray((char[])val);
break;
case BOOLEAN_ARR:
stream.writeBooleanArray((boolean[])val);
break;
case STRING:
stream.writeString((String)val);
break;
case BIT_SET:
stream.writeBitSet((BitSet)val);
break;
case UUID:
stream.writeUuid((UUID)val);
break;
case IGNITE_UUID:
stream.writeIgniteUuid((IgniteUuid)val);
break;
case MSG:
stream.writeMessage((MessageAdapter)val,this);
break;
default :
throw new IllegalStateException("Unknown field type: " + type);
}
return stream.lastFinished();
}
