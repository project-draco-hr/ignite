{
  Ignite ignite0=startGrid(0);
  TestCommunicationSpi spi0=(TestCommunicationSpi)ignite0.configuration().getCommunicationSpi();
  Ignite ignite1=startGrid(1);
  boolean lateAff=ignite1.configuration().isLateAffinityAssignment();
  int minorVer=lateAff ? 1 : 0;
  waitForTopologyUpdate(2,new AffinityTopologyVersion(2,minorVer));
  TestCommunicationSpi spi1=(TestCommunicationSpi)ignite1.configuration().getCommunicationSpi();
  assertEquals(0,spi0.partitionsSingleMessages());
  assertEquals(lateAff ? 2 : 1,spi0.partitionsFullMessages());
  assertEquals(lateAff ? 2 : 1,spi1.partitionsSingleMessages());
  assertEquals(0,spi1.partitionsFullMessages());
  spi0.reset();
  spi1.reset();
  client=true;
  log.info("Start client node1.");
  Ignite ignite2=startGrid(2);
  waitForTopologyUpdate(3,3);
  TestCommunicationSpi spi2=(TestCommunicationSpi)ignite2.configuration().getCommunicationSpi();
  assertEquals(0,spi0.partitionsSingleMessages());
  assertEquals(1,spi0.partitionsFullMessages());
  assertEquals(0,spi1.partitionsSingleMessages());
  assertEquals(0,spi1.partitionsFullMessages());
  assertEquals(1,spi2.partitionsSingleMessages());
  assertEquals(0,spi2.partitionsFullMessages());
  spi0.reset();
  spi1.reset();
  spi2.reset();
  log.info("Start client node2.");
  Ignite ignite3=startGrid(3);
  waitForTopologyUpdate(4,4);
  TestCommunicationSpi spi3=(TestCommunicationSpi)ignite3.configuration().getCommunicationSpi();
  assertEquals(0,spi0.partitionsSingleMessages());
  assertEquals(1,spi0.partitionsFullMessages());
  assertEquals(0,spi1.partitionsSingleMessages());
  assertEquals(0,spi1.partitionsFullMessages());
  assertEquals(0,spi2.partitionsSingleMessages());
  assertEquals(0,spi2.partitionsFullMessages());
  assertEquals(1,spi3.partitionsSingleMessages());
  assertEquals(0,spi3.partitionsFullMessages());
  spi0.reset();
  spi1.reset();
  spi2.reset();
  spi3.reset();
  log.info("Start one more server node.");
  client=false;
  Ignite ignite4=startGrid(4);
  waitForTopologyUpdate(5,new AffinityTopologyVersion(5,lateAff ? 1 : 0));
  TestCommunicationSpi spi4=(TestCommunicationSpi)ignite4.configuration().getCommunicationSpi();
  assertEquals(0,spi0.partitionsSingleMessages());
  assertEquals(lateAff ? 8 : 4,spi0.partitionsFullMessages());
  assertEquals(lateAff ? 2 : 1,spi1.partitionsSingleMessages());
  assertEquals(0,spi1.partitionsFullMessages());
  assertEquals(lateAff ? 2 : 1,spi2.partitionsSingleMessages());
  assertEquals(0,spi2.partitionsFullMessages());
  assertEquals(lateAff ? 2 : 1,spi3.partitionsSingleMessages());
  assertEquals(0,spi3.partitionsFullMessages());
  assertEquals(lateAff ? 2 : 1,spi4.partitionsSingleMessages());
  assertEquals(0,spi4.partitionsFullMessages());
  spi0.reset();
  spi1.reset();
  spi2.reset();
  spi3.reset();
  log.info("Stop server node.");
  ignite4.close();
  if (lateAff) {
    boolean exchangeAfterRebalance=fairAffinity;
    waitForTopologyUpdate(4,exchangeAfterRebalance ? new AffinityTopologyVersion(6,1) : new AffinityTopologyVersion(6,0));
    assertEquals(0,spi0.partitionsSingleMessages());
    assertEquals(exchangeAfterRebalance ? 3 : 0,spi0.partitionsFullMessages());
    assertEquals(exchangeAfterRebalance ? 2 : 1,spi1.partitionsSingleMessages());
    assertEquals(0,spi1.partitionsFullMessages());
    assertEquals(exchangeAfterRebalance ? 1 : 0,spi2.partitionsSingleMessages());
    assertEquals(0,spi2.partitionsFullMessages());
    assertEquals(exchangeAfterRebalance ? 1 : 0,spi3.partitionsSingleMessages());
    assertEquals(0,spi3.partitionsFullMessages());
  }
 else {
    waitForTopologyUpdate(4,6);
    assertEquals(0,spi0.partitionsSingleMessages());
    assertEquals(3,spi0.partitionsFullMessages());
    assertEquals(1,spi1.partitionsSingleMessages());
    assertEquals(0,spi1.partitionsFullMessages());
    assertEquals(1,spi2.partitionsSingleMessages());
    assertEquals(0,spi2.partitionsFullMessages());
    assertEquals(1,spi3.partitionsSingleMessages());
    assertEquals(0,spi3.partitionsFullMessages());
  }
  spi0.reset();
  spi1.reset();
  spi2.reset();
  log.info("Stop client node2.");
  ignite3.close();
  waitForTopologyUpdate(3,7);
  assertEquals(0,spi0.partitionsSingleMessages());
  assertEquals(0,spi0.partitionsFullMessages());
  assertEquals(0,spi1.partitionsSingleMessages());
  assertEquals(0,spi1.partitionsFullMessages());
  assertEquals(0,spi2.partitionsSingleMessages());
  assertEquals(0,spi2.partitionsFullMessages());
  spi0.reset();
  spi1.reset();
  log.info("Stop client node1.");
  ignite2.close();
  waitForTopologyUpdate(2,8);
  assertEquals(0,spi0.partitionsSingleMessages());
  assertEquals(0,spi0.partitionsFullMessages());
  assertEquals(0,spi1.partitionsSingleMessages());
  assertEquals(0,spi1.partitionsFullMessages());
  log.info("Stop server node.");
  ignite1.close();
  waitForTopologyUpdate(1,9);
  assertEquals(0,spi0.partitionsSingleMessages());
  assertEquals(0,spi0.partitionsFullMessages());
}
