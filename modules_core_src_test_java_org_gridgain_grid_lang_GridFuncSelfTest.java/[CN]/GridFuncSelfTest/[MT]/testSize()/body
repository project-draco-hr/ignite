{
  Collection<String> c=F.asList("v1","v2","v3");
  assertEquals(3,F.size(c));
  assertEquals(0,F.size(c,F.<String>alwaysFalse()));
  assertEquals(3,F.size(c,F.<String>alwaysTrue()));
  P1<String> pred=new P1<String>(){
    @Override public boolean apply(    String e){
      return e.contains("2");
    }
  }
;
  P1<String> nullPred=null;
  assertEquals(3,F.size(c,nullPred));
  assertEquals(1,F.size(c,pred));
  assertEquals(1,F.size(c,pred,null));
  assertEquals(3,F.size(c,(P1<String>[])null));
  assertEquals(3,F.size(c,new P1[0]));
  assertEquals(3,F.size(c.iterator()));
  assertEquals(0,F.size(c.iterator(),F.<String>alwaysFalse()));
  assertEquals(3,F.size(c.iterator(),F.<String>alwaysTrue()));
  assertEquals(1,F.size(c.iterator(),pred));
  assertEquals(1,F.size(c.iterator(),pred,null));
  assertEquals(3,F.size(c.iterator(),nullPred));
  assertEquals(3,F.size(c.iterator(),(P1<String>[])null));
  assertEquals(3,F.size(c.iterator(),new P1[0]));
}
