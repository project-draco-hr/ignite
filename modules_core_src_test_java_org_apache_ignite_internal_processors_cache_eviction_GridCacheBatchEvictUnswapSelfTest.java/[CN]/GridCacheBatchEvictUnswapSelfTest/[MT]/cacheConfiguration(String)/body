{
  CacheConfiguration cacheCfg=super.cacheConfiguration(gridName);
  cacheCfg.setCacheMode(CacheMode.PARTITIONED);
  CacheStore store=new CacheStoreAdapter<Long,String>(){
    @Nullable @Override public String load(    Long key){
      return null;
    }
    @Override public void loadCache(    final IgniteBiInClosure<Long,String> c,    @Nullable Object... args){
      for (int i=0; i < KEYS_CNT; i++)       c.apply((long)i,String.valueOf(i));
    }
    @Override public void write(    javax.cache.Cache.Entry<? extends Long,? extends String> val){
    }
    @Override public void delete(    Object key){
    }
  }
;
  cacheCfg.setCacheStoreFactory(singletonFactory(store));
  cacheCfg.setReadThrough(true);
  cacheCfg.setWriteThrough(true);
  cacheCfg.setLoadPreviousValue(true);
  cacheCfg.setEvictionPolicy(new CacheFifoEvictionPolicy(EVICT_PLC_SIZE));
  cacheCfg.setSwapEnabled(true);
  cacheCfg.setEvictSynchronized(false);
  cacheCfg.setNearConfiguration(null);
  return cacheCfg;
}
