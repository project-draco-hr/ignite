{
  info(">>> Test grid concurrent linked hash map iterator...");
  final ConcurrentLinkedHashMap<Integer,String> linkedMap=new ConcurrentLinkedHashMap<>();
  Collection<Integer> original=new HashSet<>();
  final int keyCnt=10000;
  for (int i=0; i < keyCnt; i++) {
    linkedMap.put(i,"value" + i);
    original.add(i);
  }
  final AtomicBoolean run=new AtomicBoolean(true);
  long start=System.currentTimeMillis();
  IgniteInternalFuture<?> fut=multithreadedAsync(new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      Random rnd=new Random();
      while (run.get()) {
        int key=rnd.nextInt(keyCnt);
        linkedMap.get(key);
        linkedMap.remove(key);
        linkedMap.put(key,"value" + key);
      }
      info(">>> Exiting updater thread");
      return null;
    }
  }
,10,"updater");
  int iterCnt=10000;
  for (int i=0; i < iterCnt; i++) {
    Iterator<Integer> it=linkedMap.keySet().iterator();
    Collection<Integer> keys=new HashSet<>();
    while (it.hasNext()) {
      int key=it.next();
      assertFalse("Duplicate key: " + key,keys.contains(key));
      keys.add(key);
    }
    if (i % 500 == 0)     info(">>> Run " + i + " iterations in "+ (System.currentTimeMillis() - start)+ "ms");
  }
  info(">>> Stopping updater threads");
  run.set(false);
  fut.get();
  info(">>> Updater threads stopped, will verify integrity of result map");
  Set<Integer> keys=linkedMap.keySet();
  original.removeAll(keys);
  assertTrue("Keys must be in map: " + original,original.isEmpty());
  info(">>> put get remove test complete [duration = " + (System.currentTimeMillis() - start) + ']');
}
