{
  info(">>> Test grid concurrent linked hash map...");
  int concurLvl=64;
  final int maxSize=concurLvl * 30;
  int diff=(int)(maxSize * 0.1);
  ConcurrentLinkedHashMap<Integer,String> linkedMap=new ConcurrentLinkedHashMap<>(32,0.75f,concurLvl,maxSize,PER_SEGMENT_Q_OPTIMIZED_RMV);
  int keyCnt=1000000;
  Map<String,LinkedList<Integer>> map=putMultiThreaded(linkedMap,10,keyCnt,maxSize * 10);
  assertTrue("Invalid map size: " + linkedMap.size(),U.safeAbs(maxSize - linkedMap.size()) <= diff);
  assertTrue("Invalid map sizex: " + linkedMap.sizex(),U.safeAbs(maxSize - linkedMap.sizex()) <= diff);
  LinkedList<Integer> keys=new LinkedList<>(linkedMap.keySet());
  while (!keys.isEmpty()) {
    boolean found=false;
    int key=keys.removeLast();
    for (    LinkedList<Integer> threadKeys : map.values()) {
      if (threadKeys.contains(key)) {
        found=true;
        break;
      }
    }
    assertTrue("Key was not found in any thread: " + key,found);
  }
  int min=Integer.MAX_VALUE;
  int max=0;
  int actKeyCnt=0;
  for (int key=0; key < keyCnt; key++) {
    if (linkedMap.get(key) != null) {
      min=Math.min(min,key);
      max=Math.max(max,key);
      actKeyCnt++;
    }
  }
  info("Max: " + max);
  info("Min: " + min);
  assertTrue("Invalid keys count: " + actKeyCnt,U.safeAbs(maxSize - actKeyCnt) <= diff);
}
