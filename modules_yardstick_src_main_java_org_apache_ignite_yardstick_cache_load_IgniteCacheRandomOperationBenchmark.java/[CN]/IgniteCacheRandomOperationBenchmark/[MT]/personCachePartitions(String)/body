{
  Affinity<Object> affinity=ignite().affinity(cacheName);
  List<Integer> rndParts=new ArrayList<>(10);
  if (affinity.partitions() <= SCAN_QUERY_PARTITION_AMOUNT)   for (int i=0; i < affinity.partitions(); i++)   rndParts.add(i);
 else {
    for (int i=0; i < SCAN_QUERY_PARTITION_AMOUNT; i++) {
      int partNum;
      do       partNum=nextRandom(affinity.partitions());
 while (rndParts.contains(partNum));
      rndParts.add(partNum);
    }
  }
  Collections.sort(rndParts);
  Map<Integer,ClusterNode> partPerNodes=affinity.mapPartitionsToNodes(rndParts);
  Map<UUID,List<Integer>> nodesToPart=new HashMap<>();
  for (  Map.Entry<Integer,ClusterNode> entry : partPerNodes.entrySet()) {
    List<Integer> nodeParts=nodesToPart.get(entry.getValue().id());
    if (nodeParts == null) {
      nodeParts=new ArrayList<>();
      nodesToPart.put(entry.getValue().id(),nodeParts);
    }
    nodeParts.add(entry.getKey());
  }
  return nodesToPart;
}
