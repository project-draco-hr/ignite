{
  ProcessStartResult srvStartRes=startSharedMemoryTestServer();
  Collection<Integer> shmemIds=new ArrayList<>();
  GridIpcSharedMemoryClientEndpoint client=null;
  int interactionsCntBeforeSrvKilling=5;
  int i=1;
  try {
    client=(GridIpcSharedMemoryClientEndpoint)GridIpcEndpointFactory.connectEndpoint("shmem:" + GridIpcSharedMemoryServerEndpoint.DFLT_IPC_PORT,log);
    OutputStream os=client.outputStream();
    shmemIds.add(client.inSpace().sharedMemoryId());
    shmemIds.add(client.outSpace().sharedMemoryId());
    for (; i < interactionsCntBeforeSrvKilling * 2; i++) {
      info("Write: 123");
      os.write(123);
      Thread.sleep(RW_SLEEP_TIMEOUT);
      if (i == interactionsCntBeforeSrvKilling) {
        info("Going to kill server.");
        srvStartRes.proc().kill();
        info("Write 512k array to hang write procedure.");
        os.write(new byte[512 * 1024]);
      }
    }
    fail("Client should throw IOException upon server killing.");
  }
 catch (  IOException e) {
    assertTrue(i >= interactionsCntBeforeSrvKilling);
    assertTrue(X.hasCause(e,GridException.class));
    assertTrue(X.cause(e,GridException.class).getMessage().contains("Shared memory segment has been closed"));
  }
 finally {
    U.closeQuiet(client);
  }
  srvStartRes.isKilledLatch().await();
  return shmemIds;
}
