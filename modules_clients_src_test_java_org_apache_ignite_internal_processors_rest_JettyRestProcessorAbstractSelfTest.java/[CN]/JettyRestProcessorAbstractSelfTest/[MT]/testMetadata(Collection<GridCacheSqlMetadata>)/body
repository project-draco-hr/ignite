{
  Map<String,String> params=F.asMap("cmd",GridRestCommand.CACHE_METADATA.key());
  String cacheNameArg=F.first(metas).cacheName();
  if (cacheNameArg != null)   params.put("cacheName",cacheNameArg);
  String ret=content(params);
  assertNotNull(ret);
  assertTrue(!ret.isEmpty());
  info("Cache metadata result: " + ret);
  jsonEquals(ret,pattern("\\[.+\\]",true));
  Collection<Map> results=(Collection)JSONObject.fromObject(ret).get("response");
  assertEquals(metas.size(),results.size());
  assertEquals(cacheNameArg,F.first(results).get("cacheName"));
  for (  Map res : results) {
    final Object cacheName=res.get("cacheName");
    GridCacheSqlMetadata meta=F.find(metas,null,new P1<GridCacheSqlMetadata>(){
      @Override public boolean apply(      GridCacheSqlMetadata meta){
        return F.eq(meta.cacheName(),cacheName);
      }
    }
);
    assertNotNull("REST return metadata for unexpected cache: " + cacheName,meta);
    Collection types=(Collection)res.get("types");
    assertNotNull(types);
    assertEqualsCollections(meta.types(),types);
    Map keyClasses=(Map)res.get("keyClasses");
    assertNotNull(keyClasses);
    assertTrue(meta.keyClasses().equals(keyClasses));
    Map valClasses=(Map)res.get("valClasses");
    assertNotNull(valClasses);
    assertTrue(meta.valClasses().equals(valClasses));
    Map fields=(Map)res.get("fields");
    assertNotNull(fields);
    assertTrue(meta.fields().equals(fields));
    Map indexesByType=(Map)res.get("indexes");
    assertNotNull(indexesByType);
    assertEquals(meta.indexes().size(),indexesByType.size());
    for (    Map.Entry<String,Collection<GridCacheSqlIndexMetadata>> metaIndexes : meta.indexes().entrySet()) {
      Collection<Map> indexes=(Collection<Map>)indexesByType.get(metaIndexes.getKey());
      assertNotNull(indexes);
      assertEquals(metaIndexes.getValue().size(),indexes.size());
      for (      final GridCacheSqlIndexMetadata metaIdx : metaIndexes.getValue()) {
        Map idx=F.find(indexes,null,new P1<Map>(){
          @Override public boolean apply(          Map map){
            return metaIdx.name().equals(map.get("name"));
          }
        }
);
        assertNotNull(idx);
        assertEqualsCollections(metaIdx.fields(),(Collection)idx.get("fields"));
        assertEqualsCollections(metaIdx.descendings(),(Collection)idx.get("descendings"));
        assertEquals(metaIdx.unique(),idx.get("unique"));
      }
    }
  }
}
