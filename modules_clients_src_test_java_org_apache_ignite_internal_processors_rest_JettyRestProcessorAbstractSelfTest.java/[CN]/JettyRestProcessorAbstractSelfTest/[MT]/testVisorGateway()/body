{
  ClusterNode locNode=grid(1).localNode();
  final IgniteUuid cid=grid(1).context().cache().internalCache("person").context().dynamicDeploymentId();
  String ret=content(new VisorGatewayArgument(VisorCacheConfigurationCollectorTask.class).forNode(locNode).collection(IgniteUuid.class,cid));
  info("VisorCacheConfigurationCollectorTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorCacheNodesTask.class).forNode(locNode).argument("person"));
  info("VisorCacheNodesTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorCacheLoadTask.class).forNode(locNode).tuple3(Set.class,Long.class,Object[].class,"person",0,"null"));
  info("VisorCacheLoadTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorCacheSwapBackupsTask.class).forNode(locNode).set(String.class,"person"));
  info("VisorCacheSwapBackupsTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorCacheRebalanceTask.class).forNode(locNode).set(String.class,"person"));
  info("VisorCacheRebalanceTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorCacheMetadataTask.class).forNode(locNode).argument("person"));
  info("VisorCacheMetadataTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorCacheResetMetricsTask.class).forNode(locNode).argument("person"));
  info("VisorCacheResetMetricsTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorIgfsSamplingStateTask.class).forNode(locNode).pair(String.class,Boolean.class,"igfs",false));
  info("VisorIgfsSamplingStateTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorIgfsProfilerClearTask.class).forNode(locNode).argument("igfs"));
  info("VisorIgfsProfilerClearTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorIgfsProfilerTask.class).forNode(locNode).argument("igfs"));
  info("VisorIgfsProfilerTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorIgfsFormatTask.class).forNode(locNode).argument("igfs"));
  info("VisorIgfsFormatTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorIgfsResetMetricsTask.class).forNode(locNode).set(String.class,"igfs"));
  info("VisorIgfsResetMetricsTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorThreadDumpTask.class).forNode(locNode));
  info("VisorThreadDumpTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorLatestTextFilesTask.class).forNode(locNode).pair(String.class,String.class,"",""));
  info("VisorLatestTextFilesTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorLatestVersionTask.class).forNode(locNode));
  info("VisorLatestVersionTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorFileBlockTask.class).forNode(locNode).argument(VisorFileBlockTask.VisorFileBlockArg.class,"",0L,1,0L));
  info("VisorFileBlockTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorNodePingTask.class).forNode(locNode).argument(UUID.class,locNode.id()));
  info("VisorNodePingTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorNodeConfigurationCollectorTask.class).forNode(locNode));
  info("VisorNodeConfigurationCollectorTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorComputeResetMetricsTask.class).forNode(locNode));
  info("VisorComputeResetMetricsTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorQueryTask.class).forNode(locNode).argument(VisorQueryArg.class,"person",URLEncoder.encode("select * from Person",CHARSET),false,1));
  info("VisorQueryTask result: " + ret);
  JsonNode res=jsonTaskResult(ret);
  final String qryId=res.get("value").get("queryId").asText();
  ret=content(new VisorGatewayArgument(VisorQueryNextPageTask.class).forNode(locNode).pair(String.class,Integer.class,qryId,1));
  info("VisorQueryNextPageTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorQueryCleanupTask.class).map(UUID.class,Set.class,F.asMap(locNode.id(),qryId)));
  info("VisorQueryCleanupTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorResolveHostNameTask.class).forNode(locNode));
  info("VisorResolveHostNameTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorComputeCancelSessionsTask.class).map(UUID.class,Set.class,new HashMap()));
  info("VisorComputeCancelSessionsTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorCacheMetricsCollectorTask.class).pair(Boolean.class,Set.class,false,"person"));
  info("VisorCacheMetricsCollectorTask result: " + ret);
  ret=content(new VisorGatewayArgument(VisorCacheMetricsCollectorTask.class).forNodes(grid(1).cluster().nodes()).pair(Boolean.class,Set.class,false,"person"));
  info("VisorCacheMetricsCollectorTask (with nodes) result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorLogSearchTask.class).argument(VisorLogSearchTask.VisorLogSearchArg.class,".",".","abrakodabra.txt",1));
  info("VisorLogSearchTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorNodeGcTask.class));
  info("VisorNodeGcTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorAckTask.class).argument("MSG"));
  info("VisorAckTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorNodeEventsCollectorTask.class).argument(VisorNodeEventsCollectorTask.VisorNodeEventsCollectorTaskArg.class,"null","null","null","taskName","null"));
  info("VisorNodeEventsCollectorTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorNodeDataCollectorTask.class).argument(VisorNodeDataCollectorTaskArg.class,false,"CONSOLE_" + UUID.randomUUID(),UUID.randomUUID(),10,false));
  info("VisorNodeDataCollectorTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorComputeToggleMonitoringTask.class).pair(String.class,Boolean.class,UUID.randomUUID(),false));
  info("VisorComputeToggleMonitoringTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorNodeSuppressedErrorsTask.class).map(UUID.class,Long.class,new HashMap()));
  info("VisorNodeSuppressedErrorsTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorCacheClearTask.class).forNode(locNode).argument("person"));
  info("VisorCacheClearTask result: " + ret);
  jsonTaskResult(ret);
  final String START_CACHE="<beans xmlns=\"http://www.springframework.org/schema/beans\"\n" + "    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n" + "    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n"+ "        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\">\n"+ "    <bean id=\"cacheConfiguration\" class=\"org.apache.ignite.configuration.CacheConfiguration\">\n"+ "        <property name=\"cacheMode\" value=\"PARTITIONED\"/>\n"+ "        <property name=\"name\" value=\"c\"/>\n"+ "   </bean>\n"+ "</beans>";
  ret=content(new VisorGatewayArgument(VisorCacheStartTask.class).argument(VisorCacheStartTask.VisorCacheStartArg.class,false,"person2",URLEncoder.encode(START_CACHE,CHARSET)));
  info("VisorCacheStartTask result: " + ret);
  jsonTaskResult(ret);
  ret=content(new VisorGatewayArgument(VisorCacheStopTask.class).forNode(locNode).argument(String.class,"c"));
  info("VisorCacheStopTask result: " + ret);
  jsonTaskResult(ret);
}
