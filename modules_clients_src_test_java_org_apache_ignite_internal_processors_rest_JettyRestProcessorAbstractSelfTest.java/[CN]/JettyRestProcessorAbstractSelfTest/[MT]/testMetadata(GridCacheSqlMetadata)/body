{
  Map<String,String> params=F.asMap("cmd",GridRestCommand.CACHE_METADATA.key());
  if (meta.cacheName() != null)   params.put("cacheName",meta.cacheName());
  String ret=content(params);
  assertNotNull(ret);
  assertTrue(!ret.isEmpty());
  info("Cache metadata result: " + ret);
  jsonEquals(ret,pattern("\\{.+\\}",true));
  Map res=(Map)JSONObject.fromObject(ret).get("response");
  Collection types=(Collection)res.get("types");
  assertNotNull(types);
  assertEqualsCollections(meta.types(),types);
  Map keyClasses=(Map)res.get("keyClasses");
  assertNotNull(keyClasses);
  assertTrue(meta.keyClasses().equals(keyClasses));
  Map valClasses=(Map)res.get("valClasses");
  assertNotNull(valClasses);
  assertTrue(meta.valClasses().equals(valClasses));
  Map fields=(Map)res.get("fields");
  assertNotNull(fields);
  assertTrue(meta.fields().equals(fields));
  Map indexesByType=(Map)res.get("indexes");
  assertNotNull(indexesByType);
  assertEquals(meta.indexes().size(),indexesByType.size());
  for (  Map.Entry<String,Collection<GridCacheSqlIndexMetadata>> metaIndexes : meta.indexes().entrySet()) {
    Collection<Map> indexes=(Collection<Map>)indexesByType.get(metaIndexes.getKey());
    assertNotNull(indexes);
    assertEquals(metaIndexes.getValue().size(),indexes.size());
    for (    final GridCacheSqlIndexMetadata metaIdx : metaIndexes.getValue()) {
      Map idx=F.find(indexes,null,new IgnitePredicate<Map>(){
        @Override public boolean apply(        Map map){
          return metaIdx.name().equals(map.get("name"));
        }
      }
);
      assertNotNull(idx);
      assertEqualsCollections(metaIdx.fields(),(Collection)idx.get("fields"));
      assertEqualsCollections(metaIdx.descendings(),(Collection)idx.get("descendings"));
      assertEquals(metaIdx.unique(),idx.get("unique"));
    }
  }
}
