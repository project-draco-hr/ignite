{
  String ret=content(F.asMap("cmd",GridRestCommand.TOPOLOGY.key(),"attr","false","mtr","false"));
  info("Topology command result: " + ret);
  JsonNode res=jsonResponse(ret);
  assertEquals(GRID_CNT,res.size());
  for (  JsonNode node : res) {
    assertTrue(node.get("attributes").isNull());
    assertTrue(node.get("metrics").isNull());
    JsonNode caches=node.get("caches");
    assertFalse(caches.isNull());
    Collection<IgniteCacheProxy<?,?>> publicCaches=grid(0).context().cache().publicCaches();
    assertEquals(publicCaches.size(),caches.size());
    for (    JsonNode cache : caches) {
      String cacheName0=cache.get("name").asText();
      final String cacheName=cacheName0.equals("") ? null : cacheName0;
      IgniteCacheProxy<?,?> publicCache=F.find(publicCaches,null,new P1<IgniteCacheProxy<?,?>>(){
        @Override public boolean apply(        IgniteCacheProxy<?,?> c){
          return F.eq(c.getName(),cacheName);
        }
      }
);
      assertNotNull(publicCache);
      CacheMode cacheMode=CacheMode.valueOf(cache.get("mode").asText());
      assertEquals(publicCache.getConfiguration(CacheConfiguration.class).getCacheMode(),cacheMode);
    }
  }
}
