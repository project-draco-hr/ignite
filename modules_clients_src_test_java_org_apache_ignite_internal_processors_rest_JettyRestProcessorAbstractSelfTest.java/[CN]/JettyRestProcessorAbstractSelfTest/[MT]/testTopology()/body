{
  String ret=content(F.asMap("cmd",GridRestCommand.TOPOLOGY.key(),"attr","false","mtr","false"));
  assertNotNull(ret);
  assertTrue(!ret.isEmpty());
  info("Topology command result: " + ret);
  jsonEquals(ret,pattern("\\[\\{.+\\}\\]",true));
  JSONObject json=JSONObject.fromObject(ret);
  Collection<Map> nodes=(Collection)json.get("response");
  assertEquals(GRID_CNT,nodes.size());
  for (  Map node : nodes) {
    assertEquals(JSONNull.getInstance(),node.get("attributes"));
    assertEquals(JSONNull.getInstance(),node.get("metrics"));
    Collection<Map> caches=(Collection)node.get("caches");
    Collection<IgniteCacheProxy<?,?>> publicCaches=grid(0).context().cache().publicCaches();
    assertNotNull(caches);
    assertEquals(publicCaches.size(),caches.size());
    for (    Map cache : caches) {
      final String cacheName=cache.get("name").equals("") ? null : (String)cache.get("name");
      IgniteCacheProxy<?,?> publicCache=F.find(publicCaches,null,new P1<IgniteCacheProxy<?,?>>(){
        @Override public boolean apply(        IgniteCacheProxy<?,?> c){
          return F.eq(c.getName(),cacheName);
        }
      }
);
      assertNotNull(publicCache);
      CacheMode cacheMode=CacheMode.valueOf((String)cache.get("mode"));
      assertEquals(publicCache.getConfiguration(CacheConfiguration.class).getCacheMode(),cacheMode);
    }
  }
}
