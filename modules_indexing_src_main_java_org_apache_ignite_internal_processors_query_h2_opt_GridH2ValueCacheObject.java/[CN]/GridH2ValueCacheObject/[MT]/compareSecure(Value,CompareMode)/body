{
  Object o1=getObject();
  Object o2=v.getObject();
  boolean o1Comparable=o1 instanceof Comparable;
  boolean o2Comparable=o2 instanceof Comparable;
  if (o1Comparable && o2Comparable && Utils.haveCommonComparableSuperclass(o1.getClass(),o2.getClass())) {
    Comparable<Object> c1=(Comparable<Object>)o1;
    return c1.compareTo(o2);
  }
  if (o1 instanceof BinaryEnumObjectImpl && o2 instanceof Enum) {
    final BinaryEnumObjectImpl bo1=(BinaryEnumObjectImpl)o1;
    if (bo1.isTypeEquals(o2.getClass()))     return Integer.compare(bo1.enumOrdinal(),((Enum)o2).ordinal());
  }
  if (o1.getClass() != o2.getClass()) {
    if (o1Comparable != o2Comparable)     return o1Comparable ? -1 : 1;
    return o1.getClass().getName().compareTo(o2.getClass().getName());
  }
  int h1=hashCode();
  int h2=v.hashCode();
  if (h1 == h2) {
    if (o1.equals(o2))     return 0;
    return Utils.compareNotNullSigned(getBytesNoCopy(),v.getBytesNoCopy());
  }
  return h1 > h2 ? 1 : -1;
}
