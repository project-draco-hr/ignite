{
  final AtomicInteger lockEvtCnt=new AtomicInteger();
  IgnitePredicate<Event> lsnr=new IgnitePredicate<Event>(){
    @Override public boolean apply(    Event evt){
      lockEvtCnt.incrementAndGet();
      return true;
    }
  }
;
  try {
    grid(0).events().localListen(lsnr,EVT_CACHE_OBJECT_LOCKED,EVT_CACHE_OBJECT_UNLOCKED);
    GridCacheAdapter<String,Integer> cache=((IgniteKernal)grid(0)).internalCache();
    try (Transaction tx=transactions().txStart(PESSIMISTIC,REPEATABLE_READ)){
      int key=0;
      for (int i=0; i < 1000; i++) {
        if (grid(0).affinity(null).mapKeyToNode("key" + i).id().equals(grid(0).localNode().id())) {
          key=i;
          break;
        }
      }
      cache.get("key" + key);
      for (int i=key + 1; i < 1000; i++) {
        if (grid(0).affinity(null).mapKeyToNode("key" + i).id().equals(grid(0).localNode().id())) {
          key=i;
          break;
        }
      }
      cache.getAllOutTx(F.asList("key" + key));
    }
     assertTrue(GridTestUtils.waitForCondition(new PA(){
      @Override public boolean apply(){
        info("Lock event count: " + lockEvtCnt.get());
        return lockEvtCnt.get() == (nearEnabled() ? 4 : 2);
      }
    }
,15000));
  }
  finally {
    grid(0).events().stopLocalListen(lsnr,EVT_CACHE_OBJECT_LOCKED,EVT_CACHE_OBJECT_UNLOCKED);
  }
}
