{
  IgniteCache<Integer,TestMutableObj> mutObjCache=ignite(0).jcache(null);
  IgniteCache<Integer,TestImmutableObj> immObjCache=ignite(0).jcache(null);
  CacheConfiguration cfg=mutObjCache.getConfiguration(CacheConfiguration.class);
  boolean cpyOnGet=cfg.isCopyOnGet();
  CacheAffinity<Integer> aff=ignite(0).affinity(null);
  boolean near=cfg.getDistributionMode() == CacheDistributionMode.NEAR_PARTITIONED || cfg.getDistributionMode() == CacheDistributionMode.NEAR_ONLY;
  ClusterNode locNode=ignite(0).cluster().localNode();
  for (int i=0; i < 100; i++) {
    boolean primary=aff.isPrimary(locNode,i);
    boolean backup=aff.isBackup(locNode,i);
    boolean loc=near || primary || backup;
    TestMutableObj putObj0=new TestMutableObj(i);
    mutObjCache.put(i,putObj0);
    TestMutableObj getObj0=mutObjCache.get(i);
    assertEquals(i,getObj0.val);
    if (!cpyOnGet && loc)     assertSame(putObj0,getObj0);
 else     assertNotSame(putObj0,getObj0);
    TestImmutableObj putObj1=new TestImmutableObj(i);
    immObjCache.put(i,putObj1);
    TestImmutableObj getObj1=immObjCache.get(i);
    assertEquals(i,getObj1.val);
    if (loc && !offHeapValues())     assertSame("Same expected [key=" + i + ", primary="+ primary+ ", backup="+ backup+ ']',putObj1,getObj1);
 else     assertNotSame("Not same expected [key=" + i + ", primary="+ primary+ ", backup="+ backup+ ']',putObj1,getObj1);
  }
}
