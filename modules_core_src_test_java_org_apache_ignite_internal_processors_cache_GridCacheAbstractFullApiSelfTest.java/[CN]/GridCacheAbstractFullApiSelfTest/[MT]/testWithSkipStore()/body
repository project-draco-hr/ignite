{
  IgniteCache<String,Integer> cache=grid(0).cache(null);
  IgniteCache<String,Integer> cacheSkipStore=cache.withSkipStore();
  List<String> keys=primaryKeysForCache(cache,10);
  for (int i=0; i < keys.size(); ++i)   putToStore(keys.get(i),i);
  assertFalse(cacheSkipStore.iterator().hasNext());
  for (  String key : keys) {
    assertNull(cacheSkipStore.get(key));
    assertNotNull(cache.get(key));
  }
  for (  String key : keys) {
    cacheSkipStore.remove(key);
    assertNotNull(cache.get(key));
  }
  cache.removeAll(new HashSet<>(keys));
  for (  String key : keys)   assertNull(cache.get(key));
  final int KEYS=500;
  keys=new ArrayList<>(KEYS);
  for (int i=0; i < KEYS; i++)   keys.add("key_" + i);
  for (int i=0; i < keys.size(); ++i)   cache.put(keys.get(i),i);
  for (int i=0; i < keys.size(); ++i) {
    String key=keys.get(i);
    assertNotNull(cacheSkipStore.get(key));
    assertNotNull(cache.get(key));
    assertEquals(i,map.get(key));
  }
  for (int i=0; i < keys.size(); ++i) {
    String key=keys.get(i);
    Integer val1=-1;
    cacheSkipStore.put(key,val1);
    assertEquals(i,map.get(key));
    assertEquals(val1,cacheSkipStore.get(key));
    Integer val2=-2;
    assertEquals(val1,cacheSkipStore.invoke(key,new SetValueProcessor(val2)));
    assertEquals(i,map.get(key));
    assertEquals(val2,cacheSkipStore.get(key));
  }
  for (  String key : keys) {
    cacheSkipStore.remove(key);
    assertNull(cacheSkipStore.get(key));
    assertNotNull(cache.get(key));
    assertTrue(map.containsKey(key));
  }
  for (  String key : keys) {
    cache.remove(key);
    assertNull(cacheSkipStore.get(key));
    assertNull(cache.get(key));
    assertFalse(map.containsKey(key));
    map.put(key,0);
    Integer val=-1;
    assertNull(cacheSkipStore.invoke(key,new SetValueProcessor(val)));
    assertEquals(0,map.get(key));
    assertEquals(val,cacheSkipStore.get(key));
    cache.remove(key);
    map.put(key,0);
    assertTrue(cacheSkipStore.putIfAbsent(key,val));
    assertEquals(val,cacheSkipStore.get(key));
    assertEquals(0,map.get(key));
    cache.remove(key);
    map.put(key,0);
    assertNull(cacheSkipStore.getAndPut(key,val));
    assertEquals(val,cacheSkipStore.get(key));
    assertEquals(0,map.get(key));
    cache.remove(key);
  }
  assertFalse(cacheSkipStore.iterator().hasNext());
  assertTrue(map.size() == 0);
  assertTrue(cache.size(CachePeekMode.ALL) == 0);
  Map<String,Integer> data=new LinkedHashMap<>();
  for (int i=0; i < keys.size(); i++)   data.put(keys.get(i),i);
  cacheSkipStore.putAll(data);
  for (  String key : keys) {
    assertNotNull(cacheSkipStore.get(key));
    assertNotNull(cache.get(key));
    assertFalse(map.containsKey(key));
  }
  cache.putAll(data);
  for (  String key : keys) {
    assertNotNull(cacheSkipStore.get(key));
    assertNotNull(cache.get(key));
    assertTrue(map.containsKey(key));
  }
  cacheSkipStore.removeAll(data.keySet());
  for (  String key : keys) {
    assertNull(cacheSkipStore.get(key));
    assertNotNull(cache.get(key));
    assertTrue(map.containsKey(key));
  }
  cacheSkipStore.putAll(data);
  for (  String key : keys) {
    assertNotNull(cacheSkipStore.get(key));
    assertNotNull(cache.get(key));
    assertTrue(map.containsKey(key));
  }
  cacheSkipStore.removeAll(data.keySet());
  for (  String key : keys) {
    assertNull(cacheSkipStore.get(key));
    assertNotNull(cache.get(key));
    assertTrue(map.containsKey(key));
  }
  cache.removeAll(data.keySet());
  for (  String key : keys) {
    assertNull(cacheSkipStore.get(key));
    assertNull(cache.get(key));
    assertFalse(map.containsKey(key));
  }
  assertTrue(map.size() == 0);
  String newKey="New key";
  assertFalse(map.containsKey(newKey));
  cacheSkipStore.put(newKey,1);
  assertFalse(map.containsKey(newKey));
  cache.put(newKey,1);
  assertTrue(map.containsKey(newKey));
  Iterator<Cache.Entry<String,Integer>> it=cacheSkipStore.iterator();
  assertTrue(it.hasNext());
  Cache.Entry<String,Integer> entry=it.next();
  String rmvKey=entry.getKey();
  assertTrue(map.containsKey(rmvKey));
  it.remove();
  assertNull(cacheSkipStore.get(rmvKey));
  assertTrue(map.containsKey(rmvKey));
  assertTrue(cache.size(CachePeekMode.ALL) == 0);
  assertTrue(cacheSkipStore.size(CachePeekMode.ALL) == 0);
  cache.remove(rmvKey);
  assertTrue(map.size() == 0);
}
