{
  final IgniteCache<String,Integer> cache=jcache();
  cache.put("key2",1);
  cache.put("key3",3);
  if (txEnabled()) {
    Map<String,EntryProcessorResult<String>> res;
    try (Transaction tx=ignite(0).transactions().txStart(concurrency,isolation)){
      res=cache.invokeAll(F.asSet("key1","key2","key3"),INCR_PROCESSOR);
      tx.commit();
    }
     assertEquals((Integer)1,cache.get("key1"));
    assertEquals((Integer)2,cache.get("key2"));
    assertEquals((Integer)4,cache.get("key3"));
    assertEquals("null",res.get("key1").get());
    assertEquals("1",res.get("key2").get());
    assertEquals("3",res.get("key3").get());
    assertEquals(3,res.size());
    cache.remove("key1");
    cache.put("key2",1);
    cache.put("key3",3);
  }
  Map<String,EntryProcessorResult<String>> res=cache.invokeAll(F.asSet("key1","key2","key3"),RMV_PROCESSOR);
  for (int i=0; i < gridCount(); i++) {
    assertNull(jcache(i).localPeek("key1",CachePeekMode.ONHEAP));
    assertNull(jcache(i).localPeek("key2",CachePeekMode.ONHEAP));
    assertNull(jcache(i).localPeek("key3",CachePeekMode.ONHEAP));
  }
  assertEquals("null",res.get("key1").get());
  assertEquals("1",res.get("key2").get());
  assertEquals("3",res.get("key3").get());
  assertEquals(3,res.size());
  cache.remove("key1");
  cache.put("key2",1);
  cache.put("key3",3);
  res=cache.invokeAll(F.asSet("key1","key2","key3"),INCR_PROCESSOR);
  assertEquals((Integer)1,cache.get("key1"));
  assertEquals((Integer)2,cache.get("key2"));
  assertEquals((Integer)4,cache.get("key3"));
  assertEquals("null",res.get("key1").get());
  assertEquals("1",res.get("key2").get());
  assertEquals("3",res.get("key3").get());
  assertEquals(3,res.size());
  cache.remove("key1");
  cache.put("key2",1);
  cache.put("key3",3);
  res=cache.invokeAll(F.asMap("key1",INCR_PROCESSOR,"key2",INCR_PROCESSOR,"key3",INCR_PROCESSOR));
  assertEquals((Integer)1,cache.get("key1"));
  assertEquals((Integer)2,cache.get("key2"));
  assertEquals((Integer)4,cache.get("key3"));
  assertEquals("null",res.get("key1").get());
  assertEquals("1",res.get("key2").get());
  assertEquals("3",res.get("key3").get());
  assertEquals(3,res.size());
}
