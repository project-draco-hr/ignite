{
  final IgniteCache<String,Integer> cache=jcache();
{
    final Map<String,Integer> m=new LinkedHashMap<>(2);
    m.put("key1",1);
    m.put(null,2);
    GridTestUtils.assertThrows(log,new Callable<Void>(){
      @Override public Void call() throws Exception {
        cache.putAll(m);
        return null;
      }
    }
,NullPointerException.class,null);
    cache.put("key1",1);
    assertEquals(1,(int)cache.get("key1"));
  }
{
    final Map<String,Integer> m=new LinkedHashMap<>(2);
    m.put("key3",3);
    m.put("key4",null);
    GridTestUtils.assertThrows(log,new Callable<Void>(){
      @Override public Void call() throws Exception {
        cache.putAll(m);
        return null;
      }
    }
,NullPointerException.class,null);
    m.put("key4",4);
    cache.putAll(m);
    assertEquals(3,(int)cache.get("key3"));
    assertEquals(4,(int)cache.get("key4"));
  }
  assertThrows(log,new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      cache.put("key1",null);
      return null;
    }
  }
,NullPointerException.class,A.NULL_MSG_PREFIX);
  assertThrows(log,new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      cache.getAndPut("key1",null);
      return null;
    }
  }
,NullPointerException.class,A.NULL_MSG_PREFIX);
  assertThrows(log,new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      cache.put(null,1);
      return null;
    }
  }
,NullPointerException.class,A.NULL_MSG_PREFIX);
  assertThrows(log,new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      cache.replace(null,1);
      return null;
    }
  }
,NullPointerException.class,A.NULL_MSG_PREFIX);
  assertThrows(log,new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      cache.getAndReplace(null,1);
      return null;
    }
  }
,NullPointerException.class,A.NULL_MSG_PREFIX);
  assertThrows(log,new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      cache.replace("key",null);
      return null;
    }
  }
,NullPointerException.class,A.NULL_MSG_PREFIX);
  assertThrows(log,new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      cache.getAndReplace("key",null);
      return null;
    }
  }
,NullPointerException.class,A.NULL_MSG_PREFIX);
  assertThrows(log,new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      cache.replace(null,1,2);
      return null;
    }
  }
,NullPointerException.class,A.NULL_MSG_PREFIX);
  assertThrows(log,new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      cache.replace("key",null,2);
      return null;
    }
  }
,NullPointerException.class,A.NULL_MSG_PREFIX);
  assertThrows(log,new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      cache.replace("key",1,null);
      return null;
    }
  }
,NullPointerException.class,A.NULL_MSG_PREFIX);
}
