{
  cache.removeAll(data.keySet());
  assertTrue(cache.size(CachePeekMode.ALL) == 0);
  assertTrue(cacheSkipStore.size(CachePeekMode.ALL) == 0);
  assertTrue(map.size() == 0);
  IgniteTransactions txs=grid(0).transactions();
  Transaction tx=txs.txStart(txConcurrency,txIsolation);
  for (int i=0; i < keys.size(); i++)   cacheSkipStore.put(keys.get(i),i);
  for (  String key : keys) {
    assertNotNull(cacheSkipStore.get(key));
    assertNotNull(cache.get(key));
    assertFalse(map.containsKey(key));
  }
  tx.commit();
  tx=txs.txStart(txConcurrency,txIsolation);
  cacheSkipStore.putAll(data);
  for (  String key : keys) {
    assertNotNull(cacheSkipStore.get(key));
    assertNotNull(cache.get(key));
    assertFalse(map.containsKey(key));
  }
  cacheSkipStore.removeAll(data.keySet());
  for (  String key : keys) {
    assertNull(cacheSkipStore.get(key));
    assertNull(cache.get(key));
    assertFalse(map.containsKey(key));
  }
  tx.commit();
  tx=txs.txStart(txConcurrency,txIsolation);
  cache.putAll(data);
  for (  String key : keys) {
    assertNotNull(cacheSkipStore.get(key));
    assertNotNull(cache.get(key));
    assertFalse(map.containsKey(key));
  }
  cache.removeAll(data.keySet());
  for (  String key : keys) {
    assertNull(cacheSkipStore.get(key));
    assertNull(cache.get(key));
    assertFalse(map.containsKey(key));
  }
  tx.commit();
  tx=txs.txStart(txConcurrency,txIsolation);
  Map<String,Integer> subMap=new HashMap<>();
  for (int i=0; i < keys.size() / 2; i++)   subMap.put(keys.get(i),i);
  cacheSkipStore.putAll(subMap);
  subMap.clear();
  for (int i=keys.size() / 2; i < keys.size(); i++)   subMap.put(keys.get(i),i);
  cache.putAll(subMap);
  for (  String key : keys) {
    assertNotNull(cacheSkipStore.get(key));
    assertNotNull(cache.get(key));
    assertFalse(map.containsKey(key));
  }
  tx.commit();
  for (int i=0; i < keys.size() / 2; i++) {
    String key=keys.get(i);
    assertNotNull(cacheSkipStore.get(key));
    assertNotNull(cache.get(key));
    assertFalse(map.containsKey(key));
  }
  for (int i=keys.size() / 2; i < keys.size(); i++) {
    String key=keys.get(i);
    assertNotNull(cacheSkipStore.get(key));
    assertNotNull(cache.get(key));
    assertTrue(map.containsKey(key));
  }
  cache.removeAll(data.keySet());
  for (  String key : keys) {
    assertNull(cacheSkipStore.get(key));
    assertNull(cache.get(key));
    assertFalse(map.containsKey(key));
  }
}
