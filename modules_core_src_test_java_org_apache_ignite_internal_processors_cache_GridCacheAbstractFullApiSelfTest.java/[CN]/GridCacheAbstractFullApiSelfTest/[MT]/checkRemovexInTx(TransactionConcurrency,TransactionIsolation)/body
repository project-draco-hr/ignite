{
  if (txShouldBeUsed()) {
    final int cnt=10;
    CU.inTx(ignite(0),jcache(),concurrency,isolation,new CIX1<IgniteCache<String,Integer>>(){
      @Override public void applyx(      IgniteCache<String,Integer> cache){
        for (int i=0; i < cnt; i++)         cache.put("key" + i,i);
      }
    }
);
    CU.inTx(ignite(0),jcache(),concurrency,isolation,new CIX1<IgniteCache<String,Integer>>(){
      @Override public void applyx(      IgniteCache<String,Integer> cache){
        for (int i=0; i < cnt; i++)         assertEquals(new Integer(i),cache.get("key" + i));
      }
    }
);
    CU.inTx(ignite(0),jcache(),concurrency,isolation,new CIX1<IgniteCache<String,Integer>>(){
      @Override public void applyx(      IgniteCache<String,Integer> cache){
        for (int i=0; i < cnt; i++)         assertTrue(cache.remove("key" + i));
      }
    }
);
    CU.inTx(ignite(0),jcache(),concurrency,isolation,new CIX1<IgniteCache<String,Integer>>(){
      @Override public void applyx(      IgniteCache<String,Integer> cache){
        for (int i=0; i < cnt; i++)         assertNull(cache.get("key" + i));
      }
    }
);
  }
}
