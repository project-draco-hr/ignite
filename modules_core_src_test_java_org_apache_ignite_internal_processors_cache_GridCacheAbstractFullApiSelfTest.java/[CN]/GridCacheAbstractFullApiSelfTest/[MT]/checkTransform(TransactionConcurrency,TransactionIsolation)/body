{
  IgniteCache<String,Integer> cache=jcache();
  cache.put("key2",1);
  cache.put("key3",3);
  Transaction tx=txShouldBeUsed() ? ignite(0).transactions().txStart(concurrency,isolation) : null;
  try {
    assertEquals("null",cache.invoke("key1",INCR_PROCESSOR));
    assertEquals("1",cache.invoke("key2",INCR_PROCESSOR));
    assertEquals("3",cache.invoke("key3",RMV_PROCESSOR));
    if (tx != null)     tx.commit();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw e;
  }
 finally {
    if (tx != null)     tx.close();
  }
  assertEquals((Integer)1,cache.get("key1"));
  assertEquals((Integer)2,cache.get("key2"));
  assertNull(cache.get("key3"));
  for (int i=0; i < gridCount(); i++)   assertNull("Failed for cache: " + i,jcache(i).localPeek("key3",ONHEAP));
  cache.remove("key1");
  cache.put("key2",1);
  cache.put("key3",3);
  assertEquals("null",cache.invoke("key1",INCR_PROCESSOR));
  assertEquals("1",cache.invoke("key2",INCR_PROCESSOR));
  assertEquals("3",cache.invoke("key3",RMV_PROCESSOR));
  assertEquals((Integer)1,cache.get("key1"));
  assertEquals((Integer)2,cache.get("key2"));
  assertNull(cache.get("key3"));
  for (int i=0; i < gridCount(); i++)   assertNull(jcache(i).localPeek("key3",ONHEAP));
}
