{
  System.out.println(">>> Starting Ordered Messaging Example.");
  grid.message().remoteListen(null,new GridBiPredicate<UUID,Object>(){
    @Override public boolean apply(    UUID nodeId,    Object msg){
      System.out.println(">>> Received message [msg=" + msg + ", originatingNodeId="+ nodeId+ ']');
      return !"stop".equals(msg);
    }
  }
).get();
  grid.message().remoteListen(CustomTopic.INFO,new GridBiPredicate<UUID,Object>(){
    @Override public boolean apply(    UUID nodeId,    Object msg){
      System.out.println(">>> Received INFO message [msg=" + msg + ", originatingNodeId="+ nodeId+ ']');
      return false;
    }
  }
).get();
  grid.message().remoteListen(CustomTopic.ALARM,new GridBiPredicate<UUID,Object>(){
    @Override public boolean apply(    UUID nodeId,    Object msg){
      System.out.println(">>> Received ALARM message [msg=" + msg + ", originatingNodeId="+ nodeId+ ']');
      return false;
    }
  }
).get();
  grid.message().remoteListen(CustomTopic.BYE,new GridBiPredicate<UUID,Object>(){
    @GridInstanceResource private Grid g;
    @Override public boolean apply(    UUID nodeId,    Object msg){
      System.out.println(">>> Received BYE message [msg=" + msg + ", originatingNodeId="+ nodeId+ "]. You should see all the previously sent messages in order they were sent. "+ "This message goes last.");
      try {
        g.forNodeIds(Collections.singleton(nodeId)).message().send(CustomTopic.BYE_REPLY,"See you!");
      }
 catch (      GridException e) {
        throw new GridRuntimeException(e);
      }
      return false;
    }
  }
).get();
  grid.message().localListen(CustomTopic.LOCAL_ONLY,new GridBiPredicate<UUID,Object>(){
    @Override public boolean apply(    UUID nodeId,    Object msg){
      System.out.println(">>> Received LOCAL_ONLY message [msg=" + msg + ", originatingNodeId="+ nodeId+ "]. This message should be seen only on node, started within example.");
      return false;
    }
  }
);
  final CountDownLatch finishLatch=new CountDownLatch(grid.nodes().size());
  grid.message().localListen(CustomTopic.BYE_REPLY,new GridBiPredicate<UUID,Object>(){
    @Override public boolean apply(    UUID nodeId,    Object msg){
      System.out.println(">>> Received BYE_REPLY message [msg=" + msg + ", originatingNodeId="+ nodeId+ "]. This message should be seen only on local node as many times, as there are nodes in grid "+ "(each node replies to BYE from local node).");
      finishLatch.countDown();
      return true;
    }
  }
);
  grid.message().sendOrdered(null,new ExampleMessage("MSG-1"),MSG_TIMEOUT);
  grid.message().sendOrdered(null,new ExampleMessage("MSG-2"),MSG_TIMEOUT);
  grid.message().sendOrdered(null,new ExampleMessage("MSG-3"),MSG_TIMEOUT);
  grid.message().sendOrdered(CustomTopic.INFO,"This is an info message.",MSG_TIMEOUT);
  grid.message().sendOrdered(CustomTopic.ALARM,"Something nasty happened!",MSG_TIMEOUT);
  grid.message().sendOrdered(CustomTopic.LOCAL_ONLY,"Local message.",MSG_TIMEOUT);
  grid.message().sendOrdered(null,"stop",MSG_TIMEOUT);
  grid.message().sendOrdered(null,"This message won't be received, because listener is already unregistered.",MSG_TIMEOUT);
  grid.message().sendOrdered(CustomTopic.BYE,"Bye!",MSG_TIMEOUT);
  finishLatch.await(20,TimeUnit.SECONDS);
  System.out.println(">>>");
  System.out.println(">>> Finished executing Ordered Messaging Example.");
  System.out.println(">>> Check local node output.");
  System.out.println(">>>");
}
