{
  JSch ssh=new JSch();
  Session ses=null;
  try {
    if (spec.key() != null)     ssh.addIdentity(spec.key().getAbsolutePath());
    ses=ssh.getSession(spec.username(),spec.host(),spec.port());
    if (spec.password() != null)     ses.setPassword(spec.password());
    ses.setConfig("StrictHostKeyChecking","no");
    ses.connect(timeout);
    boolean win=isWindows(ses);
    char separator=win ? '\\' : '/';
    spec.fixPaths(separator);
    String igniteHome=spec.igniteHome();
    if (igniteHome == null)     igniteHome=win ? DFLT_IGNITE_HOME_WIN : DFLT_IGNITE_HOME_LINUX;
    String script=spec.script();
    if (script == null)     script=DFLT_SCRIPT_LINUX;
    String cfg=spec.configuration();
    if (cfg == null)     cfg="";
    String startNodeCmd;
    String scriptOutputFileName=FILE_NAME_DATE_FORMAT.format(new Date()) + '-' + UUID.randomUUID().toString().substring(0,8)+ ".log";
    if (win)     throw new UnsupportedOperationException("Apache Ignite cannot be auto-started on Windows from IgniteCluster.startNodes(???) API.");
 else {
      int spaceIdx=script.indexOf(' ');
      String scriptPath=spaceIdx > -1 ? script.substring(0,spaceIdx) : script;
      String scriptArgs=spaceIdx > -1 ? script.substring(spaceIdx + 1) : "";
      String rmtLogArgs=buildRemoteLogArguments(spec.username(),spec.host());
      String tmpDir=env(ses,"$TMPDIR","/tmp/");
      String scriptOutputDir=tmpDir + "ignite-startNodes";
      shell(ses,"mkdir " + scriptOutputDir);
      if (igniteHome.startsWith("~")) {
        String homeDir=env(ses,"$HOME","~");
        igniteHome=igniteHome.replaceFirst("~",homeDir);
      }
      startNodeCmd=new SB().a("nohup ").a("\"").a(igniteHome).a('/').a(scriptPath).a("\"").a(" ").a(scriptArgs).a(!cfg.isEmpty() ? " \"" : "").a(cfg).a(!cfg.isEmpty() ? "\"" : "").a(rmtLogArgs).a(" > ").a(scriptOutputDir).a("/").a(scriptOutputFileName).a(" 2>& 1 &").toString();
    }
    info("Starting remote node with SSH command: " + startNodeCmd,spec.logger(),log);
    shell(ses,startNodeCmd);
    return new GridTuple3<>(spec.host(),true,null);
  }
 catch (  IgniteInterruptedCheckedException e) {
    return new GridTuple3<>(spec.host(),false,e.getMessage());
  }
catch (  Exception e) {
    return new GridTuple3<>(spec.host(),false,X.getFullStackTrace(e));
  }
 finally {
    if (ses != null && ses.isConnected())     ses.disconnect();
  }
}
