{
  int start=raw ? rawOff : off;
  byte flag=doReadByte(raw);
switch (flag) {
case NULL:
    return null;
case HANDLE:
  int handle=doReadInt(raw);
if (poHandles.containsKey(handle)) return poHandles.get(handle);
off=handle;
return unmarshal(false);
case OBJ:
GridPortableObjectImpl<?> po=new GridPortableObjectImpl<>(ctx,arr,start);
poHandles.put(start,po);
if (raw) rawOff=start + po.length();
return po;
case BYTE:
return doReadByte(raw);
case SHORT:
return doReadShort(raw);
case INT:
return doReadInt(raw);
case LONG:
return doReadLong(raw);
case FLOAT:
return doReadFloat(raw);
case DOUBLE:
return doReadDouble(raw);
case CHAR:
return doReadChar(raw);
case BOOLEAN:
return doReadBoolean(raw);
case STRING:
return doReadString(raw);
case UUID:
return doReadUuid(raw);
case DATE:
return doReadDate(raw);
case BYTE_ARR:
return doReadByteArray(raw);
case SHORT_ARR:
return doReadShortArray(raw);
case INT_ARR:
return doReadIntArray(raw);
case LONG_ARR:
return doReadLongArray(raw);
case FLOAT_ARR:
return doReadFloatArray(raw);
case DOUBLE_ARR:
return doReadDoubleArray(raw);
case CHAR_ARR:
return doReadCharArray(raw);
case BOOLEAN_ARR:
return doReadBooleanArray(raw);
case STRING_ARR:
return doReadStringArray(raw);
case UUID_ARR:
return doReadUuidArray(raw);
case DATE_ARR:
return doReadDateArray(raw);
case OBJ_ARR:
return doReadObjectArray(raw);
case COL:
return doReadCollection(raw,null);
case MAP:
return doReadMap(raw,null);
default :
throw new GridPortableException("Invalid flag value: " + flag);
}
}
