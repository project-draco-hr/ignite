{
  Object obj;
switch (flag) {
case NULL:
    return null;
case HANDLE:
  if (oHandles.containsKey(handle))   return oHandles.get(handle);
off=handle;
obj=doReadObject(false);
break;
case OBJ:
GridPortableClassDescriptor desc=ctx.descriptorForTypeId(userType,typeId);
if (desc == null) throw new GridPortableInvalidClassException("Unknown type ID: " + typeId);
obj=desc.read(this);
if (obj instanceof GridPortableObjectImpl) ((GridPortableObjectImpl)obj).context(ctx);
break;
case BYTE:
obj=doReadByte(true);
break;
case SHORT:
obj=doReadShort(true);
break;
case INT:
obj=doReadInt(true);
break;
case LONG:
obj=doReadLong(true);
break;
case FLOAT:
obj=doReadFloat(true);
break;
case DOUBLE:
obj=doReadDouble(true);
break;
case CHAR:
obj=doReadChar(true);
break;
case BOOLEAN:
obj=doReadBoolean(true);
break;
case STRING:
obj=doReadString(true);
break;
case UUID:
obj=doReadUuid(true);
break;
case DATE:
obj=doReadDate(true);
break;
case BYTE_ARR:
obj=doReadByteArray(true);
break;
case SHORT_ARR:
obj=doReadShortArray(true);
break;
case INT_ARR:
obj=doReadIntArray(true);
break;
case LONG_ARR:
obj=doReadLongArray(true);
break;
case FLOAT_ARR:
obj=doReadFloatArray(true);
break;
case DOUBLE_ARR:
obj=doReadDoubleArray(true);
break;
case CHAR_ARR:
obj=doReadCharArray(true);
break;
case BOOLEAN_ARR:
obj=doReadBooleanArray(true);
break;
case STRING_ARR:
obj=doReadStringArray(true);
break;
case UUID_ARR:
obj=doReadUuidArray(true);
break;
case DATE_ARR:
obj=doReadDateArray(true);
break;
case OBJ_ARR:
obj=doReadObjectArray(true,true);
break;
case COL:
obj=doReadCollection(true,true,null);
break;
case MAP:
obj=doReadMap(true,true,null);
break;
default :
throw new GridPortableException("Invalid flag value: " + flag);
}
if (len == 0) len=rawOff - start;
return obj;
}
