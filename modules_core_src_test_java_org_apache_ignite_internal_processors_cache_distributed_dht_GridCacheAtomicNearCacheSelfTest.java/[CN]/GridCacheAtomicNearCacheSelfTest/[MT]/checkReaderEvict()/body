{
  log.info("Check evict.");
  Ignite ignite0=grid(0);
  Cache<Integer,Integer> cache0=ignite0.cache(null);
  CacheAffinity<Integer> aff=cache0.affinity();
  UUID id0=ignite0.cluster().localNode().id();
  Integer nearKey=key(ignite0,NOT_PRIMARY_AND_BACKUP);
  cache0.put(nearKey,1);
  for (int i=0; i < GRID_CNT; i++) {
    UUID[] expReaders=aff.isPrimary(grid(i).localNode(),nearKey) ? new UUID[]{id0} : new UUID[]{};
    checkEntry(grid(i),nearKey,1,i == 0,expReaders);
  }
  cache0.evict(nearKey);
  for (int i=0; i < GRID_CNT; i++) {
    UUID[] expReaders=aff.isPrimary(grid(i).localNode(),nearKey) ? new UUID[]{id0} : new UUID[]{};
    checkEntry(grid(i),nearKey,1,false,expReaders);
  }
  Cache<Integer,Integer> primaryCache=G.ignite((String)aff.mapKeyToNode(nearKey).attribute(ATTR_GRID_NAME)).cache(null);
  delay();
  primaryCache.put(nearKey,2);
  for (int i=0; i < GRID_CNT; i++)   checkEntry(grid(i),nearKey,2,false);
  assertEquals((Integer)2,cache0.get(nearKey));
  for (int i=0; i < GRID_CNT; i++) {
    UUID[] expReaders=aff.isPrimary(grid(i).localNode(),nearKey) ? new UUID[]{id0} : new UUID[]{};
    checkEntry(grid(i),nearKey,2,i == 0,expReaders);
  }
}
