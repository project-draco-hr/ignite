{
  GridCacheAdapter<Integer,Integer> near=((GridKernal)ignite).internalCache();
  assertTrue(near.isNear());
  GridCacheEntryEx<Integer,Integer> nearEntry=near.peekEx(key);
  if (expectNear) {
    assertNotNull("No near entry for: " + key + ", grid: "+ ignite.name(),nearEntry);
    assertEquals("Unexpected value for grid: " + ignite.name(),val,nearEntry.info().value());
  }
 else   assertNull("Unexpected near entry: " + nearEntry + ", grid: "+ ignite.name(),nearEntry);
  GridDhtCacheAdapter<Integer,Integer> dht=((GridNearCacheAdapter<Integer,Integer>)near).dht();
  GridDhtCacheEntry<Integer,Integer> dhtEntry=(GridDhtCacheEntry<Integer,Integer>)dht.peekEx(key);
  boolean expectDht=near.affinity().isPrimaryOrBackup(ignite.cluster().localNode(),key);
  if (expectDht) {
    assertNotNull("No dht entry for: " + key + ", grid: "+ ignite.name(),dhtEntry);
    Collection<UUID> readers=dhtEntry.readers();
    assertEquals(expReaders.length,readers.size());
    for (    UUID reader : expReaders)     assertTrue(readers.contains(reader));
    assertEquals("Unexpected value for grid: " + ignite.name(),val,dhtEntry.info().value());
  }
 else   assertNull("Unexpected dht entry: " + dhtEntry + ", grid: "+ ignite.name(),dhtEntry);
}
