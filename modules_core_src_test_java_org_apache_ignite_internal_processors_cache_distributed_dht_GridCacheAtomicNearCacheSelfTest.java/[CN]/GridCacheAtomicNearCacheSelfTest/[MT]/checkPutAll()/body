{
  log.info("Check putAll.");
  Ignite ignite0=grid(0);
  IgniteCache<Integer,Integer> cache0=ignite0.cache(null);
  Affinity<Integer> aff=ignite0.affinity(null);
  UUID id0=ignite0.cluster().localNode().id();
  Map<Integer,Integer> primaryKeys=new HashMap<>();
  for (int i=0; i < 10; i++)   primaryKeys.put(key(ignite0,PRIMARY),1);
  log.info("PutAll from primary.");
  cache0.putAll(primaryKeys);
  for (int i=0; i < GRID_CNT; i++) {
    for (    Integer primaryKey : primaryKeys.keySet())     checkEntry(grid(i),primaryKey,1,false);
  }
  if (backups > 0) {
    Map<Integer,Integer> backupKeys=new HashMap<>();
    for (int i=0; i < 10; i++)     backupKeys.put(key(ignite0,BACKUP),2);
    log.info("PutAll from backup.");
    cache0.putAll(backupKeys);
    for (int i=0; i < GRID_CNT; i++) {
      for (      Integer backupKey : backupKeys.keySet())       checkEntry(grid(i),backupKey,2,false);
    }
  }
  Map<Integer,Integer> nearKeys=new HashMap<>();
  for (int i=0; i < 30; i++)   nearKeys.put(key(ignite0,NOT_PRIMARY_AND_BACKUP),3);
  log.info("PutAll from near.");
  cache0.putAll(nearKeys);
  for (int i=0; i < GRID_CNT; i++) {
    for (    Integer nearKey : nearKeys.keySet()) {
      UUID[] expReaders=aff.isPrimary(grid(i).localNode(),nearKey) ? new UUID[]{id0} : new UUID[]{};
      checkEntry(grid(i),nearKey,3,i == 0,expReaders);
    }
  }
  Map<Integer,Collection<UUID>> readersMap=new HashMap<>();
  for (  Integer key : nearKeys.keySet())   readersMap.put(key,new HashSet<UUID>());
  int val=4;
  for (int i=0; i < GRID_CNT; i++) {
    delay();
    IgniteCache<Integer,Integer> cache=grid(i).cache(null);
    for (    Integer key : nearKeys.keySet())     nearKeys.put(key,val);
    log.info("PutAll [grid=" + grid(i).name() + ", val="+ val+ ']');
    cache.putAll(nearKeys);
    for (    Integer key : nearKeys.keySet()) {
      if (!aff.isPrimaryOrBackup(grid(i).localNode(),key))       readersMap.get(key).add(grid(i).localNode().id());
    }
    for (int j=0; j < GRID_CNT; j++) {
      for (      Integer key : nearKeys.keySet()) {
        boolean primaryNode=aff.isPrimary(grid(j).localNode(),key);
        Collection<UUID> readers=readersMap.get(key);
        UUID[] expReaders=primaryNode ? U.toArray(readers,new UUID[readers.size()]) : new UUID[]{};
        checkEntry(grid(j),key,val,readers.contains(grid(j).localNode().id()),expReaders);
      }
    }
    val++;
  }
}
