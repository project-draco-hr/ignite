{
  UUID affinityKey=primaryKeyForCache(grid(0));
  Cache<CacheAffinityKey<String>,String> cache=grid(0).cache(null);
  CacheAffinityKey<String> key1=new CacheAffinityKey<>("key1",affinityKey);
  CacheAffinityKey<String> key2=new CacheAffinityKey<>("key2",affinityKey);
  CacheAffinityKey<String> key3=new CacheAffinityKey<>("key3",affinityKey);
  CacheAffinityKey<String> key4=new CacheAffinityKey<>("key4",affinityKey);
  Map<CacheAffinityKey<String>,String> putMap=F.asMap(key1,"val1",key2,"val2",key3,"val3",key4,"val4");
  try (IgniteTx tx=cache.txStartAffinity(affinityKey,concurrency,READ_COMMITTED,0,4)){
    cache.put(key1,"val1");
    cache.put(key2,"val2");
    cache.put(key3,"val3");
    cache.put(key4,"val4");
    tx.commit();
  }
   for (int i=0; i < gridCount(); i++) {
    Ignite g=grid(i);
    Cache<Object,Object> gCache=g.cache(null);
    if (gCache.affinity().isPrimaryOrBackup(g.cluster().localNode(),key1))     assertEquals("For index: " + i,"val1",gCache.peek(key1));
    if (gCache.affinity().isPrimaryOrBackup(g.cluster().localNode(),key2))     assertEquals("For index: " + i,"val2",gCache.peek(key2));
    if (gCache.affinity().isPrimaryOrBackup(g.cluster().localNode(),key3))     assertEquals("For index: " + i,"val3",gCache.peek(key3));
    if (gCache.affinity().isPrimaryOrBackup(g.cluster().localNode(),key4))     assertEquals("For index: " + i,"val4",gCache.peek(key4));
  }
  assertTrue(store.storeMap().equals(putMap));
  assertEquals(1,store.putCount());
}
