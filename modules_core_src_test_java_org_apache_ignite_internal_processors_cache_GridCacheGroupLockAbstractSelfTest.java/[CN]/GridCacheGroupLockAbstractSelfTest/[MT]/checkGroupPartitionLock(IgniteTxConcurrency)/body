{
  CollectingEventListener locks=new CollectingEventListener();
  CollectingEventListener unlocks=new CollectingEventListener();
  grid(0).events().localListen(locks,EVT_CACHE_OBJECT_LOCKED);
  grid(0).events().localListen(unlocks,EVT_CACHE_OBJECT_UNLOCKED);
  UUID affinityKey=primaryKeyForCache(grid(0));
  IgniteCache<UUID,String> cache=grid(0).jcache(null);
  UUID key1;
  UUID key2;
  CacheAffinity<UUID> affinity=grid(0).affinity(null);
  try (IgniteTx tx=grid(0).transactions().txStartPartition(null,affinity.partition(affinityKey),concurrency,READ_COMMITTED,0,2)){
    assertEquals("Unexpected number of lock events: " + locks.affectedKeys(),0,locks.affectedKeys().size());
    assertEquals("Unexpected number of unlock events: " + unlocks.affectedKeys(),0,unlocks.affectedKeys().size());
    GridCacheAdapter<Object,Object> cacheAdapter=((IgniteKernal)grid(0)).internalCache();
    GridCacheAffinityManager<Object,Object> affMgr=cacheAdapter.context().affinity();
    GridPartitionLockKey partAffKey=affMgr.partitionAffinityKey(affinity.partition(affinityKey));
    if (concurrency == PESSIMISTIC)     assertTrue(cacheAdapter.entryEx(partAffKey).lockedByThread());
    do {
      key1=UUID.randomUUID();
    }
 while (affinity.partition(key1) != affinity.partition(affinityKey));
    do {
      key2=UUID.randomUUID();
    }
 while (affinity.partition(key2) != affinity.partition(affinityKey));
    cache.putAll(F.asMap(key1,"val1",key2,"val2"));
    tx.commit();
  }
   assertEquals("Unexpected number of lock events: " + locks.affectedKeys(),0,locks.affectedKeys().size());
  assertEquals("Unexpected number of unlock events: " + unlocks.affectedKeys(),0,unlocks.affectedKeys().size());
  for (int i=0; i < gridCount(); i++) {
    Ignite g=grid(i);
    IgniteCache<Object,Object> gCache=g.jcache(null);
    if (g.affinity(null).isPrimaryOrBackup(g.cluster().localNode(),key1))     assertEquals("For index: " + i,"val1",gCache.localPeek(key1,CachePeekMode.ONHEAP));
    if (g.affinity(null).isPrimaryOrBackup(g.cluster().localNode(),key2))     assertEquals("For index: " + i,"val2",gCache.localPeek(key2,CachePeekMode.ONHEAP));
  }
}
