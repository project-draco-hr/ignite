{
  if (entrySet == null) {
    entrySet=new GridSerializableSet<Entry<K,GridCacheTxEntry<K,V>>>(){
      private Set<Entry<K,GridCacheTxEntry<K,V>>> set=txMap.entrySet();
      @Override public Iterator<Entry<K,GridCacheTxEntry<K,V>>> iterator(){
        return new GridSerializableIterator<Entry<K,GridCacheTxEntry<K,V>>>(){
          private Iterator<Entry<K,GridCacheTxEntry<K,V>>> it=set.iterator();
          private Entry<K,GridCacheTxEntry<K,V>> cur;
{
            advance();
          }
          @Override public boolean hasNext(){
            return cur != null;
          }
          @Override public Entry<K,GridCacheTxEntry<K,V>> next(){
            if (cur == null)             throw new NoSuchElementException();
            Entry<K,GridCacheTxEntry<K,V>> e=cur;
            advance();
            return e;
          }
          @Override public void remove(){
            throw new UnsupportedOperationException();
          }
          private void advance(){
            cur=null;
            while (cur == null && it.hasNext()) {
              Entry<K,GridCacheTxEntry<K,V>> e=it.next();
              if (filter.apply(e.getValue()))               cur=e;
            }
          }
        }
;
      }
      @Override public int size(){
        return !sealed ? F.size(iterator()) : size == -1 ? size=F.size(iterator()) : size;
      }
      @Override public boolean isEmpty(){
        return !sealed ? !iterator().hasNext() : empty == null ? empty=!iterator().hasNext() : empty;
      }
    }
;
  }
  return entrySet;
}
