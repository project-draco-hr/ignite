{
  GridGgfsFileMap map=new GridGgfsFileMap();
  IgniteUuid affKey=IgniteUuid.randomUuid();
  for (int i=0; i < 4; i++)   map.addRange(new GridGgfsFileAffinityRange(i * 20 + 10,i * 20 + 19,affKey));
  map.updateRangeStatus(new GridGgfsFileAffinityRange(30,39,affKey),RANGE_STATUS_MOVING);
  map.updateRangeStatus(new GridGgfsFileAffinityRange(10,19,affKey),RANGE_STATUS_MOVING);
  map.updateRangeStatus(new GridGgfsFileAffinityRange(70,79,affKey),RANGE_STATUS_MOVING);
  List<GridGgfsFileAffinityRange> ranges=map.ranges();
  assertEquals(RANGE_STATUS_MOVING,ranges.get(0).status());
  assertEquals(RANGE_STATUS_MOVING,ranges.get(1).status());
  assertEquals(RANGE_STATUS_INITIAL,ranges.get(2).status());
  assertEquals(RANGE_STATUS_MOVING,ranges.get(3).status());
  map.updateRangeStatus(new GridGgfsFileAffinityRange(30,39,affKey),RANGE_STATUS_MOVED);
  map.updateRangeStatus(new GridGgfsFileAffinityRange(10,19,affKey),RANGE_STATUS_MOVED);
  map.updateRangeStatus(new GridGgfsFileAffinityRange(70,79,affKey),RANGE_STATUS_MOVED);
  ranges=map.ranges();
  assertEquals(RANGE_STATUS_MOVED,ranges.get(0).status());
  assertEquals(RANGE_STATUS_MOVED,ranges.get(1).status());
  assertEquals(RANGE_STATUS_INITIAL,ranges.get(2).status());
  assertEquals(RANGE_STATUS_MOVED,ranges.get(3).status());
  map.deleteRange(new GridGgfsFileAffinityRange(30,39,affKey));
  map.deleteRange(new GridGgfsFileAffinityRange(10,19,affKey));
  map.deleteRange(new GridGgfsFileAffinityRange(70,79,affKey));
  ranges=map.ranges();
  assertEquals(1,ranges.size());
  assertEquals(RANGE_STATUS_INITIAL,ranges.get(0).status());
  assertTrue(ranges.get(0).regionEqual(new GridGgfsFileAffinityRange(50,59,affKey)));
}
