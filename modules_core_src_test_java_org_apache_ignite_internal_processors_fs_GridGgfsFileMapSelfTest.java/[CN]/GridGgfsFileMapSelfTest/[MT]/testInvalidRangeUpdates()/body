{
  final GridGgfsFileMap map=new GridGgfsFileMap();
  final IgniteUuid affKey1=IgniteUuid.randomUuid();
  final IgniteUuid affKey2=IgniteUuid.randomUuid();
  map.addRange(new GridGgfsFileAffinityRange(10,19,affKey1));
  map.addRange(new GridGgfsFileAffinityRange(30,39,affKey1));
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      map.updateRangeStatus(new GridGgfsFileAffinityRange(0,5,affKey1),RANGE_STATUS_MOVING);
      return null;
    }
  }
,GridGgfsInvalidRangeException.class,null);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      map.updateRangeStatus(new GridGgfsFileAffinityRange(15,19,affKey1),RANGE_STATUS_MOVING);
      return null;
    }
  }
,GridGgfsInvalidRangeException.class,null);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      map.updateRangeStatus(new GridGgfsFileAffinityRange(10,19,affKey2),RANGE_STATUS_MOVING);
      return null;
    }
  }
,AssertionError.class,null);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      map.updateRangeStatus(new GridGgfsFileAffinityRange(10,22,affKey1),RANGE_STATUS_MOVING);
      return null;
    }
  }
,AssertionError.class,null);
  assertEquals(2,map.ranges().size());
}
