{
  this.tbl=tbl;
  ArrayList<Index> idxs=new ArrayList<>();
  idxs.add(new GridH2TreeIndex("_key_PK",tbl,true,KEY_COL,VAL_COL,tbl.indexColumn(0,ASCENDING)));
  if (type().valueClass() == String.class) {
    try {
      luceneIdx=new GridLuceneIndex(marshaller,offheap,spaceName,type,true);
    }
 catch (    GridSpiException e1) {
      throw new GridRuntimeException(e1);
    }
  }
  for (  Map.Entry<String,GridIndexDescriptor> e : type.indexes().entrySet()) {
    String name=e.getKey();
    GridIndexDescriptor idx=e.getValue();
    if (idx.type() == FULLTEXT) {
      try {
        luceneIdx=new GridLuceneIndex(marshaller,offheap,spaceName,type,true);
      }
 catch (      GridSpiException e1) {
        throw new GridRuntimeException(e1);
      }
    }
 else {
      IndexColumn[] cols=new IndexColumn[idx.fields().size()];
      int i=0;
      for (      String field : idx.fields()) {
        String fieldName=CU.h2Escape(field).startsWith("\"") ? field : field.toUpperCase();
        Column col=tbl.getColumn(fieldName);
        cols[i++]=tbl.indexColumn(col.getColumnId(),idx.descending(field) ? DESCENDING : ASCENDING);
      }
      if (idx.type() == SORTED)       idxs.add(new GridH2TreeIndex(name,tbl,false,KEY_COL,VAL_COL,cols));
 else       if (idx.type() == GEO_SPATIAL)       idxs.add(new GridH2SpatialIndex(tbl,name,cols,KEY_COL,VAL_COL));
 else       throw new IllegalStateException();
    }
  }
  return idxs;
}
