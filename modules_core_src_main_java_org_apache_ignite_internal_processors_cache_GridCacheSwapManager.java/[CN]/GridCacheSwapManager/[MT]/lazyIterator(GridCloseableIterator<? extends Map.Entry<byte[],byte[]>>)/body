{
  if (it == null)   return F.emptyIterator();
  checkIteratorQueue();
  final GridCloseableIteratorAdapter<Map.Entry<K,V>> iter=new GridCloseableIteratorAdapter<Map.Entry<K,V>>(){
    private Map.Entry<K,V> cur;
    @Override protected Map.Entry<K,V> onNext(){
      final Map.Entry<byte[],byte[]> cur0=it.next();
      cur=new GridVersionedMapEntry<K,V>(cur0);
      return cur;
    }
    @Override protected boolean onHasNext(){
      return it.hasNext();
    }
    @SuppressWarnings("unchecked") @Override protected void onRemove() throws IgniteCheckedException {
      if (cur == null)       throw new IllegalStateException("Method next() has not yet been called, or the remove() method " + "has already been called after the last call to the next() method.");
      try {
        if (cctx.isDht())         cctx.dht().near().remove(cur.getKey());
 else         cctx.cache().remove(cur.getKey());
      }
  finally {
        cur=null;
      }
    }
    @Override protected void onClose() throws IgniteCheckedException {
      it.close();
    }
  }
;
  Iterator<Map.Entry<K,V>> ret=new Iterator<Map.Entry<K,V>>(){
    @Override public boolean hasNext(){
      return iter.hasNext();
    }
    @Override public Map.Entry<K,V> next(){
      return iter.next();
    }
    @Override public void remove(){
      iter.remove();
    }
  }
;
  itSet.add(new GridWeakIterator(ret,iter,itQ));
  return ret;
}
