{
  assert offheapEnabled;
  long max=cctx.config().getOffHeapMaxMemory();
  long init=max > 0 ? max / 1024 : 8L * 1024L * 1024L;
  int parts=cctx.config().getAffinity().partitions();
  GridOffHeapEvictListener lsnr;
  if (swapEnabled || GridQueryProcessor.isEnabled(cctx.config())) {
    unwindOffheapEvicts=true;
    lsnr=new GridOffHeapEvictListener(){
      @Override public void onEvict(      int part,      int hash,      byte[] kb,      byte[] vb){
        assert unwindOffheapEvicts;
        onOffheapEvict();
        Collection<IgniteBiTuple<byte[],byte[]>> evicts=offheapEvicts.get();
        if (evicts == null)         offheapEvicts.set(evicts=new ArrayList<>());
        evicts.add(new IgniteBiTuple<>(kb,vb));
      }
      @Override public boolean removeEvicted(){
        return false;
      }
    }
;
  }
 else {
    lsnr=new GridOffHeapEvictListener(){
      @Override public void onEvict(      int part,      int hash,      byte[] kb,      byte[] vb){
        onOffheapEvict();
      }
      @Override public boolean removeEvicted(){
        return true;
      }
    }
;
  }
  offheap.create(spaceName,parts,init,max,lsnr);
}
