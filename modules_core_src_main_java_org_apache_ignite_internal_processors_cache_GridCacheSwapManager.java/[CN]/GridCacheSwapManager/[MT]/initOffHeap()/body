{
  long max=cctx.config().getOffHeapMaxMemory();
  long init=max > 0 ? max / 1024 : 8L * 1024L * 1024L;
  int parts=cctx.config().getAffinity().partitions();
  GridOffHeapEvictListener lsnr=!swapEnabled && !offheapEnabled ? null : new GridOffHeapEvictListener(){
    private volatile boolean firstEvictWarn;
    @Override public void onEvict(    int part,    int hash,    byte[] kb,    byte[] vb){
      try {
        if (!firstEvictWarn)         warnFirstEvict();
        writeToSwap(part,cctx.toCacheKeyObject(null,kb,false),vb);
      }
 catch (      IgniteCheckedException e) {
        log.error("Failed to unmarshal off-heap entry [part=" + part + ", hash="+ hash+ ']',e);
      }
    }
    private void warnFirstEvict(){
synchronized (this) {
        if (firstEvictWarn)         return;
        firstEvictWarn=true;
      }
      U.warn(log,"Off-heap evictions started. You may wish to increase 'offHeapMaxMemory' in " + "cache configuration [cache=" + cctx.name() + ", offHeapMaxMemory="+ cctx.config().getOffHeapMaxMemory()+ ']',"Off-heap evictions started: " + cctx.name());
    }
  }
;
  offheap.create(spaceName,parts,init,max,lsnr);
}
