{
  final long qryId=qryIdGen.getAndIncrement();
  try {
    Query qry;
switch (req.queryType()) {
case SQL:
      qry=new SqlQuery(req.typeName(),req.sqlQuery());
    ((SqlQuery)qry).setArgs(req.arguments());
  ((SqlQuery)qry).setDistributedJoins(req.distributedJoins());
break;
case SQL_FIELDS:
qry=new SqlFieldsQuery(req.sqlQuery());
((SqlFieldsQuery)qry).setArgs(req.arguments());
((SqlFieldsQuery)qry).setDistributedJoins(req.distributedJoins());
break;
case SCAN:
IgniteBiPredicate pred=null;
if (req.className() != null) pred=instance(IgniteBiPredicate.class,req.className());
qry=new ScanQuery(pred);
break;
default :
throw new IgniteException("Incorrect query type [type=" + req.queryType() + "]");
}
IgniteCache<Object,Object> cache=ctx.grid().cache(req.cacheName());
if (cache == null) return new GridRestResponse(GridRestResponse.STATUS_FAILED,"Failed to find cache with name: " + req.cacheName());
final QueryCursor qryCur=cache.query(qry);
Iterator cur=qryCur.iterator();
QueryCursorIterator qryCurIt=new QueryCursorIterator(qryCur,cur);
qryCurIt.lock();
try {
qryCurs.put(qryId,qryCurIt);
CacheQueryResult res=createQueryResult(cur,req,qryId,qryCurs);
switch (req.queryType()) {
case SQL:
case SQL_FIELDS:
List<GridQueryFieldMetadata> fieldsMeta=((QueryCursorImpl)qryCur).fieldsMeta();
res.setFieldsMetadata(convertMetadata(fieldsMeta));
break;
case SCAN:
CacheQueryFieldsMetaResult keyField=new CacheQueryFieldsMetaResult();
keyField.setFieldName("key");
CacheQueryFieldsMetaResult valField=new CacheQueryFieldsMetaResult();
valField.setFieldName("value");
res.setFieldsMetadata(U.sealList(keyField,valField));
break;
}
return new GridRestResponse(res);
}
  finally {
qryCurIt.unlock();
}
}
 catch (Exception e) {
removeQueryCursor(qryId,qryCurs);
SQLException sqlErr=X.cause(e,SQLException.class);
return new GridRestResponse(GridRestResponse.STATUS_FAILED,sqlErr != null ? sqlErr.getMessage() : e.getMessage());
}
}
