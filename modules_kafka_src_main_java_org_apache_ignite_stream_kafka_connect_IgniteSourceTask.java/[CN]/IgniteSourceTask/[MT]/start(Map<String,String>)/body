{
synchronized (lock) {
    if (!stopped)     return;
    cacheName=props.get(IgniteSourceConstants.CACHE_NAME);
    igniteCfgFile=props.get(IgniteSourceConstants.CACHE_CFG_PATH);
    topics=props.get(IgniteSourceConstants.TOPIC_NAMES).split("\\s*,\\s*");
    if (props.containsKey(IgniteSourceConstants.INTL_BUF_SIZE))     evtBufSize=Integer.parseInt(props.get(IgniteSourceConstants.INTL_BUF_SIZE));
    if (props.containsKey(IgniteSourceConstants.INTL_BATCH_SIZE))     evtBatchSize=Integer.parseInt(props.get(IgniteSourceConstants.INTL_BATCH_SIZE));
    if (props.containsKey(IgniteSourceConstants.CACHE_FILTER_CLASS)) {
      String filterCls=props.get(IgniteSourceConstants.CACHE_FILTER_CLASS);
      if (filterCls != null && !filterCls.isEmpty()) {
        try {
          Class<? extends IgnitePredicate<CacheEvent>> clazz=(Class<? extends IgnitePredicate<CacheEvent>>)Class.forName(filterCls);
          filter=clazz.newInstance();
        }
 catch (        Exception e) {
          log.error("Failed to instantiate the provided filter! " + "User-enabled filtering is ignored!",e);
        }
      }
    }
    TaskRemoteFilter rmtLsnr=new TaskRemoteFilter(cacheName);
    try {
      int[] evts=cacheEvents(props.get(IgniteSourceConstants.CACHE_EVENTS));
      rmtLsnrId=IgniteGrid.getIgnite().events(IgniteGrid.getIgnite().cluster().forCacheNodes(cacheName)).remoteListen(locLsnr,rmtLsnr,evts);
    }
 catch (    Exception e) {
      log.error("Failed to register event listener!",e);
      throw new ConnectException(e);
    }
 finally {
      stopped=false;
    }
  }
}
