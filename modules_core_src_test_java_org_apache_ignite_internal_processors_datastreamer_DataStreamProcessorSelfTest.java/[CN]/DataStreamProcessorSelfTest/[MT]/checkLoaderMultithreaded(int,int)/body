{
  try {
    int idx=1;
    for (int i=0; i < nodesCntNoCache; i++)     startGrid(idx++);
    useCache=true;
    for (int i=0; i < nodesCntCache; i++)     startGrid(idx++);
    Ignite g1=grid(1);
    final IgniteDataStreamer<Integer,Integer> ldr=g1.dataStreamer(null);
    ldr.receiver(DataStreamerCacheUpdaters.<Integer,Integer>individual());
    ldr.perNodeBufferSize(2);
    final AtomicInteger idxGen=new AtomicInteger();
    final AtomicBoolean done=new AtomicBoolean();
    try {
      final int totalPutCnt=50000;
      IgniteInternalFuture<?> fut1=multithreadedAsync(new Callable<Object>(){
        @Override public Object call() throws Exception {
          Collection<IgniteFuture<?>> futs=new ArrayList<>();
          while (!done.get()) {
            int idx=idxGen.getAndIncrement();
            if (idx >= totalPutCnt) {
              info(">>> Stopping producer thread since maximum count of puts reached.");
              break;
            }
            futs.add(ldr.addData(idx,idx));
          }
          ldr.flush();
          for (          IgniteFuture<?> fut : futs)           fut.get();
          return null;
        }
      }
,5,"producer");
      IgniteInternalFuture<?> fut2=multithreadedAsync(new Callable<Object>(){
        @Override public Object call() throws Exception {
          while (!done.get()) {
            ldr.flush();
            U.sleep(100);
          }
          return null;
        }
      }
,1,"flusher");
      final int restartNodeIdx=nodesCntCache + nodesCntNoCache + 1;
      IgniteInternalFuture<?> fut3=multithreadedAsync(new Callable<Object>(){
        @Override public Object call() throws Exception {
          try {
            for (int i=0; i < 5; i++) {
              Ignite g=startGrid(restartNodeIdx);
              UUID id=g.cluster().localNode().id();
              info(">>>>>>> Started node: " + id);
              U.sleep(1000);
              stopGrid(getTestGridName(restartNodeIdx),true);
              info(">>>>>>> Stopped node: " + id);
            }
          }
  finally {
            done.set(true);
            info("Start stop thread finished.");
          }
          return null;
        }
      }
,1,"start-stop-thread");
      fut1.get();
      fut2.get();
      fut3.get();
    }
  finally {
      ldr.close(false);
    }
  }
  finally {
    stopAllGrids();
  }
}
