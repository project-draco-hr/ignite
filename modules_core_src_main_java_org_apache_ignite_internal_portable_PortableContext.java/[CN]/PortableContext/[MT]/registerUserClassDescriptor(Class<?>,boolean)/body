{
  boolean registered;
  String typeName=typeName(cls.getName());
  BinaryTypeIdMapper idMapper=userTypeIdMapper(typeName);
  int typeId=idMapper.typeId(typeName);
  try {
    registered=marshCtx.registerClass(typeId,cls);
  }
 catch (  IgniteCheckedException e) {
    throw new BinaryObjectException("Failed to register class.",e);
  }
  PortableClassDescriptor desc=new PortableClassDescriptor(this,cls,true,typeId,typeName,idMapper,null,metaDataEnabled,keepDeserialized,registered,false);
  if (IgniteUtils.detectClassLoader(cls).equals(dfltLdr))   userTypes.put(typeId,desc);
  descByCls.put(cls,desc);
  mappers.putIfAbsent(typeId,idMapper);
  return desc;
}
