{
  boolean registered;
  String typeName=typeName(cls.getName());
  BinaryIdMapper idMapper=userTypeIdMapper(typeName);
  int typeId=idMapper.typeId(typeName);
  try {
    registered=marshCtx.registerClass(typeId,cls);
  }
 catch (  IgniteCheckedException e) {
    throw new BinaryObjectException("Failed to register class.",e);
  }
  PortableClassDescriptor desc=new PortableClassDescriptor(this,cls,true,typeId,typeName,null,idMapper,null,true,registered,false);
  Collection<PortableSchema> schemas=desc.schema() != null ? Collections.singleton(desc.schema()) : null;
  metaHnd.addMeta(typeId,new BinaryMetadata(typeId,typeName,desc.fieldsMeta(),null,schemas).wrap(this));
  if (IgniteUtils.detectClassLoader(cls).equals(dfltLdr))   userTypes.put(typeId,desc);
  descByCls.put(cls,desc);
  mappers.putIfAbsent(typeId,idMapper);
  return desc;
}
