{
  final QueueHolder win=holder;
  final Iterator<Batch> batchIt=win.batchQueue().iterator();
  return new GridStreamerWindowIterator<E>(){
    /** 
 * Current batch iterator. 
 */
    private ConcurrentLinkedDeque8.IteratorEx<E> curBatchIt;
    /** 
 * Next batch iterator. Will be null if no more batches available. 
 */
    private ConcurrentLinkedDeque8.IteratorEx<E> nextBatchIt;
    /** 
 * Last returned value. 
 */
    private E lastRet;
{
      curBatchIt=batchIt.hasNext() ? batchIt.next().iterator() : null;
    }
    /** 
 * {@inheritDoc} 
 */
    @SuppressWarnings("SimplifiableIfStatement") @Override public boolean hasNext(){
      if (curBatchIt != null) {
        if (curBatchIt.hasNext())         return true;
        return nextBatchIt != null && nextBatchIt.hasNext();
      }
 else       return false;
    }
    /** 
 * {@inheritDoc} 
 */
    @Override public E next(){
      if (curBatchIt == null)       throw new NoSuchElementException();
      if (!curBatchIt.hasNext()) {
        if (nextBatchIt != null) {
          curBatchIt=nextBatchIt;
          nextBatchIt=null;
          lastRet=curBatchIt.next();
        }
 else         throw new NoSuchElementException();
      }
 else {
        E next=curBatchIt.next();
        if (!curBatchIt.hasNext())         advanceBatch();
        lastRet=next;
      }
      return lastRet;
    }
    /** 
 * {@inheritDoc} 
 */
    @Nullable @Override public E removex(){
      if (curBatchIt == null)       throw new NoSuchElementException();
      if (curBatchIt.removex()) {
        win.totalQueueSize().decrementAndGet();
        return lastRet;
      }
 else       return null;
    }
    /** 
 * Moves to the next batch.
 */
    private void advanceBatch(){
      if (batchIt.hasNext()) {
        Batch batch=batchIt.next();
        nextBatchIt=batch.iterator();
      }
 else       nextBatchIt=null;
    }
  }
;
}
