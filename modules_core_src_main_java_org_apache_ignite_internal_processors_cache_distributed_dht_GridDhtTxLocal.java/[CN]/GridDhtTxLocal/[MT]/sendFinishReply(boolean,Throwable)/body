{
  if (nearFinFutId != null) {
    if (nearNodeId.equals(cctx.localNodeId())) {
      if (log.isDebugEnabled())       log.debug("Skipping response sending to local node: " + this);
      return;
    }
    GridNearTxFinishResponse res=new GridNearTxFinishResponse(nearXidVer,threadId,nearFinFutId,nearFinMiniId,err);
    try {
      cctx.io().send(nearNodeId,res,ioPolicy());
      if (cctx.txFinishMessageLogger().isDebugEnabled()) {
        cctx.txFinishMessageLogger().debug("Sent near finish response [txId=" + nearXidVersion() + ", dhtTxId="+ xidVersion()+ ", node="+ nearNodeId+ ']');
      }
    }
 catch (    ClusterTopologyCheckedException ignored) {
      if (cctx.txFinishMessageLogger().isDebugEnabled()) {
        cctx.txFinishMessageLogger().debug("Failed to send near finish response, node left [txId=" + nearXidVersion() + ", dhtTxId="+ xidVersion()+ ", node="+ nearNodeId()+ ']');
      }
    }
catch (    Throwable ex) {
      U.error(log,"Failed to send finish response to node (transaction was " + (commit ? "committed" : "rolledback") + ") [txId="+ nearXidVersion()+ ", dhtTxId="+ xidVersion()+ ", node="+ nearNodeId+ ", res="+ res+ ']',ex);
      if (ex instanceof Error)       throw (Error)ex;
    }
  }
 else {
    if (cctx.txFinishMessageLogger().isDebugEnabled()) {
      cctx.txFinishMessageLogger().debug("Will not send finish reply because sender node has not sent finish " + "request yet [txId=" + nearXidVersion() + ", dhtTxId="+ xidVersion()+ ", node="+ nearNodeId()+ ']');
    }
  }
}
