{
  boolean found=false;
  for (int i=0; i < gridCount(); i++) {
    IgniteKernal grid=(IgniteKernal)grid(i);
    GridCacheAdapter<Object,Object> cache=grid.context().cache().internalCache();
    GridCacheEntryEx e=cache.peekEx(key);
    if (e == null && cache.context().isNear())     e=cache.context().near().dht().peekEx(key);
    if (e == null)     assertTrue("Not found " + key,!cache.affinity().isPrimaryOrBackup(grid.localNode(),key));
 else {
      found=true;
      if (wait) {
        final GridCacheEntryEx e0=e;
        GridTestUtils.waitForCondition(new PA(){
          @Override public boolean apply(){
            try {
              return e0.ttl() == ttl;
            }
 catch (            Exception e) {
              fail("Unexpected error: " + e);
              return true;
            }
          }
        }
,3000);
      }
      boolean primary=cache.affinity().isPrimary(grid.localNode(),key);
      boolean backup=cache.affinity().isBackup(grid.localNode(),key);
      assertEquals("Unexpected ttl [grid=" + i + ", key="+ key+ ", e="+ e+ ", primary="+ primary+ ", backup="+ backup+ ']',ttl,e.ttl());
      if (ttl > 0)       assertTrue(e.expireTime() > 0);
 else       assertEquals(0,e.expireTime());
    }
  }
  assertTrue(found);
}
