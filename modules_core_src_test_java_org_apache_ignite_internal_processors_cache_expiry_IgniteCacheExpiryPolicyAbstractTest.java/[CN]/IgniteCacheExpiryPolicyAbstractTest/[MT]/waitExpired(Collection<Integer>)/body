{
  GridTestUtils.waitForCondition(new GridAbsPredicate(){
    @Override public boolean apply(){
      for (int i=0; i < gridCount(); i++) {
        for (        Integer key : keys) {
          Object val=jcache(i).localPeek(key,CachePeekMode.ONHEAP);
          if (val != null) {
            return false;
          }
        }
      }
      return false;
    }
  }
,3000);
  GridCache<Integer,Object> cache=cache(0);
  for (int i=0; i < gridCount(); i++) {
    ClusterNode node=grid(i).cluster().localNode();
    for (    Integer key : keys) {
      Object val=jcache(i).localPeek(key,CachePeekMode.ONHEAP);
      if (val != null) {
        log.info("Unexpected value [grid=" + i + ", primary="+ cache.affinity().isPrimary(node,key)+ ", backup="+ cache.affinity().isBackup(node,key)+ ']');
      }
      assertNull("Unexpected non-null value for grid " + i,val);
    }
  }
  storeMap.clear();
  for (int i=0; i < gridCount(); i++) {
    for (    Integer key : keys)     assertNull("Unexpected non-null value for grid " + i,jcache(i).get(key));
  }
}
