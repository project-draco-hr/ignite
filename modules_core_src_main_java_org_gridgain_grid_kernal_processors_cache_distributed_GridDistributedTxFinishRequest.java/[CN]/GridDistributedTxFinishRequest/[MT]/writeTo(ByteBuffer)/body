{
  commState.setBuffer(buf);
  if (!super.writeTo(buf))   return false;
  if (!commState.typeWritten) {
    if (!commState.putByte(directType()))     return false;
    commState.typeWritten=true;
  }
switch (commState.idx) {
case 8:
    if (!commState.putCacheVersion(baseVer))     return false;
  commState.idx++;
case 9:
if (!commState.putBoolean(commit)) return false;
commState.idx++;
case 10:
if (!commState.putCacheVersion(commitVer)) return false;
commState.idx++;
case 11:
if (!commState.putGridUuid(futId)) return false;
commState.idx++;
case 12:
if (!commState.putByteArray(grpLockKeyBytes)) return false;
commState.idx++;
case 13:
if (!commState.putBoolean(invalidate)) return false;
commState.idx++;
case 14:
if (!commState.putBoolean(syncCommit)) return false;
commState.idx++;
case 15:
if (!commState.putBoolean(syncRollback)) return false;
commState.idx++;
case 16:
if (recoveryWritesBytes != null) {
if (commState.it == null) {
if (!commState.putInt(recoveryWritesBytes.size())) return false;
commState.it=recoveryWritesBytes.iterator();
}
while (commState.it.hasNext() || commState.cur != NULL) {
if (commState.cur == NULL) commState.cur=commState.it.next();
if (!commState.putByteArray((byte[])commState.cur)) return false;
commState.cur=NULL;
}
commState.it=null;
}
 else {
if (!commState.putInt(-1)) return false;
}
commState.idx++;
case 17:
if (!commState.putLong(threadId)) return false;
commState.idx++;
case 18:
if (!commState.putInt(txSize)) return false;
commState.idx++;
case 19:
if (writeEntriesBytes != null) {
if (commState.it == null) {
if (!commState.putInt(writeEntriesBytes.size())) return false;
commState.it=writeEntriesBytes.iterator();
}
while (commState.it.hasNext() || commState.cur != NULL) {
if (commState.cur == NULL) commState.cur=commState.it.next();
if (!commState.putByteArray((byte[])commState.cur)) return false;
commState.cur=NULL;
}
commState.it=null;
}
 else {
if (!commState.putInt(-1)) return false;
}
commState.idx++;
case 20:
if (!commState.putBoolean(sys)) return false;
commState.idx++;
}
return true;
}
