{
  final GridCache<String,String> cache=grid(0).cache(null);
  final AtomicBoolean done=new AtomicBoolean();
  IgniteFuture<?> fut1=multithreadedAsync(new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      while (!done.get()) {
        int i=RAND.nextInt(500);
        boolean rmv=RAND.nextBoolean();
        if (rmv)         cache.remove("key" + i);
 else         cache.put("key" + i,"val" + i);
      }
      return null;
    }
  }
,3);
  IgniteFuture<?> fut2=multithreadedAsync(new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      while (!done.get()) {
        CacheEntry<String,String> entry=cache.randomEntry();
        info("Random entry key: " + (entry != null ? entry.getKey() : "N/A"));
      }
      return null;
    }
  }
,1);
  Thread.sleep(60 * 1000);
  done.set(true);
  fut1.get();
  fut2.get();
}
