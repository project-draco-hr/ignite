{
  int threadCnt=150;
  final int keyCnt=10000;
  final int valCnt=10000;
  final Grid g=grid(0);
  final GridCache<Long,TestValue> c=g.cache(null);
  assertEquals(0,g.cache(null).size());
  assertEquals(0,c.queries().createSqlQuery(String.class,"1 = 1").execute().get().size());
  assertEquals(0,c.queries().createSqlQuery(Long.class,"1 = 1").execute().get().size());
  Random rnd=new Random();
  final AtomicBoolean done=new AtomicBoolean();
  GridFuture<?> fut=multithreadedAsync(new CAX(){
    @Override public void applyx() throws GridException {
      Random rnd=new Random();
      while (!done.get()) {
        long key=(long)rnd.nextInt(keyCnt);
switch (rnd.nextInt(1)) {
case 0:
          c.putx(key,new TestValue(rnd.nextInt(valCnt)));
        break;
case 1:
      c.remove(key);
    break;
case 2:
  c.get(key);
break;
case 3:
break;
case 4:
if (evictsEnabled()) c.evict(key);
break;
}
}
}
}
,threadCnt);
Thread.sleep(DURATION);
done.set(true);
fut.get();
}
