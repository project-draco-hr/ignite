{
  enterBusy();
  try {
    if (rmtClient != null)     throw new IOException("File system is already initialized: " + rmtClient);
    A.notNull(name,"name");
    A.notNull(cfg,"cfg");
    if (!GGFS_SCHEME.equals(name.getScheme()))     throw new IOException("Illegal file system URI [expected=" + GGFS_SCHEME + "://[name]/[optional_path], actual="+ name+ ']');
    uriAuthority=name.getAuthority();
    seqReadsBeforePrefetch=parameter(cfg,PARAM_GGFS_SEQ_READS_BEFORE_PREFETCH,uriAuthority,0);
    if (seqReadsBeforePrefetch > 0)     seqReadsBeforePrefetchOverride=true;
    dfltReplication=(short)cfg.getInt("dfs.replication",3);
    colocateFileWrites=parameter(cfg,PARAM_GGFS_COLOCATED_WRITES,uriAuthority,false);
    String logDirCfg=parameter(cfg,PARAM_GGFS_LOG_DIR,uriAuthority,DFLT_GGFS_LOG_DIR);
    File logDirFile=U.resolveGridGainPath(logDirCfg);
    String logDir=logDirFile != null ? logDirFile.getAbsolutePath() : null;
    rmtClient=new NewGridGgfsHadoopWrapper(uriAuthority,logDir,LOG);
    GridGgfsHandshakeResponse handshake=rmtClient.handshake(logDir);
    grpBlockSize=handshake.blockSize();
    GridGgfsPaths paths=handshake.secondaryPaths();
    Boolean logEnabled=parameter(cfg,PARAM_GGFS_LOG_ENABLED,uriAuthority,false);
    if (handshake.sampling() != null ? handshake.sampling() : logEnabled) {
      if (logDir == null)       throw new IOException("Failed to resolve log directory: " + logDirCfg);
      Integer batchSize=parameter(cfg,PARAM_GGFS_LOG_BATCH_SIZE,uriAuthority,DFLT_GGFS_LOG_BATCH_SIZE);
      clientLog=GridGgfsHadoopLogger.logger(uriAuthority,handshake.ggfsName(),logDir,batchSize);
    }
 else     clientLog=GridGgfsHadoopLogger.disabledLogger();
    modeRslvr=new GridGgfsModeResolver(paths.defaultMode(),paths.pathModes());
    boolean initSecondary=paths.defaultMode() == PROXY;
    if (paths.pathModes() != null) {
      for (      T2<GridGgfsPath,GridGgfsMode> pathMode : paths.pathModes()) {
        GridGgfsMode mode=pathMode.getValue();
        initSecondary|=mode == PROXY;
      }
    }
    if (initSecondary) {
      if (paths.secondaryConfigurationPath() == null)       throw new IOException("Failed to connect to the secondary file system because configuration " + "path is not provided.");
      if (paths.secondaryUri() == null)       throw new IOException("Failed to connect to the secondary file system because URI is not " + "provided.");
      String secondaryConfPath=paths.secondaryConfigurationPath();
      try {
        secondaryUri=new URI(paths.secondaryUri());
        URL secondaryCfgUrl=U.resolveGridGainUrl(secondaryConfPath);
        if (secondaryCfgUrl == null)         throw new IOException("Failed to resolve secondary file system config URL: " + secondaryConfPath);
        Configuration conf=new Configuration();
        conf.addResource(secondaryCfgUrl);
        String prop=String.format("fs.%s.impl.disable.cache",secondaryUri.getScheme());
        conf.setBoolean(prop,true);
        secondaryFs=AbstractFileSystem.get(secondaryUri,conf);
      }
 catch (      URISyntaxException ignore) {
        throw new IOException("Failed to resolve secondary file system URI: " + paths.secondaryUri());
      }
catch (      IOException e) {
        throw new IOException("Failed to connect to the secondary file system: " + paths.secondaryUri(),e);
      }
    }
  }
  finally {
    leaveBusy();
  }
}
