{
switch (type) {
case OP_LOCAL_QUERY:
{
      Collection<EventAdapter> result=events.localQuery(F.<EventAdapter>alwaysTrue(),readEventTypes(reader));
      writer.writeInt(result.size());
      for (      EventAdapter e : result)       platformCtx.writeEvent(writer,e);
      break;
    }
case OP_WAIT_FOR_LOCAL:
{
    boolean hasFilter=reader.readBoolean();
    IgnitePredicate pred=hasFilter ? localFilter(reader.readLong()) : null;
    int[] eventTypes=readEventTypes(reader);
    EventAdapter result=(EventAdapter)events.waitForLocal(pred,eventTypes);
    platformCtx.writeEvent(writer,result);
    break;
  }
case OP_REMOTE_LISTEN:
{
  int bufSize=reader.readInt();
  long interval=reader.readLong();
  boolean autoUnsubscribe=reader.readBoolean();
  boolean hasLocFilter=reader.readBoolean();
  PlatformAwareEventFilter locFilter=hasLocFilter ? localFilter(reader.readLong()) : null;
  boolean hasRmtFilter=reader.readBoolean();
  UUID listenId;
  if (hasRmtFilter) {
    PlatformAwareEventFilter rmtFilter=platformCtx.createRemoteEventFilter(reader.readObjectDetached(),readEventTypes(reader));
    listenId=events.remoteListen(bufSize,interval,autoUnsubscribe,locFilter,rmtFilter);
  }
 else   listenId=events.remoteListen(bufSize,interval,autoUnsubscribe,locFilter,null,readEventTypes(reader));
  writer.writeUuid(listenId);
  break;
}
case OP_REMOTE_QUERY:
{
Object pred=reader.readObjectDetached();
long timeout=reader.readLong();
int[] types=readEventTypes(reader);
PlatformAwareEventFilter filter=platformCtx.createRemoteEventFilter(pred,types);
Collection<EventAdapter> result=events.remoteQuery(filter,timeout);
if (result == null) writer.writeInt(-1);
 else {
  writer.writeInt(result.size());
  for (  EventAdapter e : result)   platformCtx.writeEvent(writer,e);
}
break;
}
default :
super.processInStreamOutStream(type,reader,writer);
}
}
