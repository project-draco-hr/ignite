{
  Map<Class<? extends IgniteCheckedException>,C1<IgniteCheckedException,IgniteException>> m=new HashMap<>();
  m.put(IgniteInterruptedCheckedException.class,new C1<IgniteCheckedException,IgniteException>(){
    @Override public IgniteException apply(    IgniteCheckedException e){
      return new IgniteInterruptedException(e.getMessage(),(InterruptedException)e.getCause());
    }
  }
);
  m.put(IgniteFutureCancelledCheckedException.class,new C1<IgniteCheckedException,IgniteException>(){
    @Override public IgniteException apply(    IgniteCheckedException e){
      return new IgniteFutureCancelledException(e.getMessage(),e);
    }
  }
);
  m.put(IgniteFutureTimeoutCheckedException.class,new C1<IgniteCheckedException,IgniteException>(){
    @Override public IgniteException apply(    IgniteCheckedException e){
      return new IgniteFutureTimeoutException(e.getMessage(),e);
    }
  }
);
  m.put(ClusterGroupEmptyCheckedException.class,new C1<IgniteCheckedException,IgniteException>(){
    @Override public IgniteException apply(    IgniteCheckedException e){
      return new ClusterGroupEmptyException(e.getMessage(),e);
    }
  }
);
  m.put(ClusterTopologyCheckedException.class,new C1<IgniteCheckedException,IgniteException>(){
    @Override public IgniteException apply(    IgniteCheckedException e){
      return new ClusterTopologyException(e.getMessage(),e);
    }
  }
);
  m.put(IgniteDeploymentCheckedException.class,new C1<IgniteCheckedException,IgniteException>(){
    @Override public IgniteException apply(    IgniteCheckedException e){
      return new IgniteDeploymentException(e.getMessage(),e);
    }
  }
);
  m.put(ComputeTaskTimeoutCheckedException.class,new C1<IgniteCheckedException,IgniteException>(){
    @Override public IgniteException apply(    IgniteCheckedException e){
      return new ComputeTaskTimeoutException(e.getMessage(),e);
    }
  }
);
  m.put(ComputeTaskCancelledCheckedException.class,new C1<IgniteCheckedException,IgniteException>(){
    @Override public IgniteException apply(    IgniteCheckedException e){
      return new ComputeTaskCancelledException(e.getMessage(),e);
    }
  }
);
  m.put(IgniteTxRollbackCheckedException.class,new C1<IgniteCheckedException,IgniteException>(){
    @Override public IgniteException apply(    IgniteCheckedException e){
      return new IgniteTxRollbackException(e.getMessage(),e);
    }
  }
);
  m.put(IgniteTxHeuristicCheckedException.class,new C1<IgniteCheckedException,IgniteException>(){
    @Override public IgniteException apply(    IgniteCheckedException e){
      return new IgniteTxHeuristicException(e.getMessage(),e);
    }
  }
);
  m.put(IgniteTxTimeoutCheckedException.class,new C1<IgniteCheckedException,IgniteException>(){
    @Override public IgniteException apply(    IgniteCheckedException e){
      return new IgniteTxTimeoutException(e.getMessage(),e);
    }
  }
);
  m.put(IgniteTxOptimisticCheckedException.class,new C1<IgniteCheckedException,IgniteException>(){
    @Override public IgniteException apply(    IgniteCheckedException e){
      return new IgniteTxOptimisticException(e.getMessage(),e);
    }
  }
);
  return m;
}
