{
  if (!processed.add(obj))   return null;
  if (obj instanceof GridPeerDeployAware) {
    GridPeerDeployAware p=(GridPeerDeployAware)obj;
    if (!top && p.deployClass() != null)     return p;
    for (Class<?> cls=obj.getClass(); !cls.equals(Object.class); cls=cls.getSuperclass()) {
      IgniteBiTuple<Class<?>,Collection<Field>> tup=p2pFields.get(cls.getName());
      boolean cached=tup != null && tup.get1().equals(cls);
      Iterable<Field> fields=cached ? tup.get2() : Arrays.asList(cls.getDeclaredFields());
      if (!cached) {
        tup=new IgniteBiTuple<>();
        tup.set1(cls);
      }
      for (      Field f : fields)       if (cached || f.getName().startsWith("this$") || f.getName().startsWith("val$")) {
        if (!cached) {
          f.setAccessible(true);
          if (tup.get2() == null)           tup.set2(new LinkedList<Field>());
          tup.get2().add(f);
        }
        try {
          Object o=f.get(obj);
          if (o != null) {
            p=nestedPeerDeployAware(o,false,processed);
            if (p != null) {
              if (!cached)               p2pFields.put(cls.getName(),tup);
              return p;
            }
          }
        }
 catch (        IllegalAccessException ignored) {
          return null;
        }
      }
    }
  }
 else   if (isIgnite(obj.getClass()))   return null;
 else   if (obj instanceof Iterable)   for (  Object o : (Iterable<?>)obj) {
    GridPeerDeployAware p=nestedPeerDeployAware(o,false,processed);
    if (p != null)     return p;
  }
 else   if (obj.getClass().isArray()) {
    Class<?> type=obj.getClass().getComponentType();
    if (!type.isPrimitive() && !isJdk(type)) {
      Object[] arr=(Object[])obj;
      for (      Object o : arr) {
        GridPeerDeployAware p=nestedPeerDeployAware(o,false,processed);
        if (p != null)         return p;
      }
    }
  }
  return null;
}
