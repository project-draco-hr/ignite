{
  if (ctx.config().isDaemon()) {
    sharedCtx=createSharedContext(ctx,CU.startStoreSessionListeners(ctx,null));
    for (    GridCacheSharedManager mgr : sharedCtx.managers())     mgr.start(sharedCtx);
    return;
  }
  DeploymentMode depMode=ctx.config().getDeploymentMode();
  if (!F.isEmpty(ctx.config().getCacheConfiguration())) {
    if (depMode != CONTINUOUS && depMode != SHARED)     U.warn(log,"Deployment mode for cache is not CONTINUOUS or SHARED " + "(it is recommended that you change deployment mode and restart): " + depMode,"Deployment mode for cache is not CONTINUOUS or SHARED.");
  }
  maxRebalanceOrder=validatePreloadOrder(ctx.config().getCacheConfiguration());
  ctx.discovery().setCustomEventListener(DynamicCacheChangeBatch.class,new CustomEventListener<DynamicCacheChangeBatch>(){
    @Override public void onCustomEvent(    ClusterNode snd,    DynamicCacheChangeBatch msg){
      onCacheChangeRequested(msg);
    }
  }
);
  Set<String> internalCaches=new HashSet<>();
  FileSystemConfiguration[] igfsCfgs=ctx.grid().configuration().getFileSystemConfiguration();
  if (igfsCfgs != null) {
    for (    FileSystemConfiguration igfsCfg : igfsCfgs) {
      internalCaches.add(maskNull(igfsCfg.getMetaCacheName()));
      internalCaches.add(maskNull(igfsCfg.getDataCacheName()));
    }
  }
  if (IgniteComponentType.HADOOP.inClassPath())   internalCaches.add(CU.SYS_CACHE_HADOOP_MR);
  internalCaches.add(CU.ATOMICS_CACHE_NAME);
  CacheConfiguration[] cfgs=ctx.config().getCacheConfiguration();
  sharedCtx=createSharedContext(ctx,CU.startStoreSessionListeners(ctx,ctx.config().getCacheStoreSessionListenerFactories()));
  ctx.performance().add("Disable serializable transactions (set 'txSerializableEnabled' to false)",!ctx.config().getTransactionConfiguration().isTxSerializableEnabled());
  for (int i=0; i < cfgs.length; i++) {
    checkSerializable(cfgs[i]);
    CacheConfiguration<?,?> cfg=new CacheConfiguration(cfgs[i]);
    CacheObjectContext cacheObjCtx=ctx.cacheObjects().contextForCache(cfg);
    initialize(cfg,cacheObjCtx);
    cfgs[i]=cfg;
    String masked=maskNull(cfg.getName());
    if (registeredCaches.containsKey(masked)) {
      String cacheName=cfg.getName();
      if (cacheName != null)       throw new IgniteCheckedException("Duplicate cache name found (check configuration and " + "assign unique name to each cache): " + U.maskName(cacheName));
 else       throw new IgniteCheckedException("Default cache has already been configured (check configuration and " + "assign unique name to each cache).");
    }
    CacheType cacheType;
    if (CU.isUtilityCache(cfg.getName()))     cacheType=CacheType.UTILITY;
 else     if (CU.isMarshallerCache(cfg.getName()))     cacheType=CacheType.MARSHALLER;
 else     if (internalCaches.contains(maskNull(cfg.getName())))     cacheType=CacheType.INTERNAL;
 else     cacheType=CacheType.USER;
    boolean template=cfg.getName() != null && cfg.getName().endsWith("*");
    DynamicCacheDescriptor desc=new DynamicCacheDescriptor(ctx,cfg,cacheType,template,IgniteUuid.randomUuid());
    desc.locallyConfigured(true);
    desc.staticallyConfigured(true);
    if (!template) {
      registeredCaches.put(masked,desc);
      ctx.discovery().setCacheFilter(cfg.getName(),cfg.getNodeFilter(),cfg.getNearConfiguration() != null && cfg.getCacheMode() == PARTITIONED,cfg.getCacheMode() == LOCAL);
      ctx.discovery().addClientNode(cfg.getName(),ctx.localNodeId(),cfg.getNearConfiguration() != null);
      if (!cacheType.userCache())       stopSeq.addLast(cfg.getName());
 else       stopSeq.addFirst(cfg.getName());
    }
 else {
      if (log.isDebugEnabled())       log.debug("Use cache configuration as template: " + cfg);
      registeredTemplates.put(masked,desc);
    }
    if (cfg.getName() == null) {
      DynamicCacheDescriptor desc0=new DynamicCacheDescriptor(ctx,cfg,cacheType,true,IgniteUuid.randomUuid());
      desc0.locallyConfigured(true);
      desc0.staticallyConfigured(true);
      registeredTemplates.put(masked,desc0);
    }
  }
  for (  GridCacheSharedManager mgr : sharedCtx.managers())   mgr.start(sharedCtx);
  transactions=new IgniteTransactionsImpl(sharedCtx);
  if (log.isDebugEnabled())   log.debug("Started cache processor.");
}
