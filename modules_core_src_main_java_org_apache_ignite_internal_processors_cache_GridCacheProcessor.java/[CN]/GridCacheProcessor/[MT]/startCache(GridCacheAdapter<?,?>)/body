{
  GridCacheContext<?,?> cacheCtx=cache.context();
  ctx.query().onCacheStart(cacheCtx);
  ctx.continuous().onCacheStart(cacheCtx);
  CacheConfiguration cfg=cacheCtx.config();
  if (cfg.isKeepBinaryInStore() && cfg.isKeepBinaryInStore() != CacheConfiguration.DFLT_KEEP_BINARY_IN_STORE && !(ctx.config().getMarshaller() instanceof BinaryMarshaller))   U.warn(log,"CacheConfiguration.isKeepBinaryInStore() configuration property will be ignored because " + "BinaryMarshaller is not used");
  for (  GridCacheManager mgr : F.view(cacheCtx.managers(),F.notContains(dhtExcludes(cacheCtx))))   mgr.start(cacheCtx);
  cacheCtx.initConflictResolver();
  if (cfg.getCacheMode() != LOCAL && GridCacheUtils.isNearEnabled(cfg)) {
    GridCacheContext<?,?> dhtCtx=cacheCtx.near().dht().context();
    for (    GridCacheManager mgr : dhtManagers(dhtCtx))     mgr.start(dhtCtx);
    dhtCtx.initConflictResolver();
    dhtCtx.cache().start();
    if (log.isDebugEnabled())     log.debug("Started DHT cache: " + dhtCtx.cache().name());
  }
  cacheCtx.cache().start();
  cacheCtx.onStarted();
  if (log.isInfoEnabled())   log.info("Started cache [name=" + U.maskName(cfg.getName()) + ", mode="+ cfg.getCacheMode()+ ']');
}
