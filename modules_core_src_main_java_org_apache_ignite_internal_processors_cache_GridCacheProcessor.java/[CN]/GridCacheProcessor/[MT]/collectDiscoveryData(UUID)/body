{
  Collection<DynamicCacheChangeRequest> reqs=new ArrayList<>(registeredCaches.size() + registeredTemplates.size());
  boolean reconnect=ctx.localNodeId().equals(nodeId) && cachesOnDisconnect != null;
  Map<String,DynamicCacheDescriptor> descs=reconnect ? cachesOnDisconnect : registeredCaches;
  for (  DynamicCacheDescriptor desc : descs.values()) {
    DynamicCacheChangeRequest req=new DynamicCacheChangeRequest(desc.cacheConfiguration().getName(),null);
    req.startCacheConfiguration(desc.cacheConfiguration());
    req.cacheType(desc.cacheType());
    req.deploymentId(desc.deploymentId());
    reqs.add(req);
  }
  for (  DynamicCacheDescriptor desc : registeredTemplates.values()) {
    DynamicCacheChangeRequest req=new DynamicCacheChangeRequest(desc.cacheConfiguration().getName(),null);
    req.startCacheConfiguration(desc.cacheConfiguration());
    req.template(true);
    req.deploymentId(desc.deploymentId());
    reqs.add(req);
  }
  DynamicCacheChangeBatch req=new DynamicCacheChangeBatch(reqs);
  Map<String,Map<UUID,Boolean>> clientNodesMap=ctx.discovery().clientNodesMap();
  if (reconnect) {
    clientNodesMap=U.newHashMap(caches.size());
    for (    GridCacheAdapter<?,?> cache : caches.values()) {
      Boolean nearEnabled=cache.isNear();
      Map<UUID,Boolean> map=U.newHashMap(1);
      map.put(nodeId,nearEnabled);
      clientNodesMap.put(cache.name(),map);
    }
  }
  req.clientNodes(clientNodesMap);
  req.clientReconnect(reconnect);
  return req;
}
