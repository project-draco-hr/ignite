{
  try {
    portables=true;
    startGrids(2);
    awaitPartitionMapExchange();
    Ignite g0=grid(0);
    IgniteDataStreamer<Integer,TestObject> dataLdr=g0.dataStreamer(null);
    Map<Integer,TestObject> map=U.newHashMap(KEYS_COUNT);
    for (int i=0; i < KEYS_COUNT; i++)     map.put(i,new TestObject(i));
    dataLdr.addData(map);
    dataLdr.close(false);
    checkDistribution(grid(0));
    checkDistribution(grid(1));
    Random rnd=new Random();
    IgniteCache<Integer,TestObject> c=g0.cache(null);
    for (int i=0; i < 100; i++) {
      Integer k=rnd.nextInt(KEYS_COUNT);
      TestObject v=c.get(k);
      assertEquals(k,v.val());
    }
    IgniteCache<Integer,BinaryObject> c2=((IgniteCacheProxy)c).keepPortable();
    for (int i=0; i < 100; i++) {
      Integer k=rnd.nextInt(KEYS_COUNT);
      BinaryObject v=c2.get(k);
      assertEquals(k,v.field("val"));
    }
  }
  finally {
    G.stopAll(true);
  }
}
