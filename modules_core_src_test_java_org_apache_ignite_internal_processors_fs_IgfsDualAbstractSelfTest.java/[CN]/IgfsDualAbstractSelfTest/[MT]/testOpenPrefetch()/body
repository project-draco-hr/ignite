{
  create(ggfsSecondary,paths(DIR,SUBDIR),paths(FILE));
  final int blockSize=ggfs.info(FILE).blockSize();
  IgniteFsOutputStream out=ggfsSecondary.append(FILE,false);
  int totalWritten=0;
  while (totalWritten < blockSize * 2 + chunk.length) {
    out.write(chunk);
    totalWritten+=chunk.length;
  }
  out.close();
  awaitFileClose(ggfsSecondary,FILE);
  int totalRead=0;
  IgniteFsInputStream in=ggfs.open(FILE,blockSize);
  final byte[] readBuf=new byte[1024];
  while (totalRead + readBuf.length <= blockSize * 2) {
    in.read(readBuf);
    totalRead+=readBuf.length;
  }
  GridGgfsMetaManager meta=ggfs.context().meta();
  GridGgfsFileInfo info=meta.info(meta.fileId(FILE));
  GridGgfsBlockKey key=new GridGgfsBlockKey(info.id(),info.affinityKey(),info.evictExclude(),2);
  GridCache<GridGgfsBlockKey,byte[]> dataCache=ggfs.context().kernalContext().cache().cache(ggfs.configuration().getDataCacheName());
  for (int i=0; i < 10; i++) {
    if (dataCache.containsKey(key))     break;
 else     U.sleep(100);
  }
  ggfsSecondary.delete(FILE,false);
  U.sleep(300);
  totalRead=0;
  in.seek(blockSize * 2);
  while (totalRead + readBuf.length <= blockSize) {
    in.read(readBuf);
    totalRead+=readBuf.length;
  }
  in.close();
}
