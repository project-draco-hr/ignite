{
  PortableMarshaller marsh=new PortableMarshaller();
  PortableTypeConfiguration customType1=new PortableTypeConfiguration(Value.class.getName());
  customType1.setIdMapper(new PortableIdMapper(){
    @Override public int typeId(    String clsName){
      return 300;
    }
    @Override public int fieldId(    int typeId,    String fieldName){
      return 0;
    }
  }
);
  PortableTypeConfiguration customType2=new PortableTypeConfiguration("org.gridgain.NonExistentClass1");
  customType2.setIdMapper(new PortableIdMapper(){
    @Override public int typeId(    String clsName){
      return 400;
    }
    @Override public int fieldId(    int typeId,    String fieldName){
      return 0;
    }
  }
);
  PortableTypeConfiguration customType3=new PortableTypeConfiguration("NonExistentClass2");
  customType3.setIdMapper(new PortableIdMapper(){
    @Override public int typeId(    String clsName){
      return 500;
    }
    @Override public int fieldId(    int typeId,    String fieldName){
      return 0;
    }
  }
);
  PortableTypeConfiguration customType4=new PortableTypeConfiguration("NonExistentClass5");
  customType4.setIdMapper(new PortableIdMapper(){
    @Override public int typeId(    String clsName){
      return 0;
    }
    @Override public int fieldId(    int typeId,    String fieldName){
      return 0;
    }
  }
);
  marsh.setTypeConfigurations(Arrays.asList(new PortableTypeConfiguration(Key.class.getName()),new PortableTypeConfiguration("org.gridgain.NonExistentClass3"),new PortableTypeConfiguration("NonExistentClass4"),customType1,customType2,customType3,customType4));
  PortableContext ctx=initPortableContext(marsh);
  assertEquals("notconfiguredclass".hashCode(),ctx.typeId("NotConfiguredClass"));
  assertEquals("key".hashCode(),ctx.typeId("Key"));
  assertEquals("nonexistentclass3".hashCode(),ctx.typeId("NonExistentClass3"));
  assertEquals("nonexistentclass4".hashCode(),ctx.typeId("NonExistentClass4"));
  assertEquals(300,ctx.typeId(getClass().getSimpleName() + "$Value"));
  assertEquals(400,ctx.typeId("NonExistentClass1"));
  assertEquals(500,ctx.typeId("NonExistentClass2"));
  assertEquals("nonexistentclass5".hashCode(),ctx.typeId("NonExistentClass5"));
}
