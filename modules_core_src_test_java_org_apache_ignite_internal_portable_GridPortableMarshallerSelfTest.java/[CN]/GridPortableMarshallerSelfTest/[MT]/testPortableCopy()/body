{
  PortableMarshaller marsh=new PortableMarshaller();
  marsh.setTypeConfigurations(Arrays.asList(new BinaryTypeConfiguration(SimpleObject.class.getName())));
  SimpleObject obj=simpleObject();
  final BinaryObject po=marshal(obj,marsh);
  BinaryObject copy=copy(po,null);
  assertEquals(obj,copy.deserialize());
  copy=copy(po,new HashMap<String,Object>());
  assertEquals(obj,copy.deserialize());
  Map<String,Object> map=new HashMap<>(1,1.0f);
  map.put("i",3);
  copy=copy(po,map);
  assertEquals((byte)2,copy.<Byte>field("b").byteValue());
  assertEquals((short)2,copy.<Short>field("s").shortValue());
  assertEquals(3,copy.<Integer>field("i").intValue());
  assertEquals(2L,copy.<Long>field("l").longValue());
  assertEquals(2.2f,copy.<Float>field("f").floatValue(),0);
  assertEquals(2.2d,copy.<Double>field("d").doubleValue(),0);
  assertEquals((char)2,copy.<Character>field("c").charValue());
  assertEquals(false,copy.<Boolean>field("bool").booleanValue());
  SimpleObject obj0=copy.deserialize();
  assertEquals((byte)2,obj0.b);
  assertEquals((short)2,obj0.s);
  assertEquals(3,obj0.i);
  assertEquals(2L,obj0.l);
  assertEquals(2.2f,obj0.f,0);
  assertEquals(2.2d,obj0.d,0);
  assertEquals((char)2,obj0.c);
  assertEquals(false,obj0.bool);
  map=new HashMap<>(3,1.0f);
  map.put("b",(byte)3);
  map.put("l",3L);
  map.put("bool",true);
  copy=copy(po,map);
  assertEquals((byte)3,copy.<Byte>field("b").byteValue());
  assertEquals((short)2,copy.<Short>field("s").shortValue());
  assertEquals(2,copy.<Integer>field("i").intValue());
  assertEquals(3L,copy.<Long>field("l").longValue());
  assertEquals(2.2f,copy.<Float>field("f").floatValue(),0);
  assertEquals(2.2d,copy.<Double>field("d").doubleValue(),0);
  assertEquals((char)2,copy.<Character>field("c").charValue());
  assertEquals(true,copy.<Boolean>field("bool").booleanValue());
  obj0=copy.deserialize();
  assertEquals((byte)3,obj0.b);
  assertEquals((short)2,obj0.s);
  assertEquals(2,obj0.i);
  assertEquals(3L,obj0.l);
  assertEquals(2.2f,obj0.f,0);
  assertEquals(2.2d,obj0.d,0);
  assertEquals((char)2,obj0.c);
  assertEquals(true,obj0.bool);
  map=new HashMap<>(8,1.0f);
  map.put("b",(byte)3);
  map.put("s",(short)3);
  map.put("i",3);
  map.put("l",3L);
  map.put("f",3.3f);
  map.put("d",3.3d);
  map.put("c",(char)3);
  map.put("bool",true);
  copy=copy(po,map);
  assertEquals((byte)3,copy.<Byte>field("b").byteValue());
  assertEquals((short)3,copy.<Short>field("s").shortValue());
  assertEquals(3,copy.<Integer>field("i").intValue());
  assertEquals(3L,copy.<Long>field("l").longValue());
  assertEquals(3.3f,copy.<Float>field("f").floatValue(),0);
  assertEquals(3.3d,copy.<Double>field("d").doubleValue(),0);
  assertEquals((char)3,copy.<Character>field("c").charValue());
  assertEquals(true,copy.<Boolean>field("bool").booleanValue());
  obj0=copy.deserialize();
  assertEquals((byte)3,obj0.b);
  assertEquals((short)3,obj0.s);
  assertEquals(3,obj0.i);
  assertEquals(3L,obj0.l);
  assertEquals(3.3f,obj0.f,0);
  assertEquals(3.3d,obj0.d,0);
  assertEquals((char)3,obj0.c);
  assertEquals(true,obj0.bool);
}
