{
  PortableMarshaller marsh=new PortableMarshaller();
  marsh.setTypeConfigurations(Arrays.asList(new BinaryTypeConfiguration(SimpleObject.class.getName())));
  SimpleObject obj=simpleObject();
  BinaryObject po=marshal(obj,marsh);
  assertEquals(obj.hashCode(),po.hashCode());
  assertEquals(obj,po.deserialize());
  assertEquals(obj.b,(byte)po.field("b"));
  assertEquals(obj.s,(short)po.field("s"));
  assertEquals(obj.i,(int)po.field("i"));
  assertEquals(obj.l,(long)po.field("l"));
  assertEquals(obj.f,(float)po.field("f"),0);
  assertEquals(obj.d,(double)po.field("d"),0);
  assertEquals(obj.c,(char)po.field("c"));
  assertEquals(obj.bool,(boolean)po.field("bool"));
  assertEquals(obj.str,po.field("str"));
  assertEquals(obj.uuid,po.field("uuid"));
  assertEquals(obj.date,po.field("date"));
  assertEquals(Date.class,obj.date.getClass());
  assertEquals(obj.ts,po.field("ts"));
  assertArrayEquals(obj.bArr,(byte[])po.field("bArr"));
  assertArrayEquals(obj.sArr,(short[])po.field("sArr"));
  assertArrayEquals(obj.iArr,(int[])po.field("iArr"));
  assertArrayEquals(obj.lArr,(long[])po.field("lArr"));
  assertArrayEquals(obj.fArr,(float[])po.field("fArr"),0);
  assertArrayEquals(obj.dArr,(double[])po.field("dArr"),0);
  assertArrayEquals(obj.cArr,(char[])po.field("cArr"));
  assertBooleanArrayEquals(obj.boolArr,(boolean[])po.field("boolArr"));
  assertArrayEquals(obj.strArr,(String[])po.field("strArr"));
  assertArrayEquals(obj.uuidArr,(UUID[])po.field("uuidArr"));
  assertArrayEquals(obj.dateArr,(Date[])po.field("dateArr"));
  assertArrayEquals(obj.objArr,(Object[])po.field("objArr"));
  assertEquals(obj.col,po.field("col"));
  assertEquals(obj.map,po.field("map"));
  assertEquals(new Integer(obj.enumVal.ordinal()),new Integer(((Enum<?>)po.field("enumVal")).ordinal()));
  assertArrayEquals(ordinals(obj.enumArr),ordinals((Enum<?>[])po.field("enumArr")));
  assertNull(po.field("unknown"));
  BinaryObject innerPo=po.field("inner");
  assertEquals(obj.inner,innerPo.deserialize());
  assertEquals(obj.inner.b,(byte)innerPo.field("b"));
  assertEquals(obj.inner.s,(short)innerPo.field("s"));
  assertEquals(obj.inner.i,(int)innerPo.field("i"));
  assertEquals(obj.inner.l,(long)innerPo.field("l"));
  assertEquals(obj.inner.f,(float)innerPo.field("f"),0);
  assertEquals(obj.inner.d,(double)innerPo.field("d"),0);
  assertEquals(obj.inner.c,(char)innerPo.field("c"));
  assertEquals(obj.inner.bool,(boolean)innerPo.field("bool"));
  assertEquals(obj.inner.str,innerPo.field("str"));
  assertEquals(obj.inner.uuid,innerPo.field("uuid"));
  assertEquals(obj.inner.date,innerPo.field("date"));
  assertEquals(Date.class,obj.inner.date.getClass());
  assertEquals(obj.inner.ts,innerPo.field("ts"));
  assertArrayEquals(obj.inner.bArr,(byte[])innerPo.field("bArr"));
  assertArrayEquals(obj.inner.sArr,(short[])innerPo.field("sArr"));
  assertArrayEquals(obj.inner.iArr,(int[])innerPo.field("iArr"));
  assertArrayEquals(obj.inner.lArr,(long[])innerPo.field("lArr"));
  assertArrayEquals(obj.inner.fArr,(float[])innerPo.field("fArr"),0);
  assertArrayEquals(obj.inner.dArr,(double[])innerPo.field("dArr"),0);
  assertArrayEquals(obj.inner.cArr,(char[])innerPo.field("cArr"));
  assertBooleanArrayEquals(obj.inner.boolArr,(boolean[])innerPo.field("boolArr"));
  assertArrayEquals(obj.inner.strArr,(String[])innerPo.field("strArr"));
  assertArrayEquals(obj.inner.uuidArr,(UUID[])innerPo.field("uuidArr"));
  assertArrayEquals(obj.inner.dateArr,(Date[])innerPo.field("dateArr"));
  assertArrayEquals(obj.inner.objArr,(Object[])innerPo.field("objArr"));
  assertEquals(obj.inner.col,innerPo.field("col"));
  assertEquals(obj.inner.map,innerPo.field("map"));
  assertEquals(new Integer(obj.inner.enumVal.ordinal()),new Integer(((Enum<?>)innerPo.field("enumVal")).ordinal()));
  assertArrayEquals(ordinals(obj.inner.enumArr),ordinals((Enum<?>[])innerPo.field("enumArr")));
  assertNull(innerPo.field("inner"));
  assertNull(innerPo.field("unknown"));
}
