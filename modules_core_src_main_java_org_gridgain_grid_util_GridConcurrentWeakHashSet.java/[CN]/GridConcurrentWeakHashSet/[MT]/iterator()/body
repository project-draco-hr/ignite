{
  removeStale();
  return new Iterator<E>(){
    /** 
 * Storage iterator. 
 */
    private Iterator<WeakReferenceElement<E>> iter=store.iterator();
    /** 
 * Current element. 
 */
    private E elem;
    /** 
 * {@inheritDoc} 
 */
    @Override public boolean hasNext(){
      if (elem == null) {
        while (iter.hasNext()) {
          WeakReferenceElement<E> ref=iter.next();
          E e;
          if (ref != null && (e=ref.get()) != null) {
            elem=e;
            break;
          }
 else           removeStale();
        }
      }
      return elem != null;
    }
    @SuppressWarnings({"IteratorNextCanNotThrowNoSuchElementException"}) @Override public E next(){
      if (elem == null) {
        if (!hasNext())         throw new NoSuchElementException();
      }
      E res=elem;
      elem=null;
      return res;
    }
    /** 
 * {@inheritDoc} 
 */
    @Override public void remove(){
      iter.remove();
    }
  }
;
}
