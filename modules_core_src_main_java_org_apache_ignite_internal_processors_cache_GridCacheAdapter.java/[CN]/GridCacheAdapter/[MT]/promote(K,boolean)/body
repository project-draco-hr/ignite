{
  ctx.denyOnFlags(F.asList(READ,SKIP_SWAP));
  A.notNull(key,"key");
  if (keyCheck)   validateCacheKey(key);
  KeyCacheObject cacheKey=ctx.toCacheKeyObject(key);
  GridCacheSwapEntry unswapped=ctx.swap().readAndRemove(cacheKey);
  if (unswapped == null)   return null;
  GridCacheEntryEx entry=entryEx(cacheKey);
  try {
    if (!entry.initialValue(cacheKey,unswapped))     return null;
  }
 catch (  GridCacheEntryRemovedException ignored) {
    if (log.isDebugEnabled())     log.debug("Entry has been concurrently removed.");
    return null;
  }
  CacheObject val=unswapped.value();
  Object val0=val != null ? val.value(ctx.cacheObjectContext(),true) : null;
  return (V)ctx.unwrapPortableIfNeeded(val0,!deserializePortable);
}
