{
  final boolean replicate=ctx.isDrEnabled();
  final AffinityTopologyVersion topVer=ctx.affinity().affinityTopologyVersion();
  final ExpiryPolicy plc0=plc != null ? plc : ctx.expiry();
  Collection<KeyCacheObject> keys0=ctx.cacheKeysView(keys);
  if (ctx.store().isLocal()) {
    DataStreamerImpl ldr=ctx.kernalContext().dataStream().dataStreamer(ctx.namex());
    try {
      ldr.skipStore(true);
      ldr.keepBinary(keepBinary);
      ldr.receiver(new IgniteDrDataStreamerCacheUpdater());
      LocalStoreLoadClosure c=new LocalStoreLoadClosure(null,ldr,plc0);
      ctx.store().localStoreLoadAll(null,keys0,c);
      c.onDone();
    }
  finally {
      ldr.closeEx(false);
    }
  }
 else {
    final GridCacheVersion ver0=ctx.versions().nextForLoad();
    ctx.store().loadAll(null,keys0,new CI2<KeyCacheObject,Object>(){
      @Override public void apply(      KeyCacheObject key,      Object val){
        long ttl=CU.ttlForLoad(plc0);
        if (ttl == CU.TTL_ZERO)         return;
        loadEntry(key,val,ver0,null,topVer,replicate,ttl);
      }
    }
);
  }
}
