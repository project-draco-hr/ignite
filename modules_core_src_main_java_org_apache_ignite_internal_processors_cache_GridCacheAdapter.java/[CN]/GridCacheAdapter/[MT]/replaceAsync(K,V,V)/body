{
  final boolean statsEnabled=ctx.config().isStatisticsEnabled();
  final long start=statsEnabled ? System.nanoTime() : 0L;
  A.notNull(key,"key",oldVal,"oldVal",newVal,"newVal");
  if (keyCheck)   validateCacheKey(key);
  validateCacheValue(oldVal);
  validateCacheValue(newVal);
  ctx.denyOnLocalRead();
  IgniteInternalFuture<Boolean> fut=asyncOp(new AsyncOp<Boolean>(key){
    @Override public IgniteInternalFuture<Boolean> op(    IgniteTxLocalAdapter tx){
      if (ctx.deploymentEnabled()) {
        try {
          ctx.deploy().registerClass(oldVal);
        }
 catch (        IgniteCheckedException e) {
          return new GridFinishedFuture<>(ctx.kernalContext(),e);
        }
      }
      V oldVal0=oldVal;
      if (ctx.portableEnabled())       oldVal0=(V)ctx.marshalToPortable(oldVal);
      return tx.putAllAsync(ctx,F.t(key,newVal),false,null,-1,ctx.equalsPeekArray(oldVal0)).chain((IgniteClosure<IgniteInternalFuture<GridCacheReturn<CacheObject>>,Boolean>)RET2FLAG);
    }
    @Override public String toString(){
      return "replaceAsync [key=" + key + ", oldVal="+ oldVal+ ", newVal="+ newVal+ ']';
    }
  }
);
  if (statsEnabled)   fut.listenAsync(new UpdatePutAndGetTimeStatClosure<Boolean>(metrics0(),start));
  return fut;
}
