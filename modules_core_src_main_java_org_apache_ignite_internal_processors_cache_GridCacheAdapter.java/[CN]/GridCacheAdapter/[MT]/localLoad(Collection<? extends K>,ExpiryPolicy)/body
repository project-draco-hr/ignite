{
  final boolean replicate=ctx.isDrEnabled();
  final long topVer=ctx.affinity().affinityTopologyVersion();
  final ExpiryPolicy plc0=plc != null ? plc : ctx.expiry();
  if (ctx.store().isLocalStore()) {
    IgniteDataStreamerImpl<K,V> ldr=ctx.kernalContext().<K,V>dataLoad().dataLoader(ctx.namex(),false);
    try {
      ldr.updater(new GridDrDataLoadCacheUpdater<K,V>());
      LocalStoreLoadClosure c=new LocalStoreLoadClosure(null,ldr,plc0);
      ctx.store().localStoreLoadAll(null,keys,c);
      c.onDone();
    }
  finally {
      ldr.closeEx(false);
    }
  }
 else {
    final GridCacheVersion ver0=ctx.versions().nextForLoad();
    ctx.store().loadAllFromStore(null,keys,new CI2<K,V>(){
      @Override public void apply(      K key,      V val){
        long ttl=CU.ttlForLoad(plc0);
        if (ttl == CU.TTL_ZERO)         return;
        loadEntry(key,val,ver0,null,topVer,replicate,ttl);
      }
    }
);
  }
}
