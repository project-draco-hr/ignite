{
  A.notNull(key,"key");
  if (keyCheck)   validateCacheKey(key);
  ctx.checkSecurity(SecurityPermission.CACHE_READ);
  PeekModes modes=parsePeekModes(peekModes,false);
  try {
    KeyCacheObject cacheKey=ctx.toCacheKeyObject(key);
    CacheObject cacheVal=null;
    if (!ctx.isLocal()) {
      AffinityTopologyVersion topVer=ctx.affinity().affinityTopologyVersion();
      int part=ctx.affinity().partition(cacheKey);
      boolean nearKey;
      if (!(modes.near && modes.primary && modes.backup)) {
        boolean keyPrimary=ctx.affinity().primary(ctx.localNode(),part,topVer);
        if (keyPrimary) {
          if (!modes.primary)           return null;
          nearKey=false;
        }
 else {
          boolean keyBackup=ctx.affinity().belongs(ctx.localNode(),part,topVer);
          if (keyBackup) {
            if (!modes.backup)             return null;
            nearKey=false;
          }
 else {
            if (!modes.near)             return null;
            nearKey=true;
            modes.offheap=false;
            modes.swap=false;
          }
        }
      }
 else {
        nearKey=!ctx.affinity().belongs(ctx.localNode(),part,topVer);
        if (nearKey) {
          modes.offheap=false;
          modes.swap=false;
        }
      }
      if (nearKey && !ctx.isNear())       return null;
      if (modes.heap) {
        GridCacheEntryEx e=nearKey ? peekEx(cacheKey) : (ctx.isNear() ? ctx.near().dht().peekEx(cacheKey) : peekEx(cacheKey));
        if (e != null) {
          cacheVal=e.peek(modes.heap,modes.offheap,modes.swap,topVer,plc);
          modes.offheap=false;
          modes.swap=false;
        }
      }
      if (modes.offheap || modes.swap) {
        GridCacheSwapManager swapMgr=ctx.isNear() ? ctx.near().dht().context().swap() : ctx.swap();
        cacheVal=swapMgr.readValue(cacheKey,modes.offheap,modes.swap);
      }
    }
 else     cacheVal=localCachePeek0(cacheKey,modes.heap,modes.offheap,modes.swap,plc);
    Object val=ctx.unwrapPortableIfNeeded(cacheVal,ctx.keepPortable());
    return (V)val;
  }
 catch (  GridCacheEntryRemovedException ignore) {
    if (log.isDebugEnabled())     log.debug("Got removed entry during 'peek': " + key);
    return null;
  }
}
