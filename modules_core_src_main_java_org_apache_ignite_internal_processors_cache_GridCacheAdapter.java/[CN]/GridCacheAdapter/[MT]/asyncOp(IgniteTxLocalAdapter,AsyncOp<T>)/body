{
  IgniteInternalFuture<T> fail=asyncOpAcquire();
  if (fail != null)   return fail;
  FutureHolder holder=lastFut.get();
  holder.lock();
  try {
    IgniteInternalFuture fut=holder.future();
    final IgniteTxLocalAdapter tx0=tx;
    if (fut != null && !fut.isDone()) {
      IgniteInternalFuture<T> f=new GridEmbeddedFuture(fut,new IgniteOutClosure<IgniteInternalFuture>(){
        @Override public IgniteInternalFuture<T> apply(){
          if (ctx.kernalContext().isStopping())           return new GridFinishedFuture<>(new IgniteCheckedException("Operation has been cancelled (node is stopping)."));
          return op.op(tx0).chain(new CX1<IgniteInternalFuture<T>,T>(){
            @Override public T applyx(            IgniteInternalFuture<T> tFut) throws IgniteCheckedException {
              try {
                return tFut.get();
              }
 catch (              IgniteCheckedException e1) {
                tx0.rollbackAsync();
                throw e1;
              }
 finally {
                ctx.shared().txContextReset();
              }
            }
          }
);
        }
      }
);
      saveFuture(holder,f);
      return f;
    }
    final IgniteInternalFuture<T> f=op.op(tx).chain(new CX1<IgniteInternalFuture<T>,T>(){
      @Override public T applyx(      IgniteInternalFuture<T> tFut) throws IgniteCheckedException {
        try {
          return tFut.get();
        }
 catch (        IgniteCheckedException e1) {
          tx0.rollbackAsync();
          throw e1;
        }
 finally {
          ctx.shared().txContextReset();
        }
      }
    }
);
    saveFuture(holder,f);
    if (tx.implicit())     ctx.tm().resetContext();
    return f;
  }
  finally {
    holder.unlock();
  }
}
