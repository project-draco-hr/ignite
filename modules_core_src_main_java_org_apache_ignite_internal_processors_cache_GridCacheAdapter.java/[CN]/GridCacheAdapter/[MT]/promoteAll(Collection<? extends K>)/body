{
  if (F.isEmpty(keys))   return;
  if (keyCheck)   validateCacheKeys(keys);
  Collection<KeyCacheObject> unswap=new ArrayList<>(keys.size());
  for (  K key : keys) {
    KeyCacheObject cacheKey=ctx.toCacheKeyObject(key);
    GridCacheEntryEx entry=peekEx(cacheKey);
    try {
      if (entry == null || entry.obsolete() || entry.isNewLocked()) {
        if (entry != null)         cacheKey=entry.key();
        unswap.add(cacheKey);
      }
    }
 catch (    GridCacheEntryRemovedException ignored) {
    }
  }
  Collection<GridCacheBatchSwapEntry> swapped=ctx.swap().readAndRemove(unswap);
  for (  GridCacheBatchSwapEntry swapEntry : swapped) {
    KeyCacheObject key=swapEntry.key();
    GridCacheEntryEx entry=entryEx(key);
    try {
      entry.initialValue(key,swapEntry);
    }
 catch (    GridCacheEntryRemovedException ignored) {
      if (log.isDebugEnabled())       log.debug("Entry has been concurrently removed.");
    }
  }
}
