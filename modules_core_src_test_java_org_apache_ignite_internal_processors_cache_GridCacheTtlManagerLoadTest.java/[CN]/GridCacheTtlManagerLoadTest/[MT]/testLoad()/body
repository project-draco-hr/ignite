{
  cacheMode=REPLICATED;
  final IgniteKernal g=(IgniteKernal)startGrid(0);
  try {
    final AtomicBoolean stop=new AtomicBoolean();
    IgniteInternalFuture<?> fut=multithreadedAsync(new Callable<Object>(){
      @Override public Object call() throws Exception {
        IgniteCache<Object,Object> cache=g.jcache(null).withExpiryPolicy(new TouchedExpiryPolicy(new Duration(MILLISECONDS,1000)));
        long key=0;
        while (!stop.get()) {
          cache.put(key,key);
          key++;
        }
        return null;
      }
    }
,1);
    GridCacheTtlManager<Object,Object> ttlMgr=g.internalCache().context().ttl();
    for (int i=0; i < 300; i++) {
      U.sleep(1000);
      ttlMgr.printMemoryStats();
    }
    stop.set(true);
    fut.get();
  }
  finally {
    stopAllGrids();
  }
}
