{
  startGridsMultiThreaded(gridCnt);
  try {
    Random rand=new Random();
    int cnt=500;
    for (int i=0; i < cnt; i++) {
      IgniteCache<Integer,String> cache=grid(rand.nextInt(2)).cache(null);
      int key=rand.nextInt(100);
      String val=Integer.toString(key);
      cache.put(key,val);
      if (i % 100 == 0)       info("Stored cache object for key [key=" + key + ", idx="+ i+ ']');
    }
    if (near) {
      for (int i=0; i < gridCnt; i++)       assertEquals(endSize,near(i).nearSize());
      if (endPlcSize >= 0)       checkNearPolicies(endPlcSize);
    }
 else {
      for (int i=0; i < gridCnt; i++) {
        int actual=colocated(i).size();
        assertTrue("Cache size is greater then policy size [expected=" + endSize + ", actual="+ actual+ ']',actual <= endSize + plcBatchSize);
      }
      checkPolicies(endPlcSize);
    }
  }
  finally {
    stopAllGrids();
  }
}
