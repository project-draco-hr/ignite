{
  curActiveSes=metrics.currentActiveSessions();
  execSvcCap=metrics.executorServiceCapacity();
  failuresCnt=metrics.failuresCount();
  maxActiveSes=metrics.maximumActiveSessions();
  pipelineAvgExecNodes=metrics.pipelineAverageExecutionNodes();
  pipelineAvgExecTime=metrics.pipelineAverageExecutionTime();
  pipelineMaxExecNodes=metrics.pipelineMaximumExecutionNodes();
  pipelineMaxExecTime=metrics.pipelineMaximumExecutionTime();
  pipelineMinExecNodes=metrics.pipelineMinimumExecutionNodes();
  pipelineMinExecTime=metrics.pipelineMinimumExecutionTime();
  qryAvgExecNodes=metrics.queryAverageExecutionNodes();
  qryAvgExecTime=metrics.queryAverageExecutionTime();
  qryMaxExecNodes=metrics.queryMaximumExecutionNodes();
  qryMaxExecTime=metrics.queryMaximumExecutionTime();
  qryMinExecNodes=metrics.queryMinimumExecutionNodes();
  qryMinExecTime=metrics.queryMinimumExecutionTime();
  stageActiveExecCnt=metrics.stageActiveExecutionCount();
  stageTotalExecCnt=metrics.stageTotalExecutionCount();
  stageWaitingExecCnt=metrics.stageWaitingExecutionCount();
  Map<String,GridStreamerStageMetrics> map=U.newLinkedHashMap(metrics.stageMetrics().size());
  for (  GridStreamerStageMetrics m : metrics.stageMetrics())   map.put(m.name(),new GridStreamerStageMetricsAdapter(m));
  stageMetrics=Collections.unmodifiableMap(map);
  Map<String,GridStreamerWindowMetrics> map0=U.newLinkedHashMap(metrics.windowMetrics().size());
  for (  GridStreamerWindowMetrics m : metrics.windowMetrics())   map0.put(m.name(),new GridStreamerWindowMetricsAdapter(m));
  windowMetrics=Collections.unmodifiableMap(map0);
}
