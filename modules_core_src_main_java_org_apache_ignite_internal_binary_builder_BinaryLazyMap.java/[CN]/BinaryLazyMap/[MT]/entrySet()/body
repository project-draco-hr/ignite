{
  ensureDelegateInit();
  return new AbstractSet<Entry<Object,Object>>(){
    @Override public boolean contains(    Object o){
      throw new UnsupportedOperationException();
    }
    @Override public Iterator<Entry<Object,Object>> iterator(){
      return new Iterator<Entry<Object,Object>>(){
        /** 
 */
        private final Iterator<Entry<Object,Object>> itr=delegate.entrySet().iterator();
        @Override public boolean hasNext(){
          return itr.hasNext();
        }
        @Override public Entry<Object,Object> next(){
          Entry<Object,Object> res=itr.next();
          final Object val=res.getValue();
          if (val instanceof BinaryLazyValue) {
            return new SimpleEntry<Object,Object>(res.getKey(),val){
              private static final long serialVersionUID=0L;
              @Override public Object getValue(){
                return ((BinaryLazyValue)val).value();
              }
            }
;
          }
          return res;
        }
        @Override public void remove(){
          itr.remove();
        }
      }
;
    }
    @Override public int size(){
      return delegate.size();
    }
  }
;
}
