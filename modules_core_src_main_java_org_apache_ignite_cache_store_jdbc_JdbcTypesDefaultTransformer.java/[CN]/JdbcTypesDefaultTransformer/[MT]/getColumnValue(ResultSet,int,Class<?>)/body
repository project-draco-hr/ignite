{
  Object val=rs.getObject(colIdx);
  if (val == null)   return null;
  if (type == int.class)   return rs.getInt(colIdx);
  if (type == long.class)   return rs.getLong(colIdx);
  if (type == double.class)   return rs.getDouble(colIdx);
  if (type == boolean.class || type == Boolean.class)   return rs.getBoolean(colIdx);
  if (type == byte.class)   return rs.getByte(colIdx);
  if (type == short.class)   return rs.getShort(colIdx);
  if (type == float.class)   return rs.getFloat(colIdx);
  if (type == Integer.class || type == Long.class || type == Double.class || type == Byte.class || type == Short.class || type == Float.class) {
    Number num=(Number)val;
    if (type == Integer.class)     return num.intValue();
 else     if (type == Long.class)     return num.longValue();
 else     if (type == Double.class)     return num.doubleValue();
 else     if (type == Byte.class)     return num.byteValue();
 else     if (type == Short.class)     return num.shortValue();
 else     if (type == Float.class)     return num.floatValue();
  }
  if (type == UUID.class) {
    if (val instanceof UUID)     return val;
    if (val instanceof byte[]) {
      ByteBuffer bb=ByteBuffer.wrap((byte[])val);
      long most=bb.getLong();
      long least=bb.getLong();
      return new UUID(most,least);
    }
    if (val instanceof String)     return UUID.fromString((String)val);
  }
  if (type == java.sql.Date.class && val instanceof java.util.Date)   return new java.sql.Date(((java.util.Date)val).getTime());
  if (type == Timestamp.class && !(val instanceof Timestamp) && val.getClass().getName().startsWith("oracle.sql.TIMESTAMP")) {
    try {
      return val.getClass().getMethod("timestampValue").invoke(val);
    }
 catch (    Exception e) {
      throw new SQLException("Failed to read data of oracle.sql.TIMESTAMP type.",e);
    }
  }
  return val;
}
