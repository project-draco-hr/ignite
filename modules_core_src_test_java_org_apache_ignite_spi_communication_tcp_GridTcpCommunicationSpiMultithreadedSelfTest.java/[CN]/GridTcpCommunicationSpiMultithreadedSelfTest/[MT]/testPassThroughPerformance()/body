{
  reject=true;
  info(">>> Starting pass through performance test. <<<");
  assertEquals("Invalid listener count",getSpiCount(),lsnrs.size());
  final AtomicInteger cntr=new AtomicInteger();
  final int msgCnt=5000;
  long start=System.currentTimeMillis();
  IgniteInternalFuture<?> fut=multithreadedAsync(new Runnable(){
    @Override public void run(){
      try {
        ClusterNode from=nodes.get(0);
        ClusterNode to=nodes.get(1);
        CommunicationSpi<GridTcpCommunicationMessageAdapter> spi=spis.get(from.id());
        while (cntr.getAndIncrement() < msgCnt) {
          GridTestMessage msg=new GridTestMessage(from.id(),msgId.getAndIncrement(),0);
          msg.payload(new byte[10 * 1024]);
          spi.sendMessage(to,msg);
        }
      }
 catch (      IgniteCheckedException e) {
        fail("Unable to send message: " + e.getMessage());
      }
    }
  }
,5,"message-sender");
  fut.get();
  info(">>> Sent all messages in " + (System.currentTimeMillis() - start) + " milliseconds");
  assertEquals("Invalid count of messages was sent",msgCnt,msgId.get());
}
