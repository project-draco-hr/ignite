{
  Cache<String,Integer> cache=cache(0);
  final AtomicBoolean stop=new AtomicBoolean();
  IgniteFuture<?> fut=null;
  try {
    Map<String,Integer> data=new HashMap<>();
    addKeysForNode(cache.affinity(),grid(0).localNode(),data);
    addKeysForNode(cache.affinity(),grid(1).localNode(),data);
    addKeysForNode(cache.affinity(),grid(2).localNode(),data);
    fut=GridTestUtils.runAsync(new Callable<Void>(){
      @Override public Void call() throws Exception {
        Random rnd=new Random();
        while (!stop.get()) {
          int idx=rnd.nextBoolean() ? 1 : 2;
          log.info("Stopping grid: " + idx);
          stopGrid(idx);
          U.sleep(100);
          log.info("Starting grid: " + idx);
          startGrid(idx);
        }
        return null;
      }
    }
);
    for (int i=0; i < 100; i++) {
      log.info("Iteration: " + i);
      try {
        cache.putAll(data);
      }
 catch (      IgniteCheckedException ignore) {
        continue;
      }
      for (      String key : data.keySet())       cache.evict(key);
    }
  }
  finally {
    stop.set(true);
    if (fut != null)     fut.get();
  }
}
