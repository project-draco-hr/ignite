{
  final AtomicBoolean end=new AtomicBoolean();
  IgniteInternalFuture<?> fut=multithreadedAsync(new Callable<Void>(){
    @Override public Void call() throws Exception {
      ThreadLocalRandom rnd=ThreadLocalRandom.current();
      while (!end.get()) {
        if (rnd.nextInt(5) == 0) {
          double salary=rnd.nextDouble() * RANGE * 1000;
          double maxSalary=salary + 1000;
          Collection<Cache.Entry<Integer,Object>> entries=executeQuery(salary,maxSalary);
          for (          Cache.Entry<Integer,Object> entry : entries) {
            Person p=(Person)entry.getValue();
            if (p.getSalary() < salary || p.getSalary() > maxSalary)             throw new Exception("Invalid person retrieved [min=" + salary + ", max="+ maxSalary+ ", person="+ p+ ']');
          }
        }
 else {
          int i=rnd.nextInt(RANGE);
          cache.put(i,new Person(i,"firstName" + i,"lastName" + i,i * 1000));
        }
      }
      return null;
    }
  }
,64);
  Thread.sleep(30 * 1000);
  end.set(true);
  fut.get();
}
