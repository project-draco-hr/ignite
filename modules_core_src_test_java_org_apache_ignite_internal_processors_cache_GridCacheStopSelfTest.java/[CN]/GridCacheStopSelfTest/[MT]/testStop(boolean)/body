{
  for (int i=0; i < 10; i++) {
    startGrid(0);
    final int PUT_THREADS=50;
    final CountDownLatch stopLatch=new CountDownLatch(1);
    final CountDownLatch readyLatch=new CountDownLatch(PUT_THREADS);
    final Cache<Integer,Integer> cache=grid(0).cache(null);
    assertNotNull(cache);
    assertEquals(atomic ? ATOMIC : TRANSACTIONAL,cache.configuration().getAtomicityMode());
    assertEquals(replicated ? REPLICATED : PARTITIONED,cache.configuration().getCacheMode());
    Collection<IgniteFuture<?>> putFuts=new ArrayList<>();
    for (int j=0; j < PUT_THREADS; j++) {
      final int key=j;
      putFuts.add(GridTestUtils.runAsync(new Callable<Void>(){
        @Override public Void call() throws Exception {
          if (startTx) {
            try (IgniteTx tx=cache.txStart()){
              cache.put(key,key);
              readyLatch.countDown();
              stopLatch.await();
              tx.commit();
            }
           }
 else {
            readyLatch.countDown();
            stopLatch.await();
            cache.put(key,key);
          }
          return null;
        }
      }
));
    }
    readyLatch.await();
    stopLatch.countDown();
    stopGrid(0);
    for (    IgniteFuture<?> fut : putFuts) {
      try {
        fut.get();
      }
 catch (      IgniteCheckedException e) {
        if (!e.getMessage().startsWith(EXPECTED_MSG))         e.printStackTrace();
        assertTrue("Unexpected error message: " + e.getMessage(),e.getMessage().startsWith(EXPECTED_MSG));
      }
    }
    try {
      cache.put(1,1);
    }
 catch (    IllegalStateException e) {
      if (!e.getMessage().startsWith(EXPECTED_MSG))       e.printStackTrace();
      assertTrue("Unexpected error message: " + e.getMessage(),e.getMessage().startsWith(EXPECTED_MSG));
    }
  }
}
