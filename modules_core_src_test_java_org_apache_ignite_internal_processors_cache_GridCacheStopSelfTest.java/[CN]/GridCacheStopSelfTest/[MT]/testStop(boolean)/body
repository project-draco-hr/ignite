{
  for (int i=0; i < 10; i++) {
    startGrid(0);
    final int PUT_THREADS=50;
    final CountDownLatch stopLatch=new CountDownLatch(1);
    final CountDownLatch readyLatch=new CountDownLatch(PUT_THREADS);
    final IgniteCache<Integer,Integer> cache=grid(0).cache(null);
    assertNotNull(cache);
    CacheConfiguration ccfg=cache.getConfiguration(CacheConfiguration.class);
    assertEquals(atomic ? ATOMIC : TRANSACTIONAL,ccfg.getAtomicityMode());
    assertEquals(replicated ? REPLICATED : PARTITIONED,ccfg.getCacheMode());
    Collection<IgniteInternalFuture<?>> putFuts=new ArrayList<>();
    for (int j=0; j < PUT_THREADS; j++) {
      final int key=j;
      putFuts.add(GridTestUtils.runAsync(new Callable<Void>(){
        @Override public Void call() throws Exception {
          try {
            if (startTx) {
              TransactionConcurrency concurrency=key % 2 == 0 ? OPTIMISTIC : PESSIMISTIC;
              try (Transaction tx=grid(0).transactions().txStart(concurrency,REPEATABLE_READ)){
                cache.put(key,key);
                readyLatch.countDown();
                stopLatch.await();
                tx.commit();
              }
             }
 else {
              readyLatch.countDown();
              stopLatch.await();
              cache.put(key,key);
            }
          }
 catch (          CacheException|IgniteException|IllegalStateException e) {
            log.info("Ignore error: " + e);
          }
          return null;
        }
      }
,"cache-thread"));
    }
    readyLatch.await();
    stopLatch.countDown();
    stopGrid(0);
    for (    IgniteInternalFuture<?> fut : putFuts)     fut.get();
    try {
      cache.put(1,1);
    }
 catch (    IllegalStateException e) {
      if (!e.getMessage().startsWith(EXPECTED_MSG))       e.printStackTrace();
      assertTrue("Unexpected error message: " + e.getMessage(),e.getMessage().startsWith(EXPECTED_MSG));
    }
  }
}
