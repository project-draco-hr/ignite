{
  try {
    startGrid(0);
    for (int i=0; i < 5; i++) {
      log.info("Iteration: " + i);
      startGridsMultiThreaded(1,3);
      final AtomicInteger threadIdx=new AtomicInteger(0);
      final IgniteInternalFuture<?> fut1=GridTestUtils.runMultiThreadedAsync(new Callable<Void>(){
        @Override public Void call() throws Exception {
          int idx=threadIdx.getAndIncrement();
          IgniteKernal node=(IgniteKernal)ignite(idx % 3 + 1);
          IgniteCache<Integer,Integer> cache=node.cache(null);
          while (true) {
            try {
              cacheOperations(node,cache);
            }
 catch (            Exception e) {
              if (node.isStopping())               break;
            }
          }
          return null;
        }
      }
,20,"tx-node-stop-thread");
      IgniteInternalFuture<?> fut2=GridTestUtils.runMultiThreadedAsync(new Callable<Void>(){
        @Override public Void call() throws Exception {
          IgniteKernal node=(IgniteKernal)ignite(0);
          IgniteCache<Integer,Integer> cache=node.cache(null);
          while (!fut1.isDone()) {
            try {
              cacheOperations(node,cache);
            }
 catch (            Exception ignore) {
            }
          }
          return null;
        }
      }
,2,"tx-thread");
      Thread.sleep(3000);
      final AtomicInteger nodeIdx=new AtomicInteger(1);
      GridTestUtils.runMultiThreaded(new Callable<Void>(){
        @Override public Void call() throws Exception {
          int idx=nodeIdx.getAndIncrement();
          log.info("Stop node: " + idx);
          ignite(idx).close();
          return null;
        }
      }
,3,"stop-node");
      fut1.get();
      fut2.get();
    }
  }
  finally {
    stopAllGrids();
  }
}
