{
  final Ignite ignite=startGrid(0);
  generateData(ignite,0,0);
  log.info("Preloading started.");
  long start=System.currentTimeMillis();
  concurrentStartFinished=false;
  concurrentStartFinished2=false;
  concurrentStartFinished3=false;
  Thread t1=new Thread(){
    @Override public void run(){
      try {
        startGrid(1);
        startGrid(2);
        while (!concurrentStartFinished2)         U.sleep(10);
        waitForRebalancing(0,5,0);
        waitForRebalancing(1,5,0);
        waitForRebalancing(2,5,0);
        waitForRebalancing(3,5,0);
        waitForRebalancing(4,5,0);
        CacheConfiguration<Integer,Integer> cacheRCfg=new CacheConfiguration<>();
        cacheRCfg.setName(CACHE_NAME_DHT_PARTITIONED + "_NEW");
        cacheRCfg.setCacheMode(CacheMode.PARTITIONED);
        cacheRCfg.setRebalanceMode(CacheRebalanceMode.SYNC);
        grid(0).getOrCreateCache(cacheRCfg);
        while (!concurrentStartFinished3)         U.sleep(10);
        concurrentStartFinished=true;
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
;
  Thread t2=new Thread(){
    @Override public void run(){
      try {
        startGrid(3);
        startGrid(4);
        concurrentStartFinished2=true;
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
;
  Thread t3=new Thread(){
    @Override public void run(){
      generateData(ignite,0,1);
      concurrentStartFinished3=true;
    }
  }
;
  t1.start();
  t2.start();
  t3.start();
  t1.join();
  t2.join();
  t3.join();
  waitForRebalancing(0,5,1);
  waitForRebalancing(1,5,1);
  waitForRebalancing(2,5,1);
  waitForRebalancing(3,5,1);
  waitForRebalancing(4,5,1);
  awaitPartitionMapExchange(true);
  checkSupplyContextMapIsEmpty();
  checkData(grid(4),0,1);
  final Ignite ignite3=grid(3);
  Thread t4=new Thread(){
    @Override public void run(){
      generateData(ignite3,0,2);
    }
  }
;
  t4.start();
  stopGrid(1);
  waitForRebalancing(0,6);
  waitForRebalancing(2,6);
  waitForRebalancing(3,6);
  waitForRebalancing(4,6);
  awaitPartitionMapExchange(true);
  checkSupplyContextMapIsEmpty();
  stopGrid(0);
  waitForRebalancing(2,7);
  waitForRebalancing(3,7);
  waitForRebalancing(4,7);
  awaitPartitionMapExchange(true);
  checkSupplyContextMapIsEmpty();
  stopGrid(2);
  waitForRebalancing(3,8);
  waitForRebalancing(4,8);
  awaitPartitionMapExchange(true);
  checkSupplyContextMapIsEmpty();
  t4.join();
  stopGrid(3);
  waitForRebalancing(4,9);
  checkSupplyContextMapIsEmpty();
  long spend=(System.currentTimeMillis() - start) / 1000;
  checkData(grid(4),0,2);
  log.info("Spend " + spend + " seconds to rebalance entries.");
}
