{
  if (!parseUrl(url,info))   throw new SQLException("URL is invalid: " + url);
  DriverPropertyInfo[] props=new DriverPropertyInfo[20];
  props[0]=new PropertyInfo("Hostname",info.getProperty(PROP_HOST),true);
  props[1]=new PropertyInfo("Port number",info.getProperty(PROP_PORT),"");
  props[2]=new PropertyInfo("Cache name",info.getProperty(PROP_CACHE),"");
  props[3]=new PropertyInfo("Node ID",info.getProperty(PROP_NODE_ID,""));
  props[4]=new PropertyInfo("gg.client.protocol",info.getProperty("gg.client.protocol","TCP"),"Communication protocol (TCP or HTTP).");
  props[5]=new PropertyInfo("gg.client.connectTimeout",info.getProperty("gg.client.connectTimeout","0"),"Socket connection timeout.");
  props[6]=new PropertyInfo("gg.client.tcp.noDelay",info.getProperty("gg.client.tcp.noDelay","true"),"Flag indicating whether TCP_NODELAY flag should be enabled for outgoing connections.");
  props[7]=new PropertyInfo("gg.client.ssl.enabled",info.getProperty("gg.client.ssl.enabled","false"),"Flag indicating that SSL is needed for connection.");
  props[8]=new PropertyInfo("gg.client.ssl.protocol",info.getProperty("gg.client.ssl.protocol","TLS"),"SSL protocol.");
  props[9]=new PropertyInfo("gg.client.ssl.key.algorithm",info.getProperty("gg.client.ssl.key.algorithm","SunX509"),"Key manager algorithm.");
  props[10]=new PropertyInfo("gg.client.ssl.keystore.location",info.getProperty("gg.client.ssl.keystore.location",""),"Key store to be used by client to connect with GridGain topology.");
  props[11]=new PropertyInfo("gg.client.ssl.keystore.password",info.getProperty("gg.client.ssl.keystore.password",""),"Key store password.");
  props[12]=new PropertyInfo("gg.client.ssl.keystore.type",info.getProperty("gg.client.ssl.keystore.type","jks"),"Key store type.");
  props[13]=new PropertyInfo("gg.client.ssl.truststore.location",info.getProperty("gg.client.ssl.truststore.location",""),"Trust store to be used by client to connect with GridGain topology.");
  props[14]=new PropertyInfo("gg.client.ssl.keystore.password",info.getProperty("gg.client.ssl.truststore.password",""),"Trust store password.");
  props[15]=new PropertyInfo("gg.client.ssl.truststore.type",info.getProperty("gg.client.ssl.truststore.type","jks"),"Trust store type.");
  props[16]=new PropertyInfo("gg.client.credentials",info.getProperty("gg.client.credentials",""),"Client credentials used in authentication process.");
  props[17]=new PropertyInfo("gg.client.cache.top",info.getProperty("gg.client.cache.top","false"),"Flag indicating that topology is cached internally. Cache will be refreshed in the background with " + "interval defined by topologyRefreshFrequency property (see below).");
  props[18]=new PropertyInfo("gg.client.topology.refresh",info.getProperty("gg.client.topology.refresh","2000"),"Topology cache refresh frequency (ms).");
  props[19]=new PropertyInfo("gg.client.idleTimeout",info.getProperty("gg.client.idleTimeout","30000"),"Maximum amount of time that connection can be idle before it is closed (ms).");
  return props;
}
