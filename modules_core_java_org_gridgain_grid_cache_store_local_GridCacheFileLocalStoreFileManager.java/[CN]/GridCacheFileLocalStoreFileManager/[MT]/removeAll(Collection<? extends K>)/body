{
  if (keys.size() == 1) {
    update(keys.iterator().next(),null);
    return;
  }
  updateAll(new AbstractCollection<Map.Entry<K,V>>(){
    @NotNull @Override public Iterator<Map.Entry<K,V>> iterator(){
      final Iterator<? extends K> i=keys.iterator();
      return new Iterator<Map.Entry<K,V>>(){
        @Override public boolean hasNext(){
          return i.hasNext();
        }
        @Override public Map.Entry<K,V> next(){
          final K k=i.next();
          return new Map.Entry<K,V>(){
            @Override public K getKey(){
              return k;
            }
            @Override public V getValue(){
              return null;
            }
            @Override public V setValue(            V val){
              throw new UnsupportedOperationException();
            }
            @Override public boolean equals(            Object o){
              throw new UnsupportedOperationException();
            }
            @Override public int hashCode(){
              throw new UnsupportedOperationException();
            }
          }
;
        }
        @Override public void remove(){
          throw new UnsupportedOperationException();
        }
      }
;
    }
    @Override public int size(){
      return keys.size();
    }
  }
,null);
}
