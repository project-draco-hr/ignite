{
  GridCacheAdapter<K,V> cacheAdapter=((IgniteKernal)ignite).context().cache().internalCache(cacheName);
  final GridCacheContext<K,V> ctx=cacheAdapter.context();
  ctx.affinity().affinityReadyFuture(topVer).get();
  ctx.gate().enter();
  try {
    if (!ctx.affinity().affinityTopologyVersion().equals(topVer))     return null;
    GridDhtCacheAdapter<K,V> dht;
    GridNearCacheAdapter<K,V> near=null;
    if (cacheAdapter instanceof GridNearCacheAdapter) {
      near=((GridNearCacheAdapter<K,V>)cacheAdapter);
      dht=near.dht();
    }
 else     dht=(GridDhtCacheAdapter<K,V>)cacheAdapter;
    try (DataStreamerImpl<KeyCacheObject,Object> dataLdr=(DataStreamerImpl)ignite.dataStreamer(cacheName)){
      ((DataStreamerImpl)dataLdr).maxRemapCount(0);
      dataLdr.receiver(DataStreamerCacheUpdaters.<KeyCacheObject,Object>batched());
      for (      GridDhtLocalPartition locPart : dht.topology().currentLocalPartitions()) {
        if (!locPart.isEmpty() && locPart.primary(topVer)) {
          for (          GridDhtCacheEntry o : locPart.entries())           dataLdr.removeDataInternal(o.key());
        }
      }
      Iterator<KeyCacheObject> it=dht.context().swap().offHeapKeyIterator(true,false,topVer);
      while (it.hasNext())       dataLdr.removeDataInternal(it.next());
      it=dht.context().swap().swapKeyIterator(true,false,topVer);
      while (it.hasNext())       dataLdr.removeDataInternal(it.next());
    }
     if (near != null) {
      GridCacheVersion obsoleteVer=ctx.versions().next();
      for (      GridCacheEntryEx e : near.map().allEntries0()) {
        if (!e.valid(topVer) && e.markObsolete(obsoleteVer))         near.removeEntry(e);
      }
    }
  }
  finally {
    ctx.gate().leave();
  }
  return null;
}
