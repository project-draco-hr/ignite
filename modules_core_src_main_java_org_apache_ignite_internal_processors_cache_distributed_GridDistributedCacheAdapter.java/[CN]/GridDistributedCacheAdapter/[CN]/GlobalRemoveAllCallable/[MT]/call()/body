{
  GridCacheAdapter<K,V> cacheAdapter=((IgniteKernal)ignite).context().cache().internalCache(cacheName);
  final GridCacheContext<K,V> ctx=cacheAdapter.context();
  ctx.affinity().affinityReadyFuture(topVer).get();
  ctx.gate().enter();
  try {
    if (!ctx.affinity().affinityTopologyVersion().equals(topVer))     return null;
    GridDhtCacheAdapter<K,V> dht;
    if (cacheAdapter instanceof GridNearCacheAdapter)     dht=((GridNearCacheAdapter<K,V>)cacheAdapter).dht();
 else     dht=(GridDhtCacheAdapter<K,V>)cacheAdapter;
    try (IgniteDataLoader<K,V> dataLdr=ignite.dataLoader(cacheName)){
      ((IgniteDataLoaderImpl)dataLdr).maxRemapCount(0);
      dataLdr.updater(GridDataLoadCacheUpdaters.<K,V>batched());
      for (      GridDhtLocalPartition<K,V> locPart : dht.topology().currentLocalPartitions()) {
        if (!locPart.isEmpty() && locPart.primary(topVer)) {
          for (          GridDhtCacheEntry<K,V> o : locPart.entries()) {
            if (!o.obsoleteOrDeleted())             dataLdr.removeData(o.key());
          }
        }
      }
      Iterator<Cache.Entry<K,V>> it=dht.context().swap().offheapIterator(true,false,topVer);
      while (it.hasNext())       dataLdr.removeData(it.next().getKey());
      it=dht.context().swap().swapIterator(true,false,topVer);
      while (it.hasNext())       dataLdr.removeData(it.next().getKey());
    }
   }
  finally {
    ctx.gate().leave();
  }
  return null;
}
