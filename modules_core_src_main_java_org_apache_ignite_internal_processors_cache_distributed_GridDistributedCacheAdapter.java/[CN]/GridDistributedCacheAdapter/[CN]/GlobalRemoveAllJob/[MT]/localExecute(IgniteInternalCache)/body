{
  GridCacheAdapter cache=((IgniteKernal)ignite).context().cache().internalCache(cacheName);
  if (cache == null)   return true;
  final GridCacheContext<K,V> ctx=cache.context();
  ctx.gate().enter();
  try {
    if (!ctx.affinity().affinityTopologyVersion().equals(topVer))     return false;
    GridDhtCacheAdapter<K,V> dht;
    GridNearCacheAdapter<K,V> near=null;
    if (cache instanceof GridNearCacheAdapter) {
      near=((GridNearCacheAdapter<K,V>)cache);
      dht=near.dht();
    }
 else     dht=(GridDhtCacheAdapter<K,V>)cache;
    try (DataStreamerImpl<KeyCacheObject,Object> dataLdr=(DataStreamerImpl)ignite.dataStreamer(cacheName)){
      ((DataStreamerImpl)dataLdr).maxRemapCount(0);
      dataLdr.skipStore(skipStore);
      dataLdr.keepBinary(keepBinary);
      dataLdr.receiver(DataStreamerCacheUpdaters.<KeyCacheObject,Object>batched());
      for (      int part : ctx.affinity().primaryPartitions(ctx.localNodeId(),topVer)) {
        GridDhtLocalPartition locPart=dht.topology().localPartition(part,topVer,false);
        if (locPart == null || (ctx.rebalanceEnabled() && locPart.state() != OWNING) || !locPart.reserve())         return false;
        try {
          if (!locPart.isEmpty()) {
            for (            GridDhtCacheEntry o : locPart.entries()) {
              if (!o.obsoleteOrDeleted())               dataLdr.removeDataInternal(o.key());
            }
          }
          GridCloseableIterator<Map.Entry<byte[],GridCacheSwapEntry>> iter=dht.context().swap().iterator(part);
          if (iter != null) {
            for (            Map.Entry<byte[],GridCacheSwapEntry> e : iter)             dataLdr.removeDataInternal(ctx.toCacheKeyObject(e.getKey()));
          }
        }
  finally {
          locPart.release();
        }
      }
    }
     if (near != null) {
      GridCacheVersion obsoleteVer=ctx.versions().next();
      for (      GridCacheEntryEx e : near.map().allEntries0()) {
        if (!e.valid(topVer) && e.markObsolete(obsoleteVer))         near.removeEntry(e);
      }
    }
  }
 catch (  IgniteCheckedException e) {
    throw U.convertException(e);
  }
 finally {
    ctx.gate().leave();
  }
  return true;
}
