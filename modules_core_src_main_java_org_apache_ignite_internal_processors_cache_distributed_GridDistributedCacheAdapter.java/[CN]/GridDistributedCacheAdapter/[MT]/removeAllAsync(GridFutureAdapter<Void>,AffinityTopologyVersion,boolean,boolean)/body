{
  Collection<ClusterNode> nodes=ctx.grid().cluster().forDataNodes(name()).nodes();
  if (!nodes.isEmpty()) {
    ctx.kernalContext().task().setThreadContext(TC_SUBGRID,nodes);
    IgniteInternalFuture<Boolean> rmvAll=ctx.kernalContext().task().execute(new RemoveAllTask(ctx.name(),topVer,skipStore,keepBinary),null);
    rmvAll.listen(new IgniteInClosure<IgniteInternalFuture<Boolean>>(){
      @Override public void apply(      IgniteInternalFuture<Boolean> fut){
        try {
          boolean retry=!fut.get();
          AffinityTopologyVersion topVer0=ctx.affinity().affinityTopologyVersion();
          if (topVer0.equals(topVer) && !retry)           opFut.onDone();
 else           removeAllAsync(opFut,topVer0,skipStore,keepBinary);
        }
 catch (        ClusterGroupEmptyCheckedException ignore) {
          if (log.isDebugEnabled())           log.debug("All remote nodes left while cache remove [cacheName=" + name() + "]");
          opFut.onDone();
        }
catch (        IgniteCheckedException e) {
          opFut.onDone(e);
        }
catch (        Error e) {
          opFut.onDone(e);
          throw e;
        }
      }
    }
);
  }
 else   opFut.onDone();
}
