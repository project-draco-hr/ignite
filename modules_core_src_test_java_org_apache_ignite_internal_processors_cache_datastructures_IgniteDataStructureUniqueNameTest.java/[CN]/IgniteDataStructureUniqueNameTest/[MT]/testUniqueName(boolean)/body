{
  final String name=IgniteUuid.randomUuid().toString();
  final int THREADS=10;
  for (int iter=0; iter < 10; iter++) {
    log.info("Iteration: " + iter);
    List<IgniteInternalFuture<Object>> futs=new ArrayList<>(THREADS);
    for (int i=0; i < THREADS; i++) {
      final int idx=i;
      IgniteInternalFuture<Object> fut=GridTestUtils.runAsync(new Callable<Object>(){
        @Override public Object call() throws Exception {
          try {
            Ignite ignite=singleGrid ? ignite(0) : ignite(idx % gridCount());
switch (idx % 5) {
case 0:
              log.info("Create atomic long, grid: " + ignite.name());
            return ignite.atomicLong(name,0,true);
case 1:
          log.info("Create atomic sequence, grid: " + ignite.name());
        return ignite.atomicSequence(name,0,true);
case 2:
      log.info("Create atomic stamped, grid: " + ignite.name());
    return ignite.atomicStamped(name,0,true,true);
case 3:
  log.info("Create atomic latch, grid: " + ignite.name());
return ignite.countDownLatch(name,0,true,true);
case 4:
log.info("Create atomic reference, grid: " + ignite.name());
return ignite.atomicReference(name,null,true);
default :
fail();
return null;
}
}
 catch (IgniteException e) {
log.info("Failed: " + e);
return e;
}
}
}
);
futs.add(fut);
}
Closeable dataStructure=null;
for (IgniteInternalFuture<Object> fut : futs) {
Object res=fut.get();
if (res instanceof IgniteException) continue;
assertTrue("Unexpected object: " + res,res instanceof IgniteAtomicLong || res instanceof IgniteAtomicSequence || res instanceof IgniteAtomicReference|| res instanceof IgniteAtomicStamped|| res instanceof IgniteCountDownLatch);
if (dataStructure != null) {
log.info("Data structure created: " + dataStructure);
assertEquals(dataStructure.getClass(),res.getClass());
}
 else dataStructure=(Closeable)res;
}
assertNotNull(dataStructure);
dataStructure.close();
}
}
