{
  addDescriptor(Byte.class,0);
  addDescriptor(Short.class,0);
  addDescriptor(Integer.class,0);
  addDescriptor(Long.class,0);
  addDescriptor(Float.class,0);
  addDescriptor(Double.class,0);
  addDescriptor(Character.class,0);
  addDescriptor(Boolean.class,0);
  addDescriptor(String.class,0);
  addDescriptor(UUID.class,0);
  addDescriptor(Date.class,0);
  addDescriptor(byte[].class,0);
  addDescriptor(short[].class,0);
  addDescriptor(int[].class,0);
  addDescriptor(long[].class,0);
  addDescriptor(float[].class,0);
  addDescriptor(double[].class,0);
  addDescriptor(char[].class,0);
  addDescriptor(boolean[].class,0);
  addDescriptor(String[].class,0);
  addDescriptor(UUID[].class,0);
  addDescriptor(Date[].class,0);
  addDescriptor(Object[].class,0);
  addDescriptor(ArrayList.class,0);
  addDescriptor(LinkedList.class,0);
  addDescriptor(HashSet.class,0);
  addDescriptor(LinkedHashSet.class,0);
  addDescriptor(TreeSet.class,0);
  addDescriptor(ConcurrentSkipListSet.class,0);
  addDescriptor(HashMap.class,0);
  addDescriptor(LinkedHashMap.class,0);
  addDescriptor(TreeMap.class,0);
  addDescriptor(ConcurrentHashMap.class,0);
  addDescriptor(GridPortableObjectImpl.class,PORTABLE);
  addDescriptor(GridClientAuthenticationRequest.class,51);
  addDescriptor(GridClientTopologyRequest.class,52);
  addDescriptor(GridClientTaskRequest.class,53);
  addDescriptor(GridClientCacheRequest.class,54);
  addDescriptor(GridClientLogRequest.class,55);
  addDescriptor(GridClientResponse.class,56);
  addDescriptor(GridClientNodeBean.class,57);
  addDescriptor(GridClientNodeMetricsBean.class,58);
  addDescriptor(GridClientTaskResultBean.class,59);
  colTypes.put(ArrayList.class,ARR_LIST);
  colTypes.put(LinkedList.class,LINKED_LIST);
  colTypes.put(HashSet.class,HASH_SET);
  colTypes.put(LinkedHashSet.class,LINKED_HASH_SET);
  colTypes.put(TreeSet.class,TREE_SET);
  colTypes.put(ConcurrentSkipListSet.class,CONC_SKIP_LIST_SET);
  mapTypes.put(HashMap.class,HASH_MAP);
  mapTypes.put(LinkedHashMap.class,LINKED_HASH_MAP);
  mapTypes.put(TreeMap.class,TREE_MAP);
  mapTypes.put(ConcurrentHashMap.class,CONC_HASH_MAP);
  if (portableCfg != null) {
    GridPortableIdMapper globalIdMapper=portableCfg.getIdMapper();
    GridPortableSerializer globalSerializer=portableCfg.getSerializer();
    for (    GridPortableTypeConfiguration typeCfg : portableCfg.getTypeConfigurations()) {
      String clsName=typeCfg.getClassName();
      if (clsName == null)       throw new GridPortableException("Class name is required for portable type configuration.");
      Class<?> cls;
      try {
        cls=Class.forName(clsName);
      }
 catch (      ClassNotFoundException e) {
        throw new GridPortableException("Portable class doesn't exist: " + clsName,e);
      }
      GridPortableIdMapper idMapper=globalIdMapper;
      GridPortableSerializer serializer=globalSerializer;
      boolean ignoreAnn=false;
      if (typeCfg.getIdMapper() != null) {
        idMapper=typeCfg.getIdMapper();
        ignoreAnn=true;
      }
      if (typeCfg.getSerializer() != null)       serializer=typeCfg.getSerializer();
      addUserTypeDescriptor(cls,idMapper,serializer,ignoreAnn);
    }
  }
}
