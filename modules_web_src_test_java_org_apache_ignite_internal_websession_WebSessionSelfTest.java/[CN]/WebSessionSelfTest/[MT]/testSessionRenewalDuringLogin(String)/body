{
  Server srv=null;
  String sesId=null;
  try {
    srv=startServerWithLoginService(TEST_JETTY_PORT,cfg,null,new SessionLoginServlet());
    URLConnection conn=new URL("http://localhost:" + TEST_JETTY_PORT + "/ignitetest/test").openConnection();
    conn.connect();
    String sesIdCookie1=getSessionIdFromCookie(conn);
    X.println(">>>","Initial session Cookie: " + sesIdCookie1,">>>");
    try (BufferedReader rdr=new BufferedReader(new InputStreamReader(conn.getInputStream()))){
      sesId=rdr.readLine();
      if (!keepBinary()) {
        IgniteCache<String,HttpSession> cache=G.ignite().cache(getCacheName());
        assertNotNull(cache);
        HttpSession ses=cache.get(sesId);
        assertNotNull(ses);
        assertEquals("val1",ses.getAttribute("key1"));
      }
 else {
        final IgniteCache<String,WebSessionEntity> cache=G.ignite().cache(getCacheName());
        assertNotNull(cache);
        final WebSessionEntity entity=cache.get(sesId);
        assertNotNull(entity);
        final byte[] data=entity.attributes().get("key1");
        assertNotNull(data);
        final Marshaller marshaller=G.ignite().configuration().getMarshaller();
        final String val=marshaller.unmarshal(data,getClass().getClassLoader());
        assertEquals("val1",val);
      }
    }
     URLConnection conn2=new URL("http://localhost:" + TEST_JETTY_PORT + "/ignitetest/login").openConnection();
    HttpURLConnection con=(HttpURLConnection)conn2;
    con.addRequestProperty("Cookie","JSESSIONID=" + sesIdCookie1);
    con.setRequestMethod("POST");
    con.setDoOutput(true);
    String sesIdCookie2=getSessionIdFromCookie(con);
    X.println(">>>","Logged In session Cookie: " + sesIdCookie2,">>>");
    try (BufferedReader rdr=new BufferedReader(new InputStreamReader(con.getInputStream()))){
      String sesId2=rdr.readLine();
      if (!keepBinary()) {
        IgniteCache<String,HttpSession> cache=G.ignite().cache(getCacheName());
        assertNotNull(cache);
        HttpSession ses=cache.get(sesId2);
        assertNotNull(ses);
        assertEquals("val1",ses.getAttribute("key1"));
      }
 else {
        final IgniteCache<String,WebSessionEntity> cache=G.ignite().cache(getCacheName());
        assertNotNull(cache);
        final WebSessionEntity entity=cache.get(sesId2);
        assertNotNull(entity);
        final byte[] data=entity.attributes().get("key1");
        assertNotNull(data);
        final Marshaller marshaller=G.ignite().configuration().getMarshaller();
        final String val=marshaller.unmarshal(data,getClass().getClassLoader());
        assertEquals("val1",val);
      }
    }
     URLConnection conn3=new URL("http://localhost:" + TEST_JETTY_PORT + "/ignitetest/simple").openConnection();
    conn3.addRequestProperty("Cookie","JSESSIONID=" + sesIdCookie2);
    conn3.connect();
    String sesIdCookie3=getSessionIdFromCookie(conn3);
    X.println(">>>","Post Logged In session Cookie: " + sesIdCookie3,">>>");
    assertEquals(sesIdCookie2,sesIdCookie3);
    try (BufferedReader rdr=new BufferedReader(new InputStreamReader(conn3.getInputStream()))){
      String sesId3=rdr.readLine();
      if (!keepBinary()) {
        IgniteCache<String,HttpSession> cache=G.ignite().cache(getCacheName());
        HttpSession session=cache.get(sesId3);
        assertNotNull(session);
        assertNotNull(cache);
        HttpSession ses=cache.get(sesId3);
        assertNotNull(ses);
        assertEquals("val1",ses.getAttribute("key1"));
      }
 else {
        final IgniteCache<String,WebSessionEntity> cache=G.ignite().cache(getCacheName());
        assertNotNull(cache);
        final WebSessionEntity entity=cache.get(sesId3);
        assertNotNull(entity);
        assertNotNull(cache.get(sesId3));
        final byte[] data=entity.attributes().get("key1");
        assertNotNull(data);
        final Marshaller marshaller=G.ignite().configuration().getMarshaller();
        final String val=marshaller.unmarshal(data,getClass().getClassLoader());
        assertEquals("val1",val);
      }
    }
   }
  finally {
    stopServerWithLoginService(srv);
  }
}
