{
  CacheEntryPredicate prjPred=qry.projectionFilter();
  IgniteBiPredicate<K,V> filter=qry.scanFilter();
  if ((cctx.portableEnabled() && cctx.offheapTiered()) && (prjPred != null || filter != null)) {
    OffheapIteratorClosure c=new OffheapIteratorClosure(prjPred,filter,qry.keepPortable());
    return cctx.swap().rawOffHeapIterator(c);
  }
 else {
    Iterator<Map.Entry<byte[],byte[]>> it=cctx.swap().rawOffHeapIterator();
    return scanIterator(it,prjPred,filter,qry.keepPortable());
  }
}
