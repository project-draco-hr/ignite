{
  IgniteBiPredicate<K,V> filter=qry.scanFilter();
  if (cctx.offheapTiered() && filter != null) {
    OffheapIteratorClosure c=new OffheapIteratorClosure(filter,qry.keepPortable());
    return cctx.swap().rawOffHeapIterator(c,qry.partition(),true,backups);
  }
 else {
    Iterator<Map.Entry<byte[],byte[]>> it=cctx.swap().rawOffHeapIterator(qry.partition(),true,backups);
    return scanIterator(it,filter,qry.keepPortable());
  }
}
