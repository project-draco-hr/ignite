{
  Iterator<K> keyIter=new Iterator<K>(){
    /** 
 * {@inheritDoc} 
 */
    @Override public boolean hasNext(){
      return it.hasNext();
    }
    /** 
 * {@inheritDoc} 
 */
    @Override public K next(){
      try {
        KeyCacheObject key=cctx.toCacheKeyObject(it.next().getKey());
        return (K)cctx.unwrapBinaryIfNeeded(key,keepBinary);
      }
 catch (      IgniteCheckedException e) {
        throw new IgniteException(e);
      }
    }
    /** 
 * {@inheritDoc} 
 */
    @Override public void remove(){
      it.remove();
    }
  }
;
  return new PeekValueExpiryAwareIterator(keyIter,expPlc,topVer,filter,keepBinary,locNode,false);
}
