{
  IgniteBiTuple<K,V> next0=null;
  while (keyIt.hasNext()) {
    next0=null;
    K key=keyIt.next();
    CacheObject val;
    try {
      val=value(key);
    }
 catch (    IgniteCheckedException e) {
      if (log.isDebugEnabled())       log.debug("Failed to peek value: " + e);
      val=null;
    }
    if (dht != null && expiryPlc != null && expiryPlc.readyToFlush(100)) {
      dht.sendTtlUpdateRequest(expiryPlc);
      expiryPlc=cctx.cache().expiryPolicy(plc);
    }
    if (val != null) {
      boolean keepBinary0=!locNode || keepBinary;
      next0=F.t((K)cctx.unwrapBinaryIfNeeded(key,keepBinary0),(V)cctx.unwrapBinaryIfNeeded(val,keepBinary0));
      boolean passPred=true;
      if (keyValFilter != null) {
        Object key0=next0.getKey();
        Object val0=next0.getValue();
        if (keepBinary0 && !keepBinary) {
          key0=(K)cctx.unwrapBinaryIfNeeded(key0,keepBinary);
          val0=(V)cctx.unwrapBinaryIfNeeded(val0,keepBinary);
        }
        passPred=keyValFilter.apply((K)key0,(V)val0);
      }
      if (passPred)       break;
 else       next0=null;
    }
  }
  next=next0 != null ? new IgniteBiTuple<>(next0.getKey(),next0.getValue()) : null;
  if (next == null)   sendTtlUpdate();
}
