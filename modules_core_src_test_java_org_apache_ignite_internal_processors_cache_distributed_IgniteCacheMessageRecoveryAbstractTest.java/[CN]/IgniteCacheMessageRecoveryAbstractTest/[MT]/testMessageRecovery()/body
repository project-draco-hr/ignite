{
  final Ignite ignite=grid(0);
  final IgniteCache<Object,String> cache=ignite.cache(null);
  Map<Integer,String> map=new HashMap<>();
  for (int i=0; i < 1000; i++)   map.put(i,"0");
  cache.putAll(map);
  final AtomicBoolean stop=new AtomicBoolean();
  IgniteInternalFuture<?> fut=GridTestUtils.runAsync(new Callable<Object>(){
    @Override public Object call() throws Exception {
      Thread.currentThread().setName("update-thread");
      ThreadLocalRandom rnd=ThreadLocalRandom.current();
      int iter=0;
      while (!stop.get()) {
        Map<Integer,String> map=new HashMap<>();
        for (int i=0; i < 100; i++)         map.put(rnd.nextInt(0,1000),String.valueOf(i));
        cache.putAll(map);
        if (++iter % 100 == 0)         log.info("Iteration: " + iter);
      }
      return null;
    }
  }
);
  try {
    boolean closed=false;
    for (int i=0; i < 30; i++) {
      Thread.sleep(1000);
      Ignite node0=ignite(ThreadLocalRandom.current().nextInt(0,GRID_CNT));
      log.info("Close sessions for: " + ignite.name());
      closed|=closeSessions(node0);
    }
    assertTrue(closed);
  }
  finally {
    stop.set(true);
  }
  fut.get();
}
