{
  try {
    Ignite g0=startGrid(0);
    UUID id0=g0.cluster().localNode().id();
    UUID id1=startGrid(1).cluster().localNode().id();
    UUID id2=startGrid(2).cluster().localNode().id();
    UUID id3=startGrid(3).cluster().localNode().id();
    final ConcurrentMap<Integer,Collection<ClusterNode>> evts=new ConcurrentHashMap<>();
    final CountDownLatch latch=new CountDownLatch(3);
    g0.events().localListen(new IgnitePredicate<Event>(){
      private AtomicInteger cnt=new AtomicInteger();
      @Override public boolean apply(      Event evt){
        evts.put(cnt.getAndIncrement(),((DiscoveryEvent)evt).topologyNodes());
        latch.countDown();
        return true;
      }
    }
,EVT_NODE_LEFT,EVT_NODE_FAILED);
    stopGrid(3);
    stopGrid(2);
    stopGrid(1);
    assertTrue("Wrong count of events received: " + evts,latch.await(3000,MILLISECONDS));
    Collection<ClusterNode> top2=evts.get(0);
    assertNotNull(top2);
    assertEquals(3,top2.size());
    assertTrue(F.viewReadOnly(top2,NODE_2ID).contains(id0));
    assertTrue(F.viewReadOnly(top2,NODE_2ID).contains(id1));
    assertTrue(F.viewReadOnly(top2,NODE_2ID).contains(id2));
    assertFalse(F.viewReadOnly(top2,NODE_2ID).contains(id3));
    Collection<ClusterNode> top1=evts.get(1);
    assertNotNull(top1);
    assertEquals(2,top1.size());
    assertTrue(F.viewReadOnly(top1,NODE_2ID).contains(id0));
    assertTrue(F.viewReadOnly(top1,NODE_2ID).contains(id1));
    assertFalse(F.viewReadOnly(top1,NODE_2ID).contains(id2));
    assertFalse(F.viewReadOnly(top1,NODE_2ID).contains(id3));
    Collection<ClusterNode> top0=evts.get(2);
    assertNotNull(top0);
    assertEquals(1,top0.size());
    assertTrue(F.viewReadOnly(top0,NODE_2ID).contains(id0));
    assertFalse(F.viewReadOnly(top0,NODE_2ID).contains(id1));
    assertFalse(F.viewReadOnly(top0,NODE_2ID).contains(id2));
    assertFalse(F.viewReadOnly(top0,NODE_2ID).contains(id3));
  }
  finally {
    stopAllGrids();
  }
}
