{
  GridCacheContext ctx=cctx.cacheContext(msg.cacheId());
switch (msg.directType()) {
case 14:
{
      GridCacheEvictionRequest req=(GridCacheEvictionRequest)msg;
      GridCacheEvictionResponse res=new GridCacheEvictionResponse(ctx.cacheId(),req.futureId(),req.classError() != null);
      sendResponseOnFailedMessage(nodeId,res,cctx,ctx.ioPolicy());
    }
  break;
case 30:
{
  GridDhtLockRequest req=(GridDhtLockRequest)msg;
  GridDhtLockResponse res=new GridDhtLockResponse(ctx.cacheId(),req.version(),req.futureId(),req.miniId(),0,ctx.deploymentEnabled());
  sendResponseOnFailedMessage(nodeId,res,cctx,ctx.ioPolicy());
}
break;
case 34:
{
GridDhtTxPrepareRequest req=(GridDhtTxPrepareRequest)msg;
GridDhtTxPrepareResponse res=new GridDhtTxPrepareResponse(req.version(),req.futureId(),req.miniId(),req.deployInfo() != null);
res.error(req.classError());
sendResponseOnFailedMessage(nodeId,res,cctx,req.policy());
}
break;
case 38:
{
GridDhtAtomicUpdateRequest req=(GridDhtAtomicUpdateRequest)msg;
GridDhtAtomicUpdateResponse res=new GridDhtAtomicUpdateResponse(ctx.cacheId(),req.futureVersion(),ctx.deploymentEnabled());
res.onError(req.classError());
sendResponseOnFailedMessage(nodeId,res,cctx,ctx.ioPolicy());
}
break;
case 40:
{
GridNearAtomicUpdateRequest req=(GridNearAtomicUpdateRequest)msg;
GridNearAtomicUpdateResponse res=new GridNearAtomicUpdateResponse(ctx.cacheId(),nodeId,req.futureVersion(),ctx.deploymentEnabled());
res.error(req.classError());
sendResponseOnFailedMessage(nodeId,res,cctx,ctx.ioPolicy());
}
break;
case 42:
{
GridDhtForceKeysRequest req=(GridDhtForceKeysRequest)msg;
GridDhtForceKeysResponse res=new GridDhtForceKeysResponse(ctx.cacheId(),req.futureId(),req.miniId(),ctx.deploymentEnabled());
res.error(req.classError());
sendResponseOnFailedMessage(nodeId,res,cctx,ctx.ioPolicy());
}
break;
case 45:
{
processMessage(nodeId,msg,c);
}
break;
case 49:
{
GridNearGetRequest req=(GridNearGetRequest)msg;
GridNearGetResponse res=new GridNearGetResponse(ctx.cacheId(),req.futureId(),req.miniId(),req.version(),req.deployInfo() != null);
res.error(req.classError());
sendResponseOnFailedMessage(nodeId,res,cctx,ctx.ioPolicy());
}
break;
case 50:
{
GridNearGetResponse res=(GridNearGetResponse)msg;
CacheGetFuture fut=(CacheGetFuture)ctx.mvcc().future(res.futureId());
if (fut == null) {
if (log.isDebugEnabled()) log.debug("Failed to find future for get response [sender=" + nodeId + ", res="+ res+ ']');
return;
}
res.error(res.classError());
fut.onResult(nodeId,res);
}
break;
case 51:
{
GridNearLockRequest req=(GridNearLockRequest)msg;
GridNearLockResponse res=new GridNearLockResponse(ctx.cacheId(),req.version(),req.futureId(),req.miniId(),false,0,req.classError(),null,ctx.deploymentEnabled());
sendResponseOnFailedMessage(nodeId,res,cctx,ctx.ioPolicy());
}
break;
case 55:
{
GridNearTxPrepareRequest req=(GridNearTxPrepareRequest)msg;
GridNearTxPrepareResponse res=new GridNearTxPrepareResponse(req.version(),req.futureId(),req.miniId(),req.version(),req.version(),null,null,null,req.deployInfo() != null);
res.error(req.classError());
sendResponseOnFailedMessage(nodeId,res,cctx,req.policy());
}
break;
case 58:
{
GridCacheQueryRequest req=(GridCacheQueryRequest)msg;
GridCacheQueryResponse res=new GridCacheQueryResponse(req.cacheId(),req.id(),req.classError(),cctx.deploymentEnabled());
cctx.io().sendOrderedMessage(ctx.node(nodeId),TOPIC_CACHE.topic(QUERY_TOPIC_PREFIX,nodeId,req.id()),res,ctx.ioPolicy(),Long.MAX_VALUE);
}
break;
case 114:
{
processMessage(nodeId,msg,c);
}
break;
case 116:
{
GridNearSingleGetRequest req=(GridNearSingleGetRequest)msg;
GridNearSingleGetResponse res=new GridNearSingleGetResponse(ctx.cacheId(),req.futureId(),req.topologyVersion(),null,false,req.deployInfo() != null);
res.error(req.classError());
sendResponseOnFailedMessage(nodeId,res,cctx,ctx.ioPolicy());
}
break;
case 117:
{
GridNearSingleGetResponse res=(GridNearSingleGetResponse)msg;
GridPartitionedSingleGetFuture fut=(GridPartitionedSingleGetFuture)ctx.mvcc().future(new IgniteUuid(IgniteUuid.VM_ID,res.futureId()));
if (fut == null) {
if (log.isDebugEnabled()) log.debug("Failed to find future for get response [sender=" + nodeId + ", res="+ res+ ']');
return;
}
res.error(res.classError());
fut.onResult(nodeId,res);
}
break;
default :
throw new IgniteCheckedException("Failed to send response to node. Unsupported direct type [message=" + msg + "]",msg.classError());
}
}
