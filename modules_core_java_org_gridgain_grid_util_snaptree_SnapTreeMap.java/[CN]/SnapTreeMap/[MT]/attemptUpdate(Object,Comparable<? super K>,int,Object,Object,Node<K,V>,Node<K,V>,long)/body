{
  assert(nodeOVL != UnlinkedOVL);
  final int cmp=k.compareTo(node.key);
  if (cmp == 0) {
    return attemptNodeUpdate(func,expected,newValue,parent,node);
  }
  final char dirToC=cmp < 0 ? Left : Right;
  while (true) {
    final Node<K,V> child=node.unsharedChild(dirToC);
    if (node.shrinkOVL != nodeOVL) {
      return SpecialRetry;
    }
    if (child == null) {
      if (newValue == null) {
        return noUpdateResult(func,null);
      }
 else {
        final boolean success;
        final Node<K,V> damaged;
synchronized (node) {
          if (node.shrinkOVL != nodeOVL) {
            return SpecialRetry;
          }
          if (node.child(dirToC) != null) {
            success=false;
            damaged=null;
          }
 else {
            if (!shouldUpdate(func,null,expected)) {
              return noUpdateResult(func,null);
            }
            node.setChild(dirToC,new Node<K,V>((K)key,1,newValue,node,0L,null,null));
            success=true;
            damaged=fixHeight_nl(node);
          }
        }
        if (success) {
          fixHeightAndRebalance(damaged);
          return updateResult(func,null);
        }
      }
    }
 else {
      final long childOVL=child.shrinkOVL;
      if (isShrinkingOrUnlinked(childOVL)) {
        child.waitUntilShrinkCompleted(childOVL);
      }
 else       if (child != node.child(dirToC)) {
      }
 else {
        if (node.shrinkOVL != nodeOVL) {
          return SpecialRetry;
        }
        final Object vo=attemptUpdate(key,k,func,expected,newValue,node,child,childOVL);
        if (vo != SpecialRetry) {
          return vo;
        }
      }
    }
  }
}
