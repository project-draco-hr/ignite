{
  if (params == null)   params=GridCacheSqlQuery.EMPTY_PARAMS;
  Set<String> schemas=new HashSet<>();
  final GridSqlSelect mapQry=wrapUnion(collectAllSpaces(GridSqlQueryParser.parse(stmt),schemas));
  final boolean explain=mapQry.explain();
  mapQry.explain(false);
  GridSqlSelect rdcQry=new GridSqlSelect().from(table(0));
  List<GridSqlElement> mapExps=F.addAll(new ArrayList<GridSqlElement>(mapQry.allColumns()),mapQry.columns(false));
  final int visibleCols=mapQry.visibleColumns();
  final int havingCol=mapQry.havingColumn();
  List<GridSqlElement> rdcExps=new ArrayList<>(visibleCols);
  Set<String> colNames=new HashSet<>();
  boolean aggregateFound=false;
  for (int i=0, len=mapExps.size(); i < len; i++)   aggregateFound|=splitSelectExpression(mapExps,rdcExps,colNames,i,collocated,i == havingCol);
  mapQry.clearColumns();
  for (  GridSqlElement exp : mapExps)   mapQry.addColumn(exp,true);
  for (int i=0; i < visibleCols; i++)   rdcQry.addColumn(rdcExps.get(i),true);
  for (int i=visibleCols; i < rdcExps.size(); i++)   rdcQry.addColumn(rdcExps.get(i),false);
  for (int i=rdcExps.size(); i < mapExps.size(); i++)   rdcQry.addColumn(column(((GridSqlAlias)mapExps.get(i)).alias()),false);
  if (mapQry.groupColumns() != null && !collocated)   rdcQry.groupColumns(mapQry.groupColumns());
  if (havingCol >= 0 && !collocated) {
    for (int i=visibleCols; i < rdcQry.allColumns(); i++) {
      GridSqlElement c=rdcQry.column(i);
      if (c instanceof GridSqlAlias && HAVING_COLUMN.equals(((GridSqlAlias)c).alias())) {
        rdcQry.havingColumn(i);
        break;
      }
    }
    mapQry.havingColumn(-1);
  }
  if (!mapQry.sort().isEmpty()) {
    for (    GridSqlSortColumn sortCol : mapQry.sort())     rdcQry.addSort(sortCol);
    if (aggregateFound)     mapQry.clearSort();
  }
  if (mapQry.limit() != null) {
    rdcQry.limit(mapQry.limit());
    if (aggregateFound)     mapQry.limit(null);
  }
  if (mapQry.offset() != null) {
    rdcQry.offset(mapQry.offset());
    if (mapQry.limit() != null)     mapQry.limit(op(GridSqlOperationType.PLUS,mapQry.offset(),mapQry.limit()));
    mapQry.offset(null);
  }
  if (mapQry.distinct()) {
    mapQry.distinct(!aggregateFound && mapQry.groupColumns() == null && mapQry.havingColumn() < 0);
    rdcQry.distinct(true);
  }
  IntArray paramIdxs=new IntArray(params.length);
  GridCacheSqlQuery rdc=new GridCacheSqlQuery(rdcQry.getSQL(),findParams(rdcQry,params,new ArrayList<>(),paramIdxs).toArray());
  rdc.parameterIndexes(toIntArray(paramIdxs));
  paramIdxs=new IntArray(params.length);
  GridCacheSqlQuery map=new GridCacheSqlQuery(mapQry.getSQL(),findParams(mapQry,params,new ArrayList<>(params.length),paramIdxs).toArray()).columns(collectColumns(mapExps));
  map.parameterIndexes(toIntArray(paramIdxs));
  Set<String> spaces=new HashSet<>(schemas.size());
  for (  String schema : schemas)   spaces.add(igniteH2Indexing.space(schema));
  GridCacheTwoStepQuery res=new GridCacheTwoStepQuery(spaces,rdc,rdcQry.simpleQuery()).addMapQuery(map);
  res.explain(explain);
  return res;
}
