{
  if (params == null)   params=GridCacheSqlQuery.EMPTY_PARAMS;
  GridSqlQuery qry0=GridSqlQueryParser.parse(stmt);
  GridSqlSelect srcQry;
  if (qry0 instanceof GridSqlSelect)   srcQry=(GridSqlSelect)qry0;
 else {
    srcQry=new GridSqlSelect().from(new GridSqlSubquery(qry0));
    GridSqlSelect left=leftest(qry0);
    int c=0;
    for (    GridSqlElement expr : left.select(true)) {
      String colName;
      if (expr instanceof GridSqlAlias)       colName=((GridSqlAlias)expr).alias();
 else       if (expr instanceof GridSqlColumn)       colName=((GridSqlColumn)expr).columnName();
 else {
        colName=columnName(c);
        expr=alias(colName,expr);
        left.setSelectExpression(c,expr);
      }
      GridSqlColumn col=column(colName);
      srcQry.addSelectExpression(col,true);
      qry0.sort();
      c++;
    }
    if (!qry0.sort().isEmpty()) {
      for (      GridSqlSortColumn col : qry0.sort())       srcQry.addSort(col);
    }
  }
  final String mergeTable=TABLE_FUNC_NAME + "()";
  GridSqlSelect mapQry=srcQry.clone();
  GridSqlSelect rdcQry=new GridSqlSelect().from(new GridSqlFunction("PUBLIC",TABLE_FUNC_NAME));
  List<GridSqlElement> mapExps=F.addAll(new ArrayList<GridSqlElement>(srcQry.allColumns()),srcQry.select(false));
  GridSqlElement[] rdcExps=new GridSqlElement[srcQry.visibleColumns()];
  Set<String> colNames=new HashSet<>();
  boolean aggregateFound=false;
  for (int i=0, len=mapExps.size(); i < len; i++)   aggregateFound|=splitSelectExpression(mapExps,rdcExps,colNames,i,collocated);
  mapQry.clearSelect();
  for (  GridSqlElement exp : mapExps)   mapQry.addSelectExpression(exp,true);
  for (  GridSqlElement rdcExp : rdcExps)   rdcQry.addSelectExpression(rdcExp,true);
  for (int i=rdcExps.length; i < mapExps.size(); i++)   rdcQry.addSelectExpression(column(((GridSqlAlias)mapExps.get(i)).alias()),false);
  if (srcQry.hasGroupBy()) {
    mapQry.clearGroups();
    for (    int col : srcQry.groupColumns())     mapQry.addGroupExpression(column(((GridSqlAlias)mapExps.get(col)).alias()));
    if (!collocated) {
      for (      int col : srcQry.groupColumns())       rdcQry.addGroupExpression(column(((GridSqlAlias)mapExps.get(col)).alias()));
    }
  }
  if (srcQry.having() != null && !collocated) {
    rdcQry.whereAnd(column(columnName(srcQry.havingColumn())));
    mapQry.having(null);
  }
  if (!srcQry.sort().isEmpty()) {
    if (aggregateFound)     mapQry.clearSort();
    for (    GridSqlSortColumn sortCol : srcQry.sort())     rdcQry.addSort(sortCol);
  }
  if (srcQry.limit() != null) {
    if (aggregateFound)     mapQry.limit(null);
    rdcQry.limit(srcQry.limit());
  }
  if (srcQry.offset() != null) {
    mapQry.offset(null);
    rdcQry.offset(srcQry.offset());
  }
  if (srcQry.distinct()) {
    mapQry.distinct(false);
    rdcQry.distinct(true);
  }
  GridCacheTwoStepQuery res=new GridCacheTwoStepQuery(rdcQry.getSQL(),findParams(rdcQry,params,new ArrayList<>()).toArray());
  res.addMapQuery(mergeTable,mapQry.getSQL(),findParams(mapQry,params,new ArrayList<>(params.length)).toArray());
  return res;
}
