{
  if (params == null)   params=GridCacheSqlQuery.EMPTY_PARAMS;
  Set<String> spaces=new HashSet<>();
  final GridSqlSelect mapQry=wrapUnion(collectAllSpaces(GridSqlQueryParser.parse(stmt),spaces));
  final String mergeTable=TABLE_FUNC_NAME + "()";
  final boolean explain=mapQry.explain();
  mapQry.explain(false);
  GridSqlSelect rdcQry=new GridSqlSelect().from(new GridSqlFunction(null,TABLE_FUNC_NAME));
  List<GridSqlElement> mapExps=F.addAll(new ArrayList<GridSqlElement>(mapQry.allColumns()),mapQry.select(false));
  GridSqlElement[] rdcExps=new GridSqlElement[mapQry.visibleColumns()];
  Set<String> colNames=new HashSet<>();
  boolean aggregateFound=false;
  for (int i=0, len=mapExps.size(); i < len; i++)   aggregateFound|=splitSelectExpression(mapExps,rdcExps,colNames,i,collocated);
  mapQry.clearSelect();
  for (  GridSqlElement exp : mapExps)   mapQry.addSelectExpression(exp,true);
  for (  GridSqlElement rdcExp : rdcExps)   rdcQry.addSelectExpression(rdcExp,true);
  for (int i=rdcExps.length; i < mapExps.size(); i++)   rdcQry.addSelectExpression(column(((GridSqlAlias)mapExps.get(i)).alias()),false);
  if (mapQry.groupColumns() != null && !collocated)   rdcQry.groupColumns(mapQry.groupColumns());
  if (mapQry.havingColumn() >= 0 && !collocated) {
    rdcQry.whereAnd(column(columnName(mapQry.havingColumn())));
    mapQry.havingColumn(-1);
  }
  if (!mapQry.sort().isEmpty()) {
    for (    GridSqlSortColumn sortCol : mapQry.sort())     rdcQry.addSort(sortCol);
    if (aggregateFound)     mapQry.clearSort();
  }
  if (mapQry.limit() != null) {
    rdcQry.limit(mapQry.limit());
    if (aggregateFound)     mapQry.limit(null);
  }
  if (mapQry.offset() != null) {
    rdcQry.offset(mapQry.offset());
    mapQry.offset(null);
  }
  if (mapQry.distinct()) {
    mapQry.distinct(!aggregateFound && mapQry.groupColumns() == null && mapQry.havingColumn() < 0);
    rdcQry.distinct(true);
  }
  GridCacheTwoStepQuery res=new GridCacheTwoStepQuery(spaces,rdcQry.getSQL(),findParams(rdcQry,params,new ArrayList<>()).toArray());
  res.addMapQuery(mergeTable,mapQry.getSQL(),findParams(mapQry,params,new ArrayList<>(params.length)).toArray());
  res.explain(explain);
  return res;
}
