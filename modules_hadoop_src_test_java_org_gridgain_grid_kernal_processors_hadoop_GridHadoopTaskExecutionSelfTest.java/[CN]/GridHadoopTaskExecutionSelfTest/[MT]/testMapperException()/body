{
  prepareFile("/testFile",1000);
  Configuration cfg=new Configuration();
  cfg.setStrings("fs.ggfs.impl",GridGgfsHadoopFileSystem.class.getName());
  Job job=Job.getInstance(cfg);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(IntWritable.class);
  job.setMapperClass(FailMapper.class);
  job.setNumReduceTasks(0);
  job.setInputFormatClass(TextInputFormat.class);
  FileInputFormat.setInputPaths(job,new Path("ggfs:///"));
  FileOutputFormat.setOutputPath(job,new Path("ggfs:///output/"));
  job.setJarByClass(getClass());
  GridHadoopProcessorAdapter hadoop=((GridKernal)grid(0)).context().hadoop();
  final GridFuture<?> fut=hadoop.submit(new GridHadoopJobId(UUID.randomUUID(),3),new GridHadoopDefaultJobInfo(job.getConfiguration()));
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      fut.get();
      return null;
    }
  }
,GridException.class,null);
}
