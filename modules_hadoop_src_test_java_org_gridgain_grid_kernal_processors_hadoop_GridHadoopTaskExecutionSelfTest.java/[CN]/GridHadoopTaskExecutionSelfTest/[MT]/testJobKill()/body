{
  Configuration cfg=prepareJobForCancelling();
  GridHadoop hadoop=grid(0).hadoop();
  GridHadoopJobId jobId=new GridHadoopJobId(UUID.randomUUID(),1);
  boolean killRes=hadoop.kill(jobId);
  assertFalse(killRes);
  final IgniteFuture<?> fut=hadoop.submit(jobId,createJobInfo(cfg));
  if (!GridTestUtils.waitForCondition(new GridAbsPredicate(){
    @Override public boolean apply(){
      return splitsCount.get() > 0;
    }
  }
,20000)) {
    U.dumpThreads(log);
    assertTrue(false);
  }
  if (!GridTestUtils.waitForCondition(new GridAbsPredicate(){
    @Override public boolean apply(){
      X.println("___ executed tasks: " + executedTasks.get());
      return executedTasks.get() == splitsCount.get();
    }
  }
,20000)) {
    U.dumpThreads(log);
    fail();
  }
  killRes=hadoop.kill(jobId);
  assertTrue(killRes);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      fut.get();
      return null;
    }
  }
,GridException.class,null);
  assertEquals(executedTasks.get(),cancelledTasks.get());
  killRes=hadoop.kill(jobId);
  assertTrue(killRes);
}
