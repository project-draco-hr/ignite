{
  if (folder != null) {
    folder=null;
    dirPaths.poll();
  }
  if (timeoutTask != null) {
    U.interrupt(timeoutTask);
    U.join(timeoutTask,log);
  }
  while (!dirPaths.isEmpty()) {
    curDirPath=dirPaths.peek();
    if (new File(curDirPath).exists())     folder=new File(curDirPath);
 else {
      try {
        folder=U.resolveWorkDirectory(curDirPath,false);
      }
 catch (      IgniteCheckedException e) {
        if (log.isDebugEnabled())         log.debug("Failed to resolve directory [path=" + curDirPath + ", exception="+ e.getMessage()+ ']');
        dirPaths.poll();
        if (!dirPaths.isEmpty())         continue;
 else         throw new IgniteSpiException("Failed to resolve directory: " + curDirPath + ']',e);
      }
      if (log.isDebugEnabled())       log.debug("Created shared filesystem checkpoint directory: " + folder.getAbsolutePath());
    }
    break;
  }
  if (folder != null) {
    Map<File,SharedFsTimeData> files=new HashMap<>();
    IgniteMarshaller marsh=ignite.configuration().getMarshaller();
    for (    File file : getFiles()) {
      if (file.exists()) {
        if (log.isDebugEnabled())         log.debug("Checking checkpoint file: " + file.getAbsolutePath());
        try {
          SharedFsCheckpointData data=SharedFsUtils.read(file,marsh,log);
          if (data.getHost().equals(host)) {
            files.put(file,new SharedFsTimeData(data.getExpireTime(),file.lastModified(),data.getKey()));
            if (log.isDebugEnabled())             log.debug("Registered existing checkpoint from: " + file.getAbsolutePath());
          }
        }
 catch (        IgniteCheckedException e) {
          U.error(log,"Failed to unmarshal objects in checkpoint file (ignoring): " + file.getAbsolutePath(),e);
        }
catch (        IOException e) {
          U.error(log,"IO error reading checkpoint file (ignoring): " + file.getAbsolutePath(),e);
        }
      }
    }
    timeoutTask=new SharedFsTimeoutTask(gridName,marsh,log);
    timeoutTask.setCheckpointListener(lsnr);
    timeoutTask.add(files);
    timeoutTask.start();
  }
  return folder;
}
