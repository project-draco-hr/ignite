{
  assertEquals(0,executeHadoopCmd("fs","-ls","/"));
  assertEquals(0,executeHadoopCmd("fs","-mkdir","/input"));
  assertEquals(0,executeHadoopCmd("fs","-put",new File(testWorkDir,"test-data").getAbsolutePath(),"/input"));
  assertTrue(ggfs.exists(new IgniteFsPath("/input/test-data")));
  assertEquals(0,executeHadoopCmd("jar",examplesJar.getAbsolutePath(),"wordcount","/input","/output"));
  IgniteFsPath path=new IgniteFsPath("/users/" + System.getProperty("user.name") + "/");
  assertTrue(ggfs.exists(path));
  IgniteFsPath jobStatPath=null;
  for (  IgniteFsPath jobPath : ggfs.listPaths(path)) {
    assertNull(jobStatPath);
    jobStatPath=jobPath;
  }
  File locStatFile=new File(testWorkDir,"performance");
  assertEquals(0,executeHadoopCmd("fs","-get",jobStatPath.toString() + "/performance",locStatFile.toString()));
  long evtCnt=GridHadoopTestUtils.simpleCheckJobStatFile(new BufferedReader(new FileReader(locStatFile)));
  assertTrue(evtCnt >= 22);
  assertTrue(ggfs.exists(new IgniteFsPath("/output")));
  BufferedReader in=new BufferedReader(new InputStreamReader(ggfs.open(new IgniteFsPath("/output/part-r-00000"))));
  List<String> res=new ArrayList<>();
  String line;
  while ((line=in.readLine()) != null)   res.add(line);
  Collections.sort(res);
  assertEquals("[blue\t150, green\t200, red\t100, yellow\t50]",res.toString());
}
