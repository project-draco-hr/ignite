{
  IgniteCache<TestKey,TestValue> cache=grid(0).cache(null);
  Affinity<Object> aff=grid(0).affinity(null);
  final List<WeakReference<Object>> refs=new ArrayList<>();
  for (int i=0; i < 1000; i++) {
    TestKey key=new TestKey(i);
    TestValue val=new TestValue();
    refs.add(new WeakReference<Object>(val));
    cache.put(key,val);
    checkNoValue(aff,key);
    for (int g=0; g < gridCount(); g++)     assertNotNull(grid(g).cache(null).get(key));
    checkNoValue(aff,key);
    cache.invoke(key,new CacheEntryProcessor<TestKey,TestValue,Object>(){
      @Override public Object process(      MutableEntry<TestKey,TestValue> entry,      Object... args){
        assertNotNull(entry.getValue());
        entry.setValue(new TestValue());
        return new TestValue();
      }
    }
);
    checkNoValue(aff,key);
    for (int g=0; g < gridCount(); g++)     assertNotNull(grid(g).cache(null).get(key));
    checkNoValue(aff,key);
    cache.remove(key);
    for (int g=0; g < gridCount(); g++)     assertNull(grid(g).cache(null).get(key));
    try (IgniteDataStreamer streamer=grid(0).dataStreamer(null)){
      streamer.addData(key,val);
    }
     checkNoValue(aff,key);
    if (aff.isPrimaryOrBackup(grid(0).localNode(),key)) {
      cache.localEvict(Collections.singleton(key));
      assertNull(cache.localPeek(key,CachePeekMode.ONHEAP));
      cache.localPromote(Collections.singleton(key));
      assertNotNull(cache.localPeek(key,CachePeekMode.ONHEAP));
      checkNoValue(aff,key);
    }
  }
  cache.loadCache(null);
  TestKey key=new TestKey(1);
  checkNoValue(aff,key);
  for (int g=0; g < gridCount(); g++)   assertNotNull(grid(g).cache(null).get(key));
  checkNoValue(aff,key);
}
