{
  for (int g=0; g < gridCount(); g++) {
    IgniteEx ig=grid(g);
    GridCacheAdapter cache0=internalCache(ig,null);
    GridCacheEntryEx e=cache0.peekEx(key);
    if (e == null && cache0.isNear())     e=((GridNearCacheAdapter)cache0).dht().peekEx(key);
    if (e != null) {
      KeyCacheObject keyObj=e.key();
      assertNotNull(keyObj);
      if (!isBinaryMarshallerUsed(ig)) {
        assertNotNull("Unexpected value, node: " + g,GridTestUtils.getFieldValue(keyObj,CacheObjectAdapter.class,"val"));
        Object key0=keyObj.value(cache0.context().cacheObjectContext(),true);
        Object key1=keyObj.value(cache0.context().cacheObjectContext(),false);
        Object key2=keyObj.value(cache0.context().cacheObjectContext(),true);
        Object key3=keyObj.value(cache0.context().cacheObjectContext(),false);
        assertSame(key0,key1);
        assertSame(key1,key2);
        assertSame(key2,key3);
      }
      CacheObject obj=e.rawGet();
      if (obj != null) {
        if (!isBinaryMarshallerUsed(ig))         assertNotNull("Unexpected value, node: " + g,reflectiveValue(obj));
        Object val0=obj.value(cache0.context().cacheObjectContext(),true);
        assertNotNull("Unexpected value after value() requested1: " + g,reflectiveValue(obj));
        Object val1=obj.value(cache0.context().cacheObjectContext(),true);
        assertNotNull("Unexpected value after value() requested2: " + g,reflectiveValue(obj));
        assertSame(val0,val1);
        Object val2=obj.value(cache0.context().cacheObjectContext(),false);
        assertNotNull("Unexpected value after value() requested3: " + g,reflectiveValue(obj));
        assertSame(val1,val2);
      }
 else       assertFalse(aff.isPrimaryOrBackup(ig.localNode(),key));
    }
 else     assertFalse("Entry not found, node: " + g,aff.isPrimaryOrBackup(ig.localNode(),key));
  }
}
