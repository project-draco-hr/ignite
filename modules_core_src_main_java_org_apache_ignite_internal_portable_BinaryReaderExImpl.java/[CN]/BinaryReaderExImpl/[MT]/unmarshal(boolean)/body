{
  int start=in.position();
  byte flag=in.readByte();
switch (flag) {
case NULL:
    return null;
case HANDLE:
{
    int handlePos=start - in.readInt();
    Object obj=rCtx.get(handlePos);
    if (obj == null) {
      int retPos=in.position();
      streamPosition(handlePos);
      obj=unmarshal();
      streamPosition(retPos);
    }
    return obj;
  }
case OBJ:
{
  PortableUtils.checkProtocolVersion(in.readByte());
  int len=PortableUtils.length(in,start);
  BinaryObjectEx po;
  if (detach) {
    streamPosition(start);
    po=new BinaryObjectImpl(ctx,in.readByteArray(len),0);
  }
 else {
    if (in.offheapPointer() == 0)     po=new BinaryObjectImpl(ctx,in.array(),start);
 else     po=new BinaryObjectOffheapImpl(ctx,in.offheapPointer(),start,in.remaining() + in.position());
    streamPosition(start + po.length());
  }
  rCtx.put(start,po);
  return po;
}
case BYTE:
return in.readByte();
case SHORT:
return in.readShort();
case INT:
return in.readInt();
case LONG:
return in.readLong();
case FLOAT:
return in.readFloat();
case DOUBLE:
return in.readDouble();
case CHAR:
return in.readChar();
case BOOLEAN:
return in.readBoolean();
case DECIMAL:
return doReadDecimal();
case STRING:
return doReadString();
case UUID:
return doReadUuid();
case DATE:
return doReadDate();
case TIMESTAMP:
return doReadTimestamp();
case BYTE_ARR:
return doReadByteArray();
case SHORT_ARR:
return doReadShortArray();
case INT_ARR:
return doReadIntArray();
case LONG_ARR:
return doReadLongArray();
case FLOAT_ARR:
return doReadFloatArray();
case DOUBLE_ARR:
return doReadDoubleArray();
case CHAR_ARR:
return doReadCharArray();
case BOOLEAN_ARR:
return doReadBooleanArray();
case DECIMAL_ARR:
return doReadDecimalArray();
case STRING_ARR:
return doReadStringArray();
case UUID_ARR:
return doReadUuidArray();
case DATE_ARR:
return doReadDateArray();
case TIMESTAMP_ARR:
return doReadTimestampArray();
case OBJ_ARR:
return doReadObjectArray(false);
case COL:
return doReadCollection(false,null);
case MAP:
return doReadMap(false,null);
case MAP_ENTRY:
return doReadMapEntry(false);
case PORTABLE_OBJ:
return doReadPortableObject();
case ENUM:
return doReadEnum(doReadClass());
case ENUM_ARR:
return doReadEnumArray(doReadClass());
case CLASS:
return doReadClass();
case OPTM_MARSH:
return doReadOptimized();
default :
throw new BinaryObjectException("Invalid flag value: " + flag);
}
}
