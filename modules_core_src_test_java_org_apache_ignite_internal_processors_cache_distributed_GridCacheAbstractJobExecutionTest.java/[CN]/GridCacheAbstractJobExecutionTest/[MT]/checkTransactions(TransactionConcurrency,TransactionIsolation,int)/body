{
  info("Grid 0: " + grid(0).localNode().id());
  info("Grid 1: " + grid(1).localNode().id());
  info("Grid 2: " + grid(2).localNode().id());
  info("Grid 3: " + grid(3).localNode().id());
  Ignite ignite=grid(0);
  Collection<ComputeTaskFuture<?>> futs=new LinkedList<>();
  final String key="TestKey";
  info("Primary node for test key: " + grid(0).affinity(null).mapKeyToNode(key));
  IgniteCompute comp=ignite.compute().withAsync();
  for (int i=0; i < jobCnt; i++) {
    comp.apply(new CX1<Integer,Void>(){
      @IgniteInstanceResource private Ignite ignite;
      @Override public Void applyx(      final Integer i){
        IgniteCache<String,int[]> cache=ignite.cache(null);
        try (Transaction tx=ignite.transactions().txStart(concur,isolation)){
          int[] arr=cache.get(key);
          if (arr == null)           arr=new int[jobCnt];
          arr[i]=1;
          cache.put(key,arr);
          int c=cntr.getAndIncrement();
          if (c % 50 == 0)           X.println("Executing transaction [i=" + i + ", c="+ c+ ']');
          tx.commit();
        }
         return null;
      }
    }
,i);
    futs.add(comp.future());
  }
  for (  ComputeTaskFuture<?> fut : futs)   fut.get();
  for (int i=0; i < GRID_CNT; i++) {
    info("Running iteration: " + i);
    for (int g=0; g < GRID_CNT; g++) {
      info("Will check grid: " + g);
      info("Value: " + grid(i).cache(null).localPeek(key));
    }
    IgniteCache<String,int[]> c=grid(i).cache(null);
    try (Transaction tx=grid(i).transactions().txStart(concur,isolation)){
      int[] arr=c.get(key);
      assertNotNull(arr);
      assertEquals(jobCnt,arr.length);
      for (      int j : arr)       assertEquals(1,j);
      tx.commit();
    }
   }
}
