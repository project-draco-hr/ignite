{
  Ignite ignite0=startGrid(0);
  int minorVer=ignite0.configuration().isLateAffinityAssignment() ? 1 : 0;
  GridDhtPartitionTopology top0=((IgniteKernal)ignite0).context().cache().context().cacheContext(1).topology();
  assertTrue(top0.rebalanceFinished(new AffinityTopologyVersion(1)));
  assertFalse(top0.rebalanceFinished(new AffinityTopologyVersion(2)));
  Ignite ignite1=startGrid(1);
  GridDhtPartitionTopology top1=((IgniteKernal)ignite1).context().cache().context().cacheContext(1).topology();
  waitRebalanceFinished(ignite0,2,minorVer);
  waitRebalanceFinished(ignite1,2,minorVer);
  assertFalse(top0.rebalanceFinished(new AffinityTopologyVersion(3)));
  assertFalse(top1.rebalanceFinished(new AffinityTopologyVersion(3)));
  Ignite ignite2=startGrid(2);
  GridDhtPartitionTopology top2=((IgniteKernal)ignite2).context().cache().context().cacheContext(1).topology();
  waitRebalanceFinished(ignite0,3,minorVer);
  waitRebalanceFinished(ignite1,3,minorVer);
  waitRebalanceFinished(ignite2,3,minorVer);
  assertFalse(top0.rebalanceFinished(new AffinityTopologyVersion(4)));
  assertFalse(top1.rebalanceFinished(new AffinityTopologyVersion(4)));
  assertFalse(top2.rebalanceFinished(new AffinityTopologyVersion(4)));
  client=true;
  Ignite ignite3=startGrid(3);
  GridDhtPartitionTopology top3=((IgniteKernal)ignite3).context().cache().context().cacheContext(1).topology();
  assertTrue(top0.rebalanceFinished(new AffinityTopologyVersion(4)));
  assertTrue(top1.rebalanceFinished(new AffinityTopologyVersion(4)));
  assertTrue(top2.rebalanceFinished(new AffinityTopologyVersion(4)));
  assertTrue(top3.rebalanceFinished(new AffinityTopologyVersion(4)));
  stopGrid(1);
  waitRebalanceFinished(ignite0,5,0);
  waitRebalanceFinished(ignite2,5,0);
  waitRebalanceFinished(ignite3,5,0);
}
