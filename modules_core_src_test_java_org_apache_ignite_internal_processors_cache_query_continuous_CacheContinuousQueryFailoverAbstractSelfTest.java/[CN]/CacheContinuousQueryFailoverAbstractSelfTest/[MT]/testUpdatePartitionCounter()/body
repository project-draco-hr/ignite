{
  this.backups=2;
  final int SRV_NODES=4;
  startGridsMultiThreaded(SRV_NODES);
  client=true;
  final Ignite qryClient=startGrid(SRV_NODES);
  client=false;
  Map<Integer,Long> updateCntrs=new HashMap<>();
  ThreadLocalRandom rnd=ThreadLocalRandom.current();
  int killedNode=rnd.nextInt(SRV_NODES);
  for (int i=0; i < 10; i++) {
    List<Integer> keys=testKeys(grid(0).cache(null),10);
    for (    Integer key : keys) {
      IgniteCache cache=null;
      if (rnd.nextBoolean())       cache=qryClient.cache(null);
 else {
        for (int j=0; j < 10; j++) {
          int nodeIdx=rnd.nextInt(SRV_NODES);
          if (killedNode != nodeIdx) {
            cache=grid(nodeIdx).cache(null);
            break;
          }
        }
        if (cache == null)         throw new Exception("Failed to find a server node.");
      }
      cache.put(key,key);
      int part=qryClient.affinity(null).partition(key);
      Long cntr=updateCntrs.get(part);
      if (cntr == null)       cntr=0L;
      updateCntrs.put(part,++cntr);
    }
    checkPartCounter(SRV_NODES,killedNode,updateCntrs);
    stopGrid(killedNode);
    awaitPartitionMapExchange();
    checkPartCounter(SRV_NODES,killedNode,updateCntrs);
    startGrid(killedNode);
    awaitPartitionMapExchange();
    checkPartCounter(SRV_NODES,killedNode,updateCntrs);
    killedNode=rnd.nextInt(SRV_NODES);
  }
}
