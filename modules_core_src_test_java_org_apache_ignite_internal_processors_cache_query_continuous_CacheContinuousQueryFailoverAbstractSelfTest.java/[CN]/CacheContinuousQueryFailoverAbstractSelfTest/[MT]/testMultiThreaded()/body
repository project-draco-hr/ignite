{
  this.backups=2;
  final int SRV_NODES=3;
  startGridsMultiThreaded(SRV_NODES);
  client=true;
  Ignite qryClient=startGrid(SRV_NODES);
  final IgniteCache<Object,Object> cache=qryClient.cache(null);
  CacheEventListener1 lsnr=new CacheEventListener1(true);
  ContinuousQuery<Object,Object> qry=new ContinuousQuery<>();
  qry.setLocalListener(lsnr);
  QueryCursor<?> cur=cache.query(qry);
  client=false;
  final int SRV_IDX=SRV_NODES - 1;
  List<Integer> keys=primaryKeys(ignite(SRV_IDX).cache(null),10);
  final int THREADS=10;
  for (int i=0; i < keys.size(); i++) {
    log.info("Iteration: " + i);
    Ignite srv=ignite(SRV_IDX);
    TestCommunicationSpi spi=(TestCommunicationSpi)srv.configuration().getCommunicationSpi();
    spi.sndFirstOnly=new AtomicBoolean(false);
    final Integer key=keys.get(i);
    final AtomicInteger val=new AtomicInteger();
    CountDownLatch latch=new CountDownLatch(THREADS);
    lsnr.latch=latch;
    IgniteInternalFuture<?> fut=GridTestUtils.runMultiThreadedAsync(new Callable<Object>(){
      @Override public Object call() throws Exception {
        Integer val0=val.getAndIncrement();
        cache.put(key,val0);
        return null;
      }
    }
,THREADS,"update-thread");
    fut.get();
    stopGrid(SRV_IDX);
    if (!latch.await(5,SECONDS))     fail("Failed to wait for notifications [exp=" + THREADS + ", left="+ lsnr.latch.getCount()+ ']');
    assertEquals(THREADS,lsnr.allEvts.size());
    Set<Integer> vals=new HashSet<>();
    boolean err=false;
    for (    CacheEntryEvent<?,?> evt : lsnr.allEvts) {
      assertEquals(key,evt.getKey());
      assertNotNull(evt.getValue());
      if (!vals.add((Integer)evt.getValue())) {
        err=true;
        log.info("Extra event: " + evt);
      }
    }
    for (int v=0; v < THREADS; v++) {
      if (!vals.contains(v)) {
        err=true;
        log.info("Event for value not received: " + v);
      }
    }
    assertFalse("Invalid events, see log for details.",err);
    lsnr.allEvts.clear();
    startGrid(SRV_IDX);
  }
  cur.close();
}
