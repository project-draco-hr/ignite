{
  final IgniteCache<Long,Long> cache=populate();
  IgniteInternalFuture<?> offHeapFut=multithreadedAsync(new Runnable(){
    @Override public void run(){
      int cnt=0;
      for (      Cache.Entry<Long,Long> e : cache.localEntries(CachePeekMode.OFFHEAP)) {
        assertEquals(e.getKey(),e.getValue());
        cnt++;
      }
      assertEquals(cache.localSize(CachePeekMode.OFFHEAP),cnt);
    }
  }
,20);
  IgniteInternalFuture<?> swapFut=multithreadedAsync(new Runnable(){
    @Override public void run(){
      int cnt=0;
      for (      Cache.Entry<Long,Long> e : cache.localEntries(CachePeekMode.SWAP)) {
        assertEquals(e.getKey(),e.getValue());
        cnt++;
      }
      assertEquals(ENTRY_CNT - cache.localSize(CachePeekMode.OFFHEAP),cnt);
    }
  }
,20);
  offHeapFut.get();
  swapFut.get();
  System.gc();
  cache.get(1L + ENTRY_CNT);
  assertEquals(0,((IgniteKernal)grid(0)).internalCache().context().swap().iteratorSetSize());
}
