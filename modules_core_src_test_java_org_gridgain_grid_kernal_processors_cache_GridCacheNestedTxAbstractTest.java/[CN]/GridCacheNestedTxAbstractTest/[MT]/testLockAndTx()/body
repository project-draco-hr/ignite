{
  final GridCache<String,Integer> c=grid(0).cache(null);
  Collection<Thread> threads=new LinkedList<>();
  c.put(CNTR_KEY,0);
  for (int i=0; i < THREAD_CNT; i++) {
    info("*** Init tx thread: " + i);
    threads.add(new Thread(new Runnable(){
      @Override public void run(){
        GridCacheTx tx=c.txStart(PESSIMISTIC,REPEATABLE_READ);
        try {
          int cntr=c.get(CNTR_KEY);
          info("*** Cntr in tx thread: " + cntr);
          c.put(CNTR_KEY,++cntr);
          tx.commit();
        }
 catch (        GridException e) {
          error("Failed tx thread",e);
        }
      }
    }
));
  }
  for (int i=0; i < THREAD_CNT; i++) {
    info("*** Init lock thread: " + i);
    threads.add(new Thread(new Runnable(){
      @Override public void run(){
        try {
          c.lock(CNTR_KEY,0);
          int cntr=c.get(CNTR_KEY);
          info("*** Cntr in lock thread: " + cntr);
          c.put(CNTR_KEY,--cntr);
        }
 catch (        Exception e) {
          error("Failed lock thread",e);
        }
 finally {
          try {
            c.unlock(CNTR_KEY);
          }
 catch (          GridException e) {
            error("Failed unlock",e);
          }
        }
      }
    }
));
  }
  for (  Thread t : threads)   t.start();
  for (  Thread t : threads)   t.join();
  int cntr=c.get(CNTR_KEY);
  assertEquals(0,cntr);
  for (int i=0; i < THREAD_CNT; i++)   assertNull(c.get(Integer.toString(i)));
}
