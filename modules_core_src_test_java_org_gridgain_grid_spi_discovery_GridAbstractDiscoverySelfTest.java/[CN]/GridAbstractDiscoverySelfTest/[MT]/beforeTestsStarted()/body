{
  try {
    for (int i=0; i < getSpiCount(); i++) {
      GridDiscoverySpi spi=getSpi(i);
      GridTestResources rsrcMgr=new GridTestResources(getMBeanServer(i));
      rsrcMgr.inject(spi);
      spi.setNodeAttributes(Collections.<String,Object>singletonMap(TEST_ATTRIBUTE_NAME,"true"),fromString("99.99.99"));
      spi.setListener(new GridDiscoverySpiListener(){
        @SuppressWarnings({"NakedNotify"}) @Override public void onDiscovery(        int type,        long topVer,        ClusterNode node,        Collection<ClusterNode> topSnapshot,        Map<Long,Collection<ClusterNode>> topHist){
          info("Discovery event [type=" + type + ", node="+ node+ ']');
synchronized (mux) {
            mux.notifyAll();
          }
        }
      }
);
      spi.setDataExchange(new GridDiscoverySpiDataExchange(){
        @Override public List<Object> collect(        UUID nodeId){
          return new LinkedList<>();
        }
        @Override public void onExchange(        List<Object> data){
        }
      }
);
      spi.setAuthenticator(new GridDiscoverySpiNodeAuthenticator(){
        @Override public GridSecurityContext authenticateNode(        ClusterNode n,        GridSecurityCredentials cred){
          GridSecuritySubjectAdapter subj=new GridSecuritySubjectAdapter(GridSecuritySubjectType.REMOTE_NODE,n.id());
          subj.permissions(new GridAllowAllPermissionSet());
          return new GridSecurityContext(subj);
        }
        @Override public boolean isGlobalNodeAuthentication(){
          return false;
        }
      }
);
      spi.spiStart(getTestGridName() + i);
      spis.add(spi);
      spiRsrcs.add(rsrcMgr);
      spi.onContextInitialized(initSpiContext());
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
  spiStartTime=System.currentTimeMillis();
}
