{
  final IgniteCache<Integer,String> cache=grid().jcache(null);
  final AtomicInteger cnt=new AtomicInteger();
  GridTestUtils.runMultiThreaded(new Callable<Object>(){
    /** 
 * {@inheritDoc} 
 */
    @Override public Object call() throws Exception {
      int idx=cnt.incrementAndGet();
      Set<Integer> keys=new HashSet<>();
      Collections.addAll(keys,idx,idx + 1,idx + 2,idx + 3);
      cache.lockAll(keys).lock();
      info("Locked keys from thread [keys=" + keys + ", thread="+ thread()+ ']');
      Thread.sleep(50);
      info("Unlocking key from thread [keys=" + keys + ", thread="+ thread()+ ']');
      cache.lockAll(keys).unlock();
      info("Unlocked keys from thread [keys=" + keys + ", thread="+ thread()+ ']');
      return null;
    }
  }
,10,"multi-lock-thread");
}
