{
  try {
    store.put(tx,"key1","val1");
    if (tx != null && commit) {
      store.txEnd(tx,true);
      tx=new DummyTx();
    }
    if (tx == null || commit)     assertEquals("val1",store.load(tx,"key1"));
    Map<String,String> m=new HashMap<>();
    m.put("key2","val2");
    m.put("key3","val3");
    store.putAll(tx,m);
    if (tx != null && commit) {
      store.txEnd(tx,true);
      tx=new DummyTx();
    }
    final AtomicInteger cntr=new AtomicInteger();
    if (tx == null || commit) {
      store.loadAll(tx,Arrays.asList("key1","key2","key3","no_such_key"),new CI2<Object,Object>(){
        @Override public void apply(        Object o,        Object o1){
          if ("key1".equals(o))           assertEquals("val1",o1);
          if ("key2".equals(o))           assertEquals("val2",o1);
          if ("key3".equals(o))           assertEquals("val3",o1);
          if ("no_such_key".equals(o))           fail();
          cntr.incrementAndGet();
        }
      }
);
      assertEquals(3,cntr.get());
    }
    store.removeAll(tx,Arrays.asList("key2","key3"));
    if (tx != null && commit) {
      store.txEnd(tx,true);
      tx=new DummyTx();
    }
    if (tx == null || commit) {
      assertNull(store.load(tx,"key2"));
      assertNull(store.load(tx,"key3"));
      assertEquals("val1",store.load(tx,"key1"));
    }
    store.remove(tx,"key1");
    if (tx != null && commit) {
      store.txEnd(tx,true);
      tx=new DummyTx();
    }
    if (tx == null || commit)     assertNull(store.load(tx,"key1"));
  }
  finally {
    if (tx != null)     store.txEnd(tx,false);
  }
}
