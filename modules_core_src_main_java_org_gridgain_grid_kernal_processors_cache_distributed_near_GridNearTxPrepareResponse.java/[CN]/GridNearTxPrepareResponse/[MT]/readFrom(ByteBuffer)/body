{
  commState.setBuffer(buf);
  if (!super.readFrom(buf))   return false;
switch (commState.idx) {
case 10:
    GridCacheVersion dhtVer0=commState.getCacheVersion("dhtVer");
  if (dhtVer0 == CACHE_VER_NOT_READ)   return false;
dhtVer=dhtVer0;
commState.idx++;
case 11:
IgniteUuid futId0=commState.getGridUuid("futId");
if (futId0 == GRID_UUID_NOT_READ) return false;
futId=futId0;
commState.idx++;
case 12:
if (commState.readSize == -1) {
if (buf.remaining() < 4) return false;
commState.readSize=commState.getInt(null);
}
if (commState.readSize >= 0) {
if (invalidParts == null) invalidParts=new ArrayList<>(commState.readSize);
for (int i=commState.readItems; i < commState.readSize; i++) {
if (buf.remaining() < 4) return false;
int _val=commState.getInt(null);
invalidParts.add((Integer)_val);
commState.readItems++;
}
}
commState.readSize=-1;
commState.readItems=0;
commState.idx++;
case 13:
IgniteUuid miniId0=commState.getGridUuid("miniId");
if (miniId0 == GRID_UUID_NOT_READ) return false;
miniId=miniId0;
commState.idx++;
case 14:
if (commState.readSize == -1) {
if (buf.remaining() < 4) return false;
commState.readSize=commState.getInt(null);
}
if (commState.readSize >= 0) {
if (ownedValsBytes == null) ownedValsBytes=new ArrayList<>(commState.readSize);
for (int i=commState.readItems; i < commState.readSize; i++) {
byte[] _val=commState.getByteArray(null);
if (_val == BYTE_ARR_NOT_READ) return false;
ownedValsBytes.add((byte[])_val);
commState.readItems++;
}
}
commState.readSize=-1;
commState.readItems=0;
commState.idx++;
case 15:
if (commState.readSize == -1) {
if (buf.remaining() < 4) return false;
commState.readSize=commState.getInt(null);
}
if (commState.readSize >= 0) {
if (pending == null) pending=new ArrayList<>(commState.readSize);
for (int i=commState.readItems; i < commState.readSize; i++) {
GridCacheVersion _val=commState.getCacheVersion(null);
if (_val == CACHE_VER_NOT_READ) return false;
pending.add((GridCacheVersion)_val);
commState.readItems++;
}
}
commState.readSize=-1;
commState.readItems=0;
commState.idx++;
}
return true;
}
