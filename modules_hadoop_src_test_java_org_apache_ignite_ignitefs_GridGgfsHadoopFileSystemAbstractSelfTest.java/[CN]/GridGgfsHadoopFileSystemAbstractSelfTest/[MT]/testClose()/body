{
  final Path path=new Path("dir");
  fs.close();
  fs.close();
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      fs.initialize(primaryFsUri,primaryFsCfg);
      return null;
    }
  }
,IOException.class,"File system is stopped.");
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      fs.setPermission(path,FsPermission.createImmutable((short)777));
      return null;
    }
  }
,IOException.class,"File system is stopped.");
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      fs.setOwner(path,"user","group");
      return null;
    }
  }
,IOException.class,"File system is stopped.");
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return fs.open(path,256);
    }
  }
,IOException.class,"File system is stopped.");
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return fs.create(path);
    }
  }
,IOException.class,"File system is stopped.");
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return fs.append(path);
    }
  }
,IOException.class,"File system is stopped.");
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return fs.rename(path,new Path("newDir"));
    }
  }
,IOException.class,"File system is stopped.");
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return fs.delete(path,true);
    }
  }
,IOException.class,"File system is stopped.");
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return fs.listStatus(path);
    }
  }
,IOException.class,"File system is stopped.");
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return fs.mkdirs(path);
    }
  }
,IOException.class,"File system is stopped.");
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return fs.getFileStatus(path);
    }
  }
,IOException.class,"File system is stopped.");
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return fs.getFileBlockLocations(new FileStatus(1L,false,1,1L,1L,new Path("path")),0L,256L);
    }
  }
,IOException.class,"File system is stopped.");
}
