{
  final AtomicBoolean finished=new AtomicBoolean();
  IgniteInternalFuture<Object> fut=GridTestUtils.runAsync(new Callable<Object>(){
    @Override public Object call() throws Exception {
      while (!finished.get()) {
        stopGrid(3);
        U.sleep(300);
        startGrid(3);
      }
      return null;
    }
  }
);
  try {
    int keysCnt=keysCount();
    boolean eThrown=false;
    IgniteCache<Object,Object> cache=ignite(0).cache(null).withNoRetries();
    if (async)     cache=cache.withAsync();
    for (int i=0; i < keysCnt; i++) {
      try {
        if (async) {
          cache.put(i,i);
          cache.future().get();
        }
 else         cache.put(i,i);
      }
 catch (      Exception e) {
        assertTrue("Invalid exception: " + e,X.hasCause(e,ClusterTopologyCheckedException.class,CachePartialUpdateException.class));
        eThrown=true;
        break;
      }
    }
    assertTrue(eThrown);
    finished.set(true);
    fut.get();
  }
  finally {
    finished.set(true);
  }
}
