{
  final long nodeOVL=n.shrinkOVL;
  final long leftOVL=nL.shrinkOVL;
  final Node<K,V> nPL=nParent.left;
  final Node<K,V> nLRL=nLR.unsharedLeft();
  final Node<K,V> nLRR=nLR.unsharedRight();
  final int hLRR=height(nLRR);
  n.shrinkOVL=beginChange(nodeOVL);
  nL.shrinkOVL=beginChange(leftOVL);
  n.left=nLRR;
  if (nLRR != null) {
    nLRR.parent=n;
  }
  nL.right=nLRL;
  if (nLRL != null) {
    nLRL.parent=nL;
  }
  nLR.left=nL;
  nL.parent=nLR;
  nLR.right=n;
  n.parent=nLR;
  if (nPL == n) {
    nParent.left=nLR;
  }
 else {
    nParent.right=nLR;
  }
  nLR.parent=nParent;
  final int hNRepl=1 + Math.max(hLRR,hR);
  n.height=hNRepl;
  final int hLRepl=1 + Math.max(hLL,hLRL);
  nL.height=hLRepl;
  nLR.height=1 + Math.max(hLRepl,hNRepl);
  n.shrinkOVL=endChange(nodeOVL);
  nL.shrinkOVL=endChange(leftOVL);
  assert(Math.abs(hLL - hLRL) <= 1);
  assert(!((hLL == 0 || nLRL == null) && nL.vOpt == null));
  final int balN=hLRR - hR;
  if (balN < -1 || balN > 1) {
    return n;
  }
  if ((nLRR == null || hR == 0) && n.vOpt == null) {
    return n;
  }
  final int balLR=hLRepl - hNRepl;
  if (balLR < -1 || balLR > 1) {
    return nLR;
  }
  return fixHeight_nl(nParent);
}
