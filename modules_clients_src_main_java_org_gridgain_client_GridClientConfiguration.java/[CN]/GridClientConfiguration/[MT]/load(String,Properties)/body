{
  while (prefix.endsWith("."))   prefix=prefix.substring(0,prefix.length() - 1);
  if (!prefix.isEmpty())   prefix+=".";
  String balancer=in.getProperty(prefix + "balancer");
  String connectTimeout=in.getProperty(prefix + "connectTimeout");
  String cred=in.getProperty(prefix + "credentials");
  String autoFetchMetrics=in.getProperty(prefix + "autoFetchMetrics");
  String autoFetchAttrs=in.getProperty(prefix + "autoFetchAttributes");
  String maxConnIdleTime=in.getProperty(prefix + "idleTimeout");
  String proto=in.getProperty(prefix + "protocol");
  String srvrs=in.getProperty(prefix + "servers");
  String tcpNoDelay=in.getProperty(prefix + "tcp.noDelay");
  String topRefreshFreq=in.getProperty(prefix + "topology.refresh");
  String sslEnabled=in.getProperty(prefix + "ssl.enabled");
  String sslProto=in.getProperty(prefix + "ssl.protocol","TLS");
  String sslKeyAlg=in.getProperty(prefix + "ssl.key.algorithm","SunX509");
  String keyStorePath=in.getProperty(prefix + "ssl.keystore.location");
  String keyStorePwd=in.getProperty(prefix + "ssl.keystore.password");
  String keyStoreType=in.getProperty(prefix + "ssl.keystore.type");
  String trustStorePath=in.getProperty(prefix + "ssl.truststore.location");
  String trustStorePwd=in.getProperty(prefix + "ssl.truststore.password");
  String trustStoreType=in.getProperty(prefix + "ssl.truststore.type");
  String dataCfgs=in.getProperty(prefix + "data.configurations");
  setBalancer(resolveBalancer(balancer));
  if (!isEmpty(connectTimeout))   setConnectTimeout(Integer.parseInt(connectTimeout));
  if (!isEmpty(cred)) {
    int idx=cred.indexOf(':');
    if (idx >= 0 && idx < cred.length() - 1) {
      setSecurityCredentialsProvider(new GridSecurityCredentialsBasicProvider(new GridSecurityCredentials(cred.substring(0,idx),cred.substring(idx + 1))));
    }
 else {
      setSecurityCredentialsProvider(new GridSecurityCredentialsBasicProvider(new GridSecurityCredentials(null,null,cred)));
    }
  }
  if (!isEmpty(autoFetchMetrics))   setAutoFetchMetrics(Boolean.parseBoolean(autoFetchMetrics));
  if (!isEmpty(autoFetchAttrs))   setAutoFetchAttributes(Boolean.parseBoolean(autoFetchAttrs));
  if (!isEmpty(maxConnIdleTime))   setMaxConnectionIdleTime(Integer.parseInt(maxConnIdleTime));
  if (!isEmpty(proto))   setProtocol(GridClientProtocol.valueOf(proto));
  if (!isEmpty(srvrs))   setServers(Arrays.asList(srvrs.replaceAll("\\s+","").split(",")));
  if (!isEmpty(tcpNoDelay))   setTcpNoDelay(Boolean.parseBoolean(tcpNoDelay));
  if (!isEmpty(topRefreshFreq))   setTopologyRefreshFrequency(Long.parseLong(topRefreshFreq));
  if (!isEmpty(sslEnabled) && Boolean.parseBoolean(sslEnabled)) {
    GridSslBasicContextFactory factory=new GridSslBasicContextFactory();
    factory.setProtocol(isEmpty(sslProto) ? "TLS" : sslProto);
    factory.setKeyAlgorithm(isEmpty(sslKeyAlg) ? "SunX509" : sslKeyAlg);
    if (isEmpty(keyStorePath))     throw new IllegalArgumentException("SSL key store location is not specified.");
    factory.setKeyStoreFilePath(keyStorePath);
    if (keyStorePwd != null)     factory.setKeyStorePassword(keyStorePwd.toCharArray());
    factory.setKeyStoreType(isEmpty(keyStoreType) ? "jks" : keyStoreType);
    if (isEmpty(trustStorePath))     factory.setTrustManagers(GridSslBasicContextFactory.getDisabledTrustManager());
 else {
      factory.setTrustStoreFilePath(trustStorePath);
      if (trustStorePwd != null)       factory.setTrustStorePassword(trustStorePwd.toCharArray());
      factory.setTrustStoreType(isEmpty(trustStoreType) ? "jks" : trustStoreType);
    }
    setSslContextFactory(factory);
  }
  if (!isEmpty(dataCfgs)) {
    String[] names=dataCfgs.replaceAll("\\s+","").split(",");
    Collection<GridClientDataConfiguration> list=new ArrayList<>();
    for (    String cfgName : names) {
      if (isEmpty(cfgName))       continue;
      String name=in.getProperty(prefix + "data." + cfgName+ ".name");
      String bal=in.getProperty(prefix + "data." + cfgName+ ".balancer");
      String aff=in.getProperty(prefix + "data." + cfgName+ ".affinity");
      GridClientDataConfiguration dataCfg=new GridClientDataConfiguration();
      dataCfg.setName(isEmpty(name) ? null : name);
      dataCfg.setBalancer(resolveBalancer(bal));
      dataCfg.setAffinity(resolveAffinity(aff));
      list.add(dataCfg);
    }
    setDataConfigurations(list);
  }
}
