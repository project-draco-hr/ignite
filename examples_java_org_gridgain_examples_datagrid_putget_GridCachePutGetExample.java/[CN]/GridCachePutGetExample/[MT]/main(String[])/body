{
  try (Grid g=args.length == 0 ? GridGain.start("examples/config/example-cache.xml") : GridGain.start(args[0])){
    g.events().consumeRemote(null,new GridPredicate<GridCacheEvent>(){
      @Override public boolean apply(      GridCacheEvent evt){
        System.out.println("Cache event [name=" + evt.name() + ", key="+ evt.key()+ ']');
        return true;
      }
    }
,EVT_CACHE_OBJECT_PUT,EVT_CACHE_OBJECT_READ,EVT_CACHE_OBJECT_REMOVED).get();
    GridCacheProjection<String,String> cache=g.cache(CACHE_NAME).projection(String.class,String.class);
    final int keyCnt=20;
    for (int i=0; i < keyCnt; i++)     cache.putx(Integer.toString(i),Integer.toString(i));
    for (int i=0; i < keyCnt; i++) {
      System.out.println("Peeked [key=" + i + ", val="+ cache.peek(Integer.toString(i))+ ']');
      System.out.println("Got [key=" + i + ", val="+ cache.get(Integer.toString(i))+ ']');
    }
    GridProjection rmts=g.forRemotes();
    if (!rmts.nodes().isEmpty()) {
      rmts.compute().run(BROADCAST,new GridRunnable(){
        @GridInstanceResource private transient Grid g;
        @Override public void run(){
          GridCacheProjection<String,String> cache=g.cache(CACHE_NAME).projection(String.class,String.class);
          if (cache == null) {
            System.out.println("Cache was not found [locNodeId=" + g.localNode().id() + ", cacheName="+ CACHE_NAME+ ']');
            return;
          }
          try {
            for (int i=0; i < keyCnt; i++) {
              System.out.println("Peeked [key=" + i + ", val="+ cache.peek(Integer.toString(i))+ ']');
              System.out.println("Got [key=" + i + ", val="+ cache.get(Integer.toString(i))+ ']');
            }
          }
 catch (          GridException e) {
            throw new RuntimeException(e);
          }
        }
      }
).get();
    }
  }
 }
