{
  GridTestUtils.waitForCondition(new PA(){
    @Override public boolean apply(){
      for (int i=0; i < gridCount(); i++) {
        if (grid(i).nodes().size() != gridCount())         return false;
      }
      return true;
    }
  }
,3000);
  for (int i=0; i < gridCount(); i++)   assertEquals(gridCount(),grid(i).nodes().size());
  for (int i=0; i < gridCount(); i++) {
    int j;
    for (j=0; j < 3; j++) {
      try {
        grid(i).cache(null).removeAll();
        break;
      }
 catch (      GridCachePartialUpdateException ignored) {
        U.sleep(500);
      }
    }
    if (j == 3)     fail("Failed to clear cache on grid " + i);
  }
  for (int i=0; i < gridCount(); i++)   assertEquals(0,grid(i).cache(null).size());
  for (int i=0; i < gridCount(); i++) {
    GridContinuousProcessor proc=((GridKernal)grid(i)).context().continuous();
    assertEquals(0,((Map)U.field(proc,"locInfos")).size());
    assertEquals(0,((Map)U.field(proc,"rmtInfos")).size());
    assertEquals(0,((Map)U.field(proc,"startFuts")).size());
    assertEquals(0,((Map)U.field(proc,"waitForStartAck")).size());
    assertEquals(0,((Map)U.field(proc,"stopFuts")).size());
    assertEquals(0,((Map)U.field(proc,"waitForStopAck")).size());
    assertEquals(0,((Map)U.field(proc,"pending")).size());
    GridCacheContinuousQueryManager mgr=((GridKernal)grid(i)).context().cache().internalCache().context().continuousQueries();
    assertEquals(0,((Map)U.field(mgr,"lsnrs")).size());
  }
}
