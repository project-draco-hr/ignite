{
  reader.setBuffer(buf);
  if (!reader.beforeMessageRead())   return false;
  if (!super.readFrom(buf,reader))   return false;
switch (reader.state()) {
case 20:
    accessTtl=reader.readLong("accessTtl");
  if (!reader.isLastRead())   return false;
reader.incrementState();
case 21:
dhtVers=reader.readObjectArray("dhtVers",MessageCollectionItemType.MSG,GridCacheVersion.class);
if (!reader.isLastRead()) return false;
reader.incrementState();
case 22:
filter=reader.readObjectArray("filter",MessageCollectionItemType.MSG,CacheEntryPredicate.class);
if (!reader.isLastRead()) return false;
reader.incrementState();
case 23:
firstClientReq=reader.readBoolean("firstClientReq");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 24:
hasTransforms=reader.readBoolean("hasTransforms");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 25:
implicitSingleTx=reader.readBoolean("implicitSingleTx");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 26:
implicitTx=reader.readBoolean("implicitTx");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 27:
miniId=reader.readIgniteUuid("miniId");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 28:
onePhaseCommit=reader.readBoolean("onePhaseCommit");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 29:
retVal=reader.readBoolean("retVal");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 30:
subjId=reader.readUuid("subjId");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 31:
syncCommit=reader.readBoolean("syncCommit");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 32:
taskNameHash=reader.readInt("taskNameHash");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 33:
topVer=reader.readMessage("topVer");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 34:
partIds=reader.readCollection("partIds",MessageCollectionItemType.INT);
if (!reader.isLastRead()) return false;
reader.incrementState();
}
return reader.afterMessageRead(GridNearLockRequest.class);
}
