{
  final AtomicBoolean done=new AtomicBoolean();
  final InetAddress addr=InetAddress.getByName("192.168.0.100");
  IgniteInternalFuture<?> fut1=GridTestUtils.runMultiThreadedAsync(new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      ServerSocket srvSock=null;
      Socket sock=null;
      try {
        srvSock=new ServerSocket(60000,0,addr);
        sock=srvSock.accept();
        X.println("Socket [timeout=" + sock.getSoTimeout() + ", linger="+ sock.getSoLinger()+ ", sndBuf="+ sock.getSendBufferSize()+ ", sndBuf="+ sock.getSendBufferSize()+ ']');
        sock.setKeepAlive(true);
        sock.setSoTimeout(2000);
        sock.setSendBufferSize(256 * 1024);
        X.println("Socket [timeout=" + sock.getSoTimeout() + ", linger="+ sock.getSoLinger()+ ", sndBuf="+ sock.getSendBufferSize()+ ", rcvBuf="+ sock.getReceiveBufferSize()+ ']');
        while (!done.get())         X.println("Read from socket: " + sock.getInputStream().read());
        return null;
      }
  finally {
        U.closeQuiet(srvSock);
        U.closeQuiet(sock);
      }
    }
  }
,1,"server");
  IgniteInternalFuture<?> fut2=GridTestUtils.runMultiThreadedAsync(new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      Socket sock=null;
      try {
        sock=new Socket(addr,60000);
        X.println("Socket [timeout=" + sock.getSoTimeout() + ", linger="+ sock.getSoLinger()+ ", sndBuf="+ sock.getSendBufferSize()+ ", sndBuf="+ sock.getSendBufferSize()+ ']');
        sock.setKeepAlive(true);
        sock.setSoTimeout(2000);
        sock.setSendBufferSize(256 * 1024);
        X.println("Socket [timeout=" + sock.getSoTimeout() + ", linger="+ sock.getSoLinger()+ ", sndBuf="+ sock.getSendBufferSize()+ ", sndBuf="+ sock.getSendBufferSize()+ ']');
        int i=0;
        while (!done.get()) {
          sock.getOutputStream().write(++i);
          sock.getOutputStream().flush();
          X.println("Wrote to socket: " + i);
          X.println("Socket connected: " + sock.isConnected());
          X.println("Socket keep alive: " + sock.getKeepAlive());
          U.sleep(1000);
        }
        return null;
      }
  finally {
        U.closeQuiet(sock);
      }
    }
  }
,1,"client");
  JOptionPane.showMessageDialog(null,"Unplug network cable." + U.nl() + "Press OK to finish.");
  done.set(true);
  fut1.get();
  fut2.get();
}
