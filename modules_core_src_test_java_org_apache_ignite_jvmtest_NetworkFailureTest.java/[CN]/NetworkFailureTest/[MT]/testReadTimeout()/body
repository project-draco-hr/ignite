{
  final InetAddress addr=InetAddress.getByName("192.168.3.10");
  IgniteFuture<?> fut1=GridTestUtils.runMultiThreadedAsync(new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      ServerSocket srvSock=null;
      Socket sock=null;
      try {
        srvSock=new ServerSocket(60000,0,addr);
        sock=srvSock.accept();
        X.println("Socket [timeout=" + sock.getSoTimeout() + ", linger="+ sock.getSoLinger()+ ", sndBuf="+ sock.getSendBufferSize()+ ", sndBuf="+ sock.getSendBufferSize()+ ", NODELAY="+ sock.getTcpNoDelay()+ ']');
        sock.setSoTimeout(2000);
        sock.setTcpNoDelay(true);
        X.println("Socket [timeout=" + sock.getSoTimeout() + ", linger="+ sock.getSoLinger()+ ", sndBuf="+ sock.getSendBufferSize()+ ", sndBuf="+ sock.getSendBufferSize()+ ", NODELAY="+ sock.getTcpNoDelay()+ ']');
        sock.getInputStream().read();
      }
 catch (      IOException e) {
        X.println("Caught expected exception: " + e);
        e.printStackTrace();
      }
 finally {
        U.closeQuiet(srvSock);
        U.closeQuiet(sock);
      }
      return null;
    }
  }
,1,"server");
  IgniteFuture<?> fut2=GridTestUtils.runMultiThreadedAsync(new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      Socket sock=null;
      try {
        sock=new Socket(addr,60000);
        X.println("Socket [timeout=" + sock.getSoTimeout() + ", linger="+ sock.getSoLinger()+ ", sndBuf="+ sock.getSendBufferSize()+ ", sndBuf="+ sock.getSendBufferSize()+ ", NODELAY="+ sock.getTcpNoDelay()+ ']');
        sock.setTcpNoDelay(true);
        X.println("Socket [timeout=" + sock.getSoTimeout() + ", linger="+ sock.getSoLinger()+ ", sndBuf="+ sock.getSendBufferSize()+ ", sndBuf="+ sock.getSendBufferSize()+ ", NODELAY="+ sock.getTcpNoDelay()+ ']');
        Thread.sleep(10000);
        return null;
      }
  finally {
        U.closeQuiet(sock);
      }
    }
  }
,1,"client");
  fut1.get();
  fut2.get();
}
