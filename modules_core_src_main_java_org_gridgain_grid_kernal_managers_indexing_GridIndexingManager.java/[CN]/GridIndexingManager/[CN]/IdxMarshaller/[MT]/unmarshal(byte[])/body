{
  long ldrId=bytes[0] == -1 ? 0 : U.bytesToLong(bytes,0);
  final ClassLoader ldr=ldrId == 0 ? null : ldrById.get(ldrId);
  final int off=ldrId == 0 ? 1 : 8;
  final int len=bytes.length - off;
  return new GridIndexingEntity<T>(){
    /** 
 */
    private T val;
    /** 
 */
    private byte[] valBytes;
    @Override public T value() throws IgniteSpiException {
      if (val == null) {
        try {
          val=marsh.unmarshal(new ByteArrayInputStream(bytes,off,len),ldr);
        }
 catch (        GridException e) {
          throw new IgniteSpiException(e);
        }
      }
      return val;
    }
    @Override public byte[] bytes(){
      if (valBytes == null) {
        byte[] bs=new byte[len];
        U.arrayCopy(bytes,off,bs,0,len);
        valBytes=bs;
      }
      return valBytes;
    }
    @Override public boolean hasValue(){
      return val != null;
    }
  }
;
}
