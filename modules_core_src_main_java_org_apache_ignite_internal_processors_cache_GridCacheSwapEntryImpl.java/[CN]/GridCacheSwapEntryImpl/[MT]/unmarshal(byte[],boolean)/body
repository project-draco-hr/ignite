{
  if (valOnly) {
    long off=GridUnsafe.BYTE_ARR_OFF + VERSION_OFFSET;
    boolean verEx=GridUnsafe.getByte(arr,off++) != 0;
    off+=verEx ? VERSION_EX_SIZE : VERSION_SIZE;
    int arrLen=GridUnsafe.getInt(arr,off);
    off+=4;
    byte type=GridUnsafe.getByte(arr,off++);
    byte[] valBytes=new byte[arrLen];
    GridUnsafe.copyMemory(arr,off,valBytes,GridUnsafe.BYTE_ARR_OFF,arrLen);
    return new GridCacheSwapEntryImpl(ByteBuffer.wrap(valBytes),type,null,0L,0L,null,null);
  }
  long off=GridUnsafe.BYTE_ARR_OFF;
  long ttl=GridUnsafe.getLong(arr,off);
  off+=8;
  long expireTime=GridUnsafe.getLong(arr,off);
  off+=8;
  boolean verEx=GridUnsafe.getBoolean(arr,off++);
  GridCacheVersion ver=U.readVersion(arr,off,verEx);
  off+=verEx ? VERSION_EX_SIZE : VERSION_SIZE;
  int arrLen=GridUnsafe.getInt(arr,off);
  off+=4;
  byte type=GridUnsafe.getByte(arr,off++);
  byte[] valBytes=new byte[arrLen];
  GridUnsafe.copyMemory(arr,off,valBytes,GridUnsafe.BYTE_ARR_OFF,arrLen);
  off+=arrLen;
  IgniteUuid valClsLdrId=U.readGridUuid(arr,off);
  off+=valClsLdrId == null ? 1 : (1 + GUID_SIZE);
  IgniteUuid keyClsLdrId=U.readGridUuid(arr,off);
  return new GridCacheSwapEntryImpl(ByteBuffer.wrap(valBytes),type,ver,ttl,expireTime,keyClsLdrId,valClsLdrId);
}
