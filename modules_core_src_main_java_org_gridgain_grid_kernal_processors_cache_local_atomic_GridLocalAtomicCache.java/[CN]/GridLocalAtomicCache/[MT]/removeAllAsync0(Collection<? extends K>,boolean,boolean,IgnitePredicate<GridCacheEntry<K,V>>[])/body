{
  final boolean statsEnabled=ctx.config().isStatisticsEnabled();
  final long start=statsEnabled ? System.nanoTime() : 0L;
  final boolean storeEnabled=ctx.isStoreEnabled();
  final ExpiryPolicy expiryPlc=expiryPerCall();
  IgniteFuture fut=asyncOp(new Callable<Object>(){
    @Override public Object call() throws Exception {
      return updateAllInternal(DELETE,keys,null,null,expiryPlc,retval,rawRetval,filter,storeEnabled);
    }
  }
);
  if (statsEnabled)   fut.listenAsync(new CI1<IgniteFuture<Boolean>>(){
    @Override public void apply(    IgniteFuture<Boolean> fut){
      try {
        if (!fut.isCancelled()) {
          fut.get();
          ctx.cache().metrics0().addRemoveTimeNanos(System.nanoTime() - start);
        }
      }
 catch (      IgniteCheckedException ignore) {
      }
    }
  }
);
  return fut;
}
