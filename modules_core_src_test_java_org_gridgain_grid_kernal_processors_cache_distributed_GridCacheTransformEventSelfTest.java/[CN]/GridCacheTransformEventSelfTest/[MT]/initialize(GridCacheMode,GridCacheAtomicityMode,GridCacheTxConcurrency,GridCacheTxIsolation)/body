{
  this.cacheMode=cacheMode;
  this.atomicityMode=atomicityMode;
  this.txConcurrency=txConcurrency;
  this.txIsolation=txIsolation;
  evts=new ConcurrentHashSet<>();
  startGrids(GRID_CNT);
  ignites=new Ignite[GRID_CNT];
  ids=new UUID[GRID_CNT];
  caches=new GridCache[GRID_CNT];
  for (int i=0; i < GRID_CNT; i++) {
    ignites[i]=grid(i);
    ids[i]=ignites[i].cluster().localNode().id();
    caches[i]=ignites[i].cache(CACHE_NAME);
    ignites[i].events().localListen(new IgnitePredicate<GridEvent>(){
      @Override public boolean apply(      GridEvent evt){
        GridCacheEvent evt0=(GridCacheEvent)evt;
        if (evt0.closureClassName() != null) {
          System.out.println("ADDED: [nodeId=" + evt0.node() + ", evt="+ evt0+ ']');
          evts.add(evt0);
        }
        return true;
      }
    }
,EVT_CACHE_OBJECT_READ);
  }
  int key=0;
  while (true) {
    if (cacheMode != PARTITIONED || (caches[0].entry(key).primary() && caches[1].entry(key).backup())) {
      key1=key++;
      break;
    }
 else     key++;
  }
  while (true) {
    if (cacheMode != PARTITIONED || (caches[0].entry(key).primary() && caches[1].entry(key).backup())) {
      key2=key;
      break;
    }
 else     key++;
  }
  keys=new HashSet<>();
  keys.add(key1);
  keys.add(key2);
  caches[0].put(key1,1);
  caches[0].put(key2,2);
  for (int i=0; i < GRID_CNT; i++) {
    ignites[i].events().localListen(new IgnitePredicate<GridEvent>(){
      @Override public boolean apply(      GridEvent evt){
        GridCacheEvent evt0=(GridCacheEvent)evt;
        if (evt0.closureClassName() != null)         evts.add(evt0);
        return true;
      }
    }
,EVT_CACHE_OBJECT_READ);
  }
}
