{
  demandPool=new GridReplicatedPreloadDemandPool<>(cctx,busyLock,evictLock,new P1<GridCacheEntryInfo<K,V>>(){
    @Override public boolean apply(    GridCacheEntryInfo<K,V> info){
      return preloadingPermitted(info.key(),info.version());
    }
  }
);
  supplyPool=new GridReplicatedPreloadSupplyPool<>(cctx,new PA(){
    @Override public boolean apply(){
      return syncPreloadFut.isDone();
    }
  }
,busyLock);
  cctx.io().addHandler(GridReplicatedForceKeysRequest.class,new CI2<UUID,GridReplicatedForceKeysRequest<K,V>>(){
    @Override public void apply(    UUID nodeId,    GridReplicatedForceKeysRequest<K,V> req){
      processForceKeyRequest(nodeId,req);
    }
  }
);
  cctx.io().addHandler(GridReplicatedForceKeysResponse.class,new CI2<UUID,GridReplicatedForceKeysResponse<K,V>>(){
    @Override public void apply(    UUID nodeId,    GridReplicatedForceKeysResponse<K,V> res){
      processForceKeyResponse(nodeId,res);
    }
  }
);
  cctx.events().addListener(discoLsnr,EVT_NODE_LEFT,EVT_NODE_FAILED);
}
