{
  final GridClientNode node=b.balancedNode(nodes);
  return new GridClientNode(){
    @Override public <T>T attribute(    String name){
      return node.attribute(name);
    }
    @Override public Map<String,Object> attributes(){
      return node.attributes();
    }
    @Override public Collection<InetSocketAddress> availableAddresses(    GridClientProtocol proto){
      return F.asList(new InetSocketAddress("172.22.13.13",65432),F.first(node.availableAddresses(proto)));
    }
    @Override public Map<String,GridClientCacheMode> caches(){
      return node.caches();
    }
    @Override public int replicaCount(){
      return node.replicaCount();
    }
    @Override public List<String> jettyAddresses(){
      return node.jettyAddresses();
    }
    @Override public List<String> jettyHostNames(){
      return node.jettyHostNames();
    }
    @Override public int httpPort(){
      return node.httpPort();
    }
    @Override public List<String> tcpAddresses(){
      return node.tcpAddresses();
    }
    @Override public List<String> tcpHostNames(){
      return node.tcpHostNames();
    }
    @Override public GridClientNodeMetrics metrics(){
      return node.metrics();
    }
    @Override public UUID nodeId(){
      return node.nodeId();
    }
    @Override public Object consistentId(){
      return node.consistentId();
    }
    @Override public int tcpPort(){
      return node.tcpPort();
    }
    @Override public boolean connectable(){
      return node.connectable();
    }
  }
;
}
