{
  PlatformContext ctx=PlatformUtils.platformContext(ignite);
  try (PlatformMemory mem=ctx.memory().get(ptr)){
    PlatformOutputStream out=mem.output();
    PortableRawWriterEx writer=ctx.writer(out);
    int evtType=EventType.EVT_SWAP_SPACE_CLEARED;
    String msg="msg";
    UUID uuid=new UUID(1,2);
    IgniteUuid igniteUuid=new IgniteUuid(uuid,3);
    ctx.writeEvent(writer,new CacheEvent("cacheName",node,node,"msg",evtType,1,true,2,igniteUuid,3,4,true,5,true,uuid,"cloClsName","taskName"));
    ctx.writeEvent(writer,new CacheQueryExecutedEvent(node,msg,evtType,"qryType","cacheName","clsName","clause",null,null,null,uuid,"taskName"));
    ctx.writeEvent(writer,new CacheQueryReadEvent(node,msg,evtType,"qryType","cacheName","clsName","clause",null,null,null,uuid,"taskName",1,2,3,4));
    ctx.writeEvent(writer,new CacheRebalancingEvent("cacheName",node,msg,evtType,1,node,2,3));
    ctx.writeEvent(writer,new CheckpointEvent(node,msg,evtType,"cpKey"));
    DiscoveryEvent discoveryEvent=new DiscoveryEvent(node,msg,evtType,node);
    discoveryEvent.topologySnapshot(ignite.cluster().topologyVersion(),ignite.cluster().nodes());
    ctx.writeEvent(writer,discoveryEvent);
    JobEvent jobEvent=new JobEvent(node,msg,evtType);
    jobEvent.jobId(igniteUuid);
    jobEvent.taskClassName("taskClsName");
    jobEvent.taskName("taskName");
    jobEvent.taskNode(node);
    jobEvent.taskSessionId(igniteUuid);
    jobEvent.taskSubjectId(uuid);
    ctx.writeEvent(writer,jobEvent);
    ctx.writeEvent(writer,new SwapSpaceEvent(node,msg,evtType,"space"));
    ctx.writeEvent(writer,new TaskEvent(node,msg,evtType,igniteUuid,"taskName","taskClsName",true,uuid));
    out.synchronize();
  }
   return true;
}
