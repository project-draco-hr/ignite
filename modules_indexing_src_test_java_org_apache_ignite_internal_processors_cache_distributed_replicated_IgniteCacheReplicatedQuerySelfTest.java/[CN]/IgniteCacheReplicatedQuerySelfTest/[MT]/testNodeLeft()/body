{
  Ignite g=startGrid("client");
  try {
    assertTrue(g.configuration().isClientMode());
    IgniteCache<Integer,Integer> cache=g.cache(null);
    for (int i=0; i < 1000; i++)     cache.put(i,i);
    assertEquals(0,cache.localSize());
    QueryCursor<Cache.Entry<Integer,Integer>> q=cache.query(new SqlQuery<Integer,Integer>(Integer.class,"_key >= 0 order by _key").setPageSize(10));
    assertEquals(0,(int)q.iterator().next().getKey());
    ConcurrentMap<?,?> mapNode1=queryResultMap(0);
    ConcurrentMap<?,?> mapNode2=queryResultMap(1);
    ConcurrentMap<?,?> mapNode3=queryResultMap(2);
    assertEquals(1,mapNode1.size() + mapNode2.size() + mapNode3.size());
    final UUID nodeId=g.cluster().localNode().id();
    final CountDownLatch latch=new CountDownLatch(1);
    grid(0).events().localListen(new IgnitePredicate<Event>(){
      @Override public boolean apply(      Event evt){
        if (((DiscoveryEvent)evt).eventNode().id().equals(nodeId))         latch.countDown();
        return true;
      }
    }
,EVT_NODE_LEFT);
    stopGrid("client");
    latch.await();
    assertEquals(0,mapNode1.size());
    assertEquals(0,mapNode2.size());
    assertEquals(0,mapNode3.size());
  }
  finally {
    stopGrid("client");
  }
}
