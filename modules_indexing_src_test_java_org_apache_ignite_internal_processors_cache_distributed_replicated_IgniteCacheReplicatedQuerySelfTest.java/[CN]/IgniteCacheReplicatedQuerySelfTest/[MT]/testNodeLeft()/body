{
  fail("https://issues.apache.org/jira/browse/IGNITE-613");
  try {
    Ignite g=startGrid();
    IgniteCache<Integer,Integer> cache=g.cache(null);
    for (int i=0; i < 1000; i++)     cache.put(i,i);
    QueryCursor<Cache.Entry<Integer,Integer>> q=cache.query(new SqlQuery<Integer,Integer>(Integer.class,"_key >= 0 order by _key"));
    assertEquals(0,(int)q.iterator().next().getKey());
    final ConcurrentMap<UUID,Map<Long,GridFutureAdapter<GridCloseableIterator<IgniteBiTuple<Integer,Integer>>>>> map=U.field(((IgniteKernal)grid(0)).internalCache().context().queries(),"qryIters");
    assertTrue(GridTestUtils.waitForCondition(new PA(){
      @Override public boolean apply(){
        return map.size() == 1;
      }
    }
,getTestTimeout()));
    Map<Long,GridFutureAdapter<GridCloseableIterator<IgniteBiTuple<Integer,Integer>>>> futs=map.get(g.cluster().localNode().id());
    assertEquals(1,futs.size());
    GridCloseableIterator<IgniteBiTuple<Integer,Integer>> iter=(GridCloseableIterator<IgniteBiTuple<Integer,Integer>>)((IgniteInternalFuture)F.first(futs.values()).get()).get();
    ResultSet rs=U.field(iter,"data");
    assertFalse(rs.isClosed());
    final UUID nodeId=g.cluster().localNode().id();
    final CountDownLatch latch=new CountDownLatch(1);
    grid(0).events().localListen(new IgnitePredicate<Event>(){
      @Override public boolean apply(      Event evt){
        if (((DiscoveryEvent)evt).eventNode().id().equals(nodeId))         latch.countDown();
        return true;
      }
    }
,EVT_NODE_LEFT);
    stopGrid();
    latch.await();
    assertEquals(0,map.size());
    assertTrue(rs.isClosed());
  }
  finally {
    stopGrid();
  }
}
