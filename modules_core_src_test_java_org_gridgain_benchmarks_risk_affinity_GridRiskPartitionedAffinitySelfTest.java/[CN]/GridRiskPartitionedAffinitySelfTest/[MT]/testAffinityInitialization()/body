{
  for (int i=0; i < 5; i++) {
    final GridRiskPartitionedAffinityFunction aff=new GridRiskPartitionedAffinityFunction();
switch (i % 5) {
case 0:
{
        aff.setFactor1(FACTOR1);
        break;
      }
case 1:
{
      aff.setFactor1(FACTOR2);
      break;
    }
case 2:
{
    aff.setFactor2(FACTOR1);
    break;
  }
case 3:
{
  aff.setFactor2(FACTOR2);
  break;
}
default :
{
break;
}
}
GridTestUtils.assertThrows(log,new Callable<Object>(){
@Override public Object call() throws Exception {
aff.getPartitions();
return null;
}
}
,IllegalStateException.class,"Affinity was not properly initialized.");
GridTestUtils.assertThrows(log,new Callable<Object>(){
@Override public Object call() throws Exception {
aff.getPartitions();
return null;
}
}
,IllegalStateException.class,"Affinity was not properly initialized.");
}
}
