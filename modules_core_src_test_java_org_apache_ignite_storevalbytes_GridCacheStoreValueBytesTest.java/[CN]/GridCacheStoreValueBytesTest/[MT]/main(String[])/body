{
  boolean randomGet=DFLT_RANDOM_GET;
  int duration=DFLT_DURATION_MIN;
  boolean put=false;
  int warmup=DFLT_WARMUP_TIME_SEC;
  int concurrentGetNum=DFLT_CONCURRENT_GET_NUM;
  int threadsNum=DFLT_THREADS_NUM;
  int getKeyNum=DFLT_GET_KEY_NUM;
  int minSize=DFL_MIN_VAL_SIZE;
  int maxSize=DFL_MAX_VAL_SIZE;
  for (int i=0; i < args.length; i++) {
    String arg=args[i];
switch (arg) {
case "-c":
      concurrentGetNum=Integer.parseInt(args[++i]);
    break;
case "-t":
  threadsNum=Integer.parseInt(args[++i]);
break;
case "-k":
getKeyNum=Integer.parseInt(args[++i]);
break;
case "-randomGet":
randomGet=Boolean.parseBoolean(args[++i]);
break;
case "-d":
duration=Integer.parseInt(args[++i]);
break;
case "-w":
warmup=Integer.parseInt(args[++i]);
break;
case "-put":
put=Boolean.parseBoolean(args[++i]);
break;
case "-min":
minSize=Integer.parseInt(args[++i]);
break;
case "-max":
maxSize=Integer.parseInt(args[++i]);
break;
}
}
X.println("Duration: " + duration + " minutes");
X.println("Warmup time: " + warmup + " seconds");
X.println("Threads number: " + threadsNum);
X.println("Concurrent get number: " + concurrentGetNum);
X.println("Get keys number: " + getKeyNum);
X.println("Random get: " + randomGet);
Ignite ignite=Ignition.start(GridCacheStoreValueBytesNode.parseConfiguration(args,true));
if (put) {
X.println("Putting data in cache...");
X.println("Min value size: " + minSize);
X.println("Max value size: " + maxSize);
Random random=new Random(1);
int sizeRange=maxSize - minSize;
IgniteCache<Integer,String> cache=ignite.jcache(null);
if (sizeRange == 0) {
for (Integer key : KEYS) cache.put(key,createValue(minSize));
}
 else {
for (Integer key : KEYS) cache.put(key,createValue(minSize + random.nextInt(sizeRange)));
}
}
try {
runTest(ignite,concurrentGetNum,threadsNum,getKeyNum,duration * 60000,warmup * 1000,randomGet);
}
  finally {
G.stopAll(true);
}
}
