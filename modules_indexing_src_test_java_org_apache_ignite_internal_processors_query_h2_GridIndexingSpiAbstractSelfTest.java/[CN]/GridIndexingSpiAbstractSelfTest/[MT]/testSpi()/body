{
  GridH2Indexing spi=getIndexing();
  assertEquals(-1,spi.size(typeAA.space(),typeAA,null));
  assertEquals(-1,spi.size(typeAB.space(),typeAB,null));
  assertEquals(-1,spi.size(typeBA.space(),typeBA,null));
  spi.registerType(typeAA.space(),typeAA);
  assertEquals(0,spi.size(typeAA.space(),typeAA,null));
  assertEquals(-1,spi.size(typeAB.space(),typeAB,null));
  assertEquals(-1,spi.size(typeBA.space(),typeBA,null));
  spi.registerType(typeAB.space(),typeAB);
  assertEquals(0,spi.size(typeAA.space(),typeAA,null));
  assertEquals(0,spi.size(typeAB.space(),typeAB,null));
  assertEquals(-1,spi.size(typeBA.space(),typeBA,null));
  spi.registerType(typeBA.space(),typeBA);
  assertEquals(0,spi.size(typeAA.space(),typeAA,null));
  assertEquals(0,spi.size(typeAB.space(),typeAB,null));
  assertEquals(0,spi.size(typeBA.space(),typeBA,null));
  assertFalse(spi.query(typeAA.space(),"select * from A.A",Collections.emptySet(),typeAA,null).hasNext());
  assertFalse(spi.query(typeAB.space(),"select * from A.B",Collections.emptySet(),typeAB,null).hasNext());
  assertFalse(spi.query(typeBA.space(),"select * from B.A",Collections.emptySet(),typeBA,null).hasNext());
  spi.remove("A",1);
  spi.remove("B",1);
  spi.store(typeAA.space(),typeAA,1,aa(1,"Vasya",10),"v1".getBytes(),0);
  assertEquals(1,spi.size(typeAA.space(),typeAA,null));
  assertEquals(0,spi.size(typeAB.space(),typeAB,null));
  assertEquals(0,spi.size(typeBA.space(),typeBA,null));
  spi.store(typeAB.space(),typeAB,1,ab(1,"Vasya",20,"Some text about Vasya goes here."),"v2".getBytes(),0);
  assertEquals(0,spi.size(typeAA.space(),typeAA,null));
  assertEquals(1,spi.size(typeAB.space(),typeAB,null));
  assertEquals(0,spi.size(typeBA.space(),typeBA,null));
  spi.store(typeBA.space(),typeBA,1,ba(2,"Petya",25,true),"v3".getBytes(),0);
  assertEquals(0,spi.size(typeAA.space(),typeAA,null));
  assertEquals(1,spi.size(typeAB.space(),typeAB,null));
  assertEquals(1,spi.size(typeBA.space(),typeBA,null));
  spi.store(typeBA.space(),typeBA,1,ba(2,"Kolya",25,true),"v4".getBytes(),0);
  assertEquals(0,spi.size(typeAA.space(),typeAA,null));
  assertEquals(1,spi.size(typeAB.space(),typeAB,null));
  assertEquals(1,spi.size(typeBA.space(),typeBA,null));
  spi.store(typeAA.space(),typeAA,2,aa(2,"Valera",19),"v5".getBytes(),0);
  assertEquals(1,spi.size(typeAA.space(),typeAA,null));
  assertEquals(1,spi.size(typeAB.space(),typeAB,null));
  assertEquals(1,spi.size(typeBA.space(),typeBA,null));
  spi.store(typeAA.space(),typeAA,3,aa(3,"Borya",18),"v6".getBytes(),0);
  assertEquals(2,spi.size(typeAA.space(),typeAA,null));
  assertEquals(1,spi.size(typeAB.space(),typeAB,null));
  assertEquals(1,spi.size(typeBA.space(),typeBA,null));
  spi.store(typeAB.space(),typeAB,4,ab(4,"Vitalya",20,"Very Good guy"),"v7".getBytes(),0);
  assertEquals(2,spi.size(typeAA.space(),typeAA,null));
  assertEquals(2,spi.size(typeAB.space(),typeAB,null));
  assertEquals(1,spi.size(typeBA.space(),typeBA,null));
  Iterator<IgniteBiTuple<Integer,Map<String,Object>>> res=spi.query(typeAA.space(),"select * from a order by age",Collections.emptySet(),typeAA,null);
  assertTrue(res.hasNext());
  assertEquals(aa(3,"Borya",18),value(res.next()));
  assertTrue(res.hasNext());
  assertEquals(aa(2,"Valera",19),value(res.next()));
  assertFalse(res.hasNext());
  res=spi.query(typeAB.space(),"select * from b order by name",Collections.emptySet(),typeAB,null);
  assertTrue(res.hasNext());
  assertEquals(ab(1,"Vasya",20,"Some text about Vasya goes here."),value(res.next()));
  assertTrue(res.hasNext());
  assertEquals(ab(4,"Vitalya",20,"Very Good guy"),value(res.next()));
  assertFalse(res.hasNext());
  res=spi.query(typeBA.space(),"select * from a",Collections.emptySet(),typeBA,null);
  assertTrue(res.hasNext());
  assertEquals(ba(2,"Kolya",25,true),value(res.next()));
  assertFalse(res.hasNext());
  Iterator<IgniteBiTuple<Integer,Map<String,Object>>> txtRes=spi.queryText(typeAB.space(),"good",typeAB,null);
  assertTrue(txtRes.hasNext());
  assertEquals(ab(4,"Vitalya",20,"Very Good guy"),value(txtRes.next()));
  assertFalse(txtRes.hasNext());
  GridQueryFieldsResult fieldsRes=spi.queryFields(null,"select a.a.name n1, a.a.age a1, b.a.name n2, " + "b.a.age a2 from a.a, b.a where a.a.id = b.a.id ",Collections.emptySet(),null);
  String[] aliases={"N1","A1","N2","A2"};
  Object[] vals={"Valera",19,"Kolya",25};
  assertTrue(fieldsRes.iterator().hasNext());
  List<?> fields=fieldsRes.iterator().next();
  assertEquals(4,fields.size());
  int i=0;
  for (  Object f : fields) {
    assertEquals(aliases[i],fieldsRes.metaData().get(i).fieldName());
    assertEquals(vals[i++],f);
  }
  assertFalse(fieldsRes.iterator().hasNext());
  assertFalse(spi.queryFields(null,"select * from not_existing_table",Collections.emptySet(),null).iterator().hasNext());
  spi.remove(typeAA.space(),2);
  assertEquals(1,spi.size(typeAA.space(),typeAA,null));
  assertEquals(2,spi.size(typeAB.space(),typeAB,null));
  assertEquals(1,spi.size(typeBA.space(),typeBA,null));
  spi.remove(typeBA.space(),1);
  assertEquals(1,spi.size(typeAA.space(),typeAA,null));
  assertEquals(2,spi.size(typeAB.space(),typeAB,null));
  assertEquals(0,spi.size(typeBA.space(),typeBA,null));
  boolean h2IdxOffheap=spi.configuration().getMaxOffHeapMemory() > 0;
  if (!h2IdxOffheap) {
    spi.rebuildIndexes(typeAB.space(),typeAB);
    assertEquals(1,spi.size(typeAA.space(),typeAA,null));
    assertEquals(2,spi.size(typeAB.space(),typeAB,null));
    assertEquals(0,spi.size(typeBA.space(),typeBA,null));
    spi.rebuildIndexes("not_existing_space",typeAA);
    spi.rebuildIndexes(typeAA.space(),new TypeDesc("C","C",fieldsAA,null));
  }
  spi.unregisterType(typeAA.space(),typeAA);
  assertEquals(-1,spi.size(typeAA.space(),typeAA,null));
  assertEquals(2,spi.size(typeAB.space(),typeAB,null));
  assertEquals(0,spi.size(typeBA.space(),typeBA,null));
  spi.unregisterType(typeAB.space(),typeAB);
  assertEquals(-1,spi.size(typeAA.space(),typeAA,null));
  assertEquals(-1,spi.size(typeAB.space(),typeAB,null));
  assertEquals(0,spi.size(typeBA.space(),typeBA,null));
  spi.unregisterType(typeBA.space(),typeBA);
  spi.store(typeAA.space(),typeAA,10,aa(1,"Fail",100500),"v220".getBytes(),0);
  assertEquals(-1,spi.size(typeAA.space(),typeAA,null));
}
