{
  commState.setBuffer(buf);
  if (!super.readFrom(buf))   return false;
switch (commState.idx) {
case 8:
    GridCacheVersion commitVer0=commState.getCacheVersion("commitVer");
  if (commitVer0 == CACHE_VER_NOT_READ)   return false;
commitVer=commitVer0;
commState.idx++;
case 9:
if (buf.remaining() < 1) return false;
byte concurrency0=commState.getByte("concurrency");
concurrency=GridCacheTxConcurrency.fromOrdinal(concurrency0);
commState.idx++;
case 10:
byte[] dhtVersBytes0=commState.getByteArray("dhtVersBytes");
if (dhtVersBytes0 == BYTE_ARR_NOT_READ) return false;
dhtVersBytes=dhtVersBytes0;
commState.idx++;
case 11:
byte[] grpLockKeyBytes0=commState.getByteArray("grpLockKeyBytes");
if (grpLockKeyBytes0 == BYTE_ARR_NOT_READ) return false;
grpLockKeyBytes=grpLockKeyBytes0;
commState.idx++;
case 12:
if (buf.remaining() < 1) return false;
invalidate=commState.getBoolean("invalidate");
commState.idx++;
case 13:
if (buf.remaining() < 1) return false;
byte isolation0=commState.getByte("isolation");
isolation=GridCacheTxIsolation.fromOrdinal(isolation0);
commState.idx++;
case 14:
if (buf.remaining() < 1) return false;
partLock=commState.getBoolean("partLock");
commState.idx++;
case 15:
if (commState.readSize == -1) {
if (buf.remaining() < 4) return false;
commState.readSize=commState.getInt(null);
}
if (commState.readSize >= 0) {
if (readsBytes == null) readsBytes=new ArrayList<>(commState.readSize);
for (int i=commState.readItems; i < commState.readSize; i++) {
byte[] _val=commState.getByteArray(null);
if (_val == BYTE_ARR_NOT_READ) return false;
readsBytes.add((byte[])_val);
commState.readItems++;
}
}
commState.readSize=-1;
commState.readItems=0;
commState.idx++;
case 16:
if (buf.remaining() < 8) return false;
threadId=commState.getLong("threadId");
commState.idx++;
case 17:
if (buf.remaining() < 8) return false;
timeout=commState.getLong("timeout");
commState.idx++;
case 18:
byte[] txNodesBytes0=commState.getByteArray("txNodesBytes");
if (txNodesBytes0 == BYTE_ARR_NOT_READ) return false;
txNodesBytes=txNodesBytes0;
commState.idx++;
case 19:
if (buf.remaining() < 4) return false;
txSize=commState.getInt("txSize");
commState.idx++;
case 20:
if (commState.readSize == -1) {
if (buf.remaining() < 4) return false;
commState.readSize=commState.getInt(null);
}
if (commState.readSize >= 0) {
if (writesBytes == null) writesBytes=new ArrayList<>(commState.readSize);
for (int i=commState.readItems; i < commState.readSize; i++) {
byte[] _val=commState.getByteArray(null);
if (_val == BYTE_ARR_NOT_READ) return false;
writesBytes.add((byte[])_val);
commState.readItems++;
}
}
commState.readSize=-1;
commState.readItems=0;
commState.idx++;
}
return true;
}
