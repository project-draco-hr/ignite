{
  Args args=new Args();
  for (int i=0; i < processArgs.length; i++) {
    String arg=processArgs[i];
switch (arg) {
case "-cpid":
{
        if (i == processArgs.length - 1)         throw new Exception("Missing process ID for '-cpid' parameter");
        String procIdStr=processArgs[++i];
        args.childProcId=UUID.fromString(procIdStr);
        break;
      }
case "-ppid":
{
      if (i == processArgs.length - 1)       throw new Exception("Missing process ID for '-ppid' parameter");
      String procIdStr=processArgs[++i];
      args.parentProcId=UUID.fromString(procIdStr);
      break;
    }
case "-nid":
{
    if (i == processArgs.length - 1)     throw new Exception("Missing node ID for '-nid' parameter");
    String nodeIdStr=processArgs[++i];
    args.nodeId=UUID.fromString(nodeIdStr);
    break;
  }
case "-addr":
{
  if (i == processArgs.length - 1)   throw new Exception("Missing node address for '-addr' parameter");
  args.addr=processArgs[++i];
  break;
}
case "-tport":
{
if (i == processArgs.length - 1) throw new Exception("Missing tcp port for '-tport' parameter");
args.tcpPort=Integer.parseInt(processArgs[++i]);
break;
}
case "-sport":
{
if (i == processArgs.length - 1) throw new Exception("Missing shared memory port for '-sport' parameter");
args.shmemPort=Integer.parseInt(processArgs[++i]);
break;
}
case "-out":
{
if (i == processArgs.length - 1) throw new Exception("Missing output folder name for '-out' parameter");
args.out=processArgs[++i];
break;
}
case "-wd":
{
if (i == processArgs.length - 1) throw new Exception("Missing work folder name for '-wd' parameter");
args.workDir=processArgs[++i];
break;
}
}
}
return args;
}
