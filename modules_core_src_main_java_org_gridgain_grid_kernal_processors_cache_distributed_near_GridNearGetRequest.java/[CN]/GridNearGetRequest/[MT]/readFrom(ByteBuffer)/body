{
  commState.setBuffer(buf);
  if (!super.readFrom(buf))   return false;
switch (commState.idx) {
case 2:
    if (commState.readSize == -1) {
      if (buf.remaining() < 4)       return false;
      commState.readSize=commState.getInt();
    }
  if (commState.readSize >= 0) {
    if (filterBytes == null)     filterBytes=new byte[commState.readSize][];
    for (int i=commState.readItems; i < commState.readSize; i++) {
      byte[] _val=commState.getByteArray();
      if (_val == BYTE_ARR_NOT_READ)       return false;
      filterBytes[i]=(byte[])_val;
      commState.readItems++;
    }
  }
commState.readSize=-1;
commState.readItems=0;
commState.idx++;
case 3:
GridUuid futId0=commState.getGridUuid();
if (futId0 == GRID_UUID_NOT_READ) return false;
futId=futId0;
commState.idx++;
case 4:
if (commState.readSize == -1) {
if (buf.remaining() < 4) return false;
commState.readSize=commState.getInt();
}
if (commState.readSize >= 0) {
if (keyBytes == null) keyBytes=new LinkedHashMap<>(commState.readSize);
for (int i=commState.readItems; i < commState.readSize; i++) {
if (!commState.keyDone) {
byte[] _val=commState.getByteArray();
if (_val == BYTE_ARR_NOT_READ) return false;
commState.cur=_val;
commState.keyDone=true;
}
if (buf.remaining() < 1) return false;
boolean _val=commState.getBoolean();
keyBytes.put((byte[])commState.cur,_val);
commState.keyDone=false;
commState.readItems++;
}
}
commState.readSize=-1;
commState.readItems=0;
commState.cur=null;
commState.idx++;
case 5:
GridUuid miniId0=commState.getGridUuid();
if (miniId0 == GRID_UUID_NOT_READ) return false;
miniId=miniId0;
commState.idx++;
case 6:
if (buf.remaining() < 1) return false;
reload=commState.getBoolean();
commState.idx++;
case 7:
if (buf.remaining() < 8) return false;
topVer=commState.getLong();
commState.idx++;
case 8:
GridCacheVersion ver0=commState.getCacheVersion();
if (ver0 == CACHE_VER_NOT_READ) return false;
ver=ver0;
commState.idx++;
}
return true;
}
