{
  IgniteKernal g0=(IgniteKernal)startGrid(0);
  AffinityTopologyVersion zero=new AffinityTopologyVersion(0);
  AffinityTopologyVersion one=new AffinityTopologyVersion(1);
  AffinityTopologyVersion two=new AffinityTopologyVersion(2);
  AffinityTopologyVersion three=new AffinityTopologyVersion(3);
  AffinityTopologyVersion four=new AffinityTopologyVersion(4);
  AffinityTopologyVersion five=new AffinityTopologyVersion(5);
  assertFalse(g0.context().discovery().hasNearCache(CACHE_NAME,zero));
  assertFalse(g0.context().discovery().hasNearCache(null,zero));
  assertFalse(g0.context().discovery().hasNearCache(CACHE_NAME,one));
  assertFalse(g0.context().discovery().hasNearCache(null,one));
  IgniteKernal g1=(IgniteKernal)startGrid(1);
  assertFalse(g0.context().discovery().hasNearCache(CACHE_NAME,one));
  assertTrue(g0.context().discovery().hasNearCache(CACHE_NAME,two));
  assertFalse(g0.context().discovery().hasNearCache(null,one));
  assertTrue(g0.context().discovery().hasNearCache(null,two));
  assertTrue(g1.context().discovery().hasNearCache(CACHE_NAME,two));
  assertTrue(g1.context().discovery().hasNearCache(null,two));
  IgniteKernal g2=(IgniteKernal)startGrid(2);
  assertFalse(g0.context().discovery().hasNearCache(CACHE_NAME,one));
  assertTrue(g0.context().discovery().hasNearCache(CACHE_NAME,two));
  assertTrue(g0.context().discovery().hasNearCache(CACHE_NAME,three));
  assertFalse(g0.context().discovery().hasNearCache(null,one));
  assertTrue(g0.context().discovery().hasNearCache(null,two));
  assertTrue(g0.context().discovery().hasNearCache(null,three));
  assertTrue(g1.context().discovery().hasNearCache(CACHE_NAME,two));
  assertTrue(g1.context().discovery().hasNearCache(CACHE_NAME,three));
  assertTrue(g1.context().discovery().hasNearCache(null,two));
  assertTrue(g1.context().discovery().hasNearCache(null,three));
  assertTrue(g2.context().discovery().hasNearCache(CACHE_NAME,three));
  assertTrue(g2.context().discovery().hasNearCache(null,three));
  stopGrid(1);
  for (; ; ) {
    if (F.forAll(Ignition.allGrids(),new IgnitePredicate<Ignite>(){
      @Override public boolean apply(      Ignite ignite){
        return ignite.cluster().topologyVersion() == 4;
      }
    }
))     break;
    Thread.sleep(1000);
  }
  assertFalse(g0.context().discovery().hasNearCache(CACHE_NAME,one));
  assertTrue(g0.context().discovery().hasNearCache(CACHE_NAME,two));
  assertTrue(g0.context().discovery().hasNearCache(CACHE_NAME,three));
  assertTrue(g0.context().discovery().hasNearCache(CACHE_NAME,four));
  assertFalse(g0.context().discovery().hasNearCache(null,one));
  assertTrue(g0.context().discovery().hasNearCache(null,two));
  assertTrue(g0.context().discovery().hasNearCache(null,three));
  assertTrue(g0.context().discovery().hasNearCache(null,four));
  assertTrue(g2.context().discovery().hasNearCache(CACHE_NAME,three));
  assertTrue(g2.context().discovery().hasNearCache(CACHE_NAME,four));
  assertTrue(g2.context().discovery().hasNearCache(null,three));
  assertTrue(g2.context().discovery().hasNearCache(null,four));
  stopGrid(2);
  for (; ; ) {
    if (F.forAll(Ignition.allGrids(),new IgnitePredicate<Ignite>(){
      @Override public boolean apply(      Ignite ignite){
        return ignite.cluster().topologyVersion() == 5;
      }
    }
))     break;
    Thread.sleep(1000);
  }
  assertFalse(g0.context().discovery().hasNearCache(CACHE_NAME,one));
  assertTrue(g0.context().discovery().hasNearCache(CACHE_NAME,two));
  assertTrue(g0.context().discovery().hasNearCache(CACHE_NAME,three));
  assertTrue(g0.context().discovery().hasNearCache(CACHE_NAME,four));
  assertFalse(g0.context().discovery().hasNearCache(CACHE_NAME,five));
  assertFalse(g0.context().discovery().hasNearCache(null,one));
  assertTrue(g0.context().discovery().hasNearCache(null,two));
  assertTrue(g0.context().discovery().hasNearCache(null,three));
  assertTrue(g0.context().discovery().hasNearCache(null,four));
  assertFalse(g0.context().discovery().hasNearCache(null,five));
}
