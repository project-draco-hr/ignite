{
  super.onKernalStart();
  CacheContinuousQuery<GridHadoopJobId,GridHadoopJobMetadata> qry=jobMetaCache().queries().createContinuousQuery();
  qry.localCallback(new IgniteBiPredicate<UUID,Collection<CacheContinuousQueryEntry<GridHadoopJobId,GridHadoopJobMetadata>>>(){
    @Override public boolean apply(    UUID nodeId,    final Collection<CacheContinuousQueryEntry<GridHadoopJobId,GridHadoopJobMetadata>> evts){
      if (!busyLock.tryReadLock())       return false;
      try {
        evtProcSvc.submit(new EventHandler(){
          @Override protected void body() throws IgniteCheckedException {
            processJobMetadataUpdates(evts);
          }
        }
);
        return true;
      }
  finally {
        busyLock.readUnlock();
      }
    }
  }
);
  qry.execute();
  ctx.kernalContext().event().addLocalEventListener(new GridLocalEventListener(){
    @Override public void onEvent(    final IgniteEvent evt){
      if (!busyLock.tryReadLock())       return;
      try {
        evtProcSvc.submit(new EventHandler(){
          @Override protected void body(){
            processNodeLeft((IgniteDiscoveryEvent)evt);
          }
        }
);
      }
  finally {
        busyLock.readUnlock();
      }
    }
  }
,IgniteEventType.EVT_NODE_FAILED,IgniteEventType.EVT_NODE_LEFT);
}
