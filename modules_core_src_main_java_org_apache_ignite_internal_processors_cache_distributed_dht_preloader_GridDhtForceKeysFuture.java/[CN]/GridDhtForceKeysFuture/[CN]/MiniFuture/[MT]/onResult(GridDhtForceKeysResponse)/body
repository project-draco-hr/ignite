{
  if (res.error() != null) {
    onDone(res.error());
    return;
  }
  Collection<KeyCacheObject> missedKeys=res.missedKeys();
  boolean remapMissed=false;
  if (!F.isEmpty(missedKeys)) {
    if (curTopVer != topCntr.get() || pauseLatch.getCount() == 0)     map(missedKeys,Collections.<ClusterNode>emptyList());
 else     remapMissed=true;
  }
  if (!cctx.rebalanceEnabled()) {
    Collection<KeyCacheObject> retryKeys=F.view(keys,F0.notIn(missedKeys),F0.notIn(F.viewReadOnly(res.forcedInfos(),CU.<KeyCacheObject,V>info2Key())));
    if (!retryKeys.isEmpty())     map(retryKeys,F.concat(false,node,exc));
  }
  boolean rec=cctx.events().isRecordable(EVT_CACHE_REBALANCE_OBJECT_LOADED);
  boolean replicate=cctx.isDrEnabled();
  for (  GridCacheEntryInfo info : res.forcedInfos()) {
    int p=cctx.affinity().partition(info.key());
    GridDhtLocalPartition locPart=top.localPartition(p,AffinityTopologyVersion.NONE,false);
    if (locPart != null && locPart.state() == MOVING && locPart.reserve()) {
      GridCacheEntryEx entry=cctx.dht().entryEx(info.key());
      try {
        if (entry.initialValue(info.value(),info.version(),info.ttl(),info.expireTime(),true,topVer,replicate ? DR_PRELOAD : DR_NONE)) {
          if (rec && !entry.isInternal())           cctx.events().addEvent(entry.partition(),entry.key(),cctx.localNodeId(),(IgniteUuid)null,null,EVT_CACHE_REBALANCE_OBJECT_LOADED,info.value(),true,null,false,null,null,null,false);
        }
      }
 catch (      IgniteCheckedException e) {
        onDone(e);
        return;
      }
catch (      GridCacheEntryRemovedException ignore) {
        if (log.isDebugEnabled())         log.debug("Trying to rebalance removed entry (will ignore) [cacheName=" + cctx.namex() + ", entry="+ entry+ ']');
      }
 finally {
        locPart.release();
      }
    }
  }
  if (remapMissed && pause())   map(missedKeys,Collections.<ClusterNode>emptyList());
  onDone(true);
}
