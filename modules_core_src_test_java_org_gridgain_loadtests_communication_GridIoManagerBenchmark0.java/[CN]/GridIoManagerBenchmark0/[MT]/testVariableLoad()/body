{
  final GridKernal sndKernal=(GridKernal)grid(0);
  final GridKernal rcvKernal=(GridKernal)grid(1);
  final ClusterNode sndNode=sndKernal.localNode();
  final ClusterNode rcvNode=rcvKernal.localNode();
  final GridIoManager snd=sndKernal.context().io();
  final GridIoManager rcv=rcvKernal.context().io();
  info("Senders: " + THREADS);
  info("Messages: " + CONCUR_MSGS);
  final Semaphore sem=new Semaphore(CONCUR_MSGS);
  final LongAdder msgCntr=new LongAdder();
  final String topic="test-topic";
  final Map<IgniteUuid,CountDownLatch> latches=new ConcurrentHashMap8<>();
  rcv.addMessageListener(topic,new GridMessageListener(){
    @Override public void onMessage(    UUID nodeId,    Object msg){
      try {
        rcv.send(sndNode,topic,(GridTcpCommunicationMessageAdapter)msg,PUBLIC_POOL);
      }
 catch (      GridException e) {
        error("Failed to send message.",e);
      }
    }
  }
);
  snd.addMessageListener(topic,new GridMessageListener(){
    @Override public void onMessage(    UUID nodeId,    Object msg){
      msgCntr.increment();
      sem.release();
      CountDownLatch latch=latches.get(((GridTestMessage)msg).id());
      if (latch != null)       latch.countDown();
    }
  }
);
  final AtomicBoolean finish=new AtomicBoolean();
  final AtomicReference<CountDownLatch> latchRef=new AtomicReference<>();
  GridFuture<?> f=GridTestUtils.runMultiThreadedAsync(new Callable<Object>(){
    @Override public Object call() throws Exception {
      while (!finish.get()) {
        CountDownLatch latch=latchRef.get();
        if (latch != null)         U.await(latch);
        IgniteUuid msgId=IgniteUuid.randomUuid();
        sem.acquire();
        snd.send(rcvNode,topic,new GridTestMessage(msgId,(String)null),PUBLIC_POOL);
      }
      return null;
    }
  }
,THREADS,"send-thread");
  GridFuture<?> f1=GridTestUtils.runMultiThreadedAsync(new Callable<Object>(){
    private long ts=System.currentTimeMillis();
    @Override public Object call() throws Exception {
      try {
        while (!finish.get()) {
          info(U.nl() + ">>>" + U.nl()+ ">>> High load."+ U.nl()+ ">>>");
          U.sleep(15 * 1000);
          reportNumbers();
          info(U.nl() + ">>>" + U.nl()+ ">>> Low load."+ U.nl()+ ">>>");
          CountDownLatch latch=new CountDownLatch(1);
          try {
            latchRef.set(latch);
            U.sleep(7 * 1000);
            reportNumbers();
          }
  finally {
            latch.countDown();
          }
        }
      }
 catch (      GridException e) {
        X.println("Message send failed",e);
      }
      return null;
    }
    /** 
 */
    void reportNumbers(){
      long newTs=System.currentTimeMillis();
      long qrys=msgCntr.sumThenReset();
      long time=newTs - ts;
      X.println("Communication benchmark [qps=" + qrys * 1000 / time + ", executed=" + qrys + ", time=" + time + ']');
      ts=newTs;
    }
  }
,1,"load-dispatcher");
  GridFuture<?> f2=GridTestUtils.runMultiThreadedAsync(new Callable<Object>(){
    @Override public Object call() throws Exception {
      while (!finish.get()) {
        U.sleep(1000);
        IgniteUuid msgId=IgniteUuid.randomUuid();
        CountDownLatch latch=new CountDownLatch(1);
        latches.put(msgId,latch);
        snd.send(rcvNode,topic,new GridTestMessage(msgId,(String)null),PUBLIC_POOL);
        long start=System.currentTimeMillis();
        latch.await();
        info("Response time: " + (System.currentTimeMillis() - start));
      }
      return null;
    }
  }
,THREADS,"low-loader");
  Thread.sleep(TEST_TIMEOUT);
  finish.set(true);
  sem.release(CONCUR_MSGS * 2);
  f.get();
  f1.get();
  f2.get();
}
