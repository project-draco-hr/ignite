{
  final GridKernal sndKernal=(GridKernal)grid(0);
  final GridKernal rcvKernal=(GridKernal)grid(1);
  final GridNode sndNode=sndKernal.localNode();
  final GridNode rcvNode=rcvKernal.localNode();
  final GridIoManager snd=sndKernal.context().io();
  final GridIoManager rcv=rcvKernal.context().io();
  info("Senders: " + THREADS);
  info("Messages: " + CONCUR_MSGS);
  final Semaphore sem=new Semaphore(CONCUR_MSGS);
  final LongAdder msgCntr=new LongAdder();
  final String topic="test-topic";
  rcv.addMessageListener(topic,new GridMessageListener(){
    @Override public void onMessage(    UUID nodeId,    Object msg){
      try {
        rcv.send(sndNode,topic,(GridTcpCommunicationMessageAdapter)msg,PUBLIC_POOL);
      }
 catch (      GridException e) {
        error("Failed to send message.",e);
      }
    }
  }
);
  snd.addMessageListener(topic,new GridMessageListener(){
    @Override public void onMessage(    UUID nodeId,    Object msg){
      msgCntr.increment();
      sem.release();
    }
  }
);
  Timer t=new Timer("results-reporter");
  t.schedule(new TimerTask(){
    private long ts=System.currentTimeMillis();
    @Override public void run(){
      long newTs=System.currentTimeMillis();
      long qrys=msgCntr.sumThenReset();
      long time=newTs - ts;
      X.println("Communication benchmark [qps=" + qrys * 1000 / time + ", executed=" + qrys + ", time=" + time + ']');
      ts=newTs;
    }
  }
,10000,10000);
  final AtomicBoolean finish=new AtomicBoolean();
  GridFuture<?> f=GridTestUtils.runMultiThreadedAsync(new Callable<Object>(){
    @Override public Object call() throws Exception {
      try {
        GridUuid msgId=GridUuid.randomUuid();
        while (!finish.get()) {
          sem.acquire();
          snd.send(rcvNode,topic,new GridTestMessage(msgId,(String)null),PUBLIC_POOL);
        }
      }
 catch (      GridException e) {
        X.println("Message send failed",e);
      }
catch (      InterruptedException ignored) {
      }
      return null;
    }
  }
,THREADS,"send-thread");
  Thread.sleep(TEST_TIMEOUT);
  finish.set(true);
  sem.release(CONCUR_MSGS * 2);
  t.cancel();
  f.get();
}
