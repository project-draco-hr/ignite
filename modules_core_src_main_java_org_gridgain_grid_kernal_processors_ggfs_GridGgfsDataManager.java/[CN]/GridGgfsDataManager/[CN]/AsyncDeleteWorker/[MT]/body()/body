{
  try {
    while (!isCancelled()) {
      IgniteBiTuple<GridFutureAdapter<Object>,GridGgfsFileInfo> req=delReqs.take();
      GridFutureAdapter<Object> fut=req.get1();
      GridGgfsFileInfo fileInfo=req.get2();
      if (fileInfo == stopInfo) {
        fut.onDone();
        break;
      }
      IgniteDataLoader<GridGgfsBlockKey,byte[]> ldr=dataLoader();
      try {
        GridGgfsFileMap map=fileInfo.fileMap();
        for (long block=0, size=fileInfo.blocksCount(); block < size; block++) {
          IgniteUuid affKey=map == null ? null : map.affinityKey(block * fileInfo.blockSize(),true);
          ldr.removeData(new GridGgfsBlockKey(fileInfo.id(),affKey,fileInfo.evictExclude(),block));
          if (affKey != null)           ldr.removeData(new GridGgfsBlockKey(fileInfo.id(),null,fileInfo.evictExclude(),block));
        }
      }
 catch (      GridInterruptedException ignored) {
      }
catch (      GridException e) {
        log.error("Failed to remove file contents: " + fileInfo,e);
      }
 finally {
        try {
          IgniteUuid fileId=fileInfo.id();
          for (long block=0, size=fileInfo.blocksCount(); block < size; block++)           ldr.removeData(new GridGgfsBlockKey(fileId,fileInfo.affinityKey(),fileInfo.evictExclude(),block));
        }
 catch (        GridException e) {
          log.error("Failed to remove file contents: " + fileInfo,e);
        }
 finally {
          try {
            ldr.close(isCancelled());
          }
 catch (          GridException e) {
            log.error("Failed to stop data loader while shutting down ggfs async delete thread.",e);
          }
 finally {
            fut.onDone();
          }
        }
      }
    }
  }
  finally {
    if (log.isDebugEnabled())     log.debug("Stopping asynchronous ggfs file delete thread: " + name());
    IgniteBiTuple<GridFutureAdapter<Object>,GridGgfsFileInfo> req=delReqs.poll();
    while (req != null) {
      req.get1().onCancelled();
      req=delReqs.poll();
    }
  }
}
