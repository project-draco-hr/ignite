{
  Ignite client=grid(serverCount());
  assertTrue(client.cluster().localNode().isClient());
  final Ignite srv=clientRouter(client);
  final String setName="set-in-progress-" + colCfg.getAtomicityMode();
  final IgniteSet<String> clientSet=client.set(setName,colCfg);
  final IgniteSet<String> srvSet=srv.set(setName,null);
  assertTrue(clientSet.add("1"));
  assertFalse(srvSet.add("1"));
  BlockTcpCommunicationSpi commSpi=commSpi(srv);
  if (colCfg.getAtomicityMode() == ATOMIC)   commSpi.blockMessage(GridNearAtomicUpdateResponse.class);
 else   commSpi.blockMessage(GridNearTxPrepareResponse.class);
  final IgniteInternalFuture<Object> fut=GridTestUtils.runAsync(new Callable<Object>(){
    @Override public Object call() throws Exception {
      try {
        for (int i=0; i < 100; i++)         clientSet.add("2");
      }
 catch (      IgniteClientDisconnectedException e) {
        checkAndWait(e);
        return true;
      }
      return false;
    }
  }
);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return fut.get(200);
    }
  }
,IgniteFutureTimeoutCheckedException.class,null);
  assertNotDone(fut);
  commSpi.unblockMessage();
  reconnectClientNode(client,srv,null);
  assertTrue((Boolean)fut.get(2,TimeUnit.SECONDS));
  assertTrue(clientSet.add("3"));
  assertFalse(srvSet.add("3"));
  srvSet.close();
}
