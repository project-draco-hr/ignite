{
  GridCacheQueryTypeMetadata typeMeta=new GridCacheQueryTypeMetadata();
  typeMeta.setSchema(schema);
  typeMeta.setTableName(tbl);
  typeMeta.setType(toJavaClassName(tbl));
  typeMeta.setKeyType(typeMeta.getType() + "Key");
  Collection<GridCacheQueryTypeDescriptor> keyDescs=typeMeta.getKeyDescriptors();
  Collection<GridCacheQueryTypeDescriptor> valDescs=typeMeta.getValueDescriptors();
  Map<String,Class<?>> qryFields=typeMeta.getQueryFields();
  Map<String,Class<?>> ascFields=typeMeta.getAscendingFields();
  Map<String,Class<?>> descFields=typeMeta.getDescendingFields();
  Map<String,LinkedHashMap<String,IgniteBiTuple<Class<?>,Boolean>>> groups=typeMeta.getGroups();
  Set<String> pkFlds=new LinkedHashSet<>();
  try (ResultSet pk=dbMeta.getPrimaryKeys(catalog,schema,tbl)){
    while (pk.next())     pkFlds.add(pk.getString(4));
  }
   List<PojoField> fields=new ArrayList<>();
  try (ResultSet cols=dbMeta.getColumns(catalog,schema,tbl,null)){
    while (cols.next()) {
      String dbName=cols.getString(4);
      int dbType=cols.getInt(5);
      boolean nullable=cols.getInt(11) == DatabaseMetaData.columnNullable;
      String javaName=toJavaFieldName(dbName);
      Class<?> javaType=dataType(dbType);
      GridCacheQueryTypeDescriptor desc=new GridCacheQueryTypeDescriptor(javaName,javaType,dbName,dbType);
      boolean key=pkFlds.contains(dbName);
      if (key)       keyDescs.add(desc);
 else       valDescs.add(desc);
      qryFields.put(javaName,javaType);
      fields.add(new PojoField(key,desc,nullable));
    }
  }
   try (ResultSet idxs=dbMeta.getIndexInfo(catalog,schema,tbl,false,true)){
    while (idxs.next()) {
      String idx=toJavaFieldName(idxs.getString(6));
      String col=toJavaFieldName(idxs.getString(9));
      String askOrDesc=idxs.getString(10);
      LinkedHashMap<String,IgniteBiTuple<Class<?>,Boolean>> idxCols=groups.get(idx);
      if (idxCols == null) {
        idxCols=new LinkedHashMap<>();
        groups.put(idx,idxCols);
      }
      Class<?> dataType=qryFields.get(col);
      Boolean desc=askOrDesc != null ? "D".equals(askOrDesc) : null;
      if (desc != null) {
        if (desc)         descFields.put(col,dataType);
 else         ascFields.put(col,dataType);
      }
      idxCols.put(col,new IgniteBiTuple<Class<?>,Boolean>(dataType,desc));
    }
  }
   return new PojoDescriptor(parent,typeMeta,fields);
}
