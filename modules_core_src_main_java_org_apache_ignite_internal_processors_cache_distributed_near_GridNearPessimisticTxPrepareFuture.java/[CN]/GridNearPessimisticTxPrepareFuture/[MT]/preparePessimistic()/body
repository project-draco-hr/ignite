{
  Map<IgniteBiTuple<ClusterNode,Boolean>,GridDistributedTxMapping> mappings=new HashMap<>();
  AffinityTopologyVersion topVer=tx.topologyVersion();
  txMapping=new GridDhtTxMapping();
  for (  IgniteTxEntry txEntry : tx.allEntries()) {
    txEntry.clearEntryReadVersion();
    GridCacheContext cacheCtx=txEntry.context();
    List<ClusterNode> nodes=cacheCtx.affinity().nodes(txEntry.key(),topVer);
    ClusterNode primary=F.first(nodes);
    boolean near=cacheCtx.isNear();
    IgniteBiTuple<ClusterNode,Boolean> key=F.t(primary,near);
    GridDistributedTxMapping nodeMapping=mappings.get(key);
    if (nodeMapping == null) {
      nodeMapping=new GridDistributedTxMapping(primary);
      nodeMapping.near(cacheCtx.isNear());
      mappings.put(key,nodeMapping);
    }
    txEntry.nodeId(primary.id());
    nodeMapping.add(txEntry);
    txMapping.addMapping(nodes);
  }
  tx.transactionNodes(txMapping.transactionNodes());
  checkOnePhase();
  for (  final GridDistributedTxMapping m : mappings.values()) {
    final ClusterNode node=m.node();
    GridNearTxPrepareRequest req=new GridNearTxPrepareRequest(futId,tx.topologyVersion(),tx,m.reads(),m.writes(),m.near(),txMapping.transactionNodes(),true,tx.onePhaseCommit(),tx.needReturnValue() && tx.implicit(),tx.implicitSingle(),m.explicitLock(),tx.subjectId(),tx.taskNameHash(),false,tx.activeCachesDeploymentEnabled());
    for (    IgniteTxEntry txEntry : m.entries()) {
      if (txEntry.op() == TRANSFORM)       req.addDhtVersion(txEntry.txKey(),null);
    }
    final MiniFuture fut=new MiniFuture(m);
    req.miniId(fut.futureId());
    add(fut);
    if (node.isLocal()) {
      IgniteInternalFuture<GridNearTxPrepareResponse> prepFut=cctx.tm().txHandler().prepareTx(node.id(),tx,req);
      prepFut.listen(new CI1<IgniteInternalFuture<GridNearTxPrepareResponse>>(){
        @Override public void apply(        IgniteInternalFuture<GridNearTxPrepareResponse> prepFut){
          try {
            fut.onResult(prepFut.get());
          }
 catch (          IgniteCheckedException e) {
            fut.onError(e);
          }
        }
      }
);
    }
 else {
      try {
        cctx.io().send(node,req,tx.ioPolicy());
        if (msgLog.isDebugEnabled()) {
          msgLog.debug("Near pessimistic prepare, sent request [txId=" + tx.nearXidVersion() + ", node="+ node.id()+ ']');
        }
      }
 catch (      ClusterTopologyCheckedException e) {
        e.retryReadyFuture(cctx.nextAffinityReadyFuture(topVer));
        fut.onNodeLeft(e);
      }
catch (      IgniteCheckedException e) {
        if (msgLog.isDebugEnabled()) {
          msgLog.debug("Near pessimistic prepare, failed send request [txId=" + tx.nearXidVersion() + ", node="+ node.id()+ ", err="+ e+ ']');
        }
        fut.onError(e);
      }
    }
  }
  markInitialized();
}
