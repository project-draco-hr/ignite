{
  GridCache<Integer,Integer> cache=((IgniteKernal)ignite).cache(null);
  for (int i=0; i < 50; i++)   assertTrue(cache.putx(i,i));
  CacheQuery<Map.Entry<Integer,Integer>> q=cache.queries().createSqlQuery(Integer.class,"_key >= 0");
  q.pageSize(10);
  q.enableDedup(true);
  q.keepAll(true);
  CacheQueryFuture<Map.Entry<Integer,Integer>> f=q.execute();
  int cnt=0;
  Map.Entry<Integer,Integer> e;
  while ((e=f.next()) != null) {
    assertTrue(e.getKey() >= 0 && e.getKey() < 50);
    assertTrue(e.getValue() >= 0 && e.getValue() < 50);
    cnt++;
  }
  assertEquals(50,cnt);
  assertTrue(f.isDone());
  List<Map.Entry<Integer,Integer>> list=new ArrayList<>(f.get());
  Collections.sort(list,new Comparator<Map.Entry<Integer,Integer>>(){
    @Override public int compare(    Map.Entry<Integer,Integer> e1,    Map.Entry<Integer,Integer> e2){
      return e1.getKey().compareTo(e2.getKey());
    }
  }
);
  for (int i=0; i < 50; i++) {
    Map.Entry<Integer,Integer> e0=list.get(i);
    assertEquals(i,(int)e0.getKey());
    assertEquals(i,(int)e0.getValue());
  }
}
