{
  if (interruptAll)   return true;
  final Thread current=Thread.currentThread();
  boolean failed=false;
  int c=getState();
  while (c != 0) {
    UUID currentOwner=currentOwnerNode;
    if (currentOwner != null) {
      failed=ctx.discovery().node(currentOwner) == null;
      break;
    }
    c=getState();
  }
  if (c == 0 || failed) {
    if (compareAndSetGlobalState(0,acquires,current,fair)) {
      setExclusiveOwnerThread(current);
      while (!isHeldExclusively() && !interruptAll)       Thread.yield();
      return true;
    }
  }
 else   if (isHeldExclusively()) {
    int nextc=c + acquires;
    if (nextc < 0)     throw new Error("Maximum lock count exceeded.");
    setState(nextc);
    return true;
  }
  if (fair && !isQueued(current))   synchronizeQueue(false,current);
  return false;
}
