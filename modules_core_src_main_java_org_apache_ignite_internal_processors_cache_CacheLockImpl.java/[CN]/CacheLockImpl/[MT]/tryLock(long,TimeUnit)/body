{
  if (Thread.interrupted())   throw new InterruptedException();
  if (time <= 0)   return tryLock();
  CacheOperationContext prev=gate.enter(opCtx);
  try {
    checkTx();
    IgniteInternalFuture<Boolean> fut=delegate.lockAllAsync(keys,unit.toMillis(time));
    try {
      boolean res=fut.get();
      if (res)       incrementLockCounter();
      return res;
    }
 catch (    IgniteInterruptedCheckedException e) {
      if (!fut.cancel()) {
        if (fut.isDone()) {
          Boolean res=fut.get();
          Thread.currentThread().interrupt();
          if (res)           incrementLockCounter();
          return res;
        }
      }
      if (e.getCause() instanceof InterruptedException)       throw (InterruptedException)e.getCause();
      throw new InterruptedException();
    }
  }
 catch (  IgniteCheckedException e) {
    throw new CacheException(e.getMessage(),e);
  }
 finally {
    gate.leave(prev);
  }
}
