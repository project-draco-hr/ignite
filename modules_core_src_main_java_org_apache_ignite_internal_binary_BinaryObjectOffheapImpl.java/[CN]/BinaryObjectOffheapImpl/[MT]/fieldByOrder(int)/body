{
  Object val;
  int schemaOffset=PortablePrimitives.readInt(ptr,start + GridPortableMarshaller.SCHEMA_OR_RAW_OFF_POS);
  short flags=PortablePrimitives.readShort(ptr,start + GridPortableMarshaller.FLAGS_POS);
  int fieldIdLen=PortableUtils.isCompactFooter(flags) ? 0 : PortableUtils.FIELD_ID_LEN;
  int fieldOffsetLen=PortableUtils.fieldOffsetLength(flags);
  int fieldOffsetPos=start + schemaOffset + order * (fieldIdLen + fieldOffsetLen) + fieldIdLen;
  int fieldPos;
  if (fieldOffsetLen == PortableUtils.OFFSET_1)   fieldPos=start + ((int)PortablePrimitives.readByte(ptr,fieldOffsetPos) & 0xFF);
 else   if (fieldOffsetLen == PortableUtils.OFFSET_2)   fieldPos=start + ((int)PortablePrimitives.readShort(ptr,fieldOffsetPos) & 0xFFFF);
 else   fieldPos=start + PortablePrimitives.readInt(ptr,fieldOffsetPos);
  byte hdr=PortablePrimitives.readByte(ptr,fieldPos);
switch (hdr) {
case GridPortableMarshaller.INT:
    val=PortablePrimitives.readInt(ptr,fieldPos + 1);
  break;
case GridPortableMarshaller.LONG:
val=PortablePrimitives.readLong(ptr,fieldPos + 1);
break;
case GridPortableMarshaller.BOOLEAN:
val=PortablePrimitives.readBoolean(ptr,fieldPos + 1);
break;
case GridPortableMarshaller.SHORT:
val=PortablePrimitives.readShort(ptr,fieldPos + 1);
break;
case GridPortableMarshaller.BYTE:
val=PortablePrimitives.readByte(ptr,fieldPos + 1);
break;
case GridPortableMarshaller.CHAR:
val=PortablePrimitives.readChar(ptr,fieldPos + 1);
break;
case GridPortableMarshaller.FLOAT:
val=PortablePrimitives.readFloat(ptr,fieldPos + 1);
break;
case GridPortableMarshaller.DOUBLE:
val=PortablePrimitives.readDouble(ptr,fieldPos + 1);
break;
case GridPortableMarshaller.STRING:
{
int dataLen=PortablePrimitives.readInt(ptr,fieldPos + 1);
byte[] data=PortablePrimitives.readByteArray(ptr,fieldPos + 5,dataLen);
val=new String(data,UTF_8);
break;
}
case GridPortableMarshaller.DATE:
{
long time=PortablePrimitives.readLong(ptr,fieldPos + 1);
val=new Date(time);
break;
}
case GridPortableMarshaller.TIMESTAMP:
{
long time=PortablePrimitives.readLong(ptr,fieldPos + 1);
int nanos=PortablePrimitives.readInt(ptr,fieldPos + 1 + 8);
Timestamp ts=new Timestamp(time);
ts.setNanos(ts.getNanos() + nanos);
val=ts;
break;
}
case GridPortableMarshaller.UUID:
{
long most=PortablePrimitives.readLong(ptr,fieldPos + 1);
long least=PortablePrimitives.readLong(ptr,fieldPos + 1 + 8);
val=new UUID(most,least);
break;
}
case GridPortableMarshaller.DECIMAL:
{
int scale=PortablePrimitives.readInt(ptr,fieldPos + 1);
int dataLen=PortablePrimitives.readInt(ptr,fieldPos + 5);
byte[] data=PortablePrimitives.readByteArray(ptr,fieldPos + 9,dataLen);
BigInteger intVal=new BigInteger(data);
if (scale < 0) {
scale&=0x7FFFFFFF;
intVal=intVal.negate();
}
val=new BigDecimal(intVal,scale);
break;
}
case GridPortableMarshaller.NULL:
val=null;
break;
default :
PortableOffheapInputStream stream=new PortableOffheapInputStream(ptr,size,false);
stream.position(fieldPos);
val=PortableUtils.unmarshal(stream,ctx,null);
break;
}
return (F)val;
}
