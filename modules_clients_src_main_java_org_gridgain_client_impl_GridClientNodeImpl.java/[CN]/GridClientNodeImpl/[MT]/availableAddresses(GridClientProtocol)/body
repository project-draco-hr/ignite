{
  Collection<String> addrs;
  Collection<String> hostNames;
  AtomicReference<Collection<InetSocketAddress>> addrsCache;
  final int port;
switch (proto) {
case TCP:
    addrsCache=tcpSockAddrs;
  addrs=tcpAddrs;
hostNames=tcpHostNames;
port=tcpPort;
break;
case HTTP:
addrsCache=jettySockAddrs;
addrs=jettyAddrs;
hostNames=jettyHostNames;
port=httpPort;
break;
default :
throw new AssertionError("Unknown protocol: " + proto);
}
Collection<InetSocketAddress> addrs0=addrsCache.get();
if (addrs0 != null) return addrs0;
addrs0=U.toSocketAddresses(addrs,hostNames,port);
boolean onDifferentHost=!attributes().isEmpty() && !F.containsAny(U.allLocalMACs(),attribute(ATTR_MACS).toString().split(", "));
if (onDifferentHost) {
Collection<InetSocketAddress> reachableEndpoints=new ArrayList<>(addrs0.size());
for (InetSocketAddress endpoint : addrs0) if (!endpoint.getAddress().isLoopbackAddress()) reachableEndpoints.add(endpoint);
addrs0=U.sealList(reachableEndpoints);
}
if (!addrsCache.compareAndSet(null,addrs0)) return addrsCache.get();
return addrs0;
}
