{
  final Ignite ignite1=ignite(1);
  assertTrue(ignite1.configuration().isClientMode());
  ignite1.createNearCache(null,new NearCacheConfiguration<>());
  final AtomicInteger idx=new AtomicInteger();
  final Integer key=1;
  IgniteCache<Integer,Integer> cache0=ignite(0).cache(null);
  IgniteCache<Integer,Integer> cache1=ignite1.cache(null);
  for (int i=0; i < 5; i++) {
    log.info("Iteration: " + i);
    GridTestUtils.runMultiThreaded(new Callable<Object>(){
      @Override public Object call() throws Exception {
        IgniteCache<Integer,Integer> cache=ignite1.cache(null);
        IgniteTransactions txs=ignite1.transactions();
        int val=idx.getAndIncrement();
        for (int i=0; i < 100; i++) {
          try (Transaction tx=txs.txStart(optimistic ? OPTIMISTIC : PESSIMISTIC,REPEATABLE_READ)){
            cache.get(key);
            cache.put(key,val);
            tx.commit();
          }
         }
        return null;
      }
    }
,5,"put-thread");
    assertEquals(cache0.localPeek(key),cache1.localPeek(key));
  }
}
