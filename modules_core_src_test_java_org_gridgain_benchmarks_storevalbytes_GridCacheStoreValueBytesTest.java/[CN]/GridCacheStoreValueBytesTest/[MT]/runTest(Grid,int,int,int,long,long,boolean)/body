{
  ExecutorService exec=Executors.newFixedThreadPool(threadsNum);
  try {
    final AtomicBoolean finish=new AtomicBoolean();
    final AtomicLong cntr=new AtomicLong();
    X.println("Warming up...");
    Collection<Future<?>> futs=startThreads(exec,grid,concurrentGetNum,threadsNum,getKeyNum,finish,cntr,randomGet);
    U.sleep(warmup);
    finish.set(true);
    boolean failed=false;
    for (    Future<?> fut : futs) {
      try {
        fut.get();
      }
 catch (      ExecutionException e) {
        X.error("Error during warmup: " + e);
        e.getCause().printStackTrace();
        failed=true;
      }
    }
    if (failed)     return;
    X.println("Running test...");
    futs=startThreads(exec,grid,concurrentGetNum,threadsNum,getKeyNum,finish,cntr,randomGet);
    long end=System.currentTimeMillis() + duration;
    GridCumulativeAverage avgGetPerSec=new GridCumulativeAverage();
    while (System.currentTimeMillis() < end) {
      long c1=cntr.get();
      U.sleep(UPDATE_INTERVAL_SEC * 1000);
      long c2=cntr.get();
      long getPerSec=(c2 - c1) / UPDATE_INTERVAL_SEC;
      X.println(">>> Gets/s: " + getPerSec);
      avgGetPerSec.update(getPerSec);
    }
    finish.set(true);
    for (    Future<?> fut : futs) {
      try {
        fut.get();
      }
 catch (      ExecutionException e) {
        X.error("Error during execution: " + e);
        e.getCause().printStackTrace();
      }
    }
    X.println(">>> Average gets/s: " + avgGetPerSec);
  }
  finally {
    exec.shutdown();
  }
}
