{
  IgniteCache<Integer,Integer> cache=jcache();
  IgniteCache<Integer,Integer> asyncCache=cache.enableAsync();
  assertTrue(asyncCache.isAsync());
  map=new ConcurrentHashMap8<>();
  if (async) {
    asyncCache.loadCache(null,1,2,3);
    asyncCache.future().get();
  }
 else   cache.loadCache(null,1,2,3);
  assertEquals(3,map.size());
  Object[] expArgs={1,2,3};
  for (int i=0; i < gridCount(); i++) {
    Object[] args=map.get(getTestGridName(i));
    Assert.assertArrayEquals(expArgs,args);
  }
  assertEquals(cache.get(1),(Integer)1);
  assertEquals(cache.get(2),(Integer)2);
  assertEquals(cache.get(3),(Integer)3);
  map=new ConcurrentHashMap8<>();
  if (async) {
    asyncCache.loadCache(new IgniteBiPredicate<Integer,Integer>(){
      @Override public boolean apply(      Integer key,      Integer val){
        assertNotNull(key);
        assertNotNull(val);
        return key % 2 == 0;
      }
    }
,1,2,3,4,5,6);
    asyncCache.future().get();
  }
 else {
    cache.loadCache(new IgniteBiPredicate<Integer,Integer>(){
      @Override public boolean apply(      Integer key,      Integer val){
        assertNotNull(key);
        assertNotNull(val);
        return key % 2 == 0;
      }
    }
,1,2,3,4,5,6);
  }
  assertEquals(3,map.size());
  expArgs=new Object[]{1,2,3,4,5,6};
  for (int i=0; i < gridCount(); i++) {
    Object[] args=map.get(getTestGridName(i));
    Assert.assertArrayEquals(expArgs,args);
  }
  assertEquals(cache.get(1),(Integer)1);
  assertEquals(cache.get(2),(Integer)2);
  assertEquals(cache.get(3),(Integer)3);
  assertEquals(cache.get(4),(Integer)4);
  assertEquals(cache.get(6),(Integer)6);
  assertNull(cache.get(5));
}
