{
  File pkgFolder=new File(outFolder,pkg.replace('.',File.separatorChar));
  File cacheCfg=new File(pkgFolder,"CacheConfig.java");
  if (cacheCfg.exists()) {
    MessageBox.Result choice=askOverwrite.confirm(cacheCfg.getName());
    if (CANCEL == choice)     throw new IllegalStateException("Java snippet generation was canceled!");
    if (NO == choice || NO_TO_ALL == choice)     return;
  }
  Collection<String> src=new ArrayList<>(256);
  header(src,pkg,"java.sql.*;java.util.*;" + "org.apache.ignite.cache.*;org.apache.ignite.cache.store.jdbc.*;" + "org.apache.ignite.configuration.*;" + pkg + ".*","CacheConfig","CacheConfig");
  add1(src,"/**");
  add1(src,"* Configure cache.");
  add1(src,"*");
  add1(src,"* @param cacheName Cache name.");
  add1(src,"* @param storeFactory Cache store factory.");
  add1(src,"*/");
  add1(src,"public static <K, V> CacheConfiguration<K, V> cache(String cacheName," + " CacheJdbcPojoStoreFactory<K, V> storeFactory) {");
  add2(src,"if (storeFactory == null)");
  add3(src," throw new IllegalArgumentException(\"Cache store factory cannot be null.\");");
  add0(src,"");
  add2(src,"CacheConfiguration<K, V> ccfg = new CacheConfiguration<>(cacheName);");
  add0(src,"");
  add2(src,"ccfg.setCacheStoreFactory(storeFactory);");
  add2(src,"ccfg.setReadThrough(true);");
  add2(src,"ccfg.setWriteThrough(true);");
  add0(src,"");
  add2(src,"// Configure JDBC types. ");
  add2(src,"Collection<JdbcType> jdbcTypes = new ArrayList<>();");
  add0(src,"");
  boolean first=true;
  for (  PojoDescriptor pojo : pojos) {
    String tbl=pojo.table();
    add2(src,"// " + tbl + ".");
    add2(src,(first ? "JdbcType " : "") + "jdbcType = new JdbcType();");
    add0(src,"");
    add2(src,"jdbcType.setCacheName(cacheName);");
    add2(src,"jdbcType.setDatabaseSchema(\"" + pojo.schema() + "\");");
    add2(src,"jdbcType.setDatabaseTable(\"" + tbl + "\");");
    add2(src,"jdbcType.setKeyType(" + pojo.keyClassName() + ".class.getName());");
    add2(src,"jdbcType.setValueType(" + pojo.valueClassName() + ".class.getName());");
    add0(src,"");
    add2(src,"// Key fields for " + tbl + ".");
    add2(src,(first ? "Collection<JdbcTypeField> " : "") + "keys = new ArrayList<>();");
    addFields(src,"keys",pojo.keyFields());
    add2(src,"jdbcType.setKeyFields(keys.toArray(new JdbcTypeField[keys.size()]));");
    add0(src,"");
    add2(src,"// Value fields for " + tbl + ".");
    add2(src,(first ? "Collection<JdbcTypeField> " : "") + "vals = new ArrayList<>();");
    addFields(src,"vals",pojo.valueFields(includeKeys));
    add2(src,"jdbcType.setValueFields(vals.toArray(new JdbcTypeField[vals.size()]));");
    add0(src,"");
    add2(src,"jdbcTypes.add(jdbcType);");
    add0(src,"");
    first=false;
  }
  add2(src,"storeFactory.setTypes(jdbcTypes.toArray(new JdbcType[jdbcTypes.size()]));");
  add0(src,"");
  add2(src,"// Configure query entities. ");
  add2(src,"Collection<QueryEntity> qryEntities = new ArrayList<>();");
  add0(src,"");
  first=true;
  boolean firstIdxs=true;
  boolean firstIdx=true;
  for (  PojoDescriptor pojo : pojos) {
    String tbl=pojo.table();
    add2(src,(first ? "QueryEntity " : "") + "qryEntity = new QueryEntity();");
    add0(src,"");
    add2(src,"qryEntity.setKeyType(" + pojo.keyClassName() + ".class.getName());");
    add2(src,"qryEntity.setValueType(" + pojo.valueClassName() + ".class.getName());");
    add0(src,"");
    addQueryFields(src,pojo.fields(),"// Query fields for " + tbl + ".",first);
    Collection<QueryIndex> idxs=pojo.indexes();
    if (!idxs.isEmpty()) {
      add2(src,"// Indexes for " + tbl + ".");
      add2(src,(firstIdxs ? "Collection<QueryIndex> " : "") + "idxs = new ArrayList<>();");
      add0(src,"");
      firstIdxs=false;
      for (      QueryIndex idx : idxs) {
        if (idx.getFields().size() == 1) {
          Map.Entry<String,Boolean> fld=F.first(idx.getFields().entrySet());
          add2(src,"idxs.add(new QueryIndex(\"" + fld.getKey() + "\", "+ fld.getValue()+ ", \""+ idx.getName()+ "\"));");
          add0(src,"");
        }
 else {
          add2(src,(firstIdx ? "QueryIndex " : "") + "idx = new QueryIndex();");
          add0(src,"");
          add2(src,"idx.setName(\"" + idx.getName() + "\");");
          add0(src,"");
          add2(src,(firstIdx ? "LinkedHashMap<String, Boolean> " : "") + "idxFlds = new LinkedHashMap<>();");
          add0(src,"");
          for (          Map.Entry<String,Boolean> idxFld : idx.getFields().entrySet())           add2(src,"idxFlds.put(\"" + idxFld.getKey() + "\", "+ idxFld.getValue()+ ");");
          add0(src,"");
          add2(src,"idx.setFields(idxFlds);");
          add0(src,"");
          add2(src,"idxs.add(idx);");
          add0(src,"");
          firstIdx=false;
        }
      }
      add2(src,"qryEntity.setIndexes(idxs);");
      add0(src,"");
    }
    add2(src,"ccfg.setQueryEntities(qryEntities);");
    add0(src,"");
    first=false;
  }
  add2(src,"return ccfg;");
  add1(src,"}");
  add0(src,"}");
  write(src,cacheCfg);
}
