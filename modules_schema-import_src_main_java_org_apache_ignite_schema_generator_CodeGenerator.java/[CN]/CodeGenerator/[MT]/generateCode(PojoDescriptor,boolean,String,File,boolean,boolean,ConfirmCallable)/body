{
  String type=key ? pojo.keyClassName() : pojo.valueClassName();
  File out=new File(pkgFolder,type + ".java");
  checkValidJavaIdentifier(pkg,true,"Package",type);
  checkValidJavaIdentifier(type,false,"Type",type);
  if (out.exists()) {
    MessageBox.Result choice=askOverwrite.confirm(out.getName());
    if (CANCEL == choice)     throw new IllegalStateException("POJO generation was canceled!");
    if (NO == choice || NO_TO_ALL == choice)     return;
  }
  Collection<String> src=new ArrayList<>(256);
  header(src,pkg,"java.io.*",type,type + " implements Serializable");
  add1(src,"/** */");
  add1(src,"private static final long serialVersionUID = 0L;");
  add0(src,"");
  Collection<PojoField> fields=key ? pojo.keyFields() : pojo.valueFields(includeKeys);
  for (  PojoField field : fields) {
    String fldName=field.javaName();
    checkValidJavaIdentifier(fldName,false,"Field",type);
    add1(src,"/** Value for " + fldName + ". */");
    if (key && field.affinityKey())     add1(src,"@AffinityKeyMapped");
    add1(src,"private " + javaTypeName(field) + " "+ fldName+ ";");
    add0(src,"");
  }
  if (constructor) {
    add1(src,"/**");
    add1(src," * Empty constructor.");
    add1(src," */");
    add1(src,"public " + type + "() {");
    add2(src,"// No-op.");
    add1(src,"}");
    add0(src,"");
    add1(src,"/**");
    add1(src," * Full constructor.");
    add1(src," */");
    add1(src,"public " + type + "(");
    Iterator<PojoField> it=fields.iterator();
    while (it.hasNext()) {
      PojoField field=it.next();
      add2(src,javaTypeName(field) + " " + field.javaName()+ (it.hasNext() ? "," : ""));
    }
    add1(src,") {");
    for (    PojoField field : fields)     add2Fmt(src,"this.%1$s = %1$s;",field.javaName());
    add1(src,"}");
    add0(src,"");
  }
  for (  PojoField field : fields) {
    String fldName=field.javaName();
    String fldType=javaTypeName(field);
    String mtdName=capitalizeFirst(fldName);
    add1(src,"/**");
    add1(src," * Gets " + fldName + ".");
    add1(src," *");
    add1(src," * @return Value for " + fldName + ".");
    add1(src," */");
    add1(src,"public " + fldType + " get"+ mtdName+ "() {");
    add2(src,"return " + fldName + ";");
    add1(src,"}");
    add0(src,"");
    add1(src,"/**");
    add1(src," * Sets " + fldName + ".");
    add1(src," *");
    add1(src," * @param " + fldName + " New value for "+ fldName+ ".");
    add1(src," */");
    add1(src,"public void set" + mtdName + "("+ fldType+ " "+ fldName+ ") {");
    add2(src,"this." + fldName + " = "+ fldName+ ";");
    add1(src,"}");
    add0(src,"");
  }
  add1(src,"/** {@inheritDoc} */");
  add1(src,"@Override public boolean equals(Object o) {");
  add2(src,"if (this == o)");
  add3(src,"return true;");
  add0(src,"");
  add2(src,"if (!(o instanceof " + type + "))");
  add3(src,"return false;");
  add0(src,"");
  add2Fmt(src,"%1$s that = (%1$s)o;",type);
  for (  PojoField field : fields) {
    add0(src,"");
    String javaName=field.javaName();
    if (field.primitive()) {
switch (field.javaTypeName()) {
case "float":
        add2Fmt(src,"if (Float.compare(%1$s, that.%1$s) != 0)",javaName);
      break;
case "double":
    add2Fmt(src,"if (Double.compare(%1$s, that.%1$s) != 0)",javaName);
  break;
default :
add2Fmt(src,"if (%1$s != that.%1$s)",javaName);
}
}
 else add2Fmt(src,"if (%1$s != null ? !%1$s.equals(that.%1$s) : that.%1$s != null)",javaName);
add3(src,"return false;");
}
add0(src,"");
add2(src,"return true;");
add1(src,"}");
add0(src,"");
add1(src,"/** {@inheritDoc} */");
add1(src,"@Override public int hashCode() {");
List<String> hash=new ArrayList<>(fields.size() * 2);
boolean first=true;
boolean tempVar=false;
for (PojoField field : fields) {
String javaName=field.javaName();
if (!first) add0(hash,"");
if (field.primitive()) {
switch (field.javaTypeName()) {
case "boolean":
add2Fmt(hash,first ? "int res = %s ? 1 : 0;" : "res = 31 * res + (%s ? 1 : 0);",javaName);
break;
case "byte":
case "short":
add2Fmt(hash,first ? "int res = (int)%s;" : "res = 31 * res + (int)%s;",javaName);
break;
case "int":
add2Fmt(hash,first ? "int res = %s;" : "res = 31 * res + %s;",javaName);
break;
case "long":
add2Fmt(hash,first ? "int res = (int)(%1$s ^ (%1$s >>> 32));" : "res = 31 * res + (int)(%1$s ^ (%1$s >>> 32));",javaName);
break;
case "float":
add2Fmt(hash,first ? "int res = %1$s != +0.0f ? Float.floatToIntBits(%1$s) : 0;" : "res = 31 * res + (%1$s != +0.0f ? Float.floatToIntBits(%1$s) : 0);",javaName);
break;
case "double":
add2Fmt(hash,(tempVar ? "ig_hash_temp" : "long ig_hash_temp") + " = Double.doubleToLongBits(%s);",javaName);
add0(hash,"");
add2Fmt(hash,first ? "int res = (int)(ig_hash_temp ^ (ig_hash_temp >>> 32));" : "res = 31 * res + (int)(ig_hash_temp ^ (ig_hash_temp >>> 32));",javaName);
tempVar=true;
break;
}
}
 else add2Fmt(hash,first ? "int res = %1$s != null ? %1$s.hashCode() : 0;" : "res = 31 * res + (%1$s != null ? %1$s.hashCode() : 0);",javaName);
first=false;
}
for (String line : hash) add0(src,line);
add0(src,"");
add2(src,"return res;");
add1(src,"}");
add0(src,"");
add1(src,"/** {@inheritDoc} */");
add1(src,"@Override public String toString() {");
Iterator<PojoField> it=fields.iterator();
add2Fmt(src,"return \"%1$s [%2$s=\" + %2$s +",type,it.next().javaName());
while (it.hasNext()) add3(src,String.format("\", %1$s=\" + %1$s +",it.next().javaName()));
add3(src,"\"]\";");
add1(src,"}");
add0(src,"}");
add0(src,"");
write(src,out);
}
