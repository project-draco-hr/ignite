{
  File pkgFolder=new File(outFolder,pkg.replace('.',File.separatorChar));
  ensurePackages(pkgFolder);
  File cacheCfg=new File(pkgFolder,"CacheConfig.java");
  if (cacheCfg.exists()) {
    MessageBox.Result choice=askOverwrite.confirm(cacheCfg.getName());
    if (CANCEL == choice)     throw new IllegalStateException("Java snippet generation was canceled!");
    if (NO == choice || NO_TO_ALL == choice)     return;
  }
  Collection<String> src=new ArrayList<>(256);
  header(src,pkg,"CacheConfig","CacheConfig","java.sql.*","java.util.*","","org.apache.ignite.cache.*","org.apache.ignite.cache.store.jdbc.*","org.apache.ignite.configuration.*");
  for (  PojoDescriptor pojo : pojos) {
    String tbl=pojo.table();
    String valClsName=pojo.valueClassName();
    Collection<PojoField> fields=pojo.valueFields(true);
    add1(src,"/**");
    add1(src," * Create JDBC type for " + tbl + ".");
    add1(src," *");
    add1(src," * @param cacheName Cache name.");
    add1(src," * @return Configured JDBC type.");
    add1(src," */");
    add1(src,"private static JdbcType jdbcType" + valClsName + "(String cacheName) {");
    add2(src,"JdbcType jdbcType = new JdbcType();");
    add0(src,"");
    add2(src,"jdbcType.setCacheName(cacheName);");
    if (pojo.schema() != null)     add2(src,"jdbcType.setDatabaseSchema(\"" + pojo.schema() + "\");");
    add2(src,"jdbcType.setDatabaseTable(\"" + tbl + "\");");
    add2(src,"jdbcType.setKeyType(\"" + pkg + "."+ pojo.keyClassName()+ "\");");
    add2(src,"jdbcType.setValueType(\"" + pkg + "."+ valClsName+ "\");");
    add0(src,"");
    add2(src,"// Key fields for " + tbl + ".");
    add2(src,"Collection<JdbcTypeField> keys = new ArrayList<>();");
    addFields(src,"keys",pojo.keyFields());
    add2(src,"jdbcType.setKeyFields(keys.toArray(new JdbcTypeField[keys.size()]));");
    add0(src,"");
    add2(src,"// Value fields for " + tbl + ".");
    add2(src,"Collection<JdbcTypeField> vals = new ArrayList<>();");
    addFields(src,"vals",pojo.valueFields(includeKeys));
    add2(src,"jdbcType.setValueFields(vals.toArray(new JdbcTypeField[vals.size()]));");
    add0(src,"");
    add2(src,"return jdbcType;");
    add1(src,"}");
    add0(src,"");
    add1(src,"/**");
    add1(src," * Create SQL Query descriptor for " + tbl + ".");
    add1(src," *");
    add1(src," * @return Configured query entity.");
    add1(src," */");
    add1(src,"private static QueryEntity queryEntity" + valClsName + "() {");
    add2(src,"QueryEntity qryEntity = new QueryEntity();");
    add0(src,"");
    add2(src,"qryEntity.setKeyType(\"" + pkg + "."+ pojo.keyClassName()+ "\");");
    add2(src,"qryEntity.setValueType(\"" + pkg + "."+ valClsName+ "\");");
    add0(src,"");
    add2(src,"// Query fields for " + tbl + ".");
    add2(src,"LinkedHashMap<String, String> fields = new LinkedHashMap<>();");
    add0(src,"");
    for (    PojoField field : fields)     add2(src,"fields.put(\"" + field.javaName() + "\", \""+ GeneratorUtils.boxPrimitiveType(field.javaTypeName())+ "\");");
    add0(src,"");
    add2(src,"qryEntity.setFields(fields);");
    add0(src,"");
    if (generateAliases) {
      Collection<PojoField> aliases=new ArrayList<>();
      for (      PojoField field : fields) {
        if (!field.javaName().equalsIgnoreCase(field.dbName()))         aliases.add(field);
      }
      if (!aliases.isEmpty()) {
        add2(src,"// Aliases for fields.");
        add2(src,"Map<String, String> aliases = new HashMap<>();");
        add0(src,"");
        for (        PojoField alias : aliases)         add2(src,"aliases.put(\"" + alias.javaName() + "\", \""+ alias.dbName()+ "\");");
        add0(src,"");
        add2(src,"qryEntity.setAliases(aliases);");
        add0(src,"");
      }
    }
    Collection<QueryIndex> idxs=pojo.indexes();
    if (!idxs.isEmpty()) {
      boolean first=true;
      boolean firstIdx=true;
      for (      QueryIndex idx : idxs) {
        Set<Map.Entry<String,Boolean>> dbIdxFlds=idx.getFields().entrySet();
        int sz=dbIdxFlds.size();
        List<T2<String,Boolean>> idxFlds=new ArrayList<>(sz);
        for (        Map.Entry<String,Boolean> idxFld : dbIdxFlds) {
          PojoField field=GeneratorUtils.findFieldByName(fields,idxFld.getKey());
          if (field != null)           idxFlds.add(new T2<>(field.javaName(),idxFld.getValue()));
 else           break;
        }
        if (idxFlds.size() == sz) {
          if (first) {
            add2(src,"// Indexes for " + tbl + ".");
            add2(src,"Collection<QueryIndex> idxs = new ArrayList<>();");
            add0(src,"");
          }
          if (sz == 1) {
            T2<String,Boolean> idxFld=idxFlds.get(0);
            add2(src,"idxs.add(new QueryIndex(\"" + idxFld.getKey() + "\", "+ idxFld.getValue()+ ", \""+ idx.getName()+ "\"));");
            add0(src,"");
          }
 else {
            add2(src,(firstIdx ? "QueryIndex " : "") + "idx = new QueryIndex();");
            add0(src,"");
            add2(src,"idx.setName(\"" + idx.getName() + "\");");
            add0(src,"");
            add2(src,"idx.setIndexType(QueryIndexType." + idx.getIndexType() + ");");
            add0(src,"");
            add2(src,(firstIdx ? "LinkedHashMap<String, Boolean> " : "") + "idxFlds = new LinkedHashMap<>();");
            add0(src,"");
            for (            T2<String,Boolean> idxFld : idxFlds)             add2(src,"idxFlds.put(\"" + idxFld.getKey() + "\", "+ idxFld.getValue()+ ");");
            add0(src,"");
            add2(src,"idx.setFields(idxFlds);");
            add0(src,"");
            add2(src,"idxs.add(idx);");
            add0(src,"");
            firstIdx=false;
          }
          first=false;
        }
      }
      if (!first) {
        add2(src,"qryEntity.setIndexes(idxs);");
        add0(src,"");
      }
    }
    add2(src,"return qryEntity;");
    add1(src,"}");
    add0(src,"");
  }
  add1(src,"/**");
  add1(src," * Configure cache.");
  add1(src," *");
  add1(src," * @param cacheName Cache name.");
  add1(src," * @param storeFactory Cache store factory.");
  add1(src," * @return Cache configuration.");
  add1(src," */");
  add1(src,"public static <K, V> CacheConfiguration<K, V> cache(String cacheName," + " CacheJdbcPojoStoreFactory<K, V> storeFactory) {");
  add2(src,"if (storeFactory == null)");
  add3(src," throw new IllegalArgumentException(\"Cache store factory cannot be null.\");");
  add0(src,"");
  add2(src,"CacheConfiguration<K, V> ccfg = new CacheConfiguration<>(cacheName);");
  add0(src,"");
  add2(src,"ccfg.setCacheStoreFactory(storeFactory);");
  add2(src,"ccfg.setReadThrough(true);");
  add2(src,"ccfg.setWriteThrough(true);");
  add0(src,"");
  add2(src,"// Configure JDBC types.");
  add2(src,"Collection<JdbcType> jdbcTypes = new ArrayList<>();");
  add0(src,"");
  for (  PojoDescriptor pojo : pojos)   add2(src,"jdbcTypes.add(jdbcType" + pojo.valueClassName() + "(cacheName));");
  add0(src,"");
  add2(src,"storeFactory.setTypes(jdbcTypes.toArray(new JdbcType[jdbcTypes.size()]));");
  add0(src,"");
  add2(src,"// Configure query entities.");
  add2(src,"Collection<QueryEntity> qryEntities = new ArrayList<>();");
  add0(src,"");
  for (  PojoDescriptor pojo : pojos)   add2(src,"qryEntities.add(queryEntity" + pojo.valueClassName() + "());");
  add0(src,"");
  add2(src,"ccfg.setQueryEntities(qryEntities);");
  add0(src,"");
  add2(src,"return ccfg;");
  add1(src,"}");
  add0(src,"}");
  write(src,cacheCfg);
}
