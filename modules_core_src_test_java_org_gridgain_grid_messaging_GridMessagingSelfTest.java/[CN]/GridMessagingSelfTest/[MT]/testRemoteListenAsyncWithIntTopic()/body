{
  final Collection<Object> rcvMsgs=new HashSet<>();
  final AtomicBoolean error=new AtomicBoolean(false);
  final CountDownLatch rcvLatch=new CountDownLatch(3);
  grid2.message().remoteListen(I_TOPIC_1,new P2<UUID,Object>(){
    @GridInstanceResource private transient Grid g;
    @Override public boolean apply(    UUID nodeId,    Object msg){
      assertEquals(grid2,g);
      try {
        log.info("Received new message [msg=" + msg + ", senderNodeId="+ nodeId+ ", topic="+ I_TOPIC_1+ ']');
        if (!nodeId.equals(grid1.localNode().id())) {
          log.error("Unexpected sender node: " + nodeId);
          error.set(true);
          return false;
        }
        if (!MSG_1.equals(msg)) {
          log.error("Unexpected message " + msg + " for topic: "+ I_TOPIC_1);
          error.set(true);
          return false;
        }
        rcvMsgs.add(msg);
        return true;
      }
  finally {
        rcvLatch.countDown();
      }
    }
  }
).get();
  grid2.message().remoteListen(I_TOPIC_2,new P2<UUID,Object>(){
    @GridInstanceResource private transient Grid g;
    @Override public boolean apply(    UUID nodeId,    Object msg){
      assertEquals(grid2,g);
      try {
        log.info("Received new message [msg=" + msg + ", senderNodeId="+ nodeId+ ", topic="+ I_TOPIC_2+ ']');
        if (!nodeId.equals(grid1.localNode().id())) {
          log.error("Unexpected sender node: " + nodeId);
          error.set(true);
          return false;
        }
        if (!MSG_2.equals(msg)) {
          log.error("Unexpected message " + msg + " for topic: "+ I_TOPIC_2);
          error.set(true);
          return false;
        }
        rcvMsgs.add(msg);
        return true;
      }
  finally {
        rcvLatch.countDown();
      }
    }
  }
).get();
  grid2.message().remoteListen(null,new P2<UUID,Object>(){
    @GridInstanceResource private transient Grid g;
    @Override public boolean apply(    UUID nodeId,    Object msg){
      assertEquals(grid2,g);
      try {
        log.info("Received new message [msg=" + msg + ", senderNodeId="+ nodeId+ ", topic=default]");
        if (!nodeId.equals(grid1.localNode().id())) {
          log.error("Unexpected sender node: " + nodeId);
          error.set(true);
          return false;
        }
        if (!MSG_3.equals(msg)) {
          log.error("Unexpected message " + msg + " for topic: default");
          error.set(true);
          return false;
        }
        rcvMsgs.add(msg);
        return true;
      }
  finally {
        rcvLatch.countDown();
      }
    }
  }
).get();
  GridProjection prj2=grid1.forRemotes();
  prj2.message().send(I_TOPIC_1,MSG_1);
  prj2.message().send(I_TOPIC_2,MSG_2);
  prj2.message().send(null,MSG_3);
  assertTrue(rcvLatch.await(3,TimeUnit.SECONDS));
  assertFalse(error.get());
  assertTrue(rcvMsgs.contains(MSG_1));
  assertTrue(rcvMsgs.contains(MSG_2));
  assertTrue(rcvMsgs.contains(MSG_3));
}
