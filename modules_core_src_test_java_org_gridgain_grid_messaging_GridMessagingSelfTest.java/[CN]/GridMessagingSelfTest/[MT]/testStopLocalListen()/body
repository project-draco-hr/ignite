{
  final AtomicInteger msgCnt1=new AtomicInteger();
  final AtomicInteger msgCnt2=new AtomicInteger();
  final AtomicInteger msgCnt3=new AtomicInteger();
  P2<UUID,Object> lsnr1=new P2<UUID,Object>(){
    @Override public boolean apply(    UUID nodeId,    Object msg){
      log.info("Listener1 received new message [msg=" + msg + ", senderNodeId="+ nodeId+ ']');
      msgCnt1.incrementAndGet();
      return true;
    }
  }
;
  P2<UUID,Object> lsnr2=new P2<UUID,Object>(){
    @Override public boolean apply(    UUID nodeId,    Object msg){
      log.info("Listener2 received new message [msg=" + msg + ", senderNodeId="+ nodeId+ ']');
      msgCnt2.incrementAndGet();
      return true;
    }
  }
;
  P2<UUID,Object> lsnr3=new P2<UUID,Object>(){
    @Override public boolean apply(    UUID nodeId,    Object msg){
      log.info("Listener3 received new message [msg=" + msg + ", senderNodeId="+ nodeId+ ']');
      msgCnt3.incrementAndGet();
      return true;
    }
  }
;
  final String topic1=null;
  final String topic2="top1";
  final String topic3="top3";
  grid1.message().localListen(topic1,lsnr1);
  grid1.message().localListen(topic2,lsnr2);
  grid1.message().localListen(topic3,lsnr3);
  GridProjection rNode1=grid2.cluster().forRemotes();
  message(rNode1).send(topic1,"msg1-1");
  message(rNode1).send(topic2,"msg1-2");
  message(rNode1).send(topic3,"msg1-3");
  GridTestUtils.waitForCondition(new PA(){
    @Override public boolean apply(){
      return msgCnt1.get() > 0 && msgCnt2.get() > 0 && msgCnt3.get() > 0;
    }
  }
,5000);
  assertEquals(1,msgCnt1.get());
  assertEquals(1,msgCnt2.get());
  assertEquals(1,msgCnt3.get());
  grid1.message().stopLocalListen(topic2,lsnr2);
  message(rNode1).send(topic1,"msg2-1");
  message(rNode1).send(topic2,"msg2-2");
  message(rNode1).send(topic3,"msg2-3");
  GridTestUtils.waitForCondition(new PA(){
    @Override public boolean apply(){
      return msgCnt1.get() > 1 && msgCnt3.get() > 1;
    }
  }
,5000);
  assertEquals(2,msgCnt1.get());
  assertEquals(1,msgCnt2.get());
  assertEquals(2,msgCnt3.get());
  grid1.message().stopLocalListen(topic2,lsnr1);
  message(rNode1).send(topic1,"msg3-1");
  message(rNode1).send(topic2,"msg3-2");
  message(rNode1).send(topic3,"msg3-3");
  GridTestUtils.waitForCondition(new PA(){
    @Override public boolean apply(){
      return msgCnt1.get() > 2 && msgCnt3.get() > 2;
    }
  }
,5000);
  assertEquals(3,msgCnt1.get());
  assertEquals(1,msgCnt2.get());
  assertEquals(3,msgCnt3.get());
  grid1.message().stopLocalListen(topic1,lsnr1);
  grid1.message().stopLocalListen(topic3,lsnr3);
  message(rNode1).send(topic1,"msg4-1");
  message(rNode1).send(topic2,"msg4-2");
  message(rNode1).send(topic3,"msg4-3");
  U.sleep(1000);
  assertEquals(3,msgCnt1.get());
  assertEquals(1,msgCnt2.get());
  assertEquals(3,msgCnt3.get());
}
