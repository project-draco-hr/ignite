{
  IgniteFs fs=ggfsPrimary[0];
  assertNotNull(fs);
  GridGgfsMetrics m=fs.metrics();
  assertNotNull(m);
  assertEquals(0,m.directoriesCount());
  assertEquals(0,m.filesCount());
  assertEquals(0,m.filesOpenedForRead());
  assertEquals(0,m.filesOpenedForWrite());
  fs.mkdirs(new IgniteFsPath("/dir1"));
  m=fs.metrics();
  assertNotNull(m);
  assertEquals(1,m.directoriesCount());
  assertEquals(0,m.filesCount());
  assertEquals(0,m.filesOpenedForRead());
  assertEquals(0,m.filesOpenedForWrite());
  fs.mkdirs(new IgniteFsPath("/dir1/dir2/dir3"));
  fs.mkdirs(new IgniteFsPath("/dir4"));
  m=fs.metrics();
  assertNotNull(m);
  assertEquals(4,m.directoriesCount());
  assertEquals(0,m.filesCount());
  assertEquals(0,m.filesOpenedForRead());
  assertEquals(0,m.filesOpenedForWrite());
  GridGgfsOutputStream out1=fs.create(new IgniteFsPath("/dir1/file1"),false);
  GridGgfsOutputStream out2=fs.create(new IgniteFsPath("/dir1/file2"),false);
  GridGgfsOutputStream out3=fs.create(new IgniteFsPath("/dir1/dir2/file"),false);
  m=fs.metrics();
  assertNotNull(m);
  assertEquals(4,m.directoriesCount());
  assertEquals(3,m.filesCount());
  assertEquals(0,m.filesOpenedForRead());
  assertEquals(3,m.filesOpenedForWrite());
  out1.write(new byte[10]);
  out2.write(new byte[20]);
  out3.write(new byte[30]);
  out1.close();
  m=fs.metrics();
  assertNotNull(m);
  assertEquals(4,m.directoriesCount());
  assertEquals(3,m.filesCount());
  assertEquals(0,m.filesOpenedForRead());
  assertEquals(2,m.filesOpenedForWrite());
  out2.close();
  out3.close();
  m=fs.metrics();
  assertNotNull(m);
  assertEquals(4,m.directoriesCount());
  assertEquals(3,m.filesCount());
  assertEquals(0,m.filesOpenedForRead());
  assertEquals(0,m.filesOpenedForWrite());
  GridGgfsOutputStream out=fs.append(new IgniteFsPath("/dir1/file1"),false);
  out.write(new byte[20]);
  m=fs.metrics();
  assertNotNull(m);
  assertEquals(4,m.directoriesCount());
  assertEquals(3,m.filesCount());
  assertEquals(0,m.filesOpenedForRead());
  assertEquals(1,m.filesOpenedForWrite());
  out.write(new byte[20]);
  out.close();
  m=fs.metrics();
  assertNotNull(m);
  assertEquals(4,m.directoriesCount());
  assertEquals(3,m.filesCount());
  assertEquals(0,m.filesOpenedForRead());
  assertEquals(0,m.filesOpenedForWrite());
  GridGgfsInputStream in1=fs.open(new IgniteFsPath("/dir1/file1"));
  GridGgfsInputStream in2=fs.open(new IgniteFsPath("/dir1/file2"));
  m=fs.metrics();
  assertNotNull(m);
  assertEquals(4,m.directoriesCount());
  assertEquals(3,m.filesCount());
  assertEquals(2,m.filesOpenedForRead());
  assertEquals(0,m.filesOpenedForWrite());
  in1.close();
  in2.close();
  m=fs.metrics();
  assertNotNull(m);
  assertEquals(4,m.directoriesCount());
  assertEquals(3,m.filesCount());
  assertEquals(0,m.filesOpenedForRead());
  assertEquals(0,m.filesOpenedForWrite());
  fs.delete(new IgniteFsPath("/dir1/file1"),false);
  fs.delete(new IgniteFsPath("/dir1/dir2"),true);
  m=fs.metrics();
  assertNotNull(m);
  assertEquals(2,m.directoriesCount());
  assertEquals(1,m.filesCount());
  assertEquals(0,m.filesOpenedForRead());
  assertEquals(0,m.filesOpenedForWrite());
  fs.delete(new IgniteFsPath("/"),true);
  m=fs.metrics();
  assertNotNull(m);
  assertEquals(0,m.directoriesCount());
  assertEquals(0,m.filesCount());
  assertEquals(0,m.filesOpenedForRead());
  assertEquals(0,m.filesOpenedForWrite());
}
