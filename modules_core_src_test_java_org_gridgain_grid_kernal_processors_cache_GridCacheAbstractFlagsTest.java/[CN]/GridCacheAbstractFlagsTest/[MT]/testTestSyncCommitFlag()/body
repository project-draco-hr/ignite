{
  for (int i=0; i < 10; i++) {
    final String key="k" + i;
    final Integer val=i;
    final CountDownLatch l=new CountDownLatch(1);
    final AtomicInteger cntr=new AtomicInteger();
    GridFuture<?> f=multithreadedAsync(new Callable(){
      @Override public Object call() throws Exception {
        int idx=cntr.getAndIncrement() % gridCount();
        GridCache<String,Integer> c=cache(idx);
        l.await();
        assertEquals(val,c.get(key));
        return null;
      }
    }
,gridCount() * 3);
    cache(0).flagsOn(GridCacheFlag.SYNC_COMMIT).put(key,val);
    l.countDown();
    f.get();
  }
}
