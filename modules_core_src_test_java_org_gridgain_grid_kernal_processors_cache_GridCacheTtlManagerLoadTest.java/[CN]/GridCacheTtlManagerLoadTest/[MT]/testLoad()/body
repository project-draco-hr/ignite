{
  cacheMode=REPLICATED;
  final GridKernal g=(GridKernal)startGrid(0);
  try {
    final AtomicBoolean stop=new AtomicBoolean();
    GridFuture<?> fut=multithreadedAsync(new Callable<Object>(){
      @Override public Object call() throws Exception {
        GridCache<Object,Object> cache=g.cache(null);
        long key=0;
        while (!stop.get()) {
          GridCacheEntry<Object,Object> entry=cache.entry(key);
          entry.timeToLive(1000);
          entry.setValue(key);
          key++;
        }
        return null;
      }
    }
,1);
    GridCacheTtlManager<Object,Object> ttlMgr=g.internalCache().context().ttl();
    for (int i=0; i < 300; i++) {
      U.sleep(1000);
      ttlMgr.printMemoryStats();
    }
    stop.set(true);
    fut.get();
  }
  finally {
    stopAllGrids();
  }
}
