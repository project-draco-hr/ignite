{
  final GridCache<Integer,Integer> cache=grid(0).cache(null);
  cache.put(key,0);
  final int THREADS=5;
  final int ITERATIONS_PER_THREAD=iterations();
  IgniteInternalFuture<Long> putFut=GridTestUtils.runMultiThreadedAsync(new Callable<Void>(){
    @Override public Void call() throws Exception {
      for (int i=0; i < ITERATIONS_PER_THREAD; i++) {
        if (i % 1000 == 0)         log.info("Put iteration " + i);
        assertTrue(cache.putx(key,i));
      }
      return null;
    }
  }
,THREADS,"put");
  final AtomicBoolean stop=new AtomicBoolean();
  IgniteInternalFuture<Long> getFut;
  try {
    getFut=GridTestUtils.runMultiThreadedAsync(new Callable<Void>(){
      @Override public Void call() throws Exception {
        int cnt=0;
        while (!stop.get()) {
          if (++cnt % 5000 == 0)           log.info("Get iteration " + cnt);
          assertNotNull(cache.get(key));
        }
        return null;
      }
    }
,THREADS,"get");
    putFut.get();
  }
  finally {
    stop.set(true);
  }
  getFut.get();
  for (int i=0; i < gridCount(); i++) {
    Integer val=(Integer)grid(i).cache(null).get(key);
    assertNotNull("Unexpected value for grid " + i,val);
  }
}
