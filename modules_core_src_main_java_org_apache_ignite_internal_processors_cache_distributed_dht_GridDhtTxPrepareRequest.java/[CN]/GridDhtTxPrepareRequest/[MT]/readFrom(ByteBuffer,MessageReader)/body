{
  reader.setBuffer(buf);
  if (!reader.beforeMessageRead())   return false;
  if (!super.readFrom(buf,reader))   return false;
switch (reader.state()) {
case 24:
    futId=reader.readIgniteUuid("futId");
  if (!reader.isLastRead())   return false;
reader.incrementState();
case 25:
invalidateNearEntries=reader.readBitSet("invalidateNearEntries");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 26:
last=reader.readBoolean("last");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 27:
miniId=reader.readIgniteUuid("miniId");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 28:
nearNodeId=reader.readUuid("nearNodeId");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 29:
nearWrites=reader.readCollection("nearWrites",MessageCollectionItemType.MSG);
if (!reader.isLastRead()) return false;
reader.incrementState();
case 30:
nearXidVer=reader.readMessage("nearXidVer");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 31:
ownedKeys=reader.readCollection("ownedKeys",MessageCollectionItemType.MSG);
if (!reader.isLastRead()) return false;
reader.incrementState();
case 32:
ownedVals=reader.readCollection("ownedVals",MessageCollectionItemType.MSG);
if (!reader.isLastRead()) return false;
reader.incrementState();
case 33:
preloadKeys=reader.readBitSet("preloadKeys");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 34:
subjId=reader.readUuid("subjId");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 35:
taskNameHash=reader.readInt("taskNameHash");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 36:
topVer=reader.readLong("topVer");
if (!reader.isLastRead()) return false;
reader.incrementState();
}
return true;
}
