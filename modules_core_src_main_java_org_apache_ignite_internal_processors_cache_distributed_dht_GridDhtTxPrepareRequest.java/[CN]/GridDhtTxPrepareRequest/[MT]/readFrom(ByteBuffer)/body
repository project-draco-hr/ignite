{
  reader.setBuffer(buf);
  if (!super.readFrom(buf))   return false;
switch (readState) {
case 22:
    futId=reader.readField("futId",MessageFieldType.IGNITE_UUID);
  if (!reader.isLastRead())   return false;
readState++;
case 23:
invalidateNearEntries=reader.readField("invalidateNearEntries",MessageFieldType.BIT_SET);
if (!reader.isLastRead()) return false;
readState++;
case 24:
last=reader.readField("last",MessageFieldType.BOOLEAN);
if (!reader.isLastRead()) return false;
readState++;
case 25:
miniId=reader.readField("miniId",MessageFieldType.IGNITE_UUID);
if (!reader.isLastRead()) return false;
readState++;
case 26:
nearNodeId=reader.readField("nearNodeId",MessageFieldType.UUID);
if (!reader.isLastRead()) return false;
readState++;
case 27:
nearWritesBytes=reader.readCollectionField("nearWritesBytes",MessageFieldType.BYTE_ARR);
if (!reader.isLastRead()) return false;
readState++;
case 28:
nearXidVer=reader.readField("nearXidVer",MessageFieldType.MSG);
if (!reader.isLastRead()) return false;
readState++;
case 29:
ownedBytes=reader.readField("ownedBytes",MessageFieldType.BYTE_ARR);
if (!reader.isLastRead()) return false;
readState++;
case 30:
preloadKeys=reader.readField("preloadKeys",MessageFieldType.BIT_SET);
if (!reader.isLastRead()) return false;
readState++;
case 31:
subjId=reader.readField("subjId",MessageFieldType.UUID);
if (!reader.isLastRead()) return false;
readState++;
case 32:
taskNameHash=reader.readField("taskNameHash",MessageFieldType.INT);
if (!reader.isLastRead()) return false;
readState++;
case 33:
topVer=reader.readField("topVer",MessageFieldType.LONG);
if (!reader.isLastRead()) return false;
readState++;
}
return true;
}
