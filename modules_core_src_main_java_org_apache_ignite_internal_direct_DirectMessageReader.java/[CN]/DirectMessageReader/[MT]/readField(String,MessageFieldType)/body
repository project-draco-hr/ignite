{
  Object val;
switch (type) {
case BYTE:
    val=stream.readByte();
  break;
case SHORT:
val=stream.readShort();
break;
case INT:
val=stream.readInt();
break;
case LONG:
val=stream.readLong();
break;
case FLOAT:
val=stream.readFloat();
break;
case DOUBLE:
val=stream.readDouble();
break;
case CHAR:
val=stream.readChar();
break;
case BOOLEAN:
val=stream.readBoolean();
break;
case BYTE_ARR:
val=stream.readByteArray();
break;
case SHORT_ARR:
val=stream.readShortArray();
break;
case INT_ARR:
val=stream.readIntArray();
break;
case LONG_ARR:
val=stream.readLongArray();
break;
case FLOAT_ARR:
val=stream.readFloatArray();
break;
case DOUBLE_ARR:
val=stream.readDoubleArray();
break;
case CHAR_ARR:
val=stream.readCharArray();
break;
case BOOLEAN_ARR:
val=stream.readBooleanArray();
break;
case STRING:
val=stream.readString();
break;
case BIT_SET:
val=stream.readBitSet();
break;
case UUID:
val=stream.readUuid();
break;
case IGNITE_UUID:
val=stream.readIgniteUuid();
break;
case MSG:
val=stream.readMessage();
break;
default :
throw new IllegalStateException("Unknown field type: " + type);
}
lastRead=stream.lastFinished();
return (T)val;
}
