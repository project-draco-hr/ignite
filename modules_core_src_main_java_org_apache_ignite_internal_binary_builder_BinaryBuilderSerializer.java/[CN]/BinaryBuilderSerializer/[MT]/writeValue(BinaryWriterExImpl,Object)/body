{
  if (val == null) {
    writer.writeByte(GridBinaryMarshaller.NULL);
    return;
  }
  if (val instanceof BinaryBuilderSerializationAware) {
    ((BinaryBuilderSerializationAware)val).writeTo(writer,this);
    return;
  }
  if (val instanceof BinaryObjectExImpl) {
    if (binaryObjToWrapper == null)     binaryObjToWrapper=new IdentityHashMap<>();
    BinaryObjectBuilderImpl wrapper=binaryObjToWrapper.get(val);
    if (wrapper == null) {
      wrapper=BinaryObjectBuilderImpl.wrap((BinaryObject)val);
      binaryObjToWrapper.put((BinaryObject)val,wrapper);
    }
    val=wrapper;
  }
  if (val instanceof BinaryObjectBuilderImpl) {
    BinaryObjectBuilderImpl obj=(BinaryObjectBuilderImpl)val;
    Integer posInResArr=objToPos.get(obj);
    if (posInResArr == null) {
      objToPos.put(obj,writer.out().position());
      obj.serializeTo(writer.newWriter(obj.typeId()),this);
    }
 else {
      int handle=writer.out().position() - posInResArr;
      writer.writeByte(GridBinaryMarshaller.HANDLE);
      writer.writeInt(handle);
    }
    return;
  }
  if (val.getClass().isEnum()) {
    String clsName=val.getClass().getName();
    int typeId=writer.context().typeId(clsName);
    String typeName=writer.context().userTypeName(clsName);
    BinaryMetadata meta=new BinaryMetadata(typeId,typeName,null,null,null,true);
    writer.context().updateMetadata(typeId,meta);
    writer.writeByte(GridBinaryMarshaller.ENUM);
    writer.writeInt(typeId);
    writer.writeInt(((Enum)val).ordinal());
    return;
  }
  if (val instanceof Collection) {
    Collection<?> c=(Collection<?>)val;
    writer.writeByte(GridBinaryMarshaller.COL);
    writer.writeInt(c.size());
    byte colType=writer.context().collectionType(c.getClass());
    writer.writeByte(colType);
    for (    Object obj : c)     writeValue(writer,obj);
    return;
  }
  if (val instanceof Map) {
    Map<?,?> map=(Map<?,?>)val;
    writer.writeByte(GridBinaryMarshaller.MAP);
    writer.writeInt(map.size());
    writer.writeByte(writer.context().mapType(map.getClass()));
    for (    Map.Entry<?,?> entry : map.entrySet()) {
      writeValue(writer,entry.getKey());
      writeValue(writer,entry.getValue());
    }
    return;
  }
  Byte flag=BinaryUtils.PLAIN_CLASS_TO_FLAG.get(val.getClass());
  if (flag != null) {
    BinaryUtils.writePlainObject(writer,val);
    return;
  }
  if (val instanceof Object[]) {
    int compTypeId=writer.context().typeId(((Object[])val).getClass().getComponentType().getName());
    if (val instanceof BinaryBuilderEnum[]) {
      writeArray(writer,GridBinaryMarshaller.ENUM_ARR,(Object[])val,compTypeId);
      return;
    }
    if (((Object[])val).getClass().getComponentType().isEnum()) {
      Enum[] enumArr=(Enum[])val;
      writer.writeByte(GridBinaryMarshaller.ENUM_ARR);
      writer.writeInt(compTypeId);
      writer.writeInt(enumArr.length);
      for (      Enum anEnum : enumArr)       writeValue(writer,anEnum);
      return;
    }
    writeArray(writer,GridBinaryMarshaller.OBJ_ARR,(Object[])val,compTypeId);
    return;
  }
  writer.doWriteObject(val);
}
