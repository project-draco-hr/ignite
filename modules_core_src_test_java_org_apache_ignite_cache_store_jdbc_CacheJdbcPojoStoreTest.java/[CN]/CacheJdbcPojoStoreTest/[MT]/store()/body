{
  CacheJdbcPojoStoreFactory<Object,Object> storeFactory=new CacheJdbcPojoStoreFactory<>();
  JdbcType[] storeTypes=new JdbcType[6];
  storeTypes[0]=new JdbcType();
  storeTypes[0].setDatabaseSchema("PUBLIC");
  storeTypes[0].setDatabaseTable("ORGANIZATION");
  storeTypes[0].setKeyType("org.apache.ignite.cache.store.jdbc.model.OrganizationKey");
  storeTypes[0].setKeyFields(new JdbcTypeField(Types.INTEGER,"ID",Integer.class,"id"));
  storeTypes[0].setValueType("org.apache.ignite.cache.store.jdbc.model.Organization");
  storeTypes[0].setValueFields(new JdbcTypeField(Types.INTEGER,"ID",Integer.class,"id"),new JdbcTypeField(Types.VARCHAR,"NAME",String.class,"name"),new JdbcTypeField(Types.VARCHAR,"CITY",String.class,"city"));
  storeTypes[1]=new JdbcType();
  storeTypes[1].setDatabaseSchema("PUBLIC");
  storeTypes[1].setDatabaseTable("PERSON");
  storeTypes[1].setKeyType("org.apache.ignite.cache.store.jdbc.model.PersonKey");
  storeTypes[1].setKeyFields(new JdbcTypeField(Types.INTEGER,"ID",Integer.class,"id"));
  storeTypes[1].setValueType("org.apache.ignite.cache.store.jdbc.model.Person");
  storeTypes[1].setValueFields(new JdbcTypeField(Types.INTEGER,"ID",Integer.class,"id"),new JdbcTypeField(Types.INTEGER,"ORG_ID",Integer.class,"orgId"),new JdbcTypeField(Types.VARCHAR,"NAME",String.class,"name"));
  storeTypes[2]=new JdbcType();
  storeTypes[2].setDatabaseSchema("PUBLIC");
  storeTypes[2].setDatabaseTable("PERSON_COMPLEX");
  storeTypes[2].setKeyType("org.apache.ignite.cache.store.jdbc.model.PersonComplexKey");
  storeTypes[2].setKeyFields(new JdbcTypeField(Types.INTEGER,"ID",int.class,"id"),new JdbcTypeField(Types.INTEGER,"ORG_ID",int.class,"orgId"),new JdbcTypeField(Types.INTEGER,"CITY_ID",int.class,"cityId"));
  storeTypes[2].setValueType("org.apache.ignite.cache.store.jdbc.model.Person");
  storeTypes[2].setValueFields(new JdbcTypeField(Types.INTEGER,"ID",Integer.class,"id"),new JdbcTypeField(Types.INTEGER,"ORG_ID",Integer.class,"orgId"),new JdbcTypeField(Types.VARCHAR,"NAME",String.class,"name"),new JdbcTypeField(Types.INTEGER,"SALARY",Integer.class,"salary"));
  storeTypes[3]=new JdbcType();
  storeTypes[3].setDatabaseSchema("PUBLIC");
  storeTypes[3].setDatabaseTable("TIMESTAMP_ENTRIES");
  storeTypes[3].setKeyType("java.sql.Timestamp");
  storeTypes[3].setKeyFields(new JdbcTypeField(Types.TIMESTAMP,"KEY",Timestamp.class,null));
  storeTypes[3].setValueType("java.lang.Integer");
  storeTypes[3].setValueFields(new JdbcTypeField(Types.INTEGER,"VAL",Integer.class,null));
  storeTypes[4]=new JdbcType();
  storeTypes[4].setDatabaseSchema("PUBLIC");
  storeTypes[4].setDatabaseTable("STRING_ENTRIES");
  storeTypes[4].setKeyType("java.lang.String");
  storeTypes[4].setKeyFields(new JdbcTypeField(Types.VARCHAR,"KEY",String.class,null));
  storeTypes[4].setValueType("java.lang.String");
  storeTypes[4].setValueFields(new JdbcTypeField(Types.VARCHAR,"VAL",Integer.class,null));
  storeTypes[5]=new JdbcType();
  storeTypes[5].setDatabaseSchema("PUBLIC");
  storeTypes[5].setDatabaseTable("UUID_ENTRIES");
  storeTypes[5].setKeyType("java.util.UUID");
  storeTypes[5].setKeyFields(new JdbcTypeField(Types.BINARY,"KEY",UUID.class,null));
  storeTypes[5].setValueType("java.util.UUID");
  storeTypes[5].setValueFields(new JdbcTypeField(Types.BINARY,"VAL",UUID.class,null));
  storeFactory.setTypes(storeTypes);
  storeFactory.setDialect(new H2Dialect());
  CacheJdbcPojoStore<Object,Object> store=storeFactory.create();
  store.setDataSource(JdbcConnectionPool.create(DFLT_CONN_URL,"sa",""));
  return store;
}
