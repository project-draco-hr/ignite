{
switch (type) {
case OP_PRIMARY_PARTITIONS:
{
      UUID nodeId=reader.readObject();
      ClusterNode node=discovery.node(nodeId);
      int[] parts=node != null ? aff.primaryPartitions(node) : U.EMPTY_INTS;
      writer.writeIntArray(parts);
      break;
    }
case OP_BACKUP_PARTITIONS:
{
    UUID nodeId=reader.readObject();
    ClusterNode node=discovery.node(nodeId);
    int[] parts=node != null ? aff.backupPartitions(node) : U.EMPTY_INTS;
    writer.writeIntArray(parts);
    break;
  }
case OP_ALL_PARTITIONS:
{
  UUID nodeId=reader.readObject();
  ClusterNode node=discovery.node(nodeId);
  int[] parts=node != null ? aff.allPartitions(node) : U.EMPTY_INTS;
  writer.writeIntArray(parts);
  break;
}
case OP_AFFINITY_KEY:
{
Object key=reader.readObjectDetached();
writer.writeObject(aff.affinityKey(key));
break;
}
case OP_MAP_KEY_TO_NODE:
{
Object key=reader.readObjectDetached();
ClusterNode node=aff.mapKeyToNode(key);
platformCtx.writeNode(writer,node);
break;
}
case OP_MAP_PARTITION_TO_NODE:
{
int part=reader.readObject();
ClusterNode node=aff.mapPartitionToNode(part);
platformCtx.writeNode(writer,node);
break;
}
case OP_MAP_KEY_TO_PRIMARY_AND_BACKUPS:
{
Object key=reader.readObjectDetached();
platformCtx.writeNodes(writer,aff.mapKeyToPrimaryAndBackups(key));
break;
}
case OP_MAP_PARTITION_TO_PRIMARY_AND_BACKUPS:
{
int part=reader.readObject();
platformCtx.writeNodes(writer,aff.mapPartitionToPrimaryAndBackups(part));
break;
}
case OP_MAP_KEYS_TO_NODES:
{
Collection<Object> keys=PlatformUtils.readCollection(reader);
Map<ClusterNode,Collection<Object>> map=aff.mapKeysToNodes(keys);
writer.writeInt(map.size());
for (Map.Entry<ClusterNode,Collection<Object>> e : map.entrySet()) {
platformCtx.addNode(e.getKey());
writer.writeUuid(e.getKey().id());
writer.writeObject(e.getValue());
}
break;
}
case OP_MAP_PARTITIONS_TO_NODES:
{
Collection<Integer> parts=PlatformUtils.readCollection(reader);
Map<Integer,ClusterNode> map=aff.mapPartitionsToNodes(parts);
writer.writeInt(map.size());
for (Map.Entry<Integer,ClusterNode> e : map.entrySet()) {
platformCtx.addNode(e.getValue());
writer.writeInt(e.getKey());
writer.writeUuid(e.getValue().id());
}
break;
}
default :
super.processInStreamOutStream(type,reader,writer);
}
}
