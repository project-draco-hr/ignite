{
  getTestResources().inject(store);
  GridTestUtils.setFieldValue(store,CacheStore.class,"ses",ses);
  UrlResource metaUrl;
  try {
    metaUrl=new UrlResource(new File(DFLT_MAPPING_CONFIG).toURI().toURL());
  }
 catch (  MalformedURLException e) {
    throw new IgniteCheckedException("Failed to resolve metadata path [err=" + e.getMessage() + ']',e);
  }
  try {
    GenericApplicationContext springCtx=new GenericApplicationContext();
    new XmlBeanDefinitionReader(springCtx).loadBeanDefinitions(metaUrl);
    springCtx.refresh();
    Collection<CacheTypeMetadata> typeMeta=springCtx.getBeansOfType(CacheTypeMetadata.class).values();
    Map<Integer,Map<Object,JdbcCacheStore.EntryMapping>> cacheMappings=new HashMap<>();
    JdbcDialect dialect=store.resolveDialect();
    GridTestUtils.setFieldValue(store,JdbcCacheStore.class,"dialect",dialect);
    Map<Object,JdbcCacheStore.EntryMapping> entryMappings=U.newHashMap(typeMeta.size());
    for (    CacheTypeMetadata type : typeMeta)     entryMappings.put(store.keyTypeId(type.getKeyType()),new JdbcCacheStore.EntryMapping(dialect,type));
    store.prepareBuilders(null,typeMeta);
    cacheMappings.put(null,Collections.unmodifiableMap(entryMappings));
    GridTestUtils.setFieldValue(store,JdbcCacheStore.class,"cacheMappings",cacheMappings);
  }
 catch (  BeansException e) {
    if (X.hasCause(e,ClassNotFoundException.class))     throw new IgniteCheckedException("Failed to instantiate Spring XML application context " + "(make sure all classes used in Spring configuration are present at CLASSPATH) " + "[springUrl=" + metaUrl + ']',e);
 else     throw new IgniteCheckedException("Failed to instantiate Spring XML application context [springUrl=" + metaUrl + ", err="+ e.getMessage()+ ']',e);
  }
}
