{
  Connection conn=DriverManager.getConnection(DFLT_CONN_URL,"sa","");
  Statement stmt=conn.createStatement();
  PreparedStatement orgStmt=conn.prepareStatement("INSERT INTO Organization(id, name, city) VALUES (?, ?, ?)");
  for (int i=0; i < ORGANIZATION_CNT; i++) {
    orgStmt.setInt(1,i);
    orgStmt.setString(2,"name" + i);
    orgStmt.setString(3,"city" + i % 10);
    orgStmt.addBatch();
  }
  orgStmt.executeBatch();
  conn.commit();
  PreparedStatement prnStmt=conn.prepareStatement("INSERT INTO Person(id, org_id, name) VALUES (?, ?, ?)");
  for (int i=0; i < PERSON_CNT; i++) {
    prnStmt.setInt(1,i);
    prnStmt.setInt(2,i % 100);
    prnStmt.setString(3,"name" + i);
    prnStmt.addBatch();
  }
  prnStmt.executeBatch();
  conn.commit();
  U.closeQuiet(stmt);
  U.closeQuiet(conn);
  final Collection<OrganizationKey> orgKeys=new ConcurrentLinkedQueue<>();
  final Collection<PersonKey> prnKeys=new ConcurrentLinkedQueue<>();
  IgniteBiInClosure<Object,Object> c=new CI2<Object,Object>(){
    @Override public void apply(    Object k,    Object v){
      if (k instanceof OrganizationKey && v instanceof Organization)       orgKeys.add((OrganizationKey)k);
 else       if (k instanceof PersonKey && v instanceof Person)       prnKeys.add((PersonKey)k);
    }
  }
;
  store.loadCache(c);
  assertEquals(ORGANIZATION_CNT,orgKeys.size());
  assertEquals(PERSON_CNT,prnKeys.size());
  store.deleteAll(orgKeys);
  store.deleteAll(prnKeys);
  orgKeys.clear();
  prnKeys.clear();
  store.loadCache(c);
  assertTrue(orgKeys.isEmpty());
  assertTrue(prnKeys.isEmpty());
}
