{
  Ignite client=grid(3);
  assertTrue(client.configuration().isClientMode());
  awaitPartitionMapExchange();
  IgniteCache<Object,Object> cache0=ignite(0).cache(null);
  IgniteCache<Object,Object> cache1=ignite(1).cache(null);
  IgniteCache<Object,Object> clientCache=client.cache(null);
  assertTrue(((IgniteCacheProxy)cache0).context().store().configured());
  assertEquals(clientStore,((IgniteCacheProxy)clientCache).context().store().configured());
  List<TransactionConcurrency> tcList=new ArrayList<>();
  tcList.add(null);
  if (atomicityMode() == TRANSACTIONAL) {
    tcList.add(TransactionConcurrency.OPTIMISTIC);
    tcList.add(TransactionConcurrency.PESSIMISTIC);
  }
  log.info("Start test [atomicityMode=" + atomicityMode() + ", locStore="+ locStore+ ", writeBehind="+ writeBehind+ ", nearCache="+ nearCache+ ", clientStore="+ clientStore+ ']');
  for (  TransactionConcurrency tc : tcList) {
    testStoreUpdate(cache0,primaryKey(cache0),tc);
    testStoreUpdate(cache0,backupKey(cache0),tc);
    testStoreUpdate(cache0,nearKey(cache0),tc);
    testStoreUpdate(cache0,primaryKey(cache1),tc);
    testStoreUpdate(clientCache,primaryKey(cache0),tc);
    testStoreUpdate(clientCache,primaryKey(cache1),tc);
  }
}
