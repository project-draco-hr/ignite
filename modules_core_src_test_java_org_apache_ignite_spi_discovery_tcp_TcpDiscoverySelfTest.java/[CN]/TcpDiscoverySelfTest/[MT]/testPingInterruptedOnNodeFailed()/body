{
  try {
    final Ignite pingingNode=startGrid("testPingInterruptedOnNodeFailedPingingNode");
    final Ignite failedNode=startGrid("testPingInterruptedOnNodeFailedFailingNode");
    startGrid("testPingInterruptedOnNodeFailedSimpleNode");
    ((TestTcpDiscoverySpi)failedNode.configuration().getDiscoverySpi()).ignorePingResponse=true;
    final CountDownLatch pingLatch=new CountDownLatch(1);
    final CountDownLatch eventLatch=new CountDownLatch(1);
    final AtomicBoolean pingRes=new AtomicBoolean(true);
    final AtomicBoolean failRes=new AtomicBoolean(false);
    long startTs=System.currentTimeMillis();
    pingingNode.events().localListen(new IgnitePredicate<Event>(){
      @Override public boolean apply(      Event event){
        if (((DiscoveryEvent)event).eventNode().id().equals(failedNode.cluster().localNode().id())) {
          failRes.set(true);
          eventLatch.countDown();
        }
        return true;
      }
    }
,EventType.EVT_NODE_FAILED);
    IgniteInternalFuture<?> pingFut=multithreadedAsync(new Callable<Object>(){
      @Override public Object call() throws Exception {
        pingLatch.countDown();
        pingRes.set(pingingNode.configuration().getDiscoverySpi().pingNode(failedNode.cluster().localNode().id()));
        return null;
      }
    }
,1);
    IgniteInternalFuture<?> failingFut=multithreadedAsync(new Callable<Object>(){
      @Override public Object call() throws Exception {
        pingLatch.await();
        Thread.sleep(3000);
        ((TestTcpDiscoverySpi)failedNode.configuration().getDiscoverySpi()).simulateNodeFailure();
        return null;
      }
    }
,1);
    failingFut.get();
    pingFut.get();
    assertFalse(pingRes.get());
    assertTrue(System.currentTimeMillis() - startTs < pingingNode.configuration().getFailureDetectionTimeout() / 2);
    assertTrue(eventLatch.await(7,TimeUnit.SECONDS));
    assertTrue(failRes.get());
  }
  finally {
    stopAllGrids();
  }
}
