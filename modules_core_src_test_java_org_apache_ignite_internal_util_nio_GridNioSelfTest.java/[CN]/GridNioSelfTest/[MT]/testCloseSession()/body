{
  final AtomicReference<Exception> err=new AtomicReference<>();
  final AtomicReference<GridNioSession> sesRef=new AtomicReference<>();
  final CountDownLatch connectLatch=new CountDownLatch(1);
  GridNioServerListener lsnr=new GridNioServerListenerAdapter(){
    @Override public void onConnected(    GridNioSession ses){
      info("On connected: " + ses);
      sesRef.set(ses);
      connectLatch.countDown();
    }
    @Override public void onDisconnected(    GridNioSession ses,    @Nullable Exception e){
      if (e != null)       err.compareAndSet(null,e);
    }
    @Override public void onMessage(    GridNioSession ses,    Object msg){
      ses.send(msg);
    }
  }
;
  GridNioServer<?> srvr=startServer(PORT,new GridPlainParser(),lsnr);
  try {
    Socket s=createSocket();
    s.connect(new InetSocketAddress(U.getLocalHost(),PORT),1000);
    s.getOutputStream().write(new byte[1]);
    try {
      U.await(connectLatch);
      GridNioSession ses=sesRef.get();
      assertNotNull(ses);
      assertTrue(ses.close().get());
      ses.send(new byte[2]).get();
      fail("Exception must be thrown");
    }
 catch (    Exception e) {
      info("Caught exception: " + e);
      if (!X.hasCause(e,IOException.class)) {
        error("Unexpected exception.",e);
        fail();
      }
    }
 finally {
      s.close();
    }
    assertFalse(sesRef.get().close().get());
  }
  finally {
    srvr.stop();
  }
  assertNull("Unexpected exception on socket close",err.get());
}
