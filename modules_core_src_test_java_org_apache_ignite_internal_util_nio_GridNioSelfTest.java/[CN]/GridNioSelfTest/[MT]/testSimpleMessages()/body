{
  final Collection<GridNioSession> sesSet=new GridConcurrentHashSet<>();
  final AtomicReference<Exception> err=new AtomicReference<>();
  GridNioServerListener lsnr=new GridNioServerListenerAdapter(){
    @Override public void onConnected(    GridNioSession ses){
    }
    @Override public void onDisconnected(    GridNioSession ses,    @Nullable Exception e){
      if (e != null)       err.compareAndSet(null,e);
 else       sesSet.add(ses);
    }
    @Override public void onMessage(    GridNioSession ses,    Object msg){
      ses.send(msg);
    }
  }
;
  GridNioServer<?> srvr=startServer(port,new GridPlainParser(),lsnr);
  try {
    IgniteInternalFuture<?> fut=multithreadedAsync(new Runnable(){
      @Override public void run(){
        byte[] msg=new byte[MSG_SIZE];
        for (int i=0; i < msg.length; i++)         msg[i]=(byte)(i ^ (i * i - 1));
        for (int i=0; i < RECONNECT_MSG_CNT; i++)         validateSendMessage(msg);
      }
    }
,THREAD_CNT);
    fut.get();
    U.sleep(100);
    assertNull("Exception occurred in server",err.get());
    assertEquals("Invalid count of sessions",RECONNECT_MSG_CNT * THREAD_CNT,sesSet.size());
  }
  finally {
    srvr.stop();
  }
}
