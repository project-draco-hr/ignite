{
  GridDhtLocalPartition loc;
  loc=locParts.get(p);
  if (loc != null && loc.state() != EVICTED)   return loc;
  if (!create)   return null;
  lock.writeLock().lock();
  try {
    loc=locParts.get(p);
    boolean belongs=cctx.affinity().localNode(p,topVer);
    if (loc != null && loc.state() == EVICTED) {
      locParts.set(p,loc=null);
      if (!belongs)       throw new GridDhtInvalidPartitionException(p,"Adding entry to evicted partition " + "(often may be caused by inconsistent 'key.hashCode()' implementation) " + "[part=" + p + ", topVer="+ topVer+ ", this.topVer="+ this.topVer+ ']');
    }
    if (loc == null) {
      if (!belongs)       throw new GridDhtInvalidPartitionException(p,"Creating partition which does not belong to " + "local node (often may be caused by inconsistent 'key.hashCode()' implementation) " + "[part=" + p + ", topVer="+ topVer+ ", this.topVer="+ this.topVer+ ']');
      locParts.set(p,loc=new GridDhtLocalPartition(cctx,p,entryFactory));
      if (updateSeq)       this.updateSeq.incrementAndGet();
      if (log.isDebugEnabled())       log.debug("Created local partition: " + loc);
    }
  }
  finally {
    lock.writeLock().unlock();
  }
  return loc;
}
