{
  GridUnsafeMemory mem=new GridUnsafeMemory(0);
  X.println("___ Started");
  Random rnd=new GridRandom();
  for (int i=0; i < 20; i++) {
    GridHadoopJob job=mockJob();
    final GridHadoopTaskContext taskCtx=mockTaskContext(job);
    final GridHadoopMultimap m=new GridHadoopSkipList(job,mem);
    final ConcurrentMap<Integer,Collection<Integer>> mm=new ConcurrentHashMap<>();
    X.println("___ MT");
    multithreaded(new Callable<Object>(){
      @Override public Object call() throws Exception {
        X.println("___ TH in");
        Random rnd=new GridRandom();
        IntWritable key=new IntWritable();
        IntWritable val=new IntWritable();
        GridHadoopMultimap.Adder a=m.startAdding(taskCtx);
        for (int i=0; i < 50000; i++) {
          int k=rnd.nextInt(32000);
          int v=rnd.nextInt();
          key.set(k);
          val.set(v);
          a.write(key,val);
          Collection<Integer> list=mm.get(k);
          if (list == null) {
            list=new ConcurrentLinkedQueue<>();
            Collection<Integer> old=mm.putIfAbsent(k,list);
            if (old != null)             list=old;
          }
          list.add(v);
        }
        a.close();
        X.println("___ TH out");
        return null;
      }
    }
,3 + rnd.nextInt(27));
    GridHadoopTaskInput in=m.input(taskCtx);
    int prevKey=Integer.MIN_VALUE;
    while (in.next()) {
      IntWritable key=(IntWritable)in.key();
      assertTrue(key.get() > prevKey);
      prevKey=key.get();
      Iterator<?> valsIter=in.values();
      Collection<Integer> vals=mm.remove(key.get());
      assertNotNull(vals);
      while (valsIter.hasNext()) {
        IntWritable val=(IntWritable)valsIter.next();
        assertTrue(vals.remove(val.get()));
      }
      assertTrue(vals.isEmpty());
    }
    in.close();
    m.close();
    assertEquals(0,mem.allocatedSize());
  }
}
