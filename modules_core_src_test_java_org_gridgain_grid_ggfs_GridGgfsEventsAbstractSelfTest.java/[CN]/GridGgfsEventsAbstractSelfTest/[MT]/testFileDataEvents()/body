{
  final List<GridEvent> evtList=new ArrayList<>();
  final int evtsCnt=5;
  final CountDownLatch latch=new CountDownLatch(evtsCnt);
  grid(1).events().localListen(lsnr=new IgnitePredicate<GridEvent>(){
    @Override public boolean apply(    GridEvent evt){
      log.info("Received event [evt=" + evt + ']');
      evtList.add(evt);
      latch.countDown();
      return true;
    }
  }
,EVTS_GGFS);
  final GridGgfsPath file=new GridGgfsPath("/file1");
  final int dataSize=1024;
  byte[] buf=new byte[dataSize];
  try (GridGgfsOutputStream os=ggfs.create(file,false)){
    os.write(buf);
  }
   try (GridGgfsInputStream is=ggfs.open(file,256)){
    is.readFully(0,buf);
  }
   assertTrue(latch.await(10,TimeUnit.SECONDS));
  assertEquals(evtsCnt,evtList.size());
  GridGgfsEvent evt=(GridGgfsEvent)evtList.get(0);
  assertEquals(EVT_GGFS_FILE_CREATED,evt.type());
  assertEquals(new GridGgfsPath("/file1"),evt.path());
  evt=(GridGgfsEvent)evtList.get(1);
  assertEquals(EVT_GGFS_FILE_OPENED_WRITE,evt.type());
  assertEquals(new GridGgfsPath("/file1"),evt.path());
  evt=(GridGgfsEvent)evtList.get(2);
  assertEquals(EVT_GGFS_FILE_CLOSED_WRITE,evt.type());
  assertEquals(new GridGgfsPath("/file1"),evt.path());
  assertEquals((long)dataSize,evt.dataSize());
  evt=(GridGgfsEvent)evtList.get(3);
  assertEquals(EVT_GGFS_FILE_OPENED_READ,evt.type());
  assertEquals(new GridGgfsPath("/file1"),evt.path());
  evt=(GridGgfsEvent)evtList.get(4);
  assertEquals(EVT_GGFS_FILE_CLOSED_READ,evt.type());
  assertEquals(new GridGgfsPath("/file1"),evt.path());
  assertEquals((long)dataSize,evt.dataSize());
}
