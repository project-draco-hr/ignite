{
  GridCacheProjection<String,Integer> cache=cache();
  cache.put("key2",1);
  cache.put("key3",3);
  if (txEnabled()) {
    CU.inTx(cache,concurrency,isolation,new CIX1<GridCacheProjection<String,Integer>>(){
      @Override public void applyx(      GridCacheProjection<String,Integer> c) throws GridException {
        c.transformAll(F.asSet("key1","key2","key3"),INCR_CLOS);
      }
    }
);
    assertEquals((Integer)1,cache.get("key1"));
    assertEquals((Integer)2,cache.get("key2"));
    assertEquals((Integer)4,cache.get("key3"));
  }
  cache.transformAll(F.asSet("key1","key2","key3"),RMV_CLOS);
  for (int i=0; i < gridCount(); i++) {
    assertNull(cache(i).peek("key1"));
    assertNull(cache(i).peek("key2"));
    assertNull(cache(i).peek("key3"));
  }
  cache.remove("key1");
  cache.put("key2",1);
  cache.put("key3",3);
  cache.transformAll(F.asMap("key1",INCR_CLOS,"key2",INCR_CLOS,"key3",INCR_CLOS));
  assertEquals((Integer)1,cache.get("key1"));
  assertEquals((Integer)2,cache.get("key2"));
  assertEquals((Integer)4,cache.get("key3"));
}
