{
  final List<String> keys=new ArrayList<>(3);
  for (int i=0; i < 3; i++) {
    while (true) {
      String key=UUID.randomUUID().toString();
      if (grid(0).mapKeyToNode(null,key).equals(grid(0).localNode())) {
        assertTrue(cache(0).putx(key,i));
        keys.add(key);
        break;
      }
    }
  }
  if (cacheMode() == PARTITIONED && gridCount() > 1) {
    for (int i=0; i < 10; i++) {
      while (true) {
        String key=UUID.randomUUID().toString();
        if (!grid(0).mapKeyToNode(null,key).equals(grid(0).localNode())) {
          assertTrue(cache(1).putx(key,i));
          break;
        }
      }
    }
  }
  List<String> subList=keys.subList(1,keys.size());
  info("Key set: " + cache(0).keySet());
  info("Entry set: " + cache(0).entrySet());
  info("Primary entry set: " + cache(0).primaryEntrySet());
  Set<String> primKeys=cache(0).primaryKeySet();
  assertEquals(3,primKeys.size());
  assertTrue(primKeys.containsAll(keys));
  primKeys=cache(0).projection(new P1<GridCacheEntry<String,Integer>>(){
    @Override public boolean apply(    GridCacheEntry<String,Integer> e){
      return !e.getKey().equals(keys.get(0));
    }
  }
).primaryKeySet();
  assertEquals(2,primKeys.size());
  assertTrue(primKeys.containsAll(subList));
  Collection<Integer> primVals=cache(0).primaryValues();
  assertEquals(3,primVals.size());
  assertTrue(primVals.containsAll(F.asList(0,1,2)));
  primVals=cache(0).projection(new P1<GridCacheEntry<String,Integer>>(){
    @Override public boolean apply(    GridCacheEntry<String,Integer> e){
      return !e.getKey().equals(keys.get(0));
    }
  }
).primaryValues();
  assertEquals(2,primVals.size());
  assertTrue(primVals.containsAll(F.asList(1,2)));
  Set<GridCacheEntry<String,Integer>> primEntries=cache(0).primaryEntrySet();
  assertEquals(3,primEntries.size());
  primEntries=cache(0).projection(new P1<GridCacheEntry<String,Integer>>(){
    @Override public boolean apply(    GridCacheEntry<String,Integer> e){
      return !e.getKey().equals(keys.get(0));
    }
  }
).primaryEntrySet();
  assertEquals(2,primEntries.size());
}
