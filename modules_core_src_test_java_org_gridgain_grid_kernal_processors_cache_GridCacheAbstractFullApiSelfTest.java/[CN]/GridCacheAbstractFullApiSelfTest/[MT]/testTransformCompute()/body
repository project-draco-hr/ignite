{
  GridCacheTransformComputeClosure<Integer,String> c=new GridCacheTransformComputeClosure<Integer,String>(){
    @Override public String compute(    Integer val){
      return val == null ? "null" : String.valueOf(val);
    }
    @Override public Integer apply(    Integer val){
      return val == null ? 0 : val + 1;
    }
  }
;
  GridCacheProjection<String,Integer> cache=cache();
  assertEquals("null",cache.transformCompute("k0",c));
  assertEquals((Integer)0,cache.get("k0"));
  assertEquals("0",cache.transformCompute("k0",c));
  assertEquals((Integer)1,cache.get("k0"));
  cache.put("k1",1);
  assertEquals("1",cache.transformCompute("k1",c));
  assertEquals((Integer)2,cache.get("k1"));
  assertEquals("2",cache.transformCompute("k1",c));
  assertEquals((Integer)3,cache.get("k1"));
  c=new GridCacheTransformComputeClosure<Integer,String>(){
    @Override public String compute(    Integer val){
      return null;
    }
    @Override public Integer apply(    Integer val){
      return null;
    }
  }
;
  assertNull(cache.transformCompute("k1",c));
  assertNull(cache.get("k1"));
  for (int i=0; i < gridCount(); i++)   assertNull(cache(i).peek("k1"));
}
