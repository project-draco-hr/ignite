{
  GridCacheProjection<String,Integer> cache=cache();
  GridClosure<Integer,IgniteBiTuple<Integer,String>> c;
  c=new GridClosure<Integer,IgniteBiTuple<Integer,String>>(){
    @Override public IgniteBiTuple<Integer,String> apply(    Integer val){
      return val == null ? new IgniteBiTuple<>(0,"null") : new IgniteBiTuple<>(val + 1,String.valueOf(val));
    }
  }
;
  assertEquals("null",cache.transformAndCompute("k0",c));
  assertEquals((Integer)0,cache.get("k0"));
  assertEquals("0",cache.transformAndCompute("k0",c));
  assertEquals((Integer)1,cache.get("k0"));
  cache.put("k1",1);
  assertEquals("1",cache.transformAndCompute("k1",c));
  assertEquals((Integer)2,cache.get("k1"));
  assertEquals("2",cache.transformAndCompute("k1",c));
  assertEquals((Integer)3,cache.get("k1"));
  c=new GridClosure<Integer,IgniteBiTuple<Integer,String>>(){
    @Override public IgniteBiTuple<Integer,String> apply(    Integer integer){
      return new IgniteBiTuple<>(null,null);
    }
  }
;
  assertNull(cache.transformAndCompute("k1",c));
  assertNull(cache.get("k1"));
  for (int i=0; i < gridCount(); i++)   assertNull(cache(i).peek("k1"));
}
