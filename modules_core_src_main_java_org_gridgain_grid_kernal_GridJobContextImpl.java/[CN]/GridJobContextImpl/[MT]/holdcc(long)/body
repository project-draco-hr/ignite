{
  if (ctx != null) {
    if (job == null)     job=ctx.job().activeJob(jobId);
    if (job != null) {
      job.hold();
      if (timeout > 0 && !job.isDone()) {
        final long endTime=U.currentTimeMillis() + timeout;
        if (endTime > 0) {
          ctx.timeout().addTimeoutObject(new GridTimeoutObject(){
            private final GridUuid id=GridUuid.randomUuid();
            @Override public GridUuid timeoutId(){
              return id;
            }
            @Override public long endTime(){
              return endTime;
            }
            @Override public void onTimeout(){
              try {
                ctx.config().getExecutorService().submit(new Runnable(){
                  @Override public void run(){
                    callcc();
                  }
                }
);
              }
 catch (              RejectedExecutionException e) {
                U.error(log(),"Failed to execute job (will execute synchronously).",e);
                callcc();
              }
            }
          }
);
        }
      }
    }
  }
  return null;
}
