{
  GridTcpDiscoveryVmIpFinder ipFinder=new GridTcpDiscoveryVmIpFinder();
  ipFinder.setAddresses(Arrays.asList("127.0.0.1:" + extPort1,"127.0.0.1:" + extPort2));
  GridTcpDiscoverySpi spi=new GridTcpDiscoverySpi();
  final int locPort;
  final int extPort;
  final int commExtPort;
  final int commLocPort;
  if (getTestGridName(0).equals(gridName)) {
    locPort=locPort1;
    extPort=extPort1;
    commLocPort=commLocPort1;
    commExtPort=commExtPort1;
  }
 else   if (getTestGridName(1).equals(gridName)) {
    locPort=locPort2;
    extPort=extPort2;
    commLocPort=commLocPort2;
    commExtPort=commExtPort2;
  }
 else   throw new IllegalArgumentException("Unknown grid name");
  spi.setIpFinder(ipFinder);
  IgniteConfiguration cfg=super.getConfiguration(gridName);
  spi.setLocalPort(locPort);
  spi.setLocalPortRange(1);
  cfg.setDiscoverySpi(spi);
  cfg.setLocalHost("127.0.0.1");
  cfg.setRestEnabled(false);
  cfg.setMarshaller(new IgniteOptimizedMarshaller(false));
  GridTcpCommunicationSpi commSpi=new GridTcpCommunicationSpi(){
    @Override protected GridCommunicationClient createTcpClient(    ClusterNode node) throws GridException {
      Map<String,Object> attrs=new HashMap<>(node.attributes());
      attrs.remove(createSpiAttributeName(ATTR_PORT));
      ((GridTcpDiscoveryNode)node).setAttributes(attrs);
      return super.createTcpClient(node);
    }
  }
;
  commSpi.setLocalAddress("127.0.0.1");
  commSpi.setLocalPort(commLocPort);
  commSpi.setLocalPortRange(1);
  commSpi.setSharedMemoryPort(-1);
  cfg.setCommunicationSpi(commSpi);
  final Map<InetSocketAddress,? extends Collection<InetSocketAddress>> mp=F.asMap(new InetSocketAddress("127.0.0.1",locPort),F.asList(new InetSocketAddress("127.0.0.1",extPort)),new InetSocketAddress("127.0.0.1",commLocPort),F.asList(new InetSocketAddress("127.0.0.1",commExtPort)));
  cfg.setAddressResolver(new GridAddressResolver(){
    @Override public Collection<InetSocketAddress> getExternalAddresses(    InetSocketAddress addr){
      return mp.get(addr);
    }
  }
);
  return cfg;
}
