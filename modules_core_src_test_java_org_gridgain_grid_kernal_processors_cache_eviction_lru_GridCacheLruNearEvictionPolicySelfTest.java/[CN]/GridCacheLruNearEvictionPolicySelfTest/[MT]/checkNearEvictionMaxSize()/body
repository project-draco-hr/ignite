{
  startGridsMultiThreaded(GRID_COUNT);
  try {
    Random rand=new Random(0);
    int cnt=1000;
    info("Inserting " + cnt + " keys to cache.");
    for (int i=0; i < cnt; i++) {
      GridCache<Integer,String> cache=grid(rand.nextInt(GRID_COUNT)).cache(null);
      int key=i % 500;
      String val=Integer.toString(key);
      cache.put(key,val);
    }
    for (int i=0; i < GRID_COUNT; i++)     assertTrue("Near cache size " + near(i).nearSize() + ", but eviction maximum size "+ EVICTION_MAX_SIZE,near(i).nearSize() <= EVICTION_MAX_SIZE);
    info("Getting " + cnt + " keys from cache.");
    for (int i=0; i < cnt; i++) {
      GridCache<Integer,String> cache=grid(rand.nextInt(GRID_COUNT)).cache(null);
      int key=i % 500;
      String val=cache.get(key);
      assertTrue(val == null || val.equals(Integer.toString(key)));
    }
    for (int i=0; i < GRID_COUNT; i++)     assertTrue("Near cache size " + near(i).nearSize() + ", but eviction maximum size "+ EVICTION_MAX_SIZE,near(i).nearSize() <= EVICTION_MAX_SIZE);
  }
  finally {
    stopAllGrids();
  }
}
