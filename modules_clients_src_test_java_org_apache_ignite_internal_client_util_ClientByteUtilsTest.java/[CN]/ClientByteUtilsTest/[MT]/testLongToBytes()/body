{
  Map<String,Long> map=new LinkedHashMap<>();
  map.put("00-00-00-00-00-00-00-00",0L);
  map.put("00-00-00-00-00-FF-FF-FF",0xFFFFFFL);
  map.put("FF-FF-FF-FF-FF-00-00-01",-0xFFFFFFL);
  map.put("00-00-00-00-3B-9A-CA-00",1000000000L);
  map.put("FF-FF-FF-FF-C4-65-36-00",-1000000000L);
  map.put("00-00-AA-AA-AA-AA-AA-AA",0xAAAAAAAAAAAAL);
  map.put("FF-FF-55-55-55-55-55-56",-0xAAAAAAAAAAAAL);
  map.put("0D-E0-B6-B3-A7-64-00-00",1000000000000000000L);
  map.put("F2-1F-49-4C-58-9C-00-00",-1000000000000000000L);
  map.put("80-00-00-00-00-00-00-00",Long.MIN_VALUE);
  map.put("7F-FF-FF-FF-FF-FF-FF-FF",Long.MAX_VALUE);
  for (  Map.Entry<String,Long> entry : map.entrySet()) {
    byte[] b=asByteArray(entry.getKey());
    Assert.assertArrayEquals(b,longToBytes(entry.getValue()));
    Assert.assertEquals((long)entry.getValue(),bytesToLong(b,0));
    byte[] tmp=new byte[8];
    longToBytes(entry.getValue(),tmp,0);
    Assert.assertArrayEquals(b,tmp);
  }
}
