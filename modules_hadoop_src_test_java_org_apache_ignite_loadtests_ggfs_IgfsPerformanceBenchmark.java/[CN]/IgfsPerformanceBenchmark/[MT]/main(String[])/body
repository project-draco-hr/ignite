{
  final int threadNum=intArgument(args,0,1);
  final int op=intArgument(args,1,OP_WRITE);
  final long fileLen=longArgument(args,2,256 * 1024 * 1024);
  final int bufSize=intArgument(args,3,128 * 1024);
  final String cfgPath=argument(args,4,HADOOP_FS_CFG);
  final String fsPrefix=argument(args,5,FS_PREFIX);
  final short replication=(short)intArgument(args,6,3);
  final Path ggfsHome=new Path(fsPrefix);
  final FileSystem fs=ggfs(ggfsHome,cfgPath);
  final AtomicLong progress=new AtomicLong();
  final AtomicInteger idx=new AtomicInteger();
  System.out.println("Warming up...");
  System.out.println("Finished warm up.");
  if (op == OP_READ) {
    for (int i=0; i < threadNum; i++)     benchmarkWrite(fs,new Path(ggfsHome,"in-" + i),fileLen,bufSize,replication,null);
  }
  long total=0;
  long start=System.currentTimeMillis();
  IgniteInternalFuture<Long> fut=GridTestUtils.runMultiThreadedAsync(new Runnable(){
    @Override public void run(){
      String fileIdx=op == OP_READ ? String.valueOf(idx.getAndIncrement()) : UUID.randomUUID().toString();
      try {
        for (int i=0; i < 200; i++) {
          if (op == OP_WRITE)           benchmarkWrite(fs,new Path(ggfsHome,"out-" + fileIdx),fileLen,bufSize,replication,progress);
 else           benchmarkRead(fs,new Path(ggfsHome,"in-" + fileIdx),bufSize,progress);
        }
        System.out.println("Finished " + (op == OP_WRITE ? "writing" : "reading") + " data.");
      }
 catch (      Exception e) {
        System.out.println("Failed to process stream: " + e);
        e.printStackTrace();
      }
    }
  }
,threadNum,"test-runner");
  while (!fut.isDone()) {
    U.sleep(1000);
    long written=progress.getAndSet(0);
    total+=written;
    int mbytesPerSec=(int)(written / (1024 * 1024));
    System.out.println((op == OP_WRITE ? "Write" : "Read") + " rate [threads=" + threadNum+ ", bufSize="+ bufSize+ ", MBytes/s="+ mbytesPerSec+ ']');
  }
  long now=System.currentTimeMillis();
  System.out.println((op == OP_WRITE ? "Written" : "Read") + " " + total+ " bytes in "+ (now - start)+ "ms, avg write rate is "+ (total * 1000 / ((now - start) * 1024 * 1024))+ "MBytes/s");
  fs.close();
}
