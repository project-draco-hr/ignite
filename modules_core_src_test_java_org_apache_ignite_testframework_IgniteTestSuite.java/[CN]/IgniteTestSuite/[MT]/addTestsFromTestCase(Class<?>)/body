{
  setName(theClass.getName());
  try {
    getTestConstructor(theClass);
  }
 catch (  NoSuchMethodException ex) {
    addTest(warning("Class " + theClass.getName() + " has no public constructor TestCase(String name) or TestCase()"));
    return;
  }
  if (!Modifier.isPublic(theClass.getModifiers()))   addTest(warning("Class " + theClass.getName() + " is not public"));
 else {
    IgnoreDescriptor clsIgnore=IgnoreDescriptor.forClass(theClass);
    Class superCls=theClass;
    int testAdded=0;
    int testSkipped=0;
    LinkedList<Test> addedTests=new LinkedList<>();
    for (List<String> names=new ArrayList<>(); Test.class.isAssignableFrom(superCls); superCls=superCls.getSuperclass()) {
      Method[] methods=MethodSorter.getDeclaredMethods(superCls);
      for (      Method each : methods) {
        AddResult res=addTestMethod(each,names,theClass,clsIgnore);
        if (res.added()) {
          testAdded++;
          addedTests.add(res.test());
        }
 else         testSkipped++;
      }
    }
    if (testAdded == 0 && testSkipped == 0)     addTest(warning("No tests found in " + theClass.getName()));
    for (    Test test : addedTests) {
      if (test instanceof GridAbstractTest) {
        GridAbstractTest test0=(GridAbstractTest)test;
        test0.forceTestCount(addedTests.size());
      }
    }
  }
}
