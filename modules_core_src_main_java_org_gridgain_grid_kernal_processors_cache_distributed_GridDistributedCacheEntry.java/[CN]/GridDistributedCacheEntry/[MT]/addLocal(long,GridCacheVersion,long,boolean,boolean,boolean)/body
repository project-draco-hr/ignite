{
  GridCacheMvccCandidate<K> cand;
  GridCacheMvccCandidate<K> prev;
  GridCacheMvccCandidate<K> owner;
  V val;
synchronized (this) {
    checkObsolete();
    GridCacheMvcc<K> mvcc=mvccExtras();
    if (mvcc == null) {
      mvcc=new GridCacheMvcc<>(cctx);
      mvccExtras(mvcc);
    }
    prev=mvcc.anyOwner();
    boolean emptyBefore=mvcc.isEmpty();
    cand=mvcc.addLocal(this,threadId,ver,timeout,reenter,tx,implicitSingle);
    owner=mvcc.anyOwner();
    boolean emptyAfter=mvcc.isEmpty();
    checkCallbacks(emptyBefore,emptyAfter);
    val=this.val;
    if (emptyAfter)     mvccExtras(null);
  }
  if (cand != null && !cand.reentry())   cctx.mvcc().addNext(cand);
  checkOwnerChanged(prev,owner,val);
  return cand;
}
