{
  final List<GridEvent> evtList=new ArrayList<>();
  final int evtsCnt=3 + 4 + 1;
  final CountDownLatch latch=new CountDownLatch(evtsCnt);
  grid(1).events().localListen(lsnr=new GridPredicate<GridEvent>(){
    @Override public boolean apply(    GridEvent evt){
      log.info("Received event [evt=" + evt + ']');
      evtList.add(evt);
      latch.countDown();
      return true;
    }
  }
,EVTS_GGFS);
  final GridGgfsPath file=new GridGgfsPath("/file1");
  ggfs.create(file,false).close();
  ggfs.create(file,true).close();
  GridTestUtils.assertThrowsWithCause(new Callable<Object>(){
    @Override public Object call() throws Exception {
      ggfs.create(file,false).close();
      return true;
    }
  }
,GridGgfsPathAlreadyExistsException.class);
  assertTrue(latch.await(10,TimeUnit.SECONDS));
  assertEquals(evtsCnt,evtList.size());
  final GridGgfsPath file1=new GridGgfsPath("/file1");
  GridGgfsEvent evt=(GridGgfsEvent)evtList.get(0);
  assertEquals(EVT_GGFS_FILE_CREATED,evt.type());
  assertEquals(file1,evt.path());
  evt=(GridGgfsEvent)evtList.get(1);
  assertEquals(EVT_GGFS_FILE_OPENED_WRITE,evt.type());
  assertEquals(file1,evt.path());
  evt=(GridGgfsEvent)evtList.get(2);
  assertEquals(EVT_GGFS_FILE_CLOSED_WRITE,evt.type());
  assertEquals(file1,evt.path());
  assertEquals(0,evt.dataSize());
  assertOneToOne(evtList.subList(3,8),new P1<GridEvent>(){
    @Override public boolean apply(    GridEvent e){
      GridGgfsEvent e0=(GridGgfsEvent)e;
      return e0.type() == EVT_GGFS_FILE_DELETED && e0.path().equals(file1);
    }
  }
,new P1<GridEvent>(){
    @Override public boolean apply(    GridEvent e){
      GridGgfsEvent e0=(GridGgfsEvent)e;
      return e0.type() == EVT_GGFS_FILE_PURGED && e0.path().equals(file1);
    }
  }
,new P1<GridEvent>(){
    @Override public boolean apply(    GridEvent e){
      GridGgfsEvent e0=(GridGgfsEvent)e;
      return e0.type() == EVT_GGFS_FILE_CREATED && e0.path().equals(file1);
    }
  }
,new P1<GridEvent>(){
    @Override public boolean apply(    GridEvent e){
      GridGgfsEvent e0=(GridGgfsEvent)e;
      return e0.type() == EVT_GGFS_FILE_OPENED_WRITE && e0.path().equals(file1);
    }
  }
,new P1<GridEvent>(){
    @Override public boolean apply(    GridEvent e){
      GridGgfsEvent e0=(GridGgfsEvent)e;
      return e0.type() == EVT_GGFS_FILE_CLOSED_WRITE && e0.path().equals(file1);
    }
  }
);
}
