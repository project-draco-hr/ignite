{
  ctx.checkSecurity(GridSecurityPermission.CACHE_READ);
  if (F.isEmpty(keys))   return Collections.emptyMap();
  GridCacheProjectionImpl<K,V> prj=ctx.projectionPerCall();
  UUID subjId=ctx.subjectIdPerCall(null,prj);
  Map<K,V> vals=new HashMap<>(keys.size(),1.0f);
  if (keyCheck)   validateCacheKeys(keys);
  final IgniteCacheExpiryPolicy expiry=expiryPolicy(prj != null ? prj.expiry() : null);
  boolean success=true;
  for (  K key : keys) {
    if (key == null)     throw new NullPointerException("Null key.");
    GridCacheEntryEx entry=null;
    KeyCacheObject cacheKey=ctx.toCacheKeyObject(key);
    while (true) {
      try {
        entry=swapOrOffheap ? entryEx(cacheKey) : peekEx(cacheKey);
        if (entry != null) {
          CacheObject v=entry.innerGet(null,swapOrOffheap,false,false,true,true,!skipVals,false,subjId,null,taskName,expiry);
          if (v != null) {
            K key0=key;
            Object val=v.value(ctx);
            if (ctx.portableEnabled() && deserializePortable) {
              val=ctx.unwrapPortableIfNeeded(val,false);
              key0=(K)ctx.unwrapPortableIfNeeded(key,false);
            }
            vals.put(key0,(V)val);
          }
 else           success=false;
        }
 else {
          if (!storeEnabled && configuration().isStatisticsEnabled() && !skipVals)           metrics0().onRead(false);
          success=false;
        }
        break;
      }
 catch (      GridCacheEntryRemovedException ignored) {
      }
catch (      GridCacheFilterFailedException ignored) {
        break;
      }
 finally {
        if (entry != null)         ctx.evicts().touch(entry,ctx.affinity().affinityTopologyVersion());
      }
      if (!success && storeEnabled)       break;
    }
  }
  if (success || !storeEnabled) {
    if (!clone)     return vals;
    Map<K,V> map=new GridLeanMap<>();
    for (    Map.Entry<K,V> e : vals.entrySet())     map.put(e.getKey(),ctx.cloneValue(e.getValue()));
    return map;
  }
  return getAllAsync(keys,true,null,false,subjId,taskName,deserializePortable,false,expiry,skipVals).get();
}
