{
  final GridCacheOperation op=invokeMap != null ? TRANSFORM : UPDATE;
  final Collection<? extends K> keys=map != null ? map.keySet() : invokeMap != null ? invokeMap.keySet() : null;
  final Collection<?> vals=map != null ? map.values() : invokeMap != null ? invokeMap.values() : null;
  final boolean writeThrough=ctx.writeThrough();
  final boolean readThrough=ctx.readThrough();
  CacheOperationContext opCtx=ctx.operationContextPerCall();
  final ExpiryPolicy expiry=expiryPerCall();
  final boolean keepBinary=opCtx != null && opCtx.isKeepBinary();
  IgniteInternalFuture fut=asyncOp(new Callable<Object>(){
    @Override public Object call() throws Exception {
      return updateAllInternal(op,keys,vals,invokeArgs,expiry,retval,rawRetval,filter,writeThrough,readThrough,keepBinary);
    }
  }
);
  if (ctx.config().isStatisticsEnabled())   fut.listen(new UpdatePutTimeStatClosure(metrics0(),System.nanoTime()));
  return fut;
}
