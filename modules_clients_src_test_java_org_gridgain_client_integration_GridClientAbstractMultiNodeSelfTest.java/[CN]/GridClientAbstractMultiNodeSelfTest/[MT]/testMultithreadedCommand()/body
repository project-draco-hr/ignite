{
  final GridClientData data=client.data(PARTITIONED_CACHE_NAME);
  final GridClientCompute compute=client.compute();
  final AtomicInteger cnt=new AtomicInteger(0);
  multithreaded(new Callable<Object>(){
    @Override public Object call() throws Exception {
      for (int i=0; i < 20; i++) {
        String key=UUID.randomUUID().toString();
        String val=UUID.randomUUID().toString();
switch (cnt.incrementAndGet() % 4) {
case 0:
{
            assertTrue(data.put(key,val));
            assertEquals(val,data.get(key));
            assertTrue(data.remove(key));
            break;
          }
case 1:
{
          assertNotNull(data.metrics());
          break;
        }
case 2:
{
        String nodeId=compute.execute(TestTask.class.getName(),null);
        assertNotNull(nodeId);
        assertNotNull(compute.refreshNode(UUID.fromString(nodeId),true,true));
        break;
      }
case 3:
{
      assertEquals(NODES_CNT,compute.refreshTopology(true,true).size());
      break;
    }
}
}
return null;
}
}
,50,"multithreaded-client-access");
}
