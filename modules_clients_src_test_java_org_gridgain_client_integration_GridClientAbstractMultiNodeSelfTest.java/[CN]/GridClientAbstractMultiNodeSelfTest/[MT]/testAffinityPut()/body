{
  Thread.sleep(2 * TOP_REFRESH_FREQ);
  assertEquals(NODES_CNT,client.compute().refreshTopology(false,false).size());
  Map<UUID,Ignite> gridsByLocNode=new HashMap<>(NODES_CNT);
  GridClientData partitioned=client.data(PARTITIONED_CACHE_NAME);
  GridClientCompute compute=client.compute();
  for (int i=0; i < NODES_CNT; i++)   gridsByLocNode.put(grid(i).localNode().id(),grid(i));
  for (int i=0; i < 100; i++) {
    String key="key" + i;
    UUID primaryNodeId=grid(0).mapKeyToNode(PARTITIONED_CACHE_NAME,key).id();
    assertEquals("Affinity mismatch for key: " + key,primaryNodeId,partitioned.affinity(key));
    assertEquals(primaryNodeId,partitioned.affinity(key));
    partitioned.put(key,"val" + key);
    for (    Map.Entry<UUID,Ignite> entry : gridsByLocNode.entrySet()) {
      Object val=entry.getValue().cache(PARTITIONED_CACHE_NAME).peek(key);
      if (primaryNodeId.equals(entry.getKey()))       assertEquals("val" + key,val);
 else       assertNull(val);
    }
  }
  for (int i=100; i < 200; i++) {
    String pinnedKey="key" + i;
    UUID primaryNodeId=grid(0).mapKeyToNode(PARTITIONED_CACHE_NAME,pinnedKey).id();
    UUID pinnedNodeId=F.first(F.view(gridsByLocNode.keySet(),F.notEqualTo(primaryNodeId)));
    GridClientNode node=compute.node(pinnedNodeId);
    partitioned.pinNodes(node).put(pinnedKey,"val" + pinnedKey);
    for (    Map.Entry<UUID,Ignite> entry : gridsByLocNode.entrySet()) {
      Object val=entry.getValue().cache(PARTITIONED_CACHE_NAME).peek(pinnedKey);
      if (primaryNodeId.equals(entry.getKey()) || pinnedNodeId.equals(entry.getKey()))       assertEquals("val" + pinnedKey,val);
 else       assertNull(val);
    }
  }
}
