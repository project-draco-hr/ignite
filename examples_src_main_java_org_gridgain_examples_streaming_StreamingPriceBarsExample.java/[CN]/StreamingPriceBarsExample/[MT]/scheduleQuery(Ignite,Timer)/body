{
  TimerTask task=new TimerTask(){
    @Override public void run(){
      final GridStreamer streamer=g.streamer("priceBars");
      try {
        Collection<Bar> bars=streamer.context().reduce(new IgniteClosure<GridStreamerContext,Collection<Bar>>(){
          @Override public Collection<Bar> apply(          GridStreamerContext ctx){
            Collection<Bar> values=ctx.<String,Bar>localSpace().values();
            Collection<Bar> res=new ArrayList<>(values.size());
            for (            Bar bar : values)             res.add(bar.copy());
            return res;
          }
        }
,new IgniteReducer<Collection<Bar>,Collection<Bar>>(){
          private final Collection<Bar> res=new ArrayList<>();
          @Override public boolean collect(          @Nullable Collection<Bar> col){
            res.addAll(col);
            return true;
          }
          @Override public Collection<Bar> reduce(){
            return res;
          }
        }
);
        for (        Bar bar : bars)         System.out.println(bar.toString());
        System.out.println("-----------------");
      }
 catch (      GridException e) {
        e.printStackTrace();
      }
    }
  }
;
  timer.schedule(task,2000,2000);
  return task;
}
