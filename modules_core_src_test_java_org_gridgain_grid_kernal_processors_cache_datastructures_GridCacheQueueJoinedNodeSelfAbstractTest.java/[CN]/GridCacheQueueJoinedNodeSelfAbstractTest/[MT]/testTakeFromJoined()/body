{
  String queueName=UUID.randomUUID().toString();
  GridCacheQueue<Integer> queue=grid(0).cache(null).dataStructures().queue(queueName,0,true,true);
  assertNotNull(queue);
  assertTrue(queue.isEmpty());
  PutJob putJob=new PutJob(queueName);
  GridCompute comp=compute(grid(0).forLocal()).enableAsync();
  comp.run(putJob);
  GridFuture<?> fut=comp.future();
  Collection<GridFuture<?>> futs=new ArrayList<>(GRID_CNT - 1);
  Collection<TakeJob> jobs=new ArrayList<>(GRID_CNT - 1);
  int itemsLeft=ITEMS_CNT;
  for (int i=1; i < GRID_CNT; i++) {
    int cnt=ITEMS_CNT / (GRID_CNT - 1);
    TakeJob job=new TakeJob(queueName,cnt,10);
    jobs.add(job);
    comp=compute(grid(i).forLocal()).enableAsync();
    comp.call(job);
    futs.add(comp.future());
    itemsLeft-=cnt;
  }
  assertEquals("Not all items will be polled",0,itemsLeft);
  for (  TakeJob job : jobs)   job.awaitItems();
  log.info("Start one more grid.");
  Grid joined=startGrid(GRID_CNT);
  TakeJob joinedJob=new TakeJob(queueName,1,1);
  jobs.add(joinedJob);
  Integer polled=forLocal(joined).call(joinedJob);
  assertNotNull("Joined node should poll item",polled);
  info(">>> Joined node polled " + polled);
  for (  GridFuture<?> f : futs)   f.cancel();
  putJob.stop(true);
  fut.get();
  for (  TakeJob job : jobs)   job.awaitDone();
}
