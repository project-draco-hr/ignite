{
  String queueName=UUID.randomUUID().toString();
  GridCacheQueue<Integer> queue=grid(0).cache(null).dataStructures().queue(queueName,0,true,true);
  assertTrue(queue.isEmpty());
  GridFuture<?> fut=grid(0).forLocal().compute().run(new PutJob(queueName));
  Collection<GridFuture<?>> futs=new ArrayList<>(GRID_CNT - 1);
  Collection<TakeJob> jobs=new ArrayList<>(GRID_CNT - 1);
  int itemsLeft=ITEMS_CNT;
  for (int i=1; i < GRID_CNT; i++) {
    int cnt=ITEMS_CNT / (GRID_CNT - 1);
    TakeJob job=new TakeJob(queueName,cnt,10);
    jobs.add(job);
    futs.add(grid(i).forLocal().compute().call(job));
    itemsLeft-=cnt;
  }
  assertEquals("Not all items will be polled",0,itemsLeft);
  for (  TakeJob job : jobs)   job.awaitItems();
  Grid joined=startGrid(GRID_CNT);
  Integer polled=joined.forLocal().compute().call(new TakeJob(queueName,1,1)).get();
  assertNotNull("Joined node should poll item",polled);
  info(">>> Joined node polled " + polled);
  for (  GridFuture<?> f : futs)   f.cancel();
  fut.cancel();
}
