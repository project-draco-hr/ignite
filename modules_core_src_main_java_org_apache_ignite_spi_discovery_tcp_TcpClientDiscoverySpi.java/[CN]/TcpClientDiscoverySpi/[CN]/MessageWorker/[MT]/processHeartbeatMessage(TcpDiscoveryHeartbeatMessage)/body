{
  if (leaveLatch != null)   return;
  if (getLocalNodeId().equals(msg.creatorNodeId())) {
    if (msg.senderNodeId() == null) {
      Socket sock0=sock;
      if (sock0 != null) {
        UUID nodeId=ignite.configuration().getNodeId();
        msg.setMetrics(nodeId,metricsProvider.metrics());
        msg.setCacheMetrics(nodeId,metricsProvider.cacheMetrics());
        try {
          writeToSocket(sock0,msg);
          if (log.isDebugEnabled())           log.debug("Heartbeat message sent [sock=" + sock0 + ", msg="+ msg+ ']');
        }
 catch (        IOException|IgniteCheckedException e) {
          if (log.isDebugEnabled())           U.error(log,"Failed to send heartbeat message [sock=" + sock0 + ", msg="+ msg+ ']',e);
          U.closeQuiet(sock0);
          sock=null;
          interrupt();
        }
      }
 else       if (log.isDebugEnabled())       log.debug("Failed to send heartbeat message (node is disconnected): " + msg);
    }
 else     if (log.isDebugEnabled())     log.debug("Received heartbeat response: " + msg);
  }
 else {
    long tstamp=U.currentTimeMillis();
    if (msg.hasMetrics()) {
      for (      Map.Entry<UUID,MetricsSet> e : msg.metrics().entrySet()) {
        UUID nodeId=e.getKey();
        MetricsSet metricsSet=e.getValue();
        Map<Integer,CacheMetrics> cacheMetrics=msg.hasCacheMetrics() ? msg.cacheMetrics().get(nodeId) : Collections.<Integer,CacheMetrics>emptyMap();
        updateMetrics(nodeId,metricsSet.metrics(),cacheMetrics,tstamp);
        for (        T2<UUID,ClusterMetrics> t : metricsSet.clientMetrics())         updateMetrics(t.get1(),t.get2(),cacheMetrics,tstamp);
      }
    }
  }
}
