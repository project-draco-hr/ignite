{
  IgfsConfiguration igfsCfg=new IgfsConfiguration();
  igfsCfg.setDataCacheName("dataCache");
  igfsCfg.setMetaCacheName("metaCache");
  igfsCfg.setName(IGFS_PRIMARY);
  igfsCfg.setBlockSize(512);
  igfsCfg.setDefaultMode(PRIMARY);
  igfsCfg.setPrefetchBlocks(1);
  igfsCfg.setSequentialReadsBeforePrefetch(Integer.MAX_VALUE);
  igfsCfg.setSecondaryFileSystem(secondaryFs);
  Map<String,IgfsMode> pathModes=new HashMap<>();
  pathModes.put(FILE_RMT.toString(),DUAL_SYNC);
  igfsCfg.setPathModes(pathModes);
  CacheConfiguration dataCacheCfg=defaultCacheConfiguration();
  dataCacheCfg.setName("dataCache");
  dataCacheCfg.setCacheMode(PARTITIONED);
  dataCacheCfg.setDistributionMode(CacheDistributionMode.PARTITIONED_ONLY);
  dataCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);
  dataCacheCfg.setAtomicityMode(TRANSACTIONAL);
  evictPlc=new CacheIgfsPerBlockLruEvictionPolicy();
  dataCacheCfg.setEvictionPolicy(evictPlc);
  dataCacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(128));
  dataCacheCfg.setBackups(0);
  dataCacheCfg.setQueryIndexEnabled(false);
  CacheConfiguration metaCacheCfg=defaultCacheConfiguration();
  metaCacheCfg.setName("metaCache");
  metaCacheCfg.setCacheMode(REPLICATED);
  metaCacheCfg.setDistributionMode(CacheDistributionMode.PARTITIONED_ONLY);
  metaCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);
  metaCacheCfg.setQueryIndexEnabled(false);
  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);
  IgniteConfiguration cfg=new IgniteConfiguration();
  cfg.setGridName("grid-primary");
  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();
  discoSpi.setIpFinder(new TcpDiscoveryVmIpFinder(true));
  cfg.setDiscoverySpi(discoSpi);
  cfg.setCacheConfiguration(dataCacheCfg,metaCacheCfg);
  cfg.setIgfsConfiguration(igfsCfg);
  cfg.setLocalHost("127.0.0.1");
  cfg.setConnectorConfiguration(null);
  Ignite g=G.start(cfg);
  igfsPrimary=(IgfsImpl)g.fileSystem(IGFS_PRIMARY);
  dataCache=igfsPrimary.context().kernalContext().cache().internalCache(igfsPrimary.context().configuration().getDataCacheName());
}
