{
  try {
    final Ignite g=startGrid(0);
    int max=10;
    policy(0).setMaxSize(max);
    final Random rand=new Random();
    int keys=31;
    final String[] t=new String[keys];
    for (int i=0; i < t.length; i++)     t[i]=Integer.toString(i);
    multithreaded(new Callable(){
      @Nullable @Override public Object call(){
        int runs=3000;
        for (int i=0; i < runs; i++) {
          boolean rmv=rand.nextBoolean();
          int j=rand.nextInt(t.length);
          if (rmv)           g.cache(null).remove(t[j]);
 else           g.cache(null).put(t[j],t[j]);
          if (i != 0 && i % 1000 == 0)           info("Stats [cntr=" + i + ", total="+ runs+ ']');
        }
        return null;
      }
    }
,10);
    int size=g.cache(null).size();
    assertTrue("Unexpected cache size [size=" + size + ", max="+ max+ ']',size <= max);
    info(policy(0));
  }
  finally {
    stopAllGrids();
  }
}
