{
  try {
    GridCacheContext<K,V> cctx=cacheContext(ctx);
    if (cctx == null)     return;
    final CacheContinuousQueryEntry entry=evt.entry();
    if (loc) {
      if (!locCache) {
        Collection<CacheEntryEvent<? extends K,? extends V>> evts=handleEvent(ctx,entry);
        if (!evts.isEmpty()) {
          locLsnr.onUpdated(evts);
          if (!internal && !skipPrimaryCheck)           sendBackupAcknowledge(ackBuf.onAcknowledged(entry),routineId,ctx);
        }
      }
 else {
        if (!entry.isFiltered())         locLsnr.onUpdated(F.<CacheEntryEvent<? extends K,? extends V>>asList(evt));
      }
    }
 else {
      if (!entry.isFiltered())       prepareEntry(cctx,nodeId,entry);
      CacheContinuousQueryEntry e=handleEntry(entry);
      if (e != null)       ctx.continuous().addNotification(nodeId,routineId,entry,topic,sync,true);
    }
  }
 catch (  ClusterTopologyCheckedException ex) {
    if (log.isDebugEnabled())     log.debug("Failed to send event notification to node, node left cluster " + "[node=" + nodeId + ", err="+ ex+ ']');
  }
catch (  IgniteCheckedException ex) {
    U.error(ctx.log(getClass()),"Failed to send event notification to node: " + nodeId,ex);
  }
  if (recordIgniteEvt && notify) {
    ctx.event().record(new CacheQueryReadEvent<>(ctx.discovery().localNode(),"Continuous query executed.",EVT_CACHE_QUERY_OBJECT_READ,CacheQueryType.CONTINUOUS.name(),cacheName,null,null,null,getEventFilter() instanceof CacheEntryEventSerializableFilter ? (CacheEntryEventSerializableFilter)getEventFilter() : null,null,nodeId,taskName(),evt.getKey(),evt.getValue(),evt.getOldValue(),null));
  }
}
