{
  if (F.isEmpty(keys))   return new GridFinishedFuture<Collection<GridCacheEntryInfo>>(Collections.<GridCacheEntryInfo>emptyList());
  String taskName0=cctx.kernalContext().job().currentTaskName();
  if (taskName0 == null)   taskName0=cctx.kernalContext().task().resolveTaskName(taskNameHash);
  final String taskName=taskName0;
  GridCompoundFuture<Boolean,Boolean> txFut=null;
  ClusterNode readerNode=cctx.discovery().node(reader);
  if (readerNode != null && !readerNode.isLocal() && cctx.discovery().cacheNearNode(readerNode,cctx.name())) {
    for (    Map.Entry<KeyCacheObject,Boolean> k : keys.entrySet()) {
      while (true) {
        GridDhtCacheEntry e=cache().entryExx(k.getKey(),topVer);
        try {
          if (e.obsolete())           continue;
          boolean addReader=(!e.deleted() && k.getValue() && !skipVals);
          if (addReader)           e.unswap(false);
          IgniteInternalFuture<Boolean> f=addReader ? e.addReader(reader,msgId,topVer) : null;
          if (f != null) {
            if (txFut == null)             txFut=new GridCompoundFuture<>(CU.boolReducer());
            txFut.add(f);
          }
          break;
        }
 catch (        IgniteCheckedException err) {
          return new GridFinishedFuture<>(err);
        }
catch (        GridCacheEntryRemovedException ignore) {
          if (log.isDebugEnabled())           log.debug("Got removed entry when getting a DHT value: " + e);
        }
 finally {
          cctx.evicts().touch(e,topVer);
        }
      }
    }
    if (txFut != null)     txFut.markInitialized();
  }
  IgniteInternalFuture<Map<KeyCacheObject,T2<CacheObject,GridCacheVersion>>> fut;
  if (txFut == null || txFut.isDone()) {
    if (tx == null) {
      fut=cache().getDhtAllAsync(keys.keySet(),readThrough,subjId,taskName,expiryPlc,skipVals,true);
    }
 else {
      fut=tx.getAllAsync(cctx,null,keys.keySet(),false,skipVals,true,!readThrough,false);
    }
  }
 else {
    fut=new GridEmbeddedFuture<>(txFut,new C2<Boolean,Exception,IgniteInternalFuture<Map<KeyCacheObject,T2<CacheObject,GridCacheVersion>>>>(){
      @Override public IgniteInternalFuture<Map<KeyCacheObject,T2<CacheObject,GridCacheVersion>>> apply(      Boolean b,      Exception e){
        if (e != null)         throw new GridClosureException(e);
        if (tx == null) {
          return cache().getDhtAllAsync(keys.keySet(),readThrough,subjId,taskName,expiryPlc,skipVals,true);
        }
 else {
          return tx.getAllAsync(cctx,null,keys.keySet(),false,skipVals,true,!readThrough,false);
        }
      }
    }
);
  }
  if (fut.isDone()) {
    if (fut.error() != null)     onDone(fut.error());
 else     return new GridFinishedFuture<>(toEntryInfos(fut.result()));
  }
  return new GridEmbeddedFuture<>(new C2<Map<KeyCacheObject,T2<CacheObject,GridCacheVersion>>,Exception,Collection<GridCacheEntryInfo>>(){
    @Override public Collection<GridCacheEntryInfo> apply(    Map<KeyCacheObject,T2<CacheObject,GridCacheVersion>> map,    Exception e){
      if (e != null) {
        onDone(e);
        return Collections.emptyList();
      }
 else       return toEntryInfos(map);
    }
  }
,fut);
}
