{
  GridDhtFuture<Object> fut=cctx.dht().dhtPreloader().request(keys.keySet(),topVer);
  if (!F.isEmpty(fut.invalidPartitions()))   retries.addAll(fut.invalidPartitions());
  add(new GridEmbeddedFuture<>(new IgniteBiClosure<Object,Exception,Collection<GridCacheEntryInfo<K,V>>>(){
    @Override public Collection<GridCacheEntryInfo<K,V>> apply(    Object o,    Exception e){
      if (e != null) {
        if (log.isDebugEnabled())         log.debug("Failed to request keys from preloader [keys=" + keys + ", err="+ e+ ']');
        onDone(e);
      }
      LinkedHashMap<K,Boolean> mappedKeys=U.newLinkedHashMap(keys.size());
      for (      Map.Entry<? extends K,Boolean> key : keys.entrySet()) {
        int part=cctx.affinity().partition(key.getKey());
        if (!retries.contains(part)) {
          if (!map(key.getKey(),parts))           retries.add(part);
 else           mappedKeys.put(key.getKey(),key.getValue());
        }
      }
      add(getAsync(mappedKeys));
      return Collections.emptyList();
    }
  }
,fut));
}
