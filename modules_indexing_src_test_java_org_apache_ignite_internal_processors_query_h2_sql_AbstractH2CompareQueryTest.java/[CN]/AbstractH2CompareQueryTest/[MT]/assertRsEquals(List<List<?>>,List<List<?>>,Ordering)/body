{
  assertEquals("Rows count has to be equal.",rs1.size(),rs2.size());
switch (ordering) {
case ORDERED:
    for (int rowNum=0; rowNum < rs1.size(); rowNum++) {
      List<?> row1=rs1.get(rowNum);
      List<?> row2=rs2.get(rowNum);
      assertEquals("Columns count have to be equal.",row1.size(),row2.size());
      for (int colNum=0; colNum < row1.size(); colNum++)       assertEquals("Row=" + rowNum + ", column="+ colNum,row1.get(colNum),row2.get(colNum));
    }
  break;
case RANDOM:
TreeMap<String,Integer> rowsWithCnt1=extractUniqueRowsWithCounts(rs1);
TreeMap<String,Integer> rowsWithCnt2=extractUniqueRowsWithCounts(rs2);
assertEquals("Unique rows count has to be equal.",rowsWithCnt1.size(),rowsWithCnt2.size());
X.println("Result size: " + rowsWithCnt1.size());
Iterator<Map.Entry<String,Integer>> iter1=rowsWithCnt1.entrySet().iterator();
Iterator<Map.Entry<String,Integer>> iter2=rowsWithCnt2.entrySet().iterator();
for (; ; ) {
if (!iter1.hasNext()) {
assertFalse(iter2.hasNext());
break;
}
assertTrue(iter2.hasNext());
Map.Entry<String,Integer> e1=iter1.next();
Map.Entry<String,Integer> e2=iter2.next();
assertEquals(e1.getKey(),e2.getKey());
assertEquals(e1.getValue(),e2.getValue());
}
break;
default :
throw new IllegalStateException();
}
}
