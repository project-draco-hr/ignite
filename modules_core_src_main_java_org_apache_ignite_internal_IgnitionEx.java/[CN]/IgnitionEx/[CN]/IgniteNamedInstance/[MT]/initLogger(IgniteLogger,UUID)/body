{
  try {
    Exception log4jInitErr=null;
    if (cfgLog == null) {
      Class<?> log4jCls;
      try {
        log4jCls=Class.forName("org.apache.ignite.logger.log4j.IgniteLog4jLogger");
      }
 catch (      ClassNotFoundException|NoClassDefFoundError ignored) {
        log4jCls=null;
      }
      if (log4jCls != null) {
        try {
          URL url=U.resolveGridGainUrl("config/ignite-log4j.xml");
          if (url == null) {
            File cfgFile=new File("config/ignite-log4j.xml");
            if (!cfgFile.exists())             cfgFile=new File("../config/ignite-log4j.xml");
            if (cfgFile.exists()) {
              try {
                url=cfgFile.toURI().toURL();
              }
 catch (              MalformedURLException ignore) {
              }
            }
          }
          if (url != null) {
            boolean configured=(Boolean)log4jCls.getMethod("isConfigured").invoke(null);
            if (configured)             url=null;
          }
          if (url != null) {
            Constructor<?> ctor=log4jCls.getConstructor(URL.class);
            cfgLog=(IgniteLogger)ctor.newInstance(url);
          }
 else           cfgLog=(IgniteLogger)log4jCls.newInstance();
        }
 catch (        Exception e) {
          log4jInitErr=e;
        }
      }
      if (log4jCls == null || log4jInitErr != null)       cfgLog=new JavaLogger();
    }
    if (cfgLog instanceof LoggerNodeIdAware)     ((LoggerNodeIdAware)cfgLog).setNodeId(nodeId);
    if (log4jInitErr != null)     U.warn(cfgLog,"Failed to initialize IgniteLog4jLogger (falling back to standard java logging): " + log4jInitErr.getCause());
    return cfgLog;
  }
 catch (  Exception e) {
    throw new IgniteCheckedException("Failed to create logger.",e);
  }
}
