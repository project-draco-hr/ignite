{
  CommunicationSpi commSpi=cfg.getCommunicationSpi();
  DiscoverySpi discoSpi=cfg.getDiscoverySpi();
  EventStorageSpi evtSpi=cfg.getEventStorageSpi();
  CollisionSpi colSpi=cfg.getCollisionSpi();
  DeploymentSpi deploySpi=cfg.getDeploymentSpi();
  CheckpointSpi[] cpSpi=cfg.getCheckpointSpi();
  FailoverSpi[] failSpi=cfg.getFailoverSpi();
  LoadBalancingSpi[] loadBalancingSpi=cfg.getLoadBalancingSpi();
  SwapSpaceSpi swapspaceSpi=cfg.getSwapSpaceSpi();
  IndexingSpi indexingSpi=cfg.getIndexingSpi();
  if (commSpi == null)   commSpi=new TcpCommunicationSpi();
  if (discoSpi == null)   discoSpi=new TcpDiscoverySpi();
  if (discoSpi instanceof TcpDiscoverySpi) {
    TcpDiscoverySpi tcpDisco=(TcpDiscoverySpi)discoSpi;
    if (tcpDisco.getIpFinder() == null)     tcpDisco.setIpFinder(new TcpDiscoveryMulticastIpFinder());
  }
  if (evtSpi == null)   evtSpi=new MemoryEventStorageSpi();
  if (colSpi == null)   colSpi=new NoopCollisionSpi();
  if (deploySpi == null)   deploySpi=new LocalDeploymentSpi();
  if (cpSpi == null)   cpSpi=new CheckpointSpi[]{new NoopCheckpointSpi()};
  if (failSpi == null)   failSpi=new FailoverSpi[]{new AlwaysFailoverSpi()};
  if (loadBalancingSpi == null)   loadBalancingSpi=new LoadBalancingSpi[]{new RoundRobinLoadBalancingSpi()};
  if (swapspaceSpi == null) {
    boolean needSwap=false;
    CacheConfiguration[] caches=cfg.getCacheConfiguration();
    if (caches != null) {
      for (      CacheConfiguration c : caches) {
        if (c.isSwapEnabled()) {
          needSwap=true;
          break;
        }
      }
    }
    swapspaceSpi=needSwap ? new FileSwapSpaceSpi() : new NoopSwapSpaceSpi();
  }
  if (indexingSpi == null)   indexingSpi=new NoopIndexingSpi();
  myCfg.setCommunicationSpi(commSpi);
  myCfg.setDiscoverySpi(discoSpi);
  myCfg.setCheckpointSpi(cpSpi);
  myCfg.setEventStorageSpi(evtSpi);
  myCfg.setDeploymentSpi(deploySpi);
  myCfg.setFailoverSpi(failSpi);
  myCfg.setCollisionSpi(colSpi);
  myCfg.setLoadBalancingSpi(loadBalancingSpi);
  myCfg.setSwapSpaceSpi(swapspaceSpi);
  myCfg.setIndexingSpi(indexingSpi);
  if (!singleGrid) {
    ensureMultiInstanceSupport(deploySpi);
    ensureMultiInstanceSupport(commSpi);
    ensureMultiInstanceSupport(discoSpi);
    ensureMultiInstanceSupport(cpSpi);
    ensureMultiInstanceSupport(evtSpi);
    ensureMultiInstanceSupport(colSpi);
    ensureMultiInstanceSupport(failSpi);
    ensureMultiInstanceSupport(loadBalancingSpi);
    ensureMultiInstanceSupport(swapspaceSpi);
  }
}
