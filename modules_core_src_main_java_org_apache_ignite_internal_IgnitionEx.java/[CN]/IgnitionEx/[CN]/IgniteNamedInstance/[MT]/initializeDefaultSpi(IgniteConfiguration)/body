{
  if (cfg.getDiscoverySpi() == null)   cfg.setDiscoverySpi(new TcpDiscoverySpi());
  if (cfg.getDiscoverySpi() instanceof TcpDiscoverySpi) {
    TcpDiscoverySpi tcpDisco=(TcpDiscoverySpi)cfg.getDiscoverySpi();
    if (tcpDisco.getIpFinder() == null)     tcpDisco.setIpFinder(new TcpDiscoveryMulticastIpFinder());
  }
  if (cfg.getCommunicationSpi() == null)   cfg.setCommunicationSpi(new TcpCommunicationSpi());
  if (cfg.getDeploymentSpi() == null)   cfg.setDeploymentSpi(new LocalDeploymentSpi());
  if (cfg.getEventStorageSpi() == null)   cfg.setEventStorageSpi(new MemoryEventStorageSpi());
  if (cfg.getCheckpointSpi() == null)   cfg.setCheckpointSpi(new NoopCheckpointSpi());
  if (cfg.getCollisionSpi() == null)   cfg.setCollisionSpi(new NoopCollisionSpi());
  if (cfg.getFailoverSpi() == null)   cfg.setFailoverSpi(new AlwaysFailoverSpi());
  if (cfg.getLoadBalancingSpi() == null)   cfg.setLoadBalancingSpi(new RoundRobinLoadBalancingSpi());
 else {
    Collection<LoadBalancingSpi> spis=new ArrayList<>();
    boolean dfltLoadBalancingSpi=false;
    for (    LoadBalancingSpi spi : cfg.getLoadBalancingSpi()) {
      spis.add(spi);
      if (spi instanceof RoundRobinLoadBalancingSpi) {
        dfltLoadBalancingSpi=true;
        break;
      }
    }
    if (!dfltLoadBalancingSpi)     spis.add(new RoundRobinLoadBalancingSpi());
    cfg.setLoadBalancingSpi(spis.toArray(new LoadBalancingSpi[spis.size()]));
  }
  if (cfg.getIndexingSpi() == null)   cfg.setIndexingSpi(new NoopIndexingSpi());
  if (cfg.getSwapSpaceSpi() == null) {
    boolean needSwap=false;
    if (cfg.getCacheConfiguration() != null && !Boolean.TRUE.equals(cfg.isClientMode())) {
      for (      CacheConfiguration c : cfg.getCacheConfiguration()) {
        if (c.isSwapEnabled()) {
          needSwap=true;
          break;
        }
      }
    }
    cfg.setSwapSpaceSpi(needSwap ? new FileSwapSpaceSpi() : new NoopSwapSpaceSpi());
  }
}
