{
  Object val;
  int schemaOffset=PortablePrimitives.readInt(arr,start + GridPortableMarshaller.SCHEMA_OR_RAW_OFF_POS);
  short flags=PortablePrimitives.readShort(arr,start + GridPortableMarshaller.FLAGS_POS);
  int fieldOffsetSize=PortableUtils.fieldOffsetSize(flags);
  int fieldOffsetPos=start + schemaOffset + order * (4 + fieldOffsetSize) + 4;
  int fieldPos;
  if (fieldOffsetSize == PortableUtils.OFFSET_1)   fieldPos=start + (int)PortablePrimitives.readByte(arr,fieldOffsetPos) & 0xFF;
 else   if (fieldOffsetSize == PortableUtils.OFFSET_2)   fieldPos=start + (int)PortablePrimitives.readShort(arr,fieldOffsetPos) & 0xFFFF;
 else   fieldPos=start + PortablePrimitives.readInt(arr,fieldOffsetPos);
  byte hdr=PortablePrimitives.readByte(arr,fieldPos);
switch (hdr) {
case INT:
    val=PortablePrimitives.readInt(arr,fieldPos + 1);
  break;
case LONG:
val=PortablePrimitives.readLong(arr,fieldPos + 1);
break;
case BOOLEAN:
val=PortablePrimitives.readBoolean(arr,fieldPos + 1);
break;
case SHORT:
val=PortablePrimitives.readShort(arr,fieldPos + 1);
break;
case BYTE:
val=PortablePrimitives.readByte(arr,fieldPos + 1);
break;
case CHAR:
val=PortablePrimitives.readChar(arr,fieldPos + 1);
break;
case FLOAT:
val=PortablePrimitives.readFloat(arr,fieldPos + 1);
break;
case DOUBLE:
val=PortablePrimitives.readDouble(arr,fieldPos + 1);
break;
default :
{
PortableReaderExImpl reader=new PortableReaderExImpl(ctx,arr,start,null);
val=reader.unmarshalFieldByAbsolutePosition(fieldPos);
}
}
return (F)val;
}
