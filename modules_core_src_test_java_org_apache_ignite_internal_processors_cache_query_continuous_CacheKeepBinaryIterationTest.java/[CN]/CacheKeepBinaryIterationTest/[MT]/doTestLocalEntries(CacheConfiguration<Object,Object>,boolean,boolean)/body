{
  IgniteCache<Object,Object> cache=grid(0).createCache(ccfg);
  assertEquals(0,cache.size());
  try {
    for (int i=0; i < KEYS; i++)     if (primitives)     cache.put(i,i);
 else     cache.put(new QueryTestKey(i),new QueryTestValue(i));
    for (int i=0; i < getServerNodeCount(); i++) {
      IgniteCache<Object,Object> cache0=grid(i).cache(ccfg.getName());
      if (keepBinary)       cache0=cache0.withKeepBinary();
      for (      CachePeekMode mode : CachePeekMode.values()) {
        int size=0;
        for (        Cache.Entry<Object,Object> e : cache0.localEntries(mode)) {
          Object key=e.getKey();
          Object val=e.getValue();
          if (!primitives) {
            assertTrue("Got unexpected object: " + key.getClass() + ", keepBinary: "+ keepBinary,keepBinary == key instanceof BinaryObject);
            assertTrue("Got unexpected object: " + key.getClass() + ", keepBinary: "+ keepBinary,keepBinary == val instanceof BinaryObject);
          }
 else {
            assertTrue("Got unexpected object: " + key.getClass() + ", keepBinary: "+ keepBinary,key instanceof Integer);
            assertTrue("Got unexpected object: " + key.getClass() + ", keepBinary: "+ keepBinary,val instanceof Integer);
          }
          ++size;
        }
        if (mode == CachePeekMode.ALL || mode == CachePeekMode.PRIMARY || mode == CachePeekMode.BACKUP || (mode == CachePeekMode.NEAR && i == 0 && ccfg.getMemoryMode() == CacheMemoryMode.ONHEAP_TIERED && ccfg.getNearConfiguration() != null) || (mode == CachePeekMode.ONHEAP && ccfg.getMemoryMode() == CacheMemoryMode.ONHEAP_TIERED) || (mode == CachePeekMode.OFFHEAP && ccfg.getMemoryMode() == CacheMemoryMode.OFFHEAP_TIERED) || (mode == CachePeekMode.SWAP && ccfg.isSwapEnabled()))         assertTrue("Zero result at mode: " + mode,size > 0);
      }
    }
  }
  finally {
    if (ccfg.getEvictionPolicy() != null) {
      stopAllGrids();
      startGridsMultiThreaded(getServerNodeCount());
    }
 else     grid(0).destroyCache(ccfg.getName());
  }
}
