{
  final int k=ThreadLocalRandom.current().nextInt(RANGE);
  final String[] keys=new String[KEYS_CNT];
  for (int i=0; i < keys.length; i++)   keys[i]="key-" + k + "-"+ i;
  doInTransaction(ignite,new Callable<Void>(){
    @Override public Void call() throws Exception {
      Map<String,Long> map=new HashMap<>();
      for (      String key : keys) {
        Long val=(Long)cache.get(key);
        map.put(key,val);
      }
      Set<Long> values=new HashSet<>(map.values());
      if (values.size() != 1) {
        U.error(log,"Got different values for keys [map=" + map + "]");
        log.info("Cache content:");
        for (int k=0; k < RANGE; k++) {
          for (int i=0; i < KEYS_CNT; i++) {
            String key="key-" + k + "-"+ i;
            Long val=(Long)cache.get(key);
            if (val != null)             log.info("Entry [key=" + key + ", val="+ val+ "]");
          }
        }
        throw new IllegalStateException("Found different values for keys (see above information) [map=" + map + ']');
      }
      final Long oldVal=map.get(keys[0]);
      final Long newVal=oldVal == null ? 0 : oldVal + 1;
      for (      String key : keys)       cache.put(key,newVal);
      return null;
    }
  }
);
}
