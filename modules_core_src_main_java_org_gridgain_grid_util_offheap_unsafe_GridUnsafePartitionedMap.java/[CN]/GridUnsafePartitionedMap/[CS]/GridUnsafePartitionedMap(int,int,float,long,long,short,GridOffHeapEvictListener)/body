{
  this.parts=parts;
  this.concurrency=concurrency;
  this.load=load;
  partMap=new GridUnsafeMap[parts];
  mem=new GridUnsafeMemory(totalMem);
  if (totalMem > 0)   this.evictLsnr=evictLsnr;
  lru=totalMem > 0 ? new GridUnsafeLru(lruStripes,mem) : null;
  long cnt=initCap / parts;
  int mod=(int)(initCap % parts);
  concurrency/=parts;
  if (concurrency < MIN_SEGMENT_CONCURRENCY)   concurrency=MIN_SEGMENT_CONCURRENCY;
  for (int p=0; p < parts; p++) {
    mod--;
    long init=mod >= 0 ? cnt + 1 : cnt;
    partMap[p]=new GridUnsafeMap(p,concurrency,load,init,totalCnt,mem,lru,evictLsnr,new GridUnsafeLruPoller(){
      @Override public void lruPoll(      int size){
        if (lru == null)         return;
        int left=size;
        while (left > 0) {
          long qAddr=lru.prePoll();
          if (qAddr == 0)           return;
          short order=lru.order(qAddr);
          int part=lru.partition(order,qAddr);
          int released=partMap[part].freeSpace(order,qAddr);
          if (released == 0)           return;
          left-=released;
        }
      }
    }
);
  }
}
