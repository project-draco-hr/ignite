{
  return new GridCloseableIteratorAdapter<IgniteBiTuple<byte[],byte[]>>(){
    private int p;
    private GridCloseableIterator<IgniteBiTuple<byte[],byte[]>> curIt;
{
      try {
        advance();
      }
 catch (      GridException e) {
        e.printStackTrace();
      }
    }
    private void advance() throws GridException {
      curIt=null;
      while (p < parts) {
        curIt=mapFor(p++).iterator();
        if (curIt.hasNext())         return;
 else         curIt.close();
      }
      curIt=null;
    }
    @Override protected IgniteBiTuple<byte[],byte[]> onNext() throws GridException {
      if (curIt == null)       throw new NoSuchElementException();
      IgniteBiTuple<byte[],byte[]> t=curIt.next();
      if (!curIt.hasNext()) {
        curIt.close();
        advance();
      }
      return t;
    }
    @Override protected boolean onHasNext(){
      return curIt != null;
    }
    @Override protected void onRemove(){
      throw new UnsupportedOperationException();
    }
    @Override protected void onClose() throws GridException {
      if (curIt != null)       curIt.close();
    }
  }
;
}
