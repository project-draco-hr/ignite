{
  if (gridCount() == 1)   return;
  final IgniteLock lock0=grid(0).reentrantLock("lock",true,fair,true);
  assertEquals(0,lock0.getHoldCount());
  assertFalse(lock0.hasQueuedThreads());
  lock0.lock();
  final int threadCount=gridCount();
  final AtomicLong threadCounter=new AtomicLong(0);
  IgniteInternalFuture<?> fut=multithreadedAsync(new Callable<Object>(){
    @Override public Object call() throws Exception {
      final int localNodeId=(int)threadCounter.getAndIncrement();
      final Ignite grid=grid(localNodeId);
      IgniteClosure<Ignite,Void> closure=new IgniteClosure<Ignite,Void>(){
        @Override public Void apply(        Ignite ignite){
          final IgniteLock l=ignite.reentrantLock("lock",true,true,true);
          final AtomicReference<Thread> thread=new AtomicReference<>();
          final AtomicBoolean done=new AtomicBoolean(false);
          final AtomicBoolean exceptionThrown=new AtomicBoolean(false);
          final IgniteCountDownLatch latch=ignite.countDownLatch("latch",threadCount,false,true);
          IgniteInternalFuture<?> fut=GridTestUtils.runAsync(new Callable<Void>(){
            @Override public Void call() throws Exception {
              try {
                thread.set(Thread.currentThread());
                l.lockInterruptibly();
              }
 catch (              IgniteInterruptedException e) {
                exceptionThrown.set(true);
              }
 finally {
                done.set(true);
              }
              return null;
            }
          }
);
          while (!l.hasQueuedThreads()) {
          }
          latch.countDown();
          latch.await();
          thread.get().interrupt();
          while (!done.get()) {
          }
          try {
            fut.get();
          }
 catch (          IgniteCheckedException e) {
            fail(e.getMessage());
            throw new RuntimeException(e);
          }
          assertTrue(exceptionThrown.get());
          return null;
        }
      }
;
      closure.apply(grid);
      return null;
    }
  }
,threadCount);
  fut.get();
  lock0.unlock();
  info("Checking if interrupted threads are removed from global waiting queue...");
  boolean locked=lock0.tryLock(1000,MILLISECONDS);
  info("Interrupted threads successfully removed from global waiting queue. ");
  assertTrue(locked);
  lock0.unlock();
  assertFalse(lock0.isLocked());
  lock0.close();
}
