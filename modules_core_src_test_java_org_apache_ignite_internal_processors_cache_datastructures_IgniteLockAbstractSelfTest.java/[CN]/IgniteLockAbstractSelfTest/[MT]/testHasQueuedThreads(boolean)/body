{
  final IgniteLock lock0=grid(0).reentrantLock("lock",true,fair,true);
  assertEquals(0,lock0.getHoldCount());
  assertFalse(lock0.hasQueuedThreads());
  final int totalThreads=5;
  final Set<Thread> startedThreads=new GridConcurrentHashSet<>();
  final Set<Thread> finishedThreads=new GridConcurrentHashSet<>();
  IgniteInternalFuture<?> fut=multithreadedAsync(new Callable<Object>(){
    @Override public Object call() throws Exception {
      assertFalse(lock0.isHeldByCurrentThread());
      startedThreads.add(Thread.currentThread());
      lock0.lock();
      do {
        Thread.sleep(1000);
      }
 while (startedThreads.size() != totalThreads);
      try {
        info("Acquired in separate thread. ");
        assertTrue(lock0.isHeldByCurrentThread());
        assertFalse(lock0.hasQueuedThread(Thread.currentThread()));
        finishedThreads.add(Thread.currentThread());
        if (startedThreads.size() != finishedThreads.size()) {
          assertTrue(lock0.hasQueuedThreads());
        }
        for (        Thread t : startedThreads) {
          assertTrue(lock0.hasQueuedThread(t) != finishedThreads.contains(t));
        }
      }
  finally {
        lock0.unlock();
        assertFalse(lock0.isHeldByCurrentThread());
      }
      return null;
    }
  }
,totalThreads);
  fut.get();
  assertFalse(lock0.hasQueuedThreads());
  for (  Thread t : startedThreads)   assertFalse(lock0.hasQueuedThread(t));
  lock0.close();
}
