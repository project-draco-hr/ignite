{
  commState.setBuffer(buf);
  if (!super.readFrom(buf))   return false;
switch (commState.idx) {
case 24:
    BitSet invalidateEntries0=commState.getBitSet();
  if (invalidateEntries0 == BIT_SET_NOT_READ)   return false;
invalidateEntries=invalidateEntries0;
commState.idx++;
case 25:
IgniteUuid miniId0=commState.getGridUuid();
if (miniId0 == GRID_UUID_NOT_READ) return false;
miniId=miniId0;
commState.idx++;
case 26:
if (commState.readSize == -1) {
if (buf.remaining() < 4) return false;
commState.readSize=commState.getInt();
}
if (commState.readSize >= 0) {
if (nearKeyBytes == null) nearKeyBytes=new ArrayList<>(commState.readSize);
for (int i=commState.readItems; i < commState.readSize; i++) {
byte[] _val=commState.getByteArray();
if (_val == BYTE_ARR_NOT_READ) return false;
nearKeyBytes.add((byte[])_val);
commState.readItems++;
}
}
commState.readSize=-1;
commState.readItems=0;
commState.idx++;
case 27:
byte[] ownedBytes0=commState.getByteArray();
if (ownedBytes0 == BYTE_ARR_NOT_READ) return false;
ownedBytes=ownedBytes0;
commState.idx++;
case 28:
if (buf.remaining() < 8) return false;
topVer=commState.getLong();
commState.idx++;
case 29:
UUID subjId0=commState.getUuid();
if (subjId0 == UUID_NOT_READ) return false;
subjId=subjId0;
commState.idx++;
case 30:
if (buf.remaining() < 4) return false;
taskNameHash=commState.getInt();
commState.idx++;
case 31:
BitSet preloadKeys0=commState.getBitSet();
if (preloadKeys0 == BIT_SET_NOT_READ) return false;
preloadKeys=preloadKeys0;
commState.idx++;
case 32:
if (buf.remaining() < 8) return false;
accessTtl=commState.getLong();
commState.idx++;
}
return true;
}
