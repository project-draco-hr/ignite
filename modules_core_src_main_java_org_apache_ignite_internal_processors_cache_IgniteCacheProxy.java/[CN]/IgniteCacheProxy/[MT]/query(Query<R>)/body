{
  A.notNull(qry,"qry");
  GridCacheGateway<K,V> gate=this.gate;
  CacheOperationContext prev=onEnter(gate,opCtx);
  try {
    ctx.checkSecurity(SecurityPermission.CACHE_READ);
    validate(qry);
    CacheOperationContext opCtxCall=ctx.operationContextPerCall();
    if (qry instanceof ContinuousQuery)     return (QueryCursor<R>)queryContinuous((ContinuousQuery<K,V>)qry,qry.isLocal(),opCtxCall != null && opCtxCall.isKeepBinary());
    if (qry instanceof SqlQuery) {
      final SqlQuery p=(SqlQuery)qry;
      if (isReplicatedDataNode() || ctx.isLocal() || qry.isLocal())       return (QueryCursor<R>)new QueryCursorImpl<>(new Iterable<Cache.Entry<K,V>>(){
        @Override public Iterator<Cache.Entry<K,V>> iterator(){
          return ctx.kernalContext().query().queryLocal(ctx,p);
        }
      }
);
      return (QueryCursor<R>)ctx.kernalContext().query().queryTwoStep(ctx,p);
    }
    if (qry instanceof SqlFieldsQuery) {
      SqlFieldsQuery p=(SqlFieldsQuery)qry;
      if (isReplicatedDataNode() || ctx.isLocal() || qry.isLocal())       return (QueryCursor<R>)ctx.kernalContext().query().queryLocalFields(ctx,p);
      return (QueryCursor<R>)ctx.kernalContext().query().queryTwoStep(ctx,p);
    }
    return (QueryCursor<R>)query(qry,projection(qry.isLocal()));
  }
 catch (  Exception e) {
    if (e instanceof CacheException)     throw (CacheException)e;
    throw new CacheException(e);
  }
 finally {
    onLeave(gate,prev);
  }
}
