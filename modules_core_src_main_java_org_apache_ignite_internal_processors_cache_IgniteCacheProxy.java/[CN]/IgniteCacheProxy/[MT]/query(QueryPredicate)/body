{
  A.notNull(filter,"filter");
  GridCacheProjectionImpl<K,V> prev=gate.enter(prj);
  try {
    if (filter instanceof QuerySqlPredicate) {
      QuerySqlPredicate p=(QuerySqlPredicate)filter;
      return ctx.kernalContext().query().queryTwoStep(ctx.name(),p.getType(),p.getSql(),p.getArgs());
    }
    final CacheQuery<Map.Entry<K,V>> qry;
    final CacheQueryFuture<Map.Entry<K,V>> fut;
    if (filter instanceof QueryScanPredicate) {
      qry=delegate.queries().createScanQuery((IgniteBiPredicate<K,V>)filter);
      fut=qry.execute();
    }
 else     if (filter instanceof QueryTextPredicate) {
      QueryTextPredicate p=(QueryTextPredicate)filter;
      qry=delegate.queries().createFullTextQuery(p.getType(),p.getText());
      fut=qry.execute();
    }
 else     if (filter instanceof QuerySpiPredicate) {
      qry=((GridCacheQueriesEx)delegate.queries()).createSpiQuery();
      fut=qry.execute(((QuerySpiPredicate)filter).getArgs());
    }
 else     throw new IgniteException("Unsupported query predicate: " + filter);
    return new QueryCursorImpl<>(new GridCloseableIteratorAdapter<Entry<K,V>>(){
      /** 
 */
      Map.Entry<K,V> cur;
      @Override protected Entry<K,V> onNext() throws IgniteCheckedException {
        if (!onHasNext())         throw new NoSuchElementException();
        Map.Entry<K,V> e=cur;
        cur=null;
        return new CacheEntryImpl<>(e.getKey(),e.getValue());
      }
      @Override protected boolean onHasNext() throws IgniteCheckedException {
        return cur != null || (cur=fut.next()) != null;
      }
      @Override protected void onClose() throws IgniteCheckedException {
        fut.cancel();
      }
    }
);
  }
  finally {
    gate.leave(prev);
  }
}
