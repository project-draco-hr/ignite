{
  final CacheQuery<Map.Entry<K,V>> qry;
  boolean isKeepBinary=opCtx != null && opCtx.isKeepBinary();
  if (filter instanceof ScanQuery) {
    IgniteBiPredicate<K,V> p=((ScanQuery)filter).getFilter();
    qry=ctx.queries().createScanQuery(p,((ScanQuery)filter).getPartition(),isKeepBinary);
    if (grp != null)     qry.projection(grp);
    final GridCloseableIterator<Entry<K,V>> iter=ctx.kernalContext().query().executeQuery(ctx,new IgniteOutClosureX<GridCloseableIterator<Entry<K,V>>>(){
      @Override public GridCloseableIterator<Entry<K,V>> applyx() throws IgniteCheckedException {
        final GridCloseableIterator<Map.Entry> iter0=qry.executeScanQuery();
        return new GridCloseableIteratorAdapter<Cache.Entry<K,V>>(){
          @Override protected Cache.Entry<K,V> onNext() throws IgniteCheckedException {
            Map.Entry<K,V> next=iter0.nextX();
            return new CacheEntryImpl<>(next.getKey(),next.getValue());
          }
          @Override protected boolean onHasNext() throws IgniteCheckedException {
            return iter0.hasNextX();
          }
          @Override protected void onClose() throws IgniteCheckedException {
            iter0.close();
          }
        }
;
      }
    }
,false);
    return new QueryCursorImpl<>(iter);
  }
  final CacheQueryFuture<Map.Entry<K,V>> fut;
  if (filter instanceof TextQuery) {
    TextQuery p=(TextQuery)filter;
    qry=ctx.queries().createFullTextQuery(p.getType(),p.getText(),isKeepBinary);
    if (grp != null)     qry.projection(grp);
    fut=ctx.kernalContext().query().executeQuery(ctx,new IgniteOutClosureX<CacheQueryFuture<Map.Entry<K,V>>>(){
      @Override public CacheQueryFuture<Map.Entry<K,V>> applyx() throws IgniteCheckedException {
        return qry.execute();
      }
    }
,false);
  }
 else   if (filter instanceof SpiQuery) {
    qry=ctx.queries().createSpiQuery(isKeepBinary);
    if (grp != null)     qry.projection(grp);
    fut=ctx.kernalContext().query().executeQuery(ctx,new IgniteOutClosureX<CacheQueryFuture<Map.Entry<K,V>>>(){
      @Override public CacheQueryFuture<Map.Entry<K,V>> applyx() throws IgniteCheckedException {
        return qry.execute(((SpiQuery)filter).getArgs());
      }
    }
,false);
  }
 else {
    if (filter instanceof SqlFieldsQuery)     throw new CacheException("Use methods 'queryFields' and 'localQueryFields' for " + SqlFieldsQuery.class.getSimpleName() + ".");
    throw new CacheException("Unsupported query type: " + filter);
  }
  return new QueryCursorImpl<>(new GridCloseableIteratorAdapter<Entry<K,V>>(){
    /** 
 */
    private Map.Entry<K,V> cur;
    @Override protected Entry<K,V> onNext() throws IgniteCheckedException {
      if (!onHasNext())       throw new NoSuchElementException();
      Map.Entry<K,V> e=cur;
      cur=null;
      return new CacheEntryImpl<>(e.getKey(),e.getValue());
    }
    @Override protected boolean onHasNext() throws IgniteCheckedException {
      return cur != null || (cur=fut.next()) != null;
    }
    @Override protected void onClose() throws IgniteCheckedException {
      fut.cancel();
    }
  }
);
}
