{
  final CacheQuery<Map.Entry<K,V>> qry;
  final CacheQueryFuture<Map.Entry<K,V>> fut;
  if (filter instanceof QueryScan) {
    qry=delegate.queries().createScanQuery((IgniteBiPredicate<K,V>)filter);
    if (grp != null)     qry.projection(grp);
    fut=qry.execute();
  }
 else   if (filter instanceof QueryText) {
    QueryText p=(QueryText)filter;
    qry=delegate.queries().createFullTextQuery(p.getType(),p.getText());
    if (grp != null)     qry.projection(grp);
    fut=qry.execute();
  }
 else   if (filter instanceof QuerySpi) {
    qry=((GridCacheQueriesEx)delegate.queries()).createSpiQuery();
    if (grp != null)     qry.projection(grp);
    fut=qry.execute(((QuerySpi)filter).getArgs());
  }
 else   throw new IgniteException("Unsupported query predicate: " + filter);
  return new QueryCursorImpl<>(new GridCloseableIteratorAdapter<Entry<K,V>>(){
    /** 
 */
    Map.Entry<K,V> cur;
    @Override protected Entry<K,V> onNext() throws IgniteCheckedException {
      if (!onHasNext())       throw new NoSuchElementException();
      Map.Entry<K,V> e=cur;
      cur=null;
      return new CacheEntryImpl<>(e.getKey(),e.getValue());
    }
    @Override protected boolean onHasNext() throws IgniteCheckedException {
      return cur != null || (cur=fut.next()) != null;
    }
    @Override protected void onClose() throws IgniteCheckedException {
      fut.cancel();
    }
  }
);
}
