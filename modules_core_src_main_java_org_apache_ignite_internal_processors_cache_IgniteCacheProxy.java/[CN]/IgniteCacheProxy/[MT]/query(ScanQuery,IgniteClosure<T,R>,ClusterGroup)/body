{
  final CacheQuery<R> qry;
  boolean isKeepBinary=opCtx != null && opCtx.isKeepBinary();
  IgniteBiPredicate<K,V> p=scanQry.getFilter();
  qry=ctx.queries().createScanQuery(p,transformer,scanQry.getPartition(),isKeepBinary);
  if (grp != null)   qry.projection(grp);
  final GridCloseableIterator<R> iter=ctx.kernalContext().query().executeQuery(ctx,new IgniteOutClosureX<GridCloseableIterator<R>>(){
    @Override public GridCloseableIterator<R> applyx() throws IgniteCheckedException {
      final GridCloseableIterator iter0=qry.executeScanQuery();
      final boolean needToConvert=transformer == null;
      return new GridCloseableIteratorAdapter<R>(){
        @Override protected R onNext() throws IgniteCheckedException {
          Object next=iter0.nextX();
          if (needToConvert) {
            Map.Entry<K,V> entry=(Map.Entry<K,V>)next;
            return (R)new CacheEntryImpl<>(entry.getKey(),entry.getValue());
          }
          return (R)next;
        }
        @Override protected boolean onHasNext() throws IgniteCheckedException {
          return iter0.hasNextX();
        }
        @Override protected void onClose() throws IgniteCheckedException {
          iter0.close();
        }
      }
;
    }
  }
,false);
  return new QueryCursorImpl<>(iter);
}
