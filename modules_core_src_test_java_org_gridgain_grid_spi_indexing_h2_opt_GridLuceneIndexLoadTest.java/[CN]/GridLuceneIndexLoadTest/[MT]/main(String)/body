{
  final GridOptimizedMarshaller m=new GridOptimizedMarshaller();
  GridIndexingTypeDescriptor desc=new GridIndexingTypeDescriptor(){
    @Override public String name(){
      return "StrType";
    }
    @Override public Map<String,Class<?>> valueFields(){
      throw new IllegalStateException();
    }
    @Override public Map<String,Class<?>> keyFields(){
      throw new IllegalStateException();
    }
    @Override public <T>T value(    Object obj,    String field){
      throw new IllegalStateException();
    }
    @Override public Map<String,GridIndexDescriptor> indexes(){
      return Collections.<String,GridIndexDescriptor>singletonMap("txt_idx",new GridIndexDescriptor(){
        @Override public Collection<String> fields(){
          return Collections.emptyList();
        }
        @Override public boolean descending(        String field){
          return false;
        }
        @Override public GridIndexType type(){
          return GridIndexType.FULLTEXT;
        }
      }
);
    }
    @Override public Class<?> valueClass(){
      return String.class;
    }
    @Override public Class<?> keyClass(){
      return Integer.class;
    }
    @Override public boolean valueTextIndex(){
      return true;
    }
  }
;
  GridLuceneIndex idx=new GridLuceneIndex(new GridIndexingMarshaller(){
    @Override public <T>GridIndexingEntity<T> unmarshal(    byte[] bytes) throws GridSpiException {
      try {
        return new GridIndexingEntityAdapter<>(m.<T>unmarshal(bytes,null),bytes);
      }
 catch (      GridException e) {
        throw new GridSpiException(e);
      }
    }
    @Override public byte[] marshal(    GridIndexingEntity<?> entity) throws GridSpiException {
      try {
        return m.marshal(entity.value());
      }
 catch (      GridException e) {
        throw new GridSpiException(e);
      }
    }
  }
,null,"spac",desc,false);
  ArrayList<String> ws=words("C:\\Users\\svladykin\\YandexDisk\\www\\CSW07-british-dict");
  byte[] ver=new byte[0];
  Random rnd=new Random();
  long begin=System.currentTimeMillis();
  for (int i=0, len=10000000; i < len; i++) {
    idx.store(new GridIndexingEntityAdapter<>(i,null),new GridIndexingEntityAdapter<Object>(sentence(rnd,ws),null),ver,0L);
    if (i % 10000 == 0) {
      long time=System.currentTimeMillis();
      X.println(i + " " + (time - begin)+ "ms "+ GridLuceneFile.filesCnt.get());
      begin=time;
    }
  }
}
