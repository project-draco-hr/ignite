{
  final AtomicBoolean stop=new AtomicBoolean();
  final AtomicLong x=new AtomicLong();
  final AtomicLong y=new AtomicLong();
  final AtomicLong z=new AtomicLong();
  final Random rnd=new Random();
  final String oops="Oops!";
  final GridSnapshotLock<T3<Long,Long,Long>> lock=new GridSnapshotLock<T3<Long,Long,Long>>(){
    @Override protected T3<Long,Long,Long> doSnapshot(){
      if (rnd.nextBoolean())       throw new GridRuntimeException(oops);
      return new T3<>(x.get(),y.get(),z.get());
    }
  }
;
  GridFuture<?> fut1=multithreadedAsync(new Callable<Object>(){
    @Override public Object call() throws Exception {
      Random rnd=new Random();
      while (!stop.get()) {
        if (rnd.nextBoolean()) {
          if (!lock.tryBeginUpdate())           continue;
        }
 else         lock.beginUpdate();
        int n=1 + rnd.nextInt(1000);
        if (rnd.nextBoolean())         x.addAndGet(n);
 else         y.addAndGet(n);
        z.addAndGet(n);
        lock.endUpdate();
      }
      return null;
    }
  }
,15,"update");
  GridFuture<?> fut2=multithreadedAsync(new Callable<Object>(){
    @Override public Object call() throws Exception {
      while (!stop.get()) {
        T3<Long,Long,Long> t;
        try {
          t=lock.snapshot();
        }
 catch (        GridRuntimeException e) {
          assertEquals(oops,e.getMessage());
          continue;
        }
        assertEquals(t.get3().longValue(),t.get1() + t.get2());
      }
      return null;
    }
  }
,8,"snapshot");
  Thread.sleep(20000);
  stop.set(true);
  fut1.get();
  fut2.get();
}
