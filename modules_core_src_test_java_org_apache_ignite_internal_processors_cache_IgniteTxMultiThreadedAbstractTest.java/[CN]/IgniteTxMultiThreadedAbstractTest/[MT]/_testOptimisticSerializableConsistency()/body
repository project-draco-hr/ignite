{
  final IgniteCache<Integer,Long> cache=grid(0).cache(null);
  final int THREADS=2;
  final int ITERATIONS=100;
  final int key=0;
  cache.put(key,0L);
  List<IgniteInternalFuture<Collection<Long>>> futs=new ArrayList<>(THREADS);
  for (int i=0; i < THREADS; i++) {
    futs.add(GridTestUtils.runAsync(new Callable<Collection<Long>>(){
      @Override public Collection<Long> call() throws Exception {
        Collection<Long> res=new ArrayList<>();
        for (int i=0; i < ITERATIONS; i++) {
          while (true) {
            try (Transaction tx=grid(0).transactions().txStart(OPTIMISTIC,SERIALIZABLE)){
              long val=cache.get(key);
              cache.put(key,val + 1);
              tx.commit();
              assertTrue(res.add(val + 1));
              break;
            }
 catch (            TransactionOptimisticException e) {
              log.info("Got error, will retry: " + e);
            }
          }
        }
        return res;
      }
    }
));
  }
  List<Collection<Long>> cols=new ArrayList<>(THREADS);
  for (  IgniteInternalFuture<Collection<Long>> fut : futs) {
    Collection<Long> col=fut.get();
    assertEquals(ITERATIONS,col.size());
    cols.add(col);
  }
  Set<Long> duplicates=new HashSet<>();
  for (  Collection<Long> col1 : cols) {
    for (    Long val1 : col1) {
      for (      Collection<Long> col2 : cols) {
        if (col1 == col2)         continue;
        for (        Long val2 : col2) {
          if (val1.equals(val2)) {
            duplicates.add(val2);
            break;
          }
        }
      }
    }
  }
  assertTrue("Found duplicated values: " + duplicates,duplicates.isEmpty());
}
