{
  try {
    Ignite ignite=startGrid(1);
    final GridCache<Integer,Integer> cache=ignite.cache(null);
    long start=System.currentTimeMillis();
    IgniteInternalFuture<?> fut=multithreadedAsync(new Callable<Object>(){
      @Override public Object call() throws Exception {
        final Random rnd=new Random();
        for (int i=0; i < ITERATION_CNT; i++) {
          int j=rnd.nextInt(keyCnt);
          try (IgniteTx tx=cache.txStart()){
            if (rnd.nextBoolean())             cache.putx(j,j);
 else             cache.remove(j);
            tx.commit();
          }
           if (i != 0 && i % 10000 == 0)           info("Stats [iterCnt=" + i + ", size="+ cache.size()+ ']');
        }
        return null;
      }
    }
,threadCnt);
    fut.get();
    Collection<EvictableEntry<Integer,Integer>> queue=internalQueue(plc);
    info("Test results [threadCnt=" + threadCnt + ", iterCnt="+ ITERATION_CNT+ ", cacheSize="+ cache.size()+ ", internalQueueSize"+ queue.size()+ ", duration="+ (System.currentTimeMillis() - start)+ ']');
    for (    Cache.Entry<Integer,Integer> e : queue) {
      Integer rmv=cache.remove(e.getKey());
      if (rmv == null)       fail("Eviction policy contains key that is not present in cache: " + e);
 else       info("Entry removed: " + rmv);
    }
    if (!cache.isEmpty()) {
      boolean zombies=false;
      for (      Cache.Entry<Integer,Integer> e : cache) {
        U.warn(log,"Zombie entry: " + e);
        zombies=true;
      }
      if (zombies)       fail("Cache contained zombie entries.");
    }
 else     info("Cache is empty after test.");
  }
  finally {
    stopAllGrids();
  }
}
