{
  int idx=RAND.nextInt(GRID_CNT);
  IgniteCache<Integer,String> cache=jcache(idx);
  Transaction tx=grid(idx).transactions().txStart(concurrency,isolation,0,0);
  try {
    cache.put(KEY,VAL);
    tx.commit();
  }
 catch (  Throwable e) {
    error("Transaction failed (will rollback): " + tx,e);
    tx.rollback();
    throw e;
  }
  TestCommunicationSpi ioSpi=ioSpi(idx);
  int checkIdx=RAND.nextInt(GRID_CNT);
  while (checkIdx == idx)   checkIdx=RAND.nextInt(GRID_CNT);
  Ignite checkIgnite=grid(checkIdx);
  int msgCnt=ioSpi.getMessagesCount(checkIgnite.cluster().localNode().id());
  info("Checked node: " + checkIgnite.cluster().localNode().id());
  assertEquals("Invalid message count for grid: " + checkIgnite.cluster().localNode().id(),2,msgCnt);
}
