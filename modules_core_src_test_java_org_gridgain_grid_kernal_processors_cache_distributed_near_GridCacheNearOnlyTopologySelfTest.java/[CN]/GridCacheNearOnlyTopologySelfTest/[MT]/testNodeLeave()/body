{
  try {
    cache=true;
    for (int i=0; i < 2; i++) {
      nearOnly=i == 0;
      startGrid(i);
    }
    for (int i=0; i < 10; i++)     grid(1).cache(null).put(i,i);
    final GridCache<Object,Object> nearOnly=grid(0).cache(null);
    for (int i=0; i < 10; i++) {
      assertEquals(i,nearOnly.get(i));
      assertEquals(i,nearOnly.peek(i));
    }
    stopGrid(1);
    for (int i=0; i < 10; i++) {
      assertNull(nearOnly.peek(i));
      final int key=i;
      GridTestUtils.assertThrows(log,new Callable<Object>(){
        @Override public Object call() throws Exception {
          return nearOnly.get(key);
        }
      }
,GridTopologyException.class,null);
    }
    GridTestUtils.assertThrows(log,new Callable<Object>(){
      @Override public Object call() throws Exception {
        final GridCacheTx tx=nearOnly.txStart(OPTIMISTIC,REPEATABLE_READ);
        try {
          nearOnly.putx("key","val");
          tx.commit();
        }
  finally {
          tx.close();
        }
        return null;
      }
    }
,GridTopologyException.class,null);
    GridTestUtils.assertThrows(log,new Callable<Object>(){
      @Override public Object call() throws Exception {
        final GridCacheTx tx=nearOnly.txStart(PESSIMISTIC,REPEATABLE_READ);
        try {
          nearOnly.put("key","val");
          tx.commit();
        }
  finally {
          tx.close();
        }
        return null;
      }
    }
,GridTopologyException.class,null);
  }
  finally {
    stopAllGrids();
  }
}
