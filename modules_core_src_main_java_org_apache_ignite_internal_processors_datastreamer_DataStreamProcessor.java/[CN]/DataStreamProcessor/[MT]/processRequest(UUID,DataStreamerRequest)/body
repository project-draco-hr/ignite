{
  if (!busyLock.enterBusy()) {
    if (log.isDebugEnabled())     log.debug("Ignoring data load request (node is stopping): " + req);
    return;
  }
  try {
    if (log.isDebugEnabled())     log.debug("Processing data load request: " + req);
    AffinityTopologyVersion locAffVer=ctx.cache().context().exchange().readyAffinityVersion();
    AffinityTopologyVersion rmtAffVer=req.topologyVersion();
    if (locAffVer.compareTo(rmtAffVer) < 0) {
      if (log.isDebugEnabled())       log.debug("Received request has higher affinity topology version [request=" + req + ", locTopVer="+ locAffVer+ ", rmtTopVer="+ rmtAffVer+ ']');
      IgniteInternalFuture<?> fut=ctx.cache().context().exchange().affinityReadyFuture(rmtAffVer);
      if (fut != null && !fut.isDone()) {
        fut.listen(new CI1<IgniteInternalFuture<?>>(){
          @Override public void apply(          IgniteInternalFuture<?> t){
            ctx.closure().runLocalSafe(new Runnable(){
              @Override public void run(){
                processRequest(nodeId,req);
              }
            }
,false);
          }
        }
);
        return;
      }
    }
    Object topic;
    try {
      topic=marsh.unmarshal(req.responseTopicBytes(),null);
    }
 catch (    IgniteCheckedException e) {
      U.error(log,"Failed to unmarshal topic from request: " + req,e);
      return;
    }
    ClassLoader clsLdr;
    if (req.forceLocalDeployment())     clsLdr=U.gridClassLoader();
 else {
      GridDeployment dep=ctx.deploy().getGlobalDeployment(req.deploymentMode(),req.sampleClassName(),req.sampleClassName(),req.userVersion(),nodeId,req.classLoaderId(),req.participants(),null);
      if (dep == null) {
        sendResponse(nodeId,topic,req.requestId(),new IgniteCheckedException("Failed to get deployment for request [sndId=" + nodeId + ", req="+ req+ ']'),false);
        return;
      }
      clsLdr=dep.classLoader();
    }
    StreamReceiver<K,V> updater;
    try {
      updater=marsh.unmarshal(req.updaterBytes(),clsLdr);
      if (updater != null)       ctx.resource().injectGeneric(updater);
    }
 catch (    IgniteCheckedException e) {
      U.error(log,"Failed to unmarshal message [nodeId=" + nodeId + ", req="+ req+ ']',e);
      sendResponse(nodeId,topic,req.requestId(),e,false);
      return;
    }
    Collection<DataStreamerEntry> col=req.entries();
    DataStreamerUpdateJob job=new DataStreamerUpdateJob(ctx,log,req.cacheName(),col,req.ignoreDeploymentOwnership(),req.skipStore(),req.keepBinary(),updater);
    Exception err=null;
    try {
      job.call();
    }
 catch (    Exception e) {
      U.error(log,"Failed to finish update job.",e);
      err=e;
    }
    sendResponse(nodeId,topic,req.requestId(),err,req.forceLocalDeployment());
  }
  finally {
    busyLock.leaveBusy();
  }
}
