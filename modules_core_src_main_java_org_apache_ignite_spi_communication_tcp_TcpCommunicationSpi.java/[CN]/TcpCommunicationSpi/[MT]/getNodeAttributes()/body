{
  nodeIdMsg=new NodeIdMessage(getLocalNodeId());
  assertParameter(locPort > 1023,"locPort > 1023");
  assertParameter(locPort <= 0xffff,"locPort < 0xffff");
  assertParameter(locPortRange >= 0,"locPortRange >= 0");
  assertParameter(idleConnTimeout > 0,"idleConnTimeout > 0");
  assertParameter(connBufFlushFreq > 0,"connBufFlushFreq > 0");
  assertParameter(connBufSize >= 0,"connBufSize >= 0");
  assertParameter(sockRcvBuf >= 0,"sockRcvBuf >= 0");
  assertParameter(sockSndBuf >= 0,"sockSndBuf >= 0");
  assertParameter(msgQueueLimit >= 0,"msgQueueLimit >= 0");
  assertParameter(reconCnt > 0,"reconnectCnt > 0");
  assertParameter(selectorsCnt > 0,"selectorsCnt > 0");
  assertParameter(minBufferedMsgCnt >= 0,"minBufferedMsgCnt >= 0");
  assertParameter(bufSizeRatio > 0 && bufSizeRatio < 1,"bufSizeRatio > 0 && bufSizeRatio < 1");
  assertParameter(connTimeout >= 0,"connTimeout >= 0");
  assertParameter(maxConnTimeout >= connTimeout,"maxConnTimeout >= connTimeout");
  assertParameter(sockWriteTimeout >= 0,"sockWriteTimeout >= 0");
  assertParameter(ackSndThreshold > 0,"ackSndThreshold > 0");
  assertParameter(unackedMsgsBufSize >= 0,"unackedMsgsBufSize >= 0");
  if (unackedMsgsBufSize > 0) {
    assertParameter(unackedMsgsBufSize >= msgQueueLimit * 5,"Specified 'unackedMsgsBufSize' is too low, it should be at least 'msgQueueLimit * 5'.");
    assertParameter(unackedMsgsBufSize >= ackSndThreshold * 5,"Specified 'unackedMsgsBufSize' is too low, it should be at least 'ackSndThreshold * 5'.");
  }
  try {
    locHost=U.resolveLocalHost(locAddr);
  }
 catch (  IOException e) {
    throw new IgniteSpiException("Failed to initialize local address: " + locAddr,e);
  }
  try {
    nioSrvr=resetNioServer();
  }
 catch (  IgniteCheckedException e) {
    throw new IgniteSpiException("Failed to initialize TCP server: " + locHost,e);
  }
  try {
    IgniteBiTuple<Collection<String>,Collection<String>> addrs=U.resolveLocalAddresses(locHost);
    Collection<InetSocketAddress> extAddrs=addrRslvr == null ? null : U.resolveAddresses(addrRslvr,F.flat(Arrays.asList(addrs.get1(),addrs.get2())),boundTcpPort);
    return F.asMap(createSpiAttributeName(ATTR_ADDRS),addrs.get1(),createSpiAttributeName(ATTR_HOST_NAMES),addrs.get2(),createSpiAttributeName(ATTR_PORT),boundTcpPort,createSpiAttributeName(ATTR_EXT_ADDRS),extAddrs);
  }
 catch (  IOException|IgniteCheckedException e) {
    throw new IgniteSpiException("Failed to resolve local host to addresses: " + locHost,e);
  }
}
