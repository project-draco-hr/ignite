{
  lruStripes=1;
  mem=10;
  final AtomicInteger evictCnt=new AtomicInteger();
  evictLsnr=new GridOffHeapEvictListener(){
    @Override public void onEvict(    int part,    int hash,    byte[] k,    byte[] v){
      String key=new String(k);
      info("Evicted key: " + key);
      evictCnt.incrementAndGet();
    }
    @Override public boolean removeEvicted(){
      return true;
    }
  }
;
  map=newMap();
  for (int p=0; p < parts; p++) {
    for (int i=0; i < 10; i++) {
      String key=string();
      byte[] keyBytes=key.getBytes();
      byte[] valBytes=bytes(100);
      map.insert(p,hash(key),keyBytes,valBytes);
      info("Evicted: " + evictCnt);
      assertEquals(1,evictCnt.get());
      assertEquals(0,map.size());
      assertTrue(evictCnt.compareAndSet(1,0));
    }
  }
}
