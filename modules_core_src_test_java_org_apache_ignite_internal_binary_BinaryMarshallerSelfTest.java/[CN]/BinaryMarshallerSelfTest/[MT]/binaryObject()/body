{
  SimpleObject innerSimple=new SimpleObject();
  innerSimple.b=1;
  innerSimple.s=1;
  innerSimple.i=1;
  innerSimple.l=1;
  innerSimple.f=1.1f;
  innerSimple.d=1.1d;
  innerSimple.c=1;
  innerSimple.bool=true;
  innerSimple.str="str1";
  innerSimple.uuid=UUID.randomUUID();
  innerSimple.date=new Date();
  innerSimple.ts=new Timestamp(System.currentTimeMillis());
  innerSimple.bArr=new byte[]{1,2,3};
  innerSimple.sArr=new short[]{1,2,3};
  innerSimple.iArr=new int[]{1,2,3};
  innerSimple.lArr=new long[]{1,2,3};
  innerSimple.fArr=new float[]{1.1f,2.2f,3.3f};
  innerSimple.dArr=new double[]{1.1d,2.2d,3.3d};
  innerSimple.cArr=new char[]{1,2,3};
  innerSimple.boolArr=new boolean[]{true,false,true};
  innerSimple.strArr=new String[]{"str1","str2","str3"};
  innerSimple.uuidArr=new UUID[]{UUID.randomUUID(),UUID.randomUUID(),UUID.randomUUID()};
  innerSimple.dateArr=new Date[]{new Date(11111),new Date(22222),new Date(33333)};
  innerSimple.objArr=new UUID[]{UUID.randomUUID(),UUID.randomUUID(),UUID.randomUUID()};
  innerSimple.col=new ArrayList<>();
  innerSimple.map=new HashMap<>();
  innerSimple.enumVal=TestEnum.A;
  innerSimple.enumArr=new TestEnum[]{TestEnum.A,TestEnum.B};
  innerSimple.col.add("str1");
  innerSimple.col.add("str2");
  innerSimple.col.add("str3");
  innerSimple.map.put(1,"str1");
  innerSimple.map.put(2,"str2");
  innerSimple.map.put(3,"str3");
  TestBinary innerBinary=new TestBinary();
  innerBinary.b=2;
  innerBinary.s=2;
  innerBinary.i=2;
  innerBinary.l=2;
  innerBinary.f=2.2f;
  innerBinary.d=2.2d;
  innerBinary.c=2;
  innerBinary.bool=true;
  innerBinary.str="str2";
  innerBinary.uuid=UUID.randomUUID();
  innerBinary.date=new Date();
  innerBinary.ts=new Timestamp(System.currentTimeMillis());
  innerBinary.bArr=new byte[]{10,20,30};
  innerBinary.sArr=new short[]{10,20,30};
  innerBinary.iArr=new int[]{10,20,30};
  innerBinary.lArr=new long[]{10,20,30};
  innerBinary.fArr=new float[]{10.01f,20.02f,30.03f};
  innerBinary.dArr=new double[]{10.01d,20.02d,30.03d};
  innerBinary.cArr=new char[]{10,20,30};
  innerBinary.boolArr=new boolean[]{true,false,true};
  innerBinary.strArr=new String[]{"str10","str20","str30"};
  innerBinary.uuidArr=new UUID[]{UUID.randomUUID(),UUID.randomUUID(),UUID.randomUUID()};
  innerBinary.dateArr=new Date[]{new Date(44444),new Date(55555),new Date(66666)};
  innerBinary.objArr=new Object[]{UUID.randomUUID(),UUID.randomUUID(),UUID.randomUUID()};
  innerBinary.bRaw=3;
  innerBinary.sRaw=3;
  innerBinary.iRaw=3;
  innerBinary.lRaw=3;
  innerBinary.fRaw=3.3f;
  innerBinary.dRaw=3.3d;
  innerBinary.cRaw=3;
  innerBinary.boolRaw=true;
  innerBinary.strRaw="str3";
  innerBinary.uuidRaw=UUID.randomUUID();
  innerBinary.dateRaw=new Date();
  innerBinary.tsRaw=new Timestamp(System.currentTimeMillis());
  innerBinary.bArrRaw=new byte[]{11,21,31};
  innerBinary.sArrRaw=new short[]{11,21,31};
  innerBinary.iArrRaw=new int[]{11,21,31};
  innerBinary.lArrRaw=new long[]{11,21,31};
  innerBinary.fArrRaw=new float[]{11.11f,21.12f,31.13f};
  innerBinary.dArrRaw=new double[]{11.11d,21.12d,31.13d};
  innerBinary.cArrRaw=new char[]{11,21,31};
  innerBinary.boolArrRaw=new boolean[]{true,false,true};
  innerBinary.strArrRaw=new String[]{"str11","str21","str31"};
  innerBinary.uuidArrRaw=new UUID[]{UUID.randomUUID(),UUID.randomUUID(),UUID.randomUUID()};
  innerBinary.dateArrRaw=new Date[]{new Date(77777),new Date(88888),new Date(99999)};
  innerBinary.objArrRaw=new Object[]{UUID.randomUUID(),UUID.randomUUID(),UUID.randomUUID()};
  innerBinary.col=new ArrayList<>();
  innerBinary.colRaw=new ArrayList<>();
  innerBinary.map=new HashMap<>();
  innerBinary.mapRaw=new HashMap<>();
  innerBinary.enumVal=TestEnum.B;
  innerBinary.enumValRaw=TestEnum.C;
  innerBinary.enumArr=new TestEnum[]{TestEnum.B,TestEnum.C};
  innerBinary.enumArrRaw=new TestEnum[]{TestEnum.C,TestEnum.D};
  innerBinary.col.add("str4");
  innerBinary.col.add("str5");
  innerBinary.col.add("str6");
  innerBinary.map.put(4,"str4");
  innerBinary.map.put(5,"str5");
  innerBinary.map.put(6,"str6");
  innerBinary.colRaw.add("str7");
  innerBinary.colRaw.add("str8");
  innerBinary.colRaw.add("str9");
  innerBinary.mapRaw.put(7,"str7");
  innerBinary.mapRaw.put(8,"str8");
  innerBinary.mapRaw.put(9,"str9");
  TestBinary outer=new TestBinary();
  outer.b=4;
  outer.s=4;
  outer.i=4;
  outer.l=4;
  outer.f=4.4f;
  outer.d=4.4d;
  outer.c=4;
  outer.bool=true;
  outer.str="str4";
  outer.uuid=UUID.randomUUID();
  outer.date=new Date();
  outer.ts=new Timestamp(System.currentTimeMillis());
  outer.bArr=new byte[]{12,22,32};
  outer.sArr=new short[]{12,22,32};
  outer.iArr=new int[]{12,22,32};
  outer.lArr=new long[]{12,22,32};
  outer.fArr=new float[]{12.21f,22.22f,32.23f};
  outer.dArr=new double[]{12.21d,22.22d,32.23d};
  outer.cArr=new char[]{12,22,32};
  outer.boolArr=new boolean[]{true,false,true};
  outer.strArr=new String[]{"str12","str22","str32"};
  outer.uuidArr=new UUID[]{UUID.randomUUID(),UUID.randomUUID(),UUID.randomUUID()};
  outer.dateArr=new Date[]{new Date(10101),new Date(20202),new Date(30303)};
  outer.objArr=new Object[]{UUID.randomUUID(),UUID.randomUUID(),UUID.randomUUID()};
  outer.simple=innerSimple;
  outer.binary=innerBinary;
  outer.bRaw=5;
  outer.sRaw=5;
  outer.iRaw=5;
  outer.lRaw=5;
  outer.fRaw=5.5f;
  outer.dRaw=5.5d;
  outer.cRaw=5;
  outer.boolRaw=true;
  outer.strRaw="str5";
  outer.uuidRaw=UUID.randomUUID();
  outer.dateRaw=new Date();
  outer.tsRaw=new Timestamp(System.currentTimeMillis());
  outer.bArrRaw=new byte[]{13,23,33};
  outer.sArrRaw=new short[]{13,23,33};
  outer.iArrRaw=new int[]{13,23,33};
  outer.lArrRaw=new long[]{13,23,33};
  outer.fArrRaw=new float[]{13.31f,23.32f,33.33f};
  outer.dArrRaw=new double[]{13.31d,23.32d,33.33d};
  outer.cArrRaw=new char[]{13,23,33};
  outer.boolArrRaw=new boolean[]{true,false,true};
  outer.strArrRaw=new String[]{"str13","str23","str33"};
  outer.uuidArrRaw=new UUID[]{UUID.randomUUID(),UUID.randomUUID(),UUID.randomUUID()};
  outer.dateArr=new Date[]{new Date(40404),new Date(50505),new Date(60606)};
  outer.objArrRaw=new Object[]{UUID.randomUUID(),UUID.randomUUID(),UUID.randomUUID()};
  outer.col=new ArrayList<>();
  outer.colRaw=new ArrayList<>();
  outer.map=new HashMap<>();
  outer.mapRaw=new HashMap<>();
  outer.enumVal=TestEnum.D;
  outer.enumValRaw=TestEnum.E;
  outer.enumArr=new TestEnum[]{TestEnum.D,TestEnum.E};
  outer.enumArrRaw=new TestEnum[]{TestEnum.E,TestEnum.A};
  outer.simpleRaw=innerSimple;
  outer.binaryRaw=innerBinary;
  outer.col.add("str10");
  outer.col.add("str11");
  outer.col.add("str12");
  outer.map.put(10,"str10");
  outer.map.put(11,"str11");
  outer.map.put(12,"str12");
  outer.colRaw.add("str13");
  outer.colRaw.add("str14");
  outer.colRaw.add("str15");
  outer.mapRaw.put(16,"str16");
  outer.mapRaw.put(17,"str16");
  outer.mapRaw.put(18,"str17");
  return outer;
}
