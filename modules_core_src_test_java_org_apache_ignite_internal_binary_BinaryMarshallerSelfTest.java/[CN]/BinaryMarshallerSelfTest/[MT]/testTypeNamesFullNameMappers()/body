{
  BinaryTypeConfiguration customType1=new BinaryTypeConfiguration(Value.class.getName());
  customType1.setIdMapper(new BinaryIdMapper(){
    @Override public int typeId(    String clsName){
      return 300;
    }
    @Override public int fieldId(    int typeId,    String fieldName){
      return 0;
    }
  }
);
  BinaryTypeConfiguration customType2=new BinaryTypeConfiguration("org.gridgain.NonExistentClass1");
  customType2.setIdMapper(new BinaryIdMapper(){
    @Override public int typeId(    String clsName){
      return 400;
    }
    @Override public int fieldId(    int typeId,    String fieldName){
      return 0;
    }
  }
);
  BinaryTypeConfiguration customType3=new BinaryTypeConfiguration("NonExistentClass2");
  customType3.setIdMapper(new BinaryIdMapper(){
    @Override public int typeId(    String clsName){
      return 500;
    }
    @Override public int fieldId(    int typeId,    String fieldName){
      return 0;
    }
  }
);
  BinaryTypeConfiguration customType4=new BinaryTypeConfiguration("NonExistentClass0");
  customType4.setIdMapper(new BinaryIdMapper(){
    @Override public int typeId(    String clsName){
      return 0;
    }
    @Override public int fieldId(    int typeId,    String fieldName){
      return 0;
    }
  }
);
  BinaryMarshaller marsh=binaryMarshaller(new BinaryBasicNameMapper(false),new BinaryBasicIdMapper(false),Arrays.asList(new BinaryTypeConfiguration(Key.class.getName()),new BinaryTypeConfiguration("org.gridgain.NonExistentClass3"),new BinaryTypeConfiguration("NonExistentClass4"),customType1,customType2,customType3,customType4));
  BinaryContext ctx=binaryContext(marsh);
  assertEquals("NotConfiguredClass".hashCode(),ctx.typeId("NotConfiguredClass"));
  assertEquals(Key.class.getName().hashCode(),ctx.typeId(Key.class.getName()));
  assertEquals("org.gridgain.NonExistentClass3".hashCode(),ctx.typeId("org.gridgain.NonExistentClass3"));
  assertEquals("NonExistentClass4".hashCode(),ctx.typeId("NonExistentClass4"));
  assertEquals(300,ctx.typeId(Value.class.getName()));
  assertEquals(400,ctx.typeId("org.gridgain.NonExistentClass1"));
  assertEquals(500,ctx.typeId("NonExistentClass2"));
  assertEquals("nonexistentclass0".hashCode(),ctx.typeId("NonExistentClass0"));
}
