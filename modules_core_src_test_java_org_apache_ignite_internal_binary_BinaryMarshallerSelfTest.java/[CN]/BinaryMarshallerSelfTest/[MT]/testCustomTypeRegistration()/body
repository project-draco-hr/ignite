{
  BinaryTypeConfiguration customType=new BinaryTypeConfiguration(Value.class.getName());
  BinaryMarshaller marsh=binaryMarshaller(Arrays.asList(customType));
  BinaryContext ctx=binaryContext(marsh);
  int typeId=ctx.typeId(Value.class.getName());
  BinaryClassDescriptor descriptor=ctx.descriptorForTypeId(true,typeId,null,false);
  assertEquals(Value.class,descriptor.describedClass());
  assertEquals(true,descriptor.registered());
  assertEquals(true,descriptor.userType());
  Field field=ctx.getClass().getDeclaredField("predefinedTypes");
  field.setAccessible(true);
  Map<Integer,BinaryClassDescriptor> map=(Map<Integer,BinaryClassDescriptor>)field.get(ctx);
  assertTrue(map.size() > 0);
  assertNotNull(map.get(typeId));
  field=ctx.getClass().getDeclaredField("predefinedTypeNames");
  field.setAccessible(true);
  Map<String,Integer> map2=(Map<String,Integer>)field.get(ctx);
  assertTrue(map2.size() > 0);
  assertNull(map2.get(ctx.userTypeName(Value.class.getName())));
}
