{
  BinaryMarshaller marsh=binaryMarshaller(Arrays.asList(new BinaryTypeConfiguration(SimpleObject.class.getName()),new BinaryTypeConfiguration(TestBinary.class.getName())));
  TestBinary obj=binaryObject();
  BinaryObject po=marshal(obj,marsh);
  assertEquals(obj.hashCode(),po.hashCode());
  assertEquals(obj,po.deserialize());
  assertEquals(obj.b,(byte)po.field("_b"));
  assertEquals(obj.s,(short)po.field("_s"));
  assertEquals(obj.i,(int)po.field("_i"));
  assertEquals(obj.l,(long)po.field("_l"));
  assertEquals(obj.f,(float)po.field("_f"),0);
  assertEquals(obj.d,(double)po.field("_d"),0);
  assertEquals(obj.c,(char)po.field("_c"));
  assertEquals(obj.bool,(boolean)po.field("_bool"));
  assertEquals(obj.str,po.field("_str"));
  assertEquals(obj.uuid,po.field("_uuid"));
  assertEquals(obj.date,po.field("_date"));
  assertEquals(obj.ts,po.field("_ts"));
  assertArrayEquals(obj.bArr,(byte[])po.field("_bArr"));
  assertArrayEquals(obj.sArr,(short[])po.field("_sArr"));
  assertArrayEquals(obj.iArr,(int[])po.field("_iArr"));
  assertArrayEquals(obj.lArr,(long[])po.field("_lArr"));
  assertArrayEquals(obj.fArr,(float[])po.field("_fArr"),0);
  assertArrayEquals(obj.dArr,(double[])po.field("_dArr"),0);
  assertArrayEquals(obj.cArr,(char[])po.field("_cArr"));
  assertBooleanArrayEquals(obj.boolArr,(boolean[])po.field("_boolArr"));
  assertArrayEquals(obj.strArr,(String[])po.field("_strArr"));
  assertArrayEquals(obj.uuidArr,(UUID[])po.field("_uuidArr"));
  assertArrayEquals(obj.dateArr,(Date[])po.field("_dateArr"));
  assertArrayEquals(obj.objArr,(Object[])po.field("_objArr"));
  assertEquals(obj.col,po.field("_col"));
  assertEquals(obj.map,po.field("_map"));
  assertEquals(new Integer(obj.enumVal.ordinal()),new Integer(((BinaryObject)po.field("_enumVal")).enumOrdinal()));
  assertArrayEquals(ordinals(obj.enumArr),ordinals((BinaryObject[])po.field("_enumArr")));
  assertNull(po.field("unknown"));
  BinaryObject simplePo=po.field("_simple");
  assertEquals(obj.simple,simplePo.deserialize());
  assertEquals(obj.simple.b,(byte)simplePo.field("b"));
  assertEquals(obj.simple.s,(short)simplePo.field("s"));
  assertEquals(obj.simple.i,(int)simplePo.field("i"));
  assertEquals(obj.simple.l,(long)simplePo.field("l"));
  assertEquals(obj.simple.f,(float)simplePo.field("f"),0);
  assertEquals(obj.simple.d,(double)simplePo.field("d"),0);
  assertEquals(obj.simple.c,(char)simplePo.field("c"));
  assertEquals(obj.simple.bool,(boolean)simplePo.field("bool"));
  assertEquals(obj.simple.str,simplePo.field("str"));
  assertEquals(obj.simple.uuid,simplePo.field("uuid"));
  assertEquals(obj.simple.date,simplePo.field("date"));
  assertEquals(Date.class,obj.simple.date.getClass());
  assertEquals(obj.simple.ts,simplePo.field("ts"));
  assertArrayEquals(obj.simple.bArr,(byte[])simplePo.field("bArr"));
  assertArrayEquals(obj.simple.sArr,(short[])simplePo.field("sArr"));
  assertArrayEquals(obj.simple.iArr,(int[])simplePo.field("iArr"));
  assertArrayEquals(obj.simple.lArr,(long[])simplePo.field("lArr"));
  assertArrayEquals(obj.simple.fArr,(float[])simplePo.field("fArr"),0);
  assertArrayEquals(obj.simple.dArr,(double[])simplePo.field("dArr"),0);
  assertArrayEquals(obj.simple.cArr,(char[])simplePo.field("cArr"));
  assertBooleanArrayEquals(obj.simple.boolArr,(boolean[])simplePo.field("boolArr"));
  assertArrayEquals(obj.simple.strArr,(String[])simplePo.field("strArr"));
  assertArrayEquals(obj.simple.uuidArr,(UUID[])simplePo.field("uuidArr"));
  assertArrayEquals(obj.simple.dateArr,(Date[])simplePo.field("dateArr"));
  assertArrayEquals(obj.simple.objArr,(Object[])simplePo.field("objArr"));
  assertEquals(obj.simple.col,simplePo.field("col"));
  assertEquals(obj.simple.map,simplePo.field("map"));
  assertEquals(new Integer(obj.simple.enumVal.ordinal()),new Integer(((BinaryObject)simplePo.field("enumVal")).enumOrdinal()));
  assertArrayEquals(ordinals(obj.simple.enumArr),ordinals((BinaryObject[])simplePo.field("enumArr")));
  assertNull(simplePo.field("simple"));
  assertNull(simplePo.field("portable"));
  assertNull(simplePo.field("unknown"));
  BinaryObject portablePo=po.field("_portable");
  assertEquals(obj.portable,portablePo.deserialize());
  assertEquals(obj.portable.b,(byte)portablePo.field("_b"));
  assertEquals(obj.portable.s,(short)portablePo.field("_s"));
  assertEquals(obj.portable.i,(int)portablePo.field("_i"));
  assertEquals(obj.portable.l,(long)portablePo.field("_l"));
  assertEquals(obj.portable.f,(float)portablePo.field("_f"),0);
  assertEquals(obj.portable.d,(double)portablePo.field("_d"),0);
  assertEquals(obj.portable.c,(char)portablePo.field("_c"));
  assertEquals(obj.portable.bool,(boolean)portablePo.field("_bool"));
  assertEquals(obj.portable.str,portablePo.field("_str"));
  assertEquals(obj.portable.uuid,portablePo.field("_uuid"));
  assertEquals(obj.portable.date,portablePo.field("_date"));
  assertEquals(obj.portable.ts,portablePo.field("_ts"));
  assertArrayEquals(obj.portable.bArr,(byte[])portablePo.field("_bArr"));
  assertArrayEquals(obj.portable.sArr,(short[])portablePo.field("_sArr"));
  assertArrayEquals(obj.portable.iArr,(int[])portablePo.field("_iArr"));
  assertArrayEquals(obj.portable.lArr,(long[])portablePo.field("_lArr"));
  assertArrayEquals(obj.portable.fArr,(float[])portablePo.field("_fArr"),0);
  assertArrayEquals(obj.portable.dArr,(double[])portablePo.field("_dArr"),0);
  assertArrayEquals(obj.portable.cArr,(char[])portablePo.field("_cArr"));
  assertBooleanArrayEquals(obj.portable.boolArr,(boolean[])portablePo.field("_boolArr"));
  assertArrayEquals(obj.portable.strArr,(String[])portablePo.field("_strArr"));
  assertArrayEquals(obj.portable.uuidArr,(UUID[])portablePo.field("_uuidArr"));
  assertArrayEquals(obj.portable.dateArr,(Date[])portablePo.field("_dateArr"));
  assertArrayEquals(obj.portable.objArr,(Object[])portablePo.field("_objArr"));
  assertEquals(obj.portable.col,portablePo.field("_col"));
  assertEquals(obj.portable.map,portablePo.field("_map"));
  assertEquals(new Integer(obj.portable.enumVal.ordinal()),new Integer(((BinaryObject)portablePo.field("_enumVal")).enumOrdinal()));
  assertArrayEquals(ordinals(obj.portable.enumArr),ordinals((BinaryObject[])portablePo.field("_enumArr")));
  assertNull(portablePo.field("_simple"));
  assertNull(portablePo.field("_portable"));
  assertNull(portablePo.field("unknown"));
}
