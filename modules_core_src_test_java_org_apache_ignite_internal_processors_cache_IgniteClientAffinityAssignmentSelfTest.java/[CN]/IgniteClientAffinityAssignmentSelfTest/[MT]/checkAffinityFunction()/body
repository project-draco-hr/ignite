{
  cache=true;
  startGridsMultiThreaded(3,true);
  long topVer=3;
  try {
    checkAffinity(topVer++);
    cache=false;
    final Ignite ignite3=startGrid(3);
    GridTestUtils.assertThrows(log,new Callable<Object>(){
      @Override public Object call() throws Exception {
        ((IgniteKernal)ignite3).getCache(null);
        return null;
      }
    }
,IllegalArgumentException.class,null);
    assertNotNull(ignite3.cache(null));
    ((IgniteKernal)ignite3).getCache(null);
    checkAffinity(topVer++);
    final Ignite ignite4=startGrid(4);
    GridTestUtils.assertThrows(log,new Callable<Object>(){
      @Override public Object call() throws Exception {
        ((IgniteKernal)ignite4).getCache(null);
        return null;
      }
    }
,IllegalArgumentException.class,null);
    assertNotNull(ignite4.cache(null));
    ((IgniteKernal)ignite4).getCache(null);
    checkAffinity(topVer++);
    final Ignite ignite5=startGrid(5);
    GridTestUtils.assertThrows(log,new Callable<Object>(){
      @Override public Object call() throws Exception {
        ((IgniteKernal)ignite5).getCache(null);
        return null;
      }
    }
,IllegalArgumentException.class,null);
    checkAffinity(topVer++);
    stopGrid(5);
    checkAffinity(topVer++);
    stopGrid(4);
    checkAffinity(topVer++);
    stopGrid(3);
    checkAffinity(topVer);
  }
  finally {
    stopAllGrids();
  }
}
