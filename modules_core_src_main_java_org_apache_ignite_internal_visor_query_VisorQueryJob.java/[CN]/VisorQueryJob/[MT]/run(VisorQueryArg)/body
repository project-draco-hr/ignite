{
  try {
    UUID nid=ignite.localNode().id();
    boolean near=SCAN_NEAR_CACHE.equalsIgnoreCase(arg.queryTxt());
    boolean scan=arg.queryTxt() == null;
    String qryId=((scan || near) ? SCAN_QRY_NAME : SQL_QRY_NAME) + "-" + UUID.randomUUID();
    IgniteCache<Object,Object> c=cache(arg.cacheName());
    if (near || scan) {
      long start=U.currentTimeMillis();
      VisorQueryCursor<Cache.Entry<Object,Object>> cur=new VisorQueryCursor<>(near ? near(c) : scan(c,arg));
      List<Object[]> rows=fetchScanQueryRows(cur,arg.pageSize());
      long duration=U.currentTimeMillis() - start;
      boolean hasNext=cur.hasNext();
      if (hasNext) {
        ignite.cluster().<String,VisorQueryCursor>nodeLocalMap().put(qryId,cur);
        scheduleResultSetHolderRemoval(qryId);
      }
 else       cur.close();
      return new IgniteBiTuple<>(null,new VisorQueryResultEx(nid,qryId,SCAN_COL_NAMES,rows,hasNext,duration));
    }
 else {
      SqlFieldsQuery qry=new SqlFieldsQuery(arg.queryTxt());
      qry.setPageSize(arg.pageSize());
      qry.setLocal(arg.local());
      long start=U.currentTimeMillis();
      VisorQueryCursor<List<?>> cur=new VisorQueryCursor<>(c.withKeepBinary().query(qry));
      Collection<GridQueryFieldMetadata> meta=cur.fieldsMeta();
      if (meta == null)       return new IgniteBiTuple<>(new VisorExceptionWrapper(new SQLException("Fail to execute query. No metadata available.")),null);
 else {
        List<VisorQueryField> names=new ArrayList<>(meta.size());
        for (        GridQueryFieldMetadata col : meta)         names.add(new VisorQueryField(col.schemaName(),col.typeName(),col.fieldName(),col.fieldTypeName()));
        List<Object[]> rows=fetchSqlQueryRows(cur,arg.pageSize());
        long duration=U.currentTimeMillis() - start;
        boolean hasNext=cur.hasNext();
        if (hasNext) {
          ignite.cluster().<String,VisorQueryCursor<List<?>>>nodeLocalMap().put(qryId,cur);
          scheduleResultSetHolderRemoval(qryId);
        }
 else         cur.close();
        return new IgniteBiTuple<>(null,new VisorQueryResultEx(nid,qryId,names,rows,hasNext,duration));
      }
    }
  }
 catch (  Exception e) {
    return new IgniteBiTuple<>(new VisorExceptionWrapper(e),null);
  }
}
