{
  final Ignite ignite=G.grid(getTestGridName());
  final long end=getTestDurationInMinutes() * 60 * 1000 + System.currentTimeMillis();
  ignite.compute().localDeployTask(loadTaskClass(),loadTaskClass().getClassLoader());
  info("Load test will be executed for '" + getTestDurationInMinutes() + "' mins.");
  info("Thread count: " + getThreadCount());
  final GridLoadTestStatistics stats=new GridLoadTestStatistics();
  new Thread(new Runnable(){
    /** 
 * {@inheritDoc} 
 */
    @SuppressWarnings("BusyWait") @Override public void run(){
      try {
        while (end - System.currentTimeMillis() > 0) {
          Class<? extends ComputeTask<?,?>> cls=loadTaskClass();
          ignite.compute().localDeployTask(cls,cls.getClassLoader());
          Thread.sleep(1000);
        }
      }
 catch (      Exception e) {
        error("Failed to deploy grid task.",e);
        fail();
      }
    }
  }
,"grid-notaop-deploy-load-test").start();
  GridTestUtils.runMultiThreaded(new Runnable(){
    /** 
 * {@inheritDoc} 
 */
    @Override public void run(){
      try {
        int levels=3;
        while (end - System.currentTimeMillis() > 0) {
          long start=System.currentTimeMillis();
          ComputeTaskFuture<Integer> fut=ignite.compute().execute(TASK_NAME,levels);
          int res=fut.get();
          if (res != levels)           fail("Received wrong result [expected=" + levels + ", actual="+ res+ ']');
          long taskCnt=stats.onTaskCompleted(fut,levels,System.currentTimeMillis() - start);
          if (taskCnt % 500 == 0)           info(stats.toString());
        }
      }
 catch (      GridException e) {
        error("Failed to execute grid task.",e);
        fail();
      }
    }
  }
,getThreadCount(),"grid-notaop-load-test");
  info("Final test statistics: " + stats);
}
