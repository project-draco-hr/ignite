{
  delegate.setOperationDelay(50);
  initStore(2);
  Set<Integer> exp;
  int start=store.getWriteBehindTotalCriticalOverflowCount();
  try {
    exp=runPutGetRemoveMultithreaded(5,CACHE_SIZE);
  }
  finally {
    log.info(">>> Done inserting, shutting down the store");
    shutdownStore();
  }
  delegate.setOperationDelay(0);
  Map<Integer,String> map=delegate.getMap();
  int end=store.getWriteBehindTotalCriticalOverflowCount();
  log.info(">>> There are " + exp.size() + " keys in store, "+ (end - start)+ " overflows detected");
  assertTrue("No cache overflows detected (a bug or too few keys or too few delay?)",end > start);
  Collection<Integer> extra=new HashSet<>(map.keySet());
  extra.removeAll(exp);
  assertTrue("The underlying store contains extra keys: " + extra,extra.isEmpty());
  Collection<Integer> missing=new HashSet<>(exp);
  missing.removeAll(map.keySet());
  assertTrue("Missing keys in the underlying store: " + missing,missing.isEmpty());
  for (  Integer key : exp)   assertEquals("Invalid value for key " + key,"val" + key,map.get(key));
}
