{
  backups=1;
  try {
    startGrids(GRID_CNT);
    GridCache<String,Integer> cache=grid(0).cache(null);
    cache.put(RMVD_CNTR_KEY,0);
    for (int i=1; i <= GRID_CNT * RETRIES; i++)     cache.put(String.valueOf(i),i);
    for (int j=0; j < GRID_CNT; j++)     assertEquals(0,grid(j).cache(null).get(RMVD_CNTR_KEY));
    for (int i=1; i <= RETRIES; i++)     for (int j=0; j < GRID_CNT; j++)     assertEquals(i,grid(j).cache(null).get(String.valueOf(i)));
    GridCacheQuery<Map.Entry<String,Integer>> qry=cache.queries().createSqlQuery(Integer.class,"_val >= 0");
    qry.keepAll(true);
    qry.includeBackups(false);
    if (cache.configuration().getCacheMode() == REPLICATED)     qry.enableDedup(true);
    List<Map.Entry<String,Integer>> entries=new ArrayList<>(qry.execute().get());
    Collections.sort(entries,new Comparator<Map.Entry<String,Integer>>(){
      @Override public int compare(      Map.Entry<String,Integer> o1,      Map.Entry<String,Integer> o2){
        return o1.getValue().compareTo(o2.getValue());
      }
    }
);
    info("Queried entries: " + entries);
    int val=0;
    for (    Map.Entry<String,Integer> e : entries) {
      assertEquals(val,e.getValue().intValue());
      val++;
    }
    assertFalse(entries.isEmpty());
    cntrRmvd.set(0);
    Collection<Thread> threads=new LinkedList<>();
    for (int i=0; i < GRID_CNT; i++) {
      final int gridId=i;
      threads.add(new Thread(){
        @Override public void run(){
          try {
            removeRetriesQueried(grid(gridId),true);
          }
 catch (          GridException e) {
            throw new GridRuntimeException(e);
          }
        }
      }
);
    }
    for (    Thread th : threads)     th.start();
    for (    Thread th : threads)     th.join();
    for (int i=0; i < GRID_CNT * RETRIES; i++)     for (int ii=0; ii < GRID_CNT; ii++)     assertEquals("Got invalid value from cache [gridIdx=" + ii + ", key="+ i+ ']',null,grid(ii).cache(null).get(Integer.toString(i)));
    assertEquals(-GRID_CNT * RETRIES,grid(0).cache(null).peek(RMVD_CNTR_KEY));
  }
  finally {
    stopAllGrids();
  }
}
