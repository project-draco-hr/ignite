{
  System.out.println();
  System.out.println(">>> Client cache example started.");
  try (GridClient client=createClient()){
    System.out.println(">>> Client created, current grid topology: " + client.compute().nodes());
    final UUID randNodeId=client.compute().nodes().iterator().next().nodeId();
    GridClientData rmtCache=client.data("partitioned");
    Collection<String> keys=new ArrayList<>(KEYS_CNT);
    for (int i=0; i < KEYS_CNT; i++) {
      String key=String.valueOf(i);
      rmtCache.put(key,"val-" + i);
      UUID nodeId=rmtCache.affinity(key);
      System.out.println(">>> Storing key " + key + " on node "+ nodeId);
      keys.add(key);
    }
    GridClientData prj=rmtCache.pinNodes(client.compute().node(randNodeId));
    Map<String,Object> vals=prj.getAll(keys);
    for (    Map.Entry<String,Object> entry : vals.entrySet())     System.out.println(">>> Loaded cache entry [key=" + entry.getKey() + ", val="+ entry.getValue()+ ']');
    System.out.println(">>> Pinned nodes: " + prj.pinnedNodes());
    GridClientFuture<Boolean> futPut=rmtCache.putAsync(String.valueOf(0),"new value for 0");
    System.out.println(">>> Result of asynchronous put: " + (futPut.get() ? "success" : "failure"));
    Map<UUID,Map<String,String>> keyVals=new HashMap<>();
    for (int i=0; i < KEYS_CNT; i++) {
      String key=String.valueOf(i);
      UUID nodeId=rmtCache.affinity(key);
      Map<String,String> m=keyVals.get(nodeId);
      if (m == null)       keyVals.put(nodeId,m=new HashMap<>());
      m.put(key,"val-" + i);
    }
    for (    Map<String,String> kvMap : keyVals.values())     rmtCache.putAll(kvMap);
    Collection<GridClientFuture<?>> futs=new LinkedList<>();
    for (    Map<String,String> kvMap : keyVals.values()) {
      GridClientFuture<?> futPutAll=rmtCache.putAllAsync(kvMap);
      futs.add(futPutAll);
    }
    for (    GridClientFuture<?> fut : futs)     fut.get();
    String key=String.valueOf(0);
    System.out.println(">>> Value for key " + key + " is "+ rmtCache.get(key));
    GridClientFuture<String> futVal=rmtCache.getAsync(key);
    System.out.println(">>> Asynchronous value for key " + key + " is "+ futVal.get());
    for (    Map.Entry<UUID,Map<String,String>> nodeEntry : keyVals.entrySet()) {
      UUID nodeId=nodeEntry.getKey();
      Collection<String> keyCol=nodeEntry.getValue().keySet();
      System.out.println(">>> Values from node [nodeId=" + nodeId + ", values="+ rmtCache.getAll(keyCol)+ ']');
    }
    GridClientFuture futVals=rmtCache.getAllAsync(keys);
    System.out.println(">>> Asynchronous values for keys are " + futVals.get());
    boolean res=rmtCache.remove(String.valueOf(0));
    System.out.println(">>> Result of removal: " + (res ? "success" : "failure"));
    GridClientFuture<Boolean> futRes=rmtCache.removeAsync(String.valueOf(1));
    System.out.println(">>> Result of asynchronous removal is: " + (futRes.get() ? "success" : "failure"));
    rmtCache.removeAll(Arrays.asList(String.valueOf(2),String.valueOf(3)));
    GridClientFuture<?> futResAll=rmtCache.removeAllAsync(Arrays.asList(String.valueOf(3),String.valueOf(4)));
    futResAll.get();
    res=rmtCache.replace(String.valueOf(0),"new value for 0");
    System.out.println(">>> Result for replace for nonexistent key is " + (res ? "success" : "failure"));
    futRes=rmtCache.replaceAsync(String.valueOf(0),"newest value for 0");
    System.out.println(">>> Result for asynchronous replace for nonexistent key is " + (futRes.get() ? "success" : "failure"));
    res=rmtCache.cas(String.valueOf(0),"new value for 0",null);
    System.out.println(">>> Result for put using cas for key that didn't have value yet is " + (res ? "success" : "failure"));
    futRes=rmtCache.casAsync(String.valueOf(0),"newest value for 0","new value for 0");
    System.out.println(">>> Result for put using asynchronous cas is " + (futRes.get() ? "success" : "failure"));
    System.out.println(">>> Cache metrics : " + rmtCache.metrics());
    GridClientFuture futMetrics=rmtCache.metricsAsync();
    System.out.println(">>> Cache asynchronous metrics : " + futMetrics.get());
  }
 }
