{
  IgfsFileInfo rootInfo=new IgfsFileInfo();
  assertEmpty(mgr.directoryListing(ROOT_ID));
  assertEquals(rootInfo,mgr.info(ROOT_ID));
  assertEquals(F.asMap(ROOT_ID,rootInfo),mgr.infos(Arrays.asList(ROOT_ID)));
  IgfsFileInfo a=mkdirsAndGetInfo("/a");
  IgfsFileInfo b=mkdirsAndGetInfo("/a/b");
  IgfsFileInfo k=mkdirsAndGetInfo("/a/b/k");
  IgfsFileInfo z=mkdirsAndGetInfo("/a/k");
  IgfsFileInfo f1=createFileAndGetInfo("/f1");
  IgfsFileInfo f2=createFileAndGetInfo("/a/f2");
  IgfsFileInfo f3=createFileAndGetInfo("/a/b/f3");
  assertEquals(F.asMap("a",new IgfsListingEntry(a),"f1",new IgfsListingEntry(f1)),mgr.directoryListing(ROOT_ID));
  assertEquals(F.asMap("b",new IgfsListingEntry(b),"f2",new IgfsListingEntry(f2),"k",new IgfsListingEntry(z)),mgr.directoryListing(a.id()));
  assertEquals(F.asMap("f3",new IgfsListingEntry(f3),"k",new IgfsListingEntry(k)),mgr.directoryListing(b.id()));
  for (  IgfsFileInfo info : Arrays.asList(f1,f2,f3))   assertEmpty(mgr.directoryListing(info.id()));
  for (  IgfsFileInfo info : Arrays.asList(rootInfo,a,b,f1,f2,f3)) {
    assertEquals(info,mgr.info(info.id()));
    assertEquals(F.asMap(info.id(),info),mgr.infos(Arrays.asList(info.id())));
  }
  assertEquals(ROOT_ID,mgr.fileId(new IgfsPath("/")));
  assertEquals(a.id(),mgr.fileId(new IgfsPath("/a")));
  assertEquals(b.id(),mgr.fileId(new IgfsPath("/a/b")));
  assertEquals(f1.id(),mgr.fileId(new IgfsPath("/f1")));
  assertEquals(f2.id(),mgr.fileId(new IgfsPath("/a/f2")));
  assertEquals(f3.id(),mgr.fileId(new IgfsPath("/a/b/f3")));
  assertNull(mgr.fileId(new IgfsPath("/f4")));
  assertNull(mgr.fileId(new IgfsPath("/a/f5")));
  assertNull(mgr.fileId(new IgfsPath("/a/b/f6")));
  assertEquals(a.id(),mgr.fileId(ROOT_ID,"a"));
  assertEquals(b.id(),mgr.fileId(a.id(),"b"));
  assertEquals(f1.id(),mgr.fileId(ROOT_ID,"f1"));
  assertEquals(f2.id(),mgr.fileId(a.id(),"f2"));
  assertEquals(f3.id(),mgr.fileId(b.id(),"f3"));
  assertNull(mgr.fileId(ROOT_ID,"f4"));
  assertNull(mgr.fileId(a.id(),"f5"));
  assertNull(mgr.fileId(b.id(),"f6"));
  assertEquals(Arrays.asList(ROOT_ID),mgr.fileIds(new IgfsPath("/")));
  assertEquals(Arrays.asList(ROOT_ID,a.id()),mgr.fileIds(new IgfsPath("/a")));
  assertEquals(Arrays.asList(ROOT_ID,a.id(),b.id()),mgr.fileIds(new IgfsPath("/a/b")));
  assertEquals(Arrays.asList(ROOT_ID,f1.id()),mgr.fileIds(new IgfsPath("/f1")));
  assertEquals(Arrays.asList(ROOT_ID,a.id(),f2.id()),mgr.fileIds(new IgfsPath("/a/f2")));
  assertEquals(Arrays.asList(ROOT_ID,a.id(),b.id(),f3.id()),mgr.fileIds(new IgfsPath("/a/b/f3")));
  assertEquals(Arrays.asList(ROOT_ID,null),mgr.fileIds(new IgfsPath("/f4")));
  assertEquals(Arrays.asList(ROOT_ID,a.id(),null),mgr.fileIds(new IgfsPath("/a/f5")));
  assertEquals(Arrays.asList(ROOT_ID,a.id(),b.id(),null),mgr.fileIds(new IgfsPath("/a/b/f6")));
  assertEquals(Arrays.asList(ROOT_ID,null,null,null,null),mgr.fileIds(new IgfsPath("/f7/a/b/f6")));
  expectsRenameFail("/b8","/b2","Failed to perform move because some path component was not found.");
  expectsRenameFail("/a","/b/b8","Failed to perform move because some path component was not found.");
  expectsRenameFail("/a/f2","/a/b/f3","Failed to perform move because destination points to existing file");
  expectsRenameFail("/a/k","/a/b/","Failed to perform move because destination already " + "contains entry with the same name existing file");
  mgr.delete(a.id(),"k",z.id());
  mgr.delete(b.id(),"k",k.id());
  System.out.println("/: " + mgr.directoryListing(ROOT_ID));
  System.out.println("a: " + mgr.directoryListing(a.id()));
  System.out.println("b: " + mgr.directoryListing(b.id()));
  System.out.println("f3: " + mgr.directoryListing(f3.id()));
  mgr.move(path("/a"),path("/a2"));
  mgr.move(path("/a2/b"),path("/a2/b2"));
  assertNotNull(mgr.info(b.id()));
  mgr.move(path("/a2/b2/f3"),path("/a2/b2/f3-2"));
  assertNotNull(mgr.info(b.id()));
  mgr.move(path("/a2/b2/f3-2"),path("/a2/b2/f3"));
  mgr.move(path("/a2/b2"),path("/a2/b"));
  mgr.move(path("/a2"),path("/a"));
  IgniteUuid del=mgr.softDelete(path("/a/b/f3"),false);
  assertEquals(f3.id(),del);
  assertEquals(F.asMap("a",new IgfsListingEntry(a),"f1",new IgfsListingEntry(f1)),mgr.directoryListing(ROOT_ID));
  assertEquals(F.asMap("b",new IgfsListingEntry(b),"f2",new IgfsListingEntry(f2)),mgr.directoryListing(a.id()));
  assertEmpty(mgr.directoryListing(b.id()));
  del=mgr.softDelete(path("/a/b"),false);
  assertEquals(b.id(),del);
  assertEquals(F.asMap("a",new IgfsListingEntry(a),"f1",new IgfsListingEntry(f1)),mgr.directoryListing(ROOT_ID));
  assertEquals(F.asMap("f2",new IgfsListingEntry(f2)),mgr.directoryListing(a.id()));
  assertEmpty(mgr.directoryListing(b.id()));
  IgfsFileInfo newF2=mgr.updateInfo(f2.id(),new C1<IgfsFileInfo,IgfsFileInfo>(){
    @Override public IgfsFileInfo apply(    IgfsFileInfo e){
      return new IgfsFileInfo(e,e.length() + 20);
    }
  }
);
  assertNotNull(newF2);
  assertEquals(f2.id(),newF2.id());
  assertNotSame(f2,newF2);
  del=mgr.softDelete(path("/a/f2"),false);
  assertEquals(f2.id(),del);
  assertEquals(F.asMap("a",new IgfsListingEntry(a),"f1",new IgfsListingEntry(f1)),mgr.directoryListing(ROOT_ID));
  assertEmpty(mgr.directoryListing(a.id()));
  assertEmpty(mgr.directoryListing(b.id()));
  del=mgr.softDelete(path("/f1"),false);
  assertEquals(f1.id(),del);
  assertEquals(F.asMap("a",new IgfsListingEntry(a)),mgr.directoryListing(ROOT_ID));
  assertEmpty(mgr.directoryListing(a.id()));
  assertEmpty(mgr.directoryListing(b.id()));
  del=mgr.softDelete(path("/a"),false);
  assertEquals(a.id(),del);
  assertEmpty(mgr.directoryListing(ROOT_ID));
  assertEmpty(mgr.directoryListing(a.id()));
  assertEmpty(mgr.directoryListing(b.id()));
}
