{
  BinaryTypeConfiguration typeCfg=new BinaryTypeConfiguration("org.apache.ignite.internal.binary.test.GridBinaryTestClass2");
  typeCfg.setIdMapper(new BinaryIdMapper(){
    @Override public int typeId(    String clsName){
      return 100;
    }
    @Override public int fieldId(    int typeId,    String fieldName){
      return 0;
    }
  }
);
  BinaryMarshaller marsh=binaryMarshaller(nameMapper,idMapper,Arrays.asList(new BinaryTypeConfiguration("org.apache.ignite.internal.binary.test.*"),typeCfg));
  BinaryContext ctx=binaryContext(marsh);
  Map<Integer,Class> typeIds=U.field(ctx,"userTypes");
  assertEquals(3,typeIds.size());
  assertTrue(typeIds.containsKey(typeId(CLASS1_FULL_NAME,nameMapper,idMapper)));
  Map<String,org.apache.ignite.internal.binary.BinaryInternalMapper> typeMappers=U.field(ctx,"cls2Mappers");
  assertEquals(3,typeMappers.size());
  assertEquals(nameMapper,typeMappers.get(CLASS2_FULL_NAME).nameMapper());
  assertEquals(100,typeMappers.get(CLASS2_FULL_NAME).idMapper().typeId(CLASS2_FULL_NAME));
}
