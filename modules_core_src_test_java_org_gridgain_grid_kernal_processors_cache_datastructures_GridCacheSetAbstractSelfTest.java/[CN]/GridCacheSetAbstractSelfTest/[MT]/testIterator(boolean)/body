{
  final GridCacheSet<Integer> set0=cache().dataStructures().set(SET_NAME,collocated,true);
  GridTestUtils.assertThrows(log,new Callable<Void>(){
    @Override public Void call() throws Exception {
      set0.iterator();
      return null;
    }
  }
,UnsupportedOperationException.class,null);
  for (int i=0; i < gridCount(); i++) {
    GridCacheSet<Integer> set=cache(i).dataStructures().set(SET_NAME,collocated,false);
    assertFalse(set.iteratorEx().hasNext());
  }
  int cnt=0;
  for (int i=0; i < gridCount(); i++) {
    Set<Integer> set=cache(i).dataStructures().set(SET_NAME,collocated,false);
    for (int j=0; j < 100; j++)     assertTrue(set.add(cnt++));
  }
  for (int i=0; i < gridCount(); i++) {
    GridCacheSet<Integer> set=cache(i).dataStructures().set(SET_NAME,collocated,false);
    assertSetContent(set,cnt);
  }
  Collection<Integer> data=new HashSet<>(cnt);
  GridCloseableIterator<Integer> iter=set0.iteratorEx();
  for (int i=0; i < cnt; i++)   assertTrue(data.add(iter.next()));
  assertFalse(iter.hasNext());
  assertEquals(cnt,data.size());
  for (int i=0; i < cnt; i++)   assertTrue(data.contains(i));
  set0.clear();
  for (int i=0; i < gridCount(); i++) {
    GridCacheSet<Integer> set=cache(i).dataStructures().set(SET_NAME,collocated,false);
    assertFalse(set.iteratorEx().hasNext());
  }
  for (int i=0; i < 10; i++)   assertTrue(set0.add(i));
  iter=set0.iteratorEx();
  while (iter.hasNext()) {
    Integer val=iter.next();
    if (val % 2 == 0)     iter.remove();
  }
  for (int i=0; i < gridCount(); i++) {
    Set<Integer> set=cache(i).dataStructures().set(SET_NAME,collocated,false);
    assertEquals(i % 2 != 0,set.contains(i));
  }
}
