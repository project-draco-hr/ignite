{
  GridFileLock fileLock=GridLoadTestUtils.fileLock();
  fileLock.lock(true);
  try {
    Ignition.start(args.length < 4 ? "modules/core/src/test/config/load/dsi-load-client.xml" : args[3]);
    Thread collector=null;
    Thread timer=null;
    try {
      g=Ignition.ignite("dsi");
      int noThreads=Integer.parseInt(args[0]);
      final int duration=args.length < 2 ? 0 : Integer.parseInt(args[1]);
      final String outputFileName=args.length < 3 ? null : args[2];
      X.println("Thread count: " + noThreads);
      Collection<ClusterNode> srvNodes=g.cluster().forPredicate(serverNode()).nodes();
      if (srvNodes.isEmpty()) {
        X.println("No server nodes available");
        System.exit(-1);
      }
      X.println("No of servers: " + srvNodes.size());
      int srvMaxNoTerminals=noThreads / srvNodes.size();
      if (srvMaxNoTerminals * srvNodes.size() != noThreads) {
        noThreads=srvMaxNoTerminals * srvNodes.size();
        X.println("Using " + noThreads + " threads instead to ensure equal distribution of terminals");
      }
      Collection<Callable<Object>> clients=new ArrayList<>(noThreads);
      HashMap<UUID,Collection<String>> terminals=(HashMap<UUID,Collection<String>>)g.cache("CLIENT_PARTITIONED_CACHE").get("terminals");
      if (terminals == null) {
        X.println(">>> Terminals map has not been initialized.");
        terminals=new HashMap<>(srvNodes.size());
        for (        ClusterNode node : srvNodes) {
          UUID srvrId=node.id();
          X.println(">>> Node ID: " + srvrId);
          Collection<String> list=terminals.get(srvrId);
          if (list == null)           list=new ArrayList<>(0);
          int terminalsPerSrv=0;
          int tid=0;
          while (true) {
            String terminalId=String.valueOf(++tid);
            if (!srvrId.equals(g.cluster().mapKeyToNode("PARTITIONED_CACHE",terminalId).id()))             continue;
            if (terminalsPerSrv < srvMaxNoTerminals) {
              list.add(terminalId);
              clients.add(new GridDsiClient(terminalId,srvrId));
              terminalsPerSrv++;
              X.println("Terminal ID: " + terminalId);
            }
 else             break;
          }
          terminals.put(srvrId,list);
        }
        g.cache("CLIENT_PARTITIONED_CACHE").putx("terminals",terminals);
      }
 else {
        X.println(">>> Terminals map has been initialized.");
        for (        Map.Entry<UUID,Collection<String>> e : terminals.entrySet()) {
          X.println(">>> Node ID: " + e.getKey());
          for (          String s : e.getValue()) {
            clients.add(new GridDsiClient(s,e.getKey()));
            X.println("Terminal ID: " + s);
          }
        }
      }
      if (duration > 0) {
        timer=new Thread(new Runnable(){
          @Override public void run(){
            try {
              Thread.sleep(duration * 1000);
              finish.set(true);
            }
 catch (            InterruptedException ignored) {
            }
          }
        }
);
        timer.start();
      }
      collector=new Thread(new Runnable(){
        @SuppressWarnings({"BusyWait","InfiniteLoopStatement"}) @Override public void run(){
          long txPerSecond=-1;
          long avgLatency=-1;
          long maxSubmitTime=-1;
          T3<Long,Integer,Integer> sst=null;
          try {
            while (!finish.get()) {
              long cnt0=txCnt.get();
              long lt0=latency.get();
              Thread.sleep(UPDATE_INTERVAL_SEC * 1000);
              long cnt1=txCnt.get();
              long lt1=latency.get();
              X.println(">>>");
              txPerSecond=(cnt1 - cnt0) / UPDATE_INTERVAL_SEC;
              X.println(">>> Transaction/s: " + txPerSecond);
              avgLatency=(cnt1 - cnt0) > 0 ? (lt1 - lt0) / (cnt1 - cnt0) : -1;
              X.println(">>> Avg Latency: " + (avgLatency >= 0 ? avgLatency + "ms" : "invalid"));
              maxSubmitTime=submitTime.getAndSet(0);
              X.println(">>> Max Submit Time: " + maxSubmitTime);
              sst=srvStats;
              if (sst != null)               X.println(String.format(">>> Server stats: [tx/sec=%d, nearSize=%d, dhtSize=%d]",sst.get1(),sst.get2(),sst.get3()));
            }
          }
 catch (          InterruptedException ignored) {
            X.println(">>> Interrupted.");
            Thread.currentThread().interrupt();
          }
          if (outputFileName != null) {
            X.println("Writing client results to a file: " + outputFileName);
            try {
              GridLoadTestUtils.appendLineToFile(outputFileName,"%s,%d,%d,%d",GridLoadTestUtils.DATE_TIME_FORMAT.format(new Date()),txPerSecond,avgLatency,maxSubmitTime);
            }
 catch (            IOException e) {
              X.println("Failed to write client results: ",e);
            }
            if (sst != null) {
              String srvOutputFileName=outputFileName + "-server";
              X.println("Writing server results to a file: " + srvOutputFileName);
              try {
                GridLoadTestUtils.appendLineToFile(srvOutputFileName,"%s,%d,%d,%d",GridLoadTestUtils.DATE_TIME_FORMAT.format(new Date()),sst.get1(),sst.get2(),sst.get3());
              }
 catch (              IOException e) {
                X.println("Failed to write server results: ",e);
              }
            }
          }
        }
      }
);
      collector.start();
      ExecutorService pool=Executors.newFixedThreadPool(noThreads);
      pool.invokeAll(clients);
      collector.interrupt();
      pool.shutdown();
    }
  finally {
      if (collector != null && !collector.isInterrupted())       collector.interrupt();
      if (timer != null)       timer.interrupt();
      Ignition.stopAll(true);
    }
  }
  finally {
    fileLock.close();
  }
}
