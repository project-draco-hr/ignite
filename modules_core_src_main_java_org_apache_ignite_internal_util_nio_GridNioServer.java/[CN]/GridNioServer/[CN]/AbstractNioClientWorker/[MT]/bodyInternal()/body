{
  try {
    long lastIdleCheck=U.currentTimeMillis();
    while (!closed && selector.isOpen()) {
      NioOperationFuture req;
      while ((req=changeReqs.poll()) != null) {
switch (req.operation()) {
case REGISTER:
{
            register(req);
            break;
          }
case REQUIRE_WRITE:
{
          SelectionKey key=req.session().key();
          if (key.isValid()) {
            key.interestOps(key.interestOps() | SelectionKey.OP_WRITE);
            ((GridNioSessionImpl)key.attachment()).bytesSent(0);
          }
          break;
        }
case CLOSE:
{
        if (close(req.session(),null))         req.onDone(true);
 else         req.onDone(false);
        break;
      }
case PAUSE_READ:
{
      SelectionKey key=req.session().key();
      if (key.isValid()) {
        key.interestOps(key.interestOps() & (~SelectionKey.OP_READ));
        GridSelectorNioSessionImpl ses=(GridSelectorNioSessionImpl)key.attachment();
        ses.readsPaused(true);
        req.onDone(true);
      }
 else       req.onDone(false);
      break;
    }
case RESUME_READ:
{
    SelectionKey key=req.session().key();
    if (key.isValid()) {
      key.interestOps(key.interestOps() | SelectionKey.OP_READ);
      GridSelectorNioSessionImpl ses=(GridSelectorNioSessionImpl)key.attachment();
      ses.readsPaused(false);
      req.onDone(true);
    }
 else     req.onDone(false);
    break;
  }
case DUMP_STATS:
{
  StringBuilder sb=new StringBuilder();
  Set<SelectionKey> keys=selector.keys();
  sb.append(U.nl()).append(">> Selector info [idx=").append(idx).append(", keysCnt=").append(keys.size()).append("]").append(U.nl());
  for (  SelectionKey key : keys) {
    GridSelectorNioSessionImpl ses=(GridSelectorNioSessionImpl)key.attachment();
    MessageWriter writer=ses.meta(MSG_WRITER.ordinal());
    MessageReader reader=ses.meta(GridDirectParser.READER_META_KEY);
    sb.append("    Connection info [").append("rmtAddr=").append(ses.remoteAddress()).append(", locAddr=").append(ses.localAddress()).append(", msgWriter=").append(writer != null ? writer.toString() : "null").append(", msgReader=").append(reader != null ? reader.toString() : "null").append(", bytesRcvd=").append(ses.bytesReceived()).append(", bytesSent=").append(ses.bytesSent());
    GridNioRecoveryDescriptor desc=ses.recoveryDescriptor();
    if (desc != null) {
      sb.append(", msgsSent=").append(desc.sent()).append(", msgsAckedByRmt=").append(desc.acked()).append(", msgsRcvd=").append(desc.received()).append(", descIdHash=").append(System.identityHashCode(desc));
    }
 else     sb.append(", recoveryDesc=null");
    sb.append("]").append(U.nl());
  }
  if (log.isInfoEnabled())   log.info(sb.toString());
  req.onDone(true);
}
}
}
if (selector.select(2000) > 0) {
if (selectedKeys == null) processSelectedKeys(selector.selectedKeys());
 else processSelectedKeysOptimized(selectedKeys.flip());
}
long now=U.currentTimeMillis();
if (now - lastIdleCheck > 2000) {
lastIdleCheck=now;
checkIdle(selector.keys());
}
}
}
 catch (ClosedByInterruptException e) {
if (log.isDebugEnabled()) log.debug("Closing selector due to thread interruption: " + e.getMessage());
}
catch (ClosedSelectorException e) {
throw new IgniteCheckedException("Selector got closed while active.",e);
}
catch (IOException e) {
throw new IgniteCheckedException("Failed to select events on selector.",e);
}
 finally {
if (selector.isOpen()) {
if (log.isDebugEnabled()) log.debug("Closing all connected client sockets.");
for (SelectionKey key : selector.keys()) close((GridSelectorNioSessionImpl)key.attachment(),null);
if (log.isDebugEnabled()) log.debug("Closing NIO selector.");
U.close(selector,log);
}
}
}
