{
  DiscoveryData data=(DiscoveryData)obj;
  if (!ctx.isDaemon() && data != null) {
    for (    DiscoveryDataItem item : data.items) {
      try {
        if (item.prjPred != null)         ctx.resource().injectGeneric(item.prjPred);
        if ((item.prjPred == null || item.prjPred.apply(ctx.discovery().localNode())) && !locInfos.containsKey(item.routineId)) {
          if (registerHandler(data.nodeId,item.routineId,item.hnd,item.bufSize,item.interval,item.autoUnsubscribe,false))           item.hnd.onListenerRegistered(item.routineId,ctx);
        }
        if (!item.autoUnsubscribe)         locInfos.putIfAbsent(item.routineId,new LocalRoutineInfo(item.prjPred,item.hnd,item.bufSize,item.interval,item.autoUnsubscribe));
      }
 catch (      IgniteCheckedException e) {
        U.error(log,"Failed to register continuous handler.",e);
      }
    }
    for (    Map.Entry<UUID,Map<UUID,LocalRoutineInfo>> entry : data.clientInfos.entrySet()) {
      UUID clientNodeId=entry.getKey();
      Map<UUID,LocalRoutineInfo> clientRoutineMap=entry.getValue();
      for (      Map.Entry<UUID,LocalRoutineInfo> e : clientRoutineMap.entrySet()) {
        UUID routineId=e.getKey();
        LocalRoutineInfo info=e.getValue();
        try {
          if (info.prjPred != null)           ctx.resource().injectGeneric(info.prjPred);
          if (info.prjPred == null || info.prjPred.apply(ctx.discovery().localNode())) {
            if (registerHandler(clientNodeId,routineId,info.hnd,info.bufSize,info.interval,info.autoUnsubscribe,false))             info.hnd.onListenerRegistered(routineId,ctx);
          }
        }
 catch (        IgniteCheckedException err) {
          U.error(log,"Failed to register continuous handler.",err);
        }
      }
      Map<UUID,LocalRoutineInfo> map=clientInfos.get(entry.getKey());
      if (map == null) {
        map=new HashMap<>();
        clientInfos.put(entry.getKey(),map);
      }
      map.putAll(entry.getValue());
    }
  }
}
