{
  addTemplate=true;
  final int GRID_CNT=3;
  startGridsMultiThreaded(GRID_CNT);
  for (int i=0; i < 10; i++) {
    log.info("Iteration: " + i);
    final AtomicInteger idx=new AtomicInteger();
    final int iter=i;
    GridTestUtils.runMultiThreaded(new Callable<Void>(){
      @Override public Void call() throws Exception {
        int node=idx.getAndIncrement() % GRID_CNT;
        Ignite ignite=grid(node);
        log.info("Add configuration using node: " + ignite.name());
        CacheConfiguration cfg=new CacheConfiguration();
        cfg.setName("org.apache.ignite" + iter + "*");
        cfg.setBackups(iter);
        for (int i=0; i < 100; i++)         ignite.addCacheConfiguration(cfg);
        return null;
      }
    }
,15,"add-configuration");
    for (int grid=0; grid < GRID_CNT; grid++)     checkGetOrCreate(grid(grid),"org.apache.ignite" + iter,iter);
  }
  Ignite ignite=startGrid(GRID_CNT);
  checkGetOrCreate(ignite,"org.apache.ignite3",3);
}
