{
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return affinity.affinityKey(key);
    }
  }
,IgniteException.class,EXPECTED_MSG);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return affinity.allPartitions(n);
    }
  }
,IgniteException.class,EXPECTED_MSG);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return affinity.backupPartitions(n);
    }
  }
,IgniteException.class,EXPECTED_MSG);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return affinity.isBackup(n,key);
    }
  }
,IgniteException.class,EXPECTED_MSG);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return affinity.isPrimary(n,key);
    }
  }
,IgniteException.class,EXPECTED_MSG);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return affinity.isPrimaryOrBackup(n,key);
    }
  }
,IgniteException.class,EXPECTED_MSG);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return affinity.mapKeysToNodes(Collections.singleton(key));
    }
  }
,IgniteException.class,EXPECTED_MSG);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return affinity.mapKeyToPrimaryAndBackups(key);
    }
  }
,IgniteException.class,EXPECTED_MSG);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return affinity.mapPartitionsToNodes(Collections.singleton(0));
    }
  }
,IgniteException.class,EXPECTED_MSG);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return affinity.mapPartitionToNode(0);
    }
  }
,IgniteException.class,EXPECTED_MSG);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return affinity.mapPartitionToPrimaryAndBackups(0);
    }
  }
,IgniteException.class,EXPECTED_MSG);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return affinity.mapKeyToNode(key);
    }
  }
,IgniteException.class,EXPECTED_MSG);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return affinity.partition(key);
    }
  }
,IgniteException.class,EXPECTED_MSG);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return affinity.partitions();
    }
  }
,IgniteException.class,EXPECTED_MSG);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return affinity.primaryPartitions(n);
    }
  }
,IgniteException.class,EXPECTED_MSG);
}
