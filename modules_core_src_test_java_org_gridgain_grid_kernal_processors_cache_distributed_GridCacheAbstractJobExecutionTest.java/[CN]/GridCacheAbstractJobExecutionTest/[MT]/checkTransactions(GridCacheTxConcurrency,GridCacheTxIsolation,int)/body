{
  Grid grid=grid(0);
  Collection<GridFuture<?>> futs=new LinkedList<>();
  for (int i=0; i < jobCnt; i++) {
    GridFuture<?> fut=grid.compute().apply(new CX1<Integer,Void>(){
      @GridInstanceResource private Grid grid;
      @Override public Void applyx(      final Integer i) throws GridException {
        GridCache<String,int[]> cache=grid.cache(null);
        GridCacheTx tx=cache.txStart(concur,isolation);
        try {
          int[] arr=cache.get("TestKey");
          if (arr == null)           arr=new int[jobCnt];
          arr[i]=1;
          cache.put("TestKey",arr);
          int c=cntr.getAndIncrement();
          if (c % 50 == 0)           X.println("Executing transaction [i=" + i + ", c="+ c+ ']');
          tx.commit();
        }
  finally {
          tx.close();
        }
        return null;
      }
    }
,i);
    futs.add(fut);
  }
  for (  GridFuture<?> fut : futs)   fut.get();
  for (int i=0; i < GRID_CNT; i++) {
    GridCacheProjection<String,int[]> c=grid(i).cache(null).projection(String.class,int[].class);
    GridCacheTx tx=c.txStart(concur,isolation);
    try {
      int[] arr=c.get("TestKey");
      assertNotNull(arr);
      assertEquals(jobCnt,arr.length);
      for (      int j : arr)       assertEquals(1,j);
      tx.commit();
    }
  finally {
      tx.close();
    }
  }
}
