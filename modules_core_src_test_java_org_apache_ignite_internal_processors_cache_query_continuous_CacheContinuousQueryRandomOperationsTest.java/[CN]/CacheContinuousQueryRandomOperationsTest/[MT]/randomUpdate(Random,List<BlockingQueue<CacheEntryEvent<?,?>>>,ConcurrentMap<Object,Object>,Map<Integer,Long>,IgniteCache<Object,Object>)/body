{
  Object key=new QueryTestKey(rnd.nextInt(KEYS));
  Object newVal=value(rnd);
  Object oldVal=expData.get(key);
  int op=rnd.nextInt(13);
  Ignite ignite=cache.unwrap(Ignite.class);
  Transaction tx=null;
  if (cache.getConfiguration(CacheConfiguration.class).getAtomicityMode() == TRANSACTIONAL && rnd.nextBoolean())   tx=ignite.transactions().txStart(txRandomConcurrency(rnd),txRandomIsolation(rnd));
  try {
switch (op) {
case 0:
{
        cache.put(key,newVal);
        if (tx != null)         tx.commit();
        updatePartitionCounter(cache,key,partCntr);
        waitAndCheckEvent(evtsQueues,partCntr,affinity(cache),key,newVal,oldVal);
        expData.put(key,newVal);
        break;
      }
case 1:
{
      cache.getAndPut(key,newVal);
      if (tx != null)       tx.commit();
      updatePartitionCounter(cache,key,partCntr);
      waitAndCheckEvent(evtsQueues,partCntr,affinity(cache),key,newVal,oldVal);
      expData.put(key,newVal);
      break;
    }
case 2:
{
    cache.remove(key);
    if (tx != null)     tx.commit();
    updatePartitionCounter(cache,key,partCntr);
    waitAndCheckEvent(evtsQueues,partCntr,affinity(cache),key,null,oldVal);
    expData.remove(key);
    break;
  }
case 3:
{
  cache.getAndRemove(key);
  if (tx != null)   tx.commit();
  updatePartitionCounter(cache,key,partCntr);
  waitAndCheckEvent(evtsQueues,partCntr,affinity(cache),key,null,oldVal);
  expData.remove(key);
  break;
}
case 4:
{
cache.invoke(key,new EntrySetValueProcessor(newVal,rnd.nextBoolean()));
if (tx != null) tx.commit();
updatePartitionCounter(cache,key,partCntr);
waitAndCheckEvent(evtsQueues,partCntr,affinity(cache),key,newVal,oldVal);
expData.put(key,newVal);
break;
}
case 5:
{
cache.invoke(key,new EntrySetValueProcessor(null,rnd.nextBoolean()));
if (tx != null) tx.commit();
updatePartitionCounter(cache,key,partCntr);
waitAndCheckEvent(evtsQueues,partCntr,affinity(cache),key,null,oldVal);
expData.remove(key);
break;
}
case 6:
{
cache.putIfAbsent(key,newVal);
if (tx != null) tx.commit();
if (oldVal == null) {
updatePartitionCounter(cache,key,partCntr);
waitAndCheckEvent(evtsQueues,partCntr,affinity(cache),key,newVal,null);
expData.put(key,newVal);
}
 else checkNoEvent(evtsQueues);
break;
}
case 7:
{
cache.getAndPutIfAbsent(key,newVal);
if (tx != null) tx.commit();
if (oldVal == null) {
updatePartitionCounter(cache,key,partCntr);
waitAndCheckEvent(evtsQueues,partCntr,affinity(cache),key,newVal,null);
expData.put(key,newVal);
}
 else checkNoEvent(evtsQueues);
break;
}
case 8:
{
cache.replace(key,newVal);
if (tx != null) tx.commit();
if (oldVal != null) {
updatePartitionCounter(cache,key,partCntr);
waitAndCheckEvent(evtsQueues,partCntr,affinity(cache),key,newVal,oldVal);
expData.put(key,newVal);
}
 else checkNoEvent(evtsQueues);
break;
}
case 9:
{
cache.getAndReplace(key,newVal);
if (tx != null) tx.commit();
if (oldVal != null) {
updatePartitionCounter(cache,key,partCntr);
waitAndCheckEvent(evtsQueues,partCntr,affinity(cache),key,newVal,oldVal);
expData.put(key,newVal);
}
 else checkNoEvent(evtsQueues);
break;
}
case 10:
{
if (oldVal != null) {
Object replaceVal=value(rnd);
boolean success=replaceVal.equals(oldVal);
if (success) {
cache.replace(key,replaceVal,newVal);
if (tx != null) tx.commit();
updatePartitionCounter(cache,key,partCntr);
waitAndCheckEvent(evtsQueues,partCntr,affinity(cache),key,newVal,oldVal);
expData.put(key,newVal);
}
 else {
cache.replace(key,replaceVal,newVal);
if (tx != null) tx.commit();
checkNoEvent(evtsQueues);
}
}
 else {
cache.replace(key,value(rnd),newVal);
if (tx != null) tx.commit();
checkNoEvent(evtsQueues);
}
break;
}
case 11:
{
SortedMap<Object,Object> vals=new TreeMap<>();
while (vals.size() < KEYS / 5) vals.put(new QueryTestKey(rnd.nextInt(KEYS)),value(rnd));
cache.putAll(vals);
if (tx != null) tx.commit();
for (Map.Entry<Object,Object> e : vals.entrySet()) updatePartitionCounter(cache,e.getKey(),partCntr);
waitAndCheckEvent(evtsQueues,partCntr,affinity(cache),vals,expData);
expData.putAll(vals);
break;
}
case 12:
{
SortedMap<Object,Object> vals=new TreeMap<>();
while (vals.size() < KEYS / 5) vals.put(new QueryTestKey(rnd.nextInt(KEYS)),newVal);
cache.invokeAll(vals.keySet(),new EntrySetValueProcessor(newVal,rnd.nextBoolean()));
if (tx != null) tx.commit();
for (Map.Entry<Object,Object> e : vals.entrySet()) updatePartitionCounter(cache,e.getKey(),partCntr);
waitAndCheckEvent(evtsQueues,partCntr,affinity(cache),vals,expData);
for (Object o : vals.keySet()) expData.put(o,newVal);
break;
}
default :
fail("Op:" + op);
}
}
  finally {
if (tx != null) tx.close();
}
}
