{
  CacheConfiguration cc=defaultCacheConfiguration();
  cc.setCacheMode(PARTITIONED);
  cc.setAtomicityMode(ATOMIC);
  cc.setSwapEnabled(false);
  cc.setWriteBehindEnabled(false);
  URL cfgUrl;
  try {
    cfgUrl=new URL(DFLT_MAPPING_CONFIG);
  }
 catch (  MalformedURLException ignore) {
    cfgUrl=U.resolveIgniteUrl(DFLT_MAPPING_CONFIG);
  }
  if (cfgUrl == null)   throw new Exception("Failed to resolve metadata path: " + DFLT_MAPPING_CONFIG);
  try {
    GenericApplicationContext springCtx=new GenericApplicationContext();
    new XmlBeanDefinitionReader(springCtx).loadBeanDefinitions(new UrlResource(cfgUrl));
    springCtx.refresh();
    Collection<CacheTypeMetadata> tp=new ArrayList<>(springCtx.getBeansOfType(CacheTypeMetadata.class).values());
    cc.setTypeMetadata(tp);
  }
 catch (  BeansException e) {
    if (X.hasCause(e,ClassNotFoundException.class))     throw new IgniteCheckedException("Failed to instantiate Spring XML application context " + "(make sure all classes used in Spring configuration are present at CLASSPATH) " + "[springUrl=" + cfgUrl + ']',e);
 else     throw new IgniteCheckedException("Failed to instantiate Spring XML application context [springUrl=" + cfgUrl + ", err="+ e.getMessage()+ ']',e);
  }
  cc.setCacheStoreFactory(singletonFactory(store));
  cc.setReadThrough(true);
  cc.setWriteThrough(true);
  cc.setLoadPreviousValue(true);
  return cc;
}
