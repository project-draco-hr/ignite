{
  if (!restart)   onSpiStart();
synchronized (mux) {
    spiState=DISCONNECTED;
  }
  if (debugMode) {
    if (!log.isInfoEnabled())     throw new IgniteSpiException("Info log level should be enabled for TCP discovery to work " + "in debug mode.");
    debugLog=new ConcurrentLinkedDeque<>();
    U.quietAndWarn(log,"TCP discovery SPI is configured in debug mode.");
  }
  fromAddrs.clear();
  noResAddrs.clear();
  sockTimeoutWorker=new SocketTimeoutWorker();
  sockTimeoutWorker.start();
  msgWorker=new RingMessageWorker();
  msgWorker.start();
  tcpSrvr=new TcpServer();
  IgniteBiTuple<Collection<String>,Collection<String>> addrs;
  try {
    addrs=U.resolveLocalAddresses(locHost);
  }
 catch (  IOException|IgniteCheckedException e) {
    throw new IgniteSpiException("Failed to resolve local host to set of external addresses: " + locHost,e);
  }
  locNode=new TcpDiscoveryNode(getLocalNodeId(),addrs.get1(),addrs.get2(),tcpSrvr.port,metricsProvider,locNodeVer);
  Collection<InetSocketAddress> extAddrs=addrRslvr == null ? null : U.resolveAddresses(addrRslvr,F.flat(Arrays.asList(addrs.get1(),addrs.get2())),locNode.discoveryPort());
  if (extAddrs != null)   locNodeAttrs.put(createSpiAttributeName(ATTR_EXT_ADDRS),extAddrs);
  locNode.setAttributes(locNodeAttrs);
  locNode.local(true);
  locNodeAddrs=getNodeAddresses(locNode);
  if (log.isDebugEnabled())   log.debug("Local node initialized: " + locNode);
  tcpSrvr.start();
  ring.localNode(locNode);
  if (ipFinder.isShared())   registerLocalNodeAddress();
 else {
    if (F.isEmpty(ipFinder.getRegisteredAddresses()))     throw new IgniteSpiException("Non-shared IP finder must have IP addresses specified in " + "GridTcpDiscoveryIpFinder.getRegisteredAddresses() configuration property " + "(specify list of IP addresses in configuration).");
    ipFinderHasLocAddr=ipFinderHasLocalAddress();
  }
  if (statsPrintFreq > 0 && log.isInfoEnabled()) {
    statsPrinter=new StatisticsPrinter();
    statsPrinter.start();
  }
  stats.onJoinStarted();
  joinTopology();
  stats.onJoinFinished();
  hbsSnd=new HeartbeatsSender();
  hbsSnd.start();
  chkStatusSnd=new CheckStatusSender();
  chkStatusSnd.start();
  if (ipFinder.isShared() || ignite.configuration().isPeerClassLoadingEnabled()) {
    cleaner=new DiscoveryCleaner();
    cleaner.start();
  }
  if (log.isDebugEnabled() && !restart)   log.debug(startInfo());
  if (restart)   getSpiContext().registerPort(tcpSrvr.port,TCP);
}
