{
  ObjectWrapper.Builder builder=ObjectWrapper.newBuilder();
  ObjectWrapperType type=NONE;
  ByteString data;
  if (obj == null) {
    builder.setType(type);
    builder.setBinary(ByteString.copyFrom(EMPTY));
    return builder.build();
  }
 else   if (obj instanceof Boolean) {
    data=ByteString.copyFrom((Boolean)obj ? new byte[]{0x01} : new byte[]{0x00});
    type=BOOL;
  }
 else   if (obj instanceof Byte) {
    data=ByteString.copyFrom(new byte[]{(Byte)obj});
    type=BYTE;
  }
 else   if (obj instanceof Short) {
    data=ByteString.copyFrom(GridClientByteUtils.shortToBytes((Short)obj));
    type=SHORT;
  }
 else   if (obj instanceof Integer) {
    data=ByteString.copyFrom(GridClientByteUtils.intToBytes((Integer)obj));
    type=INT32;
  }
 else   if (obj instanceof Long) {
    data=ByteString.copyFrom(GridClientByteUtils.longToBytes((Long)obj));
    type=INT64;
  }
 else   if (obj instanceof Float) {
    data=ByteString.copyFrom(GridClientByteUtils.intToBytes(Float.floatToIntBits((Float)obj)));
    type=FLOAT;
  }
 else   if (obj instanceof Double) {
    data=ByteString.copyFrom(GridClientByteUtils.longToBytes(Double.doubleToLongBits((Double)obj)));
    type=DOUBLE;
  }
 else   if (obj instanceof String) {
    data=ByteString.copyFrom((String)obj,"UTF-8");
    type=STRING;
  }
 else   if (obj instanceof byte[]) {
    data=ByteString.copyFrom((byte[])obj);
    type=BYTES;
  }
 else   if (obj instanceof java.util.Collection) {
    data=wrapCollection((java.util.Collection)obj).toByteString();
    type=COLLECTION;
  }
 else   if (obj instanceof java.util.Map) {
    data=wrapMap((java.util.Map)obj).toByteString();
    type=MAP;
  }
 else   if (obj instanceof java.util.UUID) {
    data=wrapUUID((java.util.UUID)obj);
    type=UUID;
  }
 else   if (obj instanceof GridClientNodeBean) {
    data=wrapNode((GridClientNodeBean)obj).toByteString();
    type=NODE_BEAN;
  }
 else   if (obj instanceof GridClientTaskResultBean) {
    data=wrapTaskResult((GridClientTaskResultBean)obj).toByteString();
    type=TASK_BEAN;
  }
 else   if (obj instanceof Enum || obj instanceof InetAddress) {
    data=ByteString.copyFrom(obj.toString(),"UTF-8");
  }
 else   if (obj.getClass().isArray()) {
    throw new IllegalArgumentException("Failed to serialize array (use collections instead): " + obj.getClass().getName());
  }
 else   if (obj instanceof Serializable) {
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    ObjectOutputStream objOut=new ObjectOutputStream(out);
    objOut.writeObject(obj);
    objOut.close();
    data=ByteString.copyFrom(out.toByteArray());
    type=SERIALIZABLE;
  }
 else   throw new IllegalArgumentException("Failed to serialize object " + "(object serialization of given type is not supported): " + obj.getClass().getName());
  builder.setType(type);
  builder.setBinary(data);
  return builder.build();
}
