{
  ObjectWrapperType type=wrapper.getType();
  ByteString data=wrapper.getBinary();
switch (type) {
case NONE:
{
      return null;
    }
case BOOL:
{
    return data.byteAt(0) != 0x00;
  }
case BYTE:
{
  return data.byteAt(0);
}
case SHORT:
{
return GridClientByteUtils.bytesToShort(data.toByteArray(),0);
}
case INT32:
{
return GridClientByteUtils.bytesToInt(data.toByteArray(),0);
}
case INT64:
{
return GridClientByteUtils.bytesToLong(data.toByteArray(),0);
}
case FLOAT:
{
return Float.intBitsToFloat(GridClientByteUtils.bytesToInt(data.toByteArray(),0));
}
case DOUBLE:
{
return Double.longBitsToDouble(GridClientByteUtils.bytesToLong(data.toByteArray(),0));
}
case BYTES:
{
return data.toByteArray();
}
case STRING:
{
return data.toStringUtf8();
}
case COLLECTION:
{
return unwrapCollection(ClientMessagesProtocols.Collection.parseFrom(data));
}
case MAP:
{
return unwrapMap(ClientMessagesProtocols.Map.parseFrom(data));
}
case UUID:
{
return unwrapUUID(data);
}
case NODE_BEAN:
{
return unwrapNode(ProtoNodeBean.parseFrom(data));
}
case TASK_BEAN:
{
return unwrapTaskResult(ProtoTaskBean.parseFrom(data));
}
case SERIALIZABLE:
{
ByteArrayInputStream in=new ByteArrayInputStream(data.toByteArray());
ObjectInputStream objIn=new ObjectInputStream(in);
try {
return objIn.readObject();
}
 catch (ClassNotFoundException e) {
throw new IOException(e.getMessage(),e);
}
}
default :
throw new IOException("Failed to unmarshal object (unsupported type): " + type);
}
}
