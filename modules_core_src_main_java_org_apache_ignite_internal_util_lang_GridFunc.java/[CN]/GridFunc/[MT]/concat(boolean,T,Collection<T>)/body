{
  if (cp) {
    if (isEmpty(c)) {
      Collection<T> l=new ArrayList<>(1);
      l.add(t);
      return l;
    }
    Collection<T> ret=new ArrayList<>(c.size() + 1);
    ret.add(t);
    ret.addAll(c);
    return ret;
  }
 else {
    if (isEmpty(c))     return Collections.singletonList(t);
    return new GridSerializableCollection<T>(){
      @NotNull @Override public Iterator<T> iterator(){
        return new GridSerializableIterator<T>(){
          private Iterator<T> it;
          @Override public boolean hasNext(){
            return it == null || it.hasNext();
          }
          @Nullable @Override public T next(){
            if (it == null) {
              it=c.iterator();
              return t;
            }
            return it.next();
          }
          @Override public void remove(){
            throw new UnsupportedOperationException();
          }
        }
;
      }
      @Override public int size(){
        return c.size() + 1;
      }
      @Override public boolean equals(      Object obj){
        return obj instanceof Collection && eqNotOrdered(this,(Collection)obj);
      }
    }
;
  }
}
