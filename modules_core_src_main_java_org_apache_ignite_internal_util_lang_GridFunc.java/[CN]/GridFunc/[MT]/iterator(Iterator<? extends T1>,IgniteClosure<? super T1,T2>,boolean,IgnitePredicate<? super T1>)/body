{
  A.notNull(c,"c",trans,"trans");
  if (isAlwaysFalse(p))   return F.emptyIterator();
  return new GridIteratorAdapter<T2>(){
    /** 
 */
    private T1 elem;
    /** 
 */
    private boolean moved=true;
    /** 
 */
    private boolean more;
    /** 
 */
    private Iterator<? extends T1> iter=c;
    @Override public boolean hasNextX(){
      if (isEmpty(p))       return iter.hasNext();
 else {
        if (!moved)         return more;
 else {
          more=false;
          while (iter.hasNext()) {
            elem=iter.next();
            boolean isAll=true;
            for (            IgnitePredicate<? super T1> r : p)             if (r != null && !r.apply(elem)) {
              isAll=false;
              break;
            }
            if (isAll) {
              more=true;
              moved=false;
              return true;
            }
          }
          elem=null;
          return false;
        }
      }
    }
    @Nullable @Override public T2 nextX(){
      if (isEmpty(p))       return trans.apply(iter.next());
 else {
        if (hasNext()) {
          moved=true;
          return trans.apply(elem);
        }
 else         throw new NoSuchElementException();
      }
    }
    @Override public void removeX(){
      if (readOnly)       throw new UnsupportedOperationException("Cannot modify read-only iterator.");
      iter.remove();
    }
  }
;
}
