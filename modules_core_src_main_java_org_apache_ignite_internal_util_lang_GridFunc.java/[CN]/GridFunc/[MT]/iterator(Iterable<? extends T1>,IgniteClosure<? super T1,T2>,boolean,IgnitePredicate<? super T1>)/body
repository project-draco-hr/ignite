{
  A.notNull(c,"c",trans,"trans",p,"p");
  if (isAlwaysFalse(p))   return F.emptyIterator();
  return new GridIteratorAdapter<T2>(){
    /** 
 */
    private T1 elem;
    /** 
 */
    private boolean moved=true;
    /** 
 */
    private boolean more;
    /** 
 */
    private Iterator<? extends T1> iter=c.iterator();
    @Override public boolean hasNextX(){
      if (!moved)       return more;
 else {
        more=false;
        while (iter.hasNext()) {
          elem=iter.next();
          if (p.apply(elem)) {
            more=true;
            moved=false;
            return true;
          }
        }
        elem=null;
        return false;
      }
    }
    @Nullable @Override public T2 nextX(){
      if (hasNext()) {
        moved=true;
        return trans.apply(elem);
      }
 else       throw new NoSuchElementException();
    }
    @Override public void removeX(){
      if (readOnly)       throw new UnsupportedOperationException("Cannot modify read-only iterator.");
      iter.remove();
    }
  }
;
}
