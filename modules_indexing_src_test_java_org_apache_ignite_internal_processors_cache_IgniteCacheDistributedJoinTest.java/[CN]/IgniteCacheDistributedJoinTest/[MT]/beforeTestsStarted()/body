{
  startGridsMultiThreaded(4);
  awaitPartitionMapExchange();
  conn=DriverManager.getConnection("jdbc:h2:mem:");
  Statement s=conn.createStatement();
  s.execute("create schema a");
  s.execute("create schema b");
  s.execute("create schema c");
  s.execute("create table a.a(a bigint, b bigint, c bigint)");
  s.execute("create table b.b(a bigint, b bigint, c bigint)");
  s.execute("create table c.c(a bigint, b bigint, c bigint)");
  s.execute("create index on a.a(a)");
  s.execute("create index on a.a(b)");
  s.execute("create index on a.a(c)");
  s.execute("create index on b.b(a)");
  s.execute("create index on b.b(b)");
  s.execute("create index on b.b(c)");
  s.execute("create index on c.c(a)");
  s.execute("create index on c.c(b)");
  s.execute("create index on c.c(c)");
  GridRandom rnd=new GridRandom();
  Ignite ignite=ignite(0);
  IgniteCache<Integer,A> a=ignite.cache("a");
  IgniteCache<Integer,B> b=ignite.cache("b");
  IgniteCache<Integer,C> c=ignite.cache("c");
  for (int i=0; i < 100; i++) {
    a.put(i,insert(s,new A(rnd.nextInt(50),rnd.nextInt(100),rnd.nextInt(150))));
    b.put(i,insert(s,new B(rnd.nextInt(100),rnd.nextInt(50),rnd.nextInt(150))));
    c.put(i,insert(s,new C(rnd.nextInt(150),rnd.nextInt(100),rnd.nextInt(50))));
  }
  checkSameResult(s,a,"select a, count(*) from a group by a order by a");
  checkSameResult(s,a,"select b, count(*) from a group by b order by b");
  checkSameResult(s,a,"select c, count(*) from a group by c order by c");
  checkSameResult(s,b,"select a, count(*) from b group by a order by a");
  checkSameResult(s,b,"select b, count(*) from b group by b order by b");
  checkSameResult(s,b,"select c, count(*) from b group by c order by c");
  checkSameResult(s,c,"select a, count(*) from c group by a order by a");
  checkSameResult(s,c,"select b, count(*) from c group by b order by b");
  checkSameResult(s,c,"select c, count(*) from c group by c order by c");
  s.close();
}
