{
  final AtomicLong opCnt=new AtomicLong();
  final AtomicLong totalOpCnt=new AtomicLong();
  final AtomicBoolean done=new AtomicBoolean();
  long start=System.currentTimeMillis();
  IgniteFuture<?> fut=multithreadedAsync(new Callable<Object>(){
    @Override public Object call() throws Exception {
      Random rnd=new Random();
      byte[] val=new byte[1024];
      long locTotalOpCnt=0;
      while (!done.get()) {
        for (int i=0; i < 500; i++) {
          T3<Integer,Integer,byte[]> key=randomKey(rnd);
          map.put(key.get1(),key.get2(),key.get3(),val);
        }
        locTotalOpCnt+=500;
        opCnt.addAndGet(500);
      }
      totalOpCnt.addAndGet(locTotalOpCnt);
      return null;
    }
  }
,threadCnt);
  final int step=2000;
  while (System.currentTimeMillis() - start < duration) {
    U.sleep(step);
    long ops=opCnt.getAndSet(0);
    info("Putting " + (ops * 1000) / step + " ops/sec");
  }
  done.set(true);
  fut.get();
  long end=System.currentTimeMillis();
  info("Average put performance: " + (totalOpCnt.get() * 1000) / (end - start) + " ops/sec");
}
