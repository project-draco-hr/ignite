{
  enterBusy();
  try {
    if (rmtClient != null)     throw new IOException("File system is already initialized: " + rmtClient);
    A.notNull(name,"name");
    A.notNull(cfg,"cfg");
    super.initialize(name,cfg);
    setConf(cfg);
    String disableCacheName=String.format("fs.%s.impl.disable.cache",name.getScheme());
    cacheEnabled=!cfg.getBoolean(disableCacheName,false);
    mgmt=cfg.getBoolean(IGFS_MANAGEMENT,false);
    if (!IGFS_SCHEME.equals(name.getScheme()))     throw new IOException("Illegal file system URI [expected=" + IGFS_SCHEME + "://[name]/[optional_path], actual="+ name+ ']');
    uri=name;
    uriAuthority=uri.getAuthority();
    setUser(cfg.get(MRJobConfig.USER_NAME,DFLT_USER_NAME));
    seqReadsBeforePrefetch=parameter(cfg,PARAM_IGFS_SEQ_READS_BEFORE_PREFETCH,uriAuthority,0);
    if (seqReadsBeforePrefetch > 0)     seqReadsBeforePrefetchOverride=true;
    dfltReplication=(short)cfg.getInt("dfs.replication",3);
    colocateFileWrites=parameter(cfg,PARAM_IGFS_COLOCATED_WRITES,uriAuthority,false);
    preferLocFileWrites=cfg.getBoolean(PARAM_IGFS_PREFER_LOCAL_WRITES,false);
    String logDirCfg=parameter(cfg,PARAM_IGFS_LOG_DIR,uriAuthority,DFLT_IGFS_LOG_DIR);
    File logDirFile=U.resolveIgnitePath(logDirCfg);
    String logDir=logDirFile != null ? logDirFile.getAbsolutePath() : null;
    rmtClient=new IgfsHadoopWrapper(uriAuthority,logDir,cfg,LOG);
    IgfsHandshakeResponse handshake=rmtClient.handshake(logDir);
    igfsGrpBlockSize=handshake.blockSize();
    IgfsPaths paths=handshake.secondaryPaths();
    Boolean logEnabled=parameter(cfg,PARAM_IGFS_LOG_ENABLED,uriAuthority,false);
    if (handshake.sampling() != null ? handshake.sampling() : logEnabled) {
      if (logDir == null)       throw new IOException("Failed to resolve log directory: " + logDirCfg);
      Integer batchSize=parameter(cfg,PARAM_IGFS_LOG_BATCH_SIZE,uriAuthority,DFLT_IGFS_LOG_BATCH_SIZE);
      clientLog=IgfsLogger.logger(uriAuthority,handshake.igfsName(),logDir,batchSize);
    }
 else     clientLog=IgfsLogger.disabledLogger();
    modeRslvr=new IgfsModeResolver(paths.defaultMode(),paths.pathModes());
    boolean initSecondary=paths.defaultMode() == PROXY;
    if (!initSecondary && paths.pathModes() != null && !paths.pathModes().isEmpty()) {
      for (      T2<IgfsPath,IgfsMode> pathMode : paths.pathModes()) {
        IgfsMode mode=pathMode.getValue();
        if (mode == PROXY) {
          initSecondary=true;
          break;
        }
      }
    }
    if (initSecondary) {
      Map<String,String> props=paths.properties();
      String secUri=props.get(SECONDARY_FS_URI);
      String secConfPath=props.get(SECONDARY_FS_CONFIG_PATH);
      try {
        SecondaryFileSystemProvider secProvider=new SecondaryFileSystemProvider(secUri,secConfPath);
        secondaryFs=secProvider.createFileSystem();
        secondaryUri=secProvider.uri();
      }
 catch (      IOException e) {
        if (!mgmt)         throw new IOException("Failed to connect to the secondary file system: " + secUri,e);
 else         LOG.warn("Visor failed to create secondary file system (operations on paths with PROXY mode " + "will have no effect): " + e.getMessage());
      }
    }
  }
  finally {
    leaveBusy();
  }
}
