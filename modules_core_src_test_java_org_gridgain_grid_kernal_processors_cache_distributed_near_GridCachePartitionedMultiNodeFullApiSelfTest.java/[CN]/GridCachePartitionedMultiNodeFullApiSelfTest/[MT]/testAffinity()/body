{
  for (int i=0; i < gridCount(); i++)   info("Grid " + i + ": "+ grid(i).localNode().id());
  final Object affKey=new Object(){
    @Override public boolean equals(    Object obj){
      return obj == this;
    }
    @Override public int hashCode(){
      return 1;
    }
  }
;
  Object key=new Object(){
    /** 
 */
    @SuppressWarnings("UnusedDeclaration") @GridCacheAffinityKeyMapped private final Object key0=affKey;
    @Override public boolean equals(    Object obj){
      return obj == this;
    }
    @Override public int hashCode(){
      return 2;
    }
  }
;
  info("All affinity nodes: " + affinityNodes());
  GridCache<Object,Object> cache=grid(0).cache(null);
  info("Cache affinity nodes: " + cache.affinity().mapKeyToPrimaryAndBackups(key));
  GridCacheAffinity<Object> aff=cache.affinity();
  Collection<GridNode> nodes=aff.mapKeyToPrimaryAndBackups(key);
  info("Got nodes from affinity: " + nodes);
  assertEquals(cacheMode() == PARTITIONED ? 2 : affinityNodes().size(),nodes.size());
  GridNode primary=F.first(nodes);
  GridNode backup=F.last(nodes);
  assertNotSame(primary,backup);
  GridNode other=null;
  for (int i=0; i < gridCount(); i++) {
    GridNode node=grid(i).localNode();
    if (!node.equals(primary) && !node.equals(backup)) {
      other=node;
      break;
    }
  }
  assertNotSame(other,primary);
  assertNotSame(other,backup);
  assertNotNull(primary);
  assertNotNull(backup);
  assertNotNull(other);
  assertTrue(cache.affinity().isPrimary(primary,key));
  assertFalse(cache.affinity().isBackup(primary,key));
  assertTrue(cache.affinity().isPrimaryOrBackup(primary,key));
  assertFalse(cache.affinity().isPrimary(backup,key));
  assertTrue(cache.affinity().isBackup(backup,key));
  assertTrue(cache.affinity().isPrimaryOrBackup(backup,key));
  assertFalse(cache.affinity().isPrimary(other,key));
  if (cacheMode() == PARTITIONED) {
    assertFalse(cache.affinity().isBackup(other,key));
    assertFalse(cache.affinity().isPrimaryOrBackup(other,key));
  }
}
