{
  final WindowHolder win=ref.get();
  final GridConcurrentSkipListSet<Holder<E>> col=win.collection();
  final Set<Object> set=win.set();
  final Iterator<Holder<E>> it=col.iterator();
  return new GridStreamerWindowIterator<E>(){
    private Holder<E> lastRet;
    @Override public boolean hasNext(){
      return it.hasNext();
    }
    @Override public E next(){
      lastRet=it.next();
      return lastRet.val;
    }
    @Override public E removex(){
      if (lastRet == null)       throw new IllegalStateException();
      if (col.remove(lastRet)) {
        if (set != null)         set.remove(lastRet.val);
        win.size().decrementAndGet();
        return lastRet.val;
      }
 else       return null;
    }
  }
;
}
