{
  ensureDelegateInit();
  return new ListIterator<Object>(){
    /** 
 */
    private final ListIterator<Object> delegate=BinaryLazyLinkedList.super.listIterator(idx);
    @Override public boolean hasNext(){
      return delegate.hasNext();
    }
    @Override public Object next(){
      return BinaryUtils.unwrapLazy(delegate.next());
    }
    @Override public boolean hasPrevious(){
      return delegate.hasPrevious();
    }
    @Override public Object previous(){
      return BinaryUtils.unwrapLazy(delegate.previous());
    }
    @Override public int nextIndex(){
      return delegate.nextIndex();
    }
    @Override public int previousIndex(){
      return delegate.previousIndex();
    }
    @Override public void remove(){
      delegate.remove();
    }
    @Override public void set(    Object o){
      delegate.set(o);
    }
    @Override public void add(    Object o){
      delegate.add(o);
    }
  }
;
}
