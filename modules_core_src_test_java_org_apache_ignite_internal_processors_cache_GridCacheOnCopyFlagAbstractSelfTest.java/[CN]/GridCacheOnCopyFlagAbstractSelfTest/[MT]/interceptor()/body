{
  noInterceptor=false;
  IgniteCache<TestKey,TestValue> cache=grid(0).createCache(cacheConfiguration());
  try {
    for (int i=0; i < ITER_CNT; i++) {
      final TestValue val=new TestValue(i);
      final TestKey key=new TestKey(i,i);
      interceptor.delegate(new CacheInterceptorAdapter<TestKey,TestValue>(){
        @Override public void onAfterPut(        Cache.Entry<TestKey,TestValue> entry){
          assertNotSame(key,entry.getKey());
          assertSame(entry.getValue(),entry.getValue());
          assertSame(entry.getKey(),entry.getKey());
          entry.getValue().val(WRONG_VALUE);
        }
      }
);
      cache.put(key,val);
      CacheObject obj=((GridCacheAdapter)((IgniteCacheProxy)cache).delegate()).peekEx(key).peekVisibleValue();
      if (storeValue(cache))       assertEquals(i,((TestValue)U.field(obj,"val")).val());
 else       assertEquals(i,CU.<TestValue>value(obj,((IgniteCacheProxy)cache).context(),false).val());
      final TestValue newTestVal=new TestValue(-i);
      interceptor.delegate(new CacheInterceptorAdapter<TestKey,TestValue>(){
        @Override public TestValue onBeforePut(        Cache.Entry<TestKey,TestValue> entry,        TestValue newVal){
          assertNotSame(key,entry.getKey());
          assertNotSame(val,entry.getValue());
          assertEquals(newTestVal,newVal);
          entry.getValue().val(WRONG_VALUE);
          return newVal;
        }
        @Override public void onAfterPut(        Cache.Entry<TestKey,TestValue> entry){
          assertNotSame(key,entry.getKey());
          assertSame(entry.getValue(),entry.getValue());
          assertSame(entry.getKey(),entry.getKey());
          entry.getValue().val(WRONG_VALUE);
        }
      }
);
      cache.put(key,newTestVal);
      obj=((GridCacheAdapter)((IgniteCacheProxy)cache).delegate()).peekEx(key).peekVisibleValue();
      if (storeValue(cache))       assertEquals(-i,((TestValue)U.field(obj,"val")).val());
 else       assertEquals(-i,CU.<TestValue>value(obj,((IgniteCacheProxy)cache).context(),false).val());
      interceptor.delegate(new CacheInterceptorAdapter<TestKey,TestValue>(){
        @Override public IgniteBiTuple onBeforeRemove(        Cache.Entry<TestKey,TestValue> entry){
          assertNotSame(key,entry.getKey());
          assertNotSame(newTestVal,entry.getValue());
          return super.onBeforeRemove(entry);
        }
        @Override public void onAfterRemove(        Cache.Entry<TestKey,TestValue> entry){
          assertNotSame(key,entry.getKey());
          assertNotSame(newTestVal,entry.getValue());
        }
      }
);
      cache.remove(key);
    }
  }
  finally {
    if (cache != null)     cache.destroy();
  }
}
