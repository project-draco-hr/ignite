{
  IgniteCache<TestKey,TestValue> cache=grid(0).cache(null);
  for (int i=0; i < ITER_CNT; i++)   cache.put(new TestKey(i,i),new TestValue(i));
  interceptor.delegate(new CacheInterceptorAdapter<TestKey,TestValue>(){
    @Override public TestValue onBeforePut(    Cache.Entry<TestKey,TestValue> entry,    TestValue newVal){
      assertEquals(entry.getKey().key(),entry.getKey().field());
      entry.getKey().field(WRONG_VALUE);
      entry.getValue().val(WRONG_VALUE);
      return super.onBeforePut(entry,newVal);
    }
    @Override public void onAfterPut(    Cache.Entry<TestKey,TestValue> entry){
      assertEquals(entry.getKey().key(),entry.getKey().field());
      entry.getValue().val(WRONG_VALUE);
      entry.getKey().field(WRONG_VALUE);
      super.onAfterPut(entry);
    }
  }
);
  for (int i=0; i < ITER_CNT; i++)   cache.invoke(new TestKey(i,i),new EntryProcessor<TestKey,TestValue,Object>(){
    @Override public Object process(    MutableEntry<TestKey,TestValue> entry,    Object... arguments) throws EntryProcessorException {
      assertEquals(entry.getKey().key(),entry.getKey().field());
      assertEquals(entry.getKey().key(),entry.getValue().val());
      entry.getKey().field(WRONG_VALUE);
      entry.getValue().val(WRONG_VALUE);
      return -1;
    }
  }
);
  for (  Cache.Entry<Object,Object> e : grid(0).cache(null).localEntries()) {
    assertNotEquals(WRONG_VALUE,((TestKey)e.getKey()).field());
    assertNotEquals(WRONG_VALUE,((TestValue)e.getValue()).val());
  }
}
