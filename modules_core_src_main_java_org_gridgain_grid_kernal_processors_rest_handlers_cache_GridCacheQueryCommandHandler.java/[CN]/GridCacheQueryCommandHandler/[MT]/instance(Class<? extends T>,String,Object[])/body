{
  try {
    Class<?> implCls=Class.forName(clsName);
    if (!cls.isAssignableFrom(implCls))     throw new GridException("Failed to create instance (target class does not extend or implement " + "required class or interface) [cls=" + cls.getName() + ", clsName="+ clsName+ ']');
    Class[] ctorTypes=null;
    if (!F.isEmpty(ctorArgs)) {
      ctorTypes=new Class[ctorArgs.length];
      for (int i=0; i < ctorTypes.length; i++)       ctorTypes[i]=ctorArgs[i] == null ? Object.class : ctorArgs[i].getClass();
    }
    Constructor<?> ctor=implCls.getConstructor(ctorTypes);
    return (T)ctor.newInstance(ctorArgs);
  }
 catch (  ClassNotFoundException e) {
    throw new GridException("Failed to find target class: " + clsName,e);
  }
catch (  NoSuchMethodException e) {
    throw new GridException("Failed to find constructor for provided arguments " + "[clsName=" + clsName + ", ctorArgs="+ Arrays.asList(ctorArgs)+ ']',e);
  }
catch (  InstantiationException e) {
    throw new GridException("Failed to instantiate target class " + "[clsName=" + clsName + ", ctorArgs="+ Arrays.asList(ctorArgs)+ ']',e);
  }
catch (  IllegalAccessException e) {
    throw new GridException("Failed to instantiate class (constructor is not available) " + "[clsName=" + clsName + ", ctorArgs="+ Arrays.asList(ctorArgs)+ ']',e);
  }
catch (  InvocationTargetException e) {
    throw new GridException("Failed to instantiate class (constructor threw an exception) " + "[clsName=" + clsName + ", ctorArgs="+ Arrays.asList(ctorArgs)+ ']',e.getCause());
  }
}
