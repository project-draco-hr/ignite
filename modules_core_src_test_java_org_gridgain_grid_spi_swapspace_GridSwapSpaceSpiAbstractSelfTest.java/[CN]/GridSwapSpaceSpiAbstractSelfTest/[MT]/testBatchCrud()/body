{
  assertEquals(0,spi.count(DFLT_SPACE_NAME));
  final Map<SwapKey,byte[]> batch=new HashMap<>();
  int batchSize=10;
  for (int i=0; i < batchSize; i++)   batch.put(new SwapKey(i),Integer.toString(i).getBytes());
  spi.storeAll(DFLT_SPACE_NAME,batch,context());
  assertEquals(batchSize,spi.count(DFLT_SPACE_NAME));
  Map<SwapKey,byte[]> read=spi.readAll(DFLT_SPACE_NAME,batch.keySet(),context());
  assertTrue(F.forAll(read,new P1<Map.Entry<SwapKey,byte[]>>(){
    @Override public boolean apply(    Map.Entry<SwapKey,byte[]> e){
      return Arrays.equals(batch.get(e.getKey()),e.getValue());
    }
  }
));
  for (int i=0; i < batchSize; i++)   batch.put(new SwapKey(i),Integer.toString(i + 1).getBytes());
  spi.storeAll(DFLT_SPACE_NAME,batch,context());
  assertEquals(batchSize,spi.count(DFLT_SPACE_NAME));
  read=spi.readAll(DFLT_SPACE_NAME,batch.keySet(),context());
  assertTrue(F.forAll(read,new P1<Map.Entry<SwapKey,byte[]>>(){
    @Override public boolean apply(    Map.Entry<SwapKey,byte[]> e){
      return Arrays.equals(batch.get(e.getKey()),e.getValue());
    }
  }
));
  spi.removeAll(DFLT_SPACE_NAME,batch.keySet(),null,context());
  assertEquals(0,spi.count(DFLT_SPACE_NAME));
}
