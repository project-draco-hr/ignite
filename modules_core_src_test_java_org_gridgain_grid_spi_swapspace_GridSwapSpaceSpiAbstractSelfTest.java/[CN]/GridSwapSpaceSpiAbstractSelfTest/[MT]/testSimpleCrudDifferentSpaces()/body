{
  String space1=SPACE1;
  spi.clear(space1);
  String space2=SPACE2;
  spi.clear(space2);
  assertEquals(0,spi.count(space1));
  assertEquals(0,spi.count(space2));
  long key1=1;
  final byte[] val1=Long.toString(key1).getBytes();
  spi.store(space1,new GridSwapKey(key1),val1,context());
  assertEquals(1,spi.count(space1));
  assertEquals(0,spi.count(space2));
  spi.store(space2,new GridSwapKey(key1),val1,context());
  assertEquals(1,spi.count(space1));
  assertEquals(1,spi.count(space2));
  assertArrayEquals(spi.read(space1,new GridSwapKey(key1),context()),val1);
  assertArrayEquals(spi.read(space2,new GridSwapKey(key1),context()),val1);
  long key2=2;
  byte[] val2=Long.toString(key2).getBytes();
  spi.store(space1,new GridSwapKey(key2),val2,context());
  assertEquals(2,spi.count(space1));
  assertEquals(1,spi.count(space2));
  assertArrayEquals(spi.read(space1,new GridSwapKey(key2),context()),val2);
  assertNull(spi.read(space2,new GridSwapKey(key2),context()));
  final byte[] val12="newValue".getBytes();
  spi.store(space1,new GridSwapKey(key1),val12,context());
  assertEquals(2,spi.count(space1));
  assertEquals(1,spi.count(space2));
  assertArrayEquals(spi.read(space1,new GridSwapKey(key1),context()),val12);
  assertArrayEquals(spi.read(space2,new GridSwapKey(key1),context()),val1);
  spi.remove(space1,new GridSwapKey(key1),new IgniteInClosure<byte[]>(){
    @Override public void apply(    byte[] old){
      assertArrayEquals(val12,old);
    }
  }
,context());
  assertEquals(1,spi.count(space1));
  assertEquals(1,spi.count(space2));
  spi.remove(space2,new GridSwapKey(key1),new IgniteInClosure<byte[]>(){
    @Override public void apply(    byte[] old){
      assertArrayEquals(val1,old);
    }
  }
,context());
  assertEquals(1,spi.count(space1));
  assertEquals(0,spi.count(space2));
}
