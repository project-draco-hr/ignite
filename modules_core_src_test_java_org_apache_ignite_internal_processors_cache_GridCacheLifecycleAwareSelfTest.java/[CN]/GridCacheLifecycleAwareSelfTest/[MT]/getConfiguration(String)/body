{
  IgniteConfiguration cfg=super.getConfiguration(gridName);
  cfg.setDiscoverySpi(new TcpDiscoverySpi());
  CacheConfiguration ccfg=defaultCacheConfiguration();
  ccfg.setCacheMode(PARTITIONED);
  ccfg.setWriteBehindEnabled(writeBehind);
  ccfg.setCacheMode(CacheMode.PARTITIONED);
  ccfg.setName(CACHE_NAME);
  TestStore store=new TestStore();
  ccfg.setCacheStoreFactory(new FactoryBuilder.SingletonFactory(store));
  ccfg.setReadThrough(true);
  ccfg.setWriteThrough(true);
  ccfg.setLoadPreviousValue(true);
  lifecycleAwares.add(store.lifecycleAware);
  TestAffinityFunction affinity=new TestAffinityFunction();
  ccfg.setAffinity(affinity);
  lifecycleAwares.add(affinity);
  TestEvictionPolicy evictionPlc=new TestEvictionPolicy();
  ccfg.setEvictionPolicy(evictionPlc);
  lifecycleAwares.add(evictionPlc);
  if (near) {
    TestEvictionPolicy nearEvictionPlc=new TestEvictionPolicy();
    NearCacheConfiguration nearCfg=new NearCacheConfiguration();
    nearCfg.setNearEvictionPolicy(nearEvictionPlc);
    ccfg.setNearConfiguration(nearCfg);
    lifecycleAwares.add(nearEvictionPlc);
  }
  TestEvictionFilter evictionFilter=new TestEvictionFilter();
  ccfg.setEvictionFilter(evictionFilter);
  lifecycleAwares.add(evictionFilter);
  TestAffinityKeyMapper mapper=new TestAffinityKeyMapper();
  ccfg.setAffinityMapper(mapper);
  lifecycleAwares.add(mapper);
  TestInterceptor interceptor=new TestInterceptor();
  lifecycleAwares.add(interceptor);
  ccfg.setInterceptor(interceptor);
  cfg.setCacheConfiguration(ccfg);
  return cfg;
}
