{
  GridCacheAffinityFunction aff=cache(0).configuration().getAffinity();
  GridCacheAffinityKeyMapper mapper=cache(0).configuration().getAffinityMapper();
  assertNotNull(aff);
  assertNotNull(mapper);
  int part=aff.partition(mapper.affinityKey(queueName));
  Collection<GridNode> nodes=grid(0).nodes();
  Collection<GridNode> aff0=cache(0).affinity().mapKeyToPrimaryAndBackups(queueName);
  Collection<GridNode> aff1=nodes(aff,part,nodes);
  assertEquals(new ArrayList<>(aff0),new ArrayList<>(aff1));
  Collection<GridNode> aff2;
  Collection<GridNode> tmpNodes;
  int retries=10000;
  do {
    tmpNodes=new ArrayList<>(cnt);
    for (int i=0; i < cnt; i++)     tmpNodes.add(new GridTestNode(UUID.randomUUID()));
    aff2=nodes(aff,part,F.concat(true,tmpNodes,nodes));
    if (retries-- < 0)     throw new GridException("Failed to find node IDs to change current affinity mapping.");
  }
 while (F.containsAny(aff1,aff2));
  int i=GRID_CNT;
  for (  UUID id : F.nodeIds(tmpNodes)) {
    nodeId=id;
    startGrid(i++);
  }
  aff2=cache(0).affinity().mapKeyToPrimaryAndBackups(queueName);
  assertFalse("Unexpected affinity [aff1=" + aff1 + ", aff2="+ aff2+ ']',F.containsAny(aff1,aff2));
}
