{
  final long qryReqId=msg.queryRequestId();
  final int qry=msg.query();
  final QueryRun r=runs.get(qryReqId);
  if (r == null)   return;
  final int pageSize=r.pageSize;
  GridMergeIndex idx=r.tbls.get(msg.query()).getScanIndex(null);
  GridResultPage page;
  try {
    page=new GridResultPage(ctx,node.id(),msg){
      @Override public void fetchNextPage(){
        Object errState=r.state.get();
        if (errState != null) {
          CacheException e=new CacheException("Failed to fetch data from node: " + node.id());
          if (errState instanceof CacheException)           e.addSuppressed((Throwable)errState);
          throw e;
        }
        try {
          GridQueryNextPageRequest msg0=new GridQueryNextPageRequest(qryReqId,qry,pageSize);
          if (node.isLocal())           h2.mapQueryExecutor().onMessage(ctx.localNodeId(),msg0);
 else           ctx.io().send(node,GridTopic.TOPIC_QUERY,msg0,QUERY_POOL);
        }
 catch (        IgniteCheckedException e) {
          throw new CacheException("Failed to fetch data from node: " + node.id(),e);
        }
      }
    }
;
  }
 catch (  Exception e) {
    U.error(log,"Error in message.",e);
    fail(r,node.id(),"Error in message.");
    return;
  }
  idx.addPage(page);
  if (msg.retry() != null)   retry(r,msg.retry(),node.id());
 else   if (msg.allRows() != -1)   r.latch.countDown();
}
