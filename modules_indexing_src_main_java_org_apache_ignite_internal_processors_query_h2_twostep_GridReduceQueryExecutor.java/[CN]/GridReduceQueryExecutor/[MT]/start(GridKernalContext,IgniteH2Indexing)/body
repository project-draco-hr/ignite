{
  this.ctx=ctx;
  this.h2=h2;
  log=ctx.log(GridReduceQueryExecutor.class);
  ctx.io().addMessageListener(GridTopic.TOPIC_QUERY,new GridMessageListener(){
    @Override public void onMessage(    UUID nodeId,    Object msg){
      if (!busyLock.enterBusy())       return;
      try {
        GridReduceQueryExecutor.this.onMessage(nodeId,msg);
      }
  finally {
        busyLock.leaveBusy();
      }
    }
  }
);
  ctx.event().addLocalEventListener(new GridLocalEventListener(){
    @Override public void onEvent(    final Event evt){
      UUID nodeId=((DiscoveryEvent)evt).eventNode().id();
      for (      QueryRun r : runs.values()) {
        for (        GridMergeTable tbl : r.tbls) {
          if (tbl.getScanIndex(null).hasSource(nodeId)) {
            fail(r,nodeId,"Node left the topology.");
            break;
          }
        }
      }
    }
  }
,EventType.EVT_NODE_FAILED,EventType.EVT_NODE_LEFT);
  h2.executeStatement("PUBLIC","CREATE ALIAS " + GridSqlQuerySplitter.TABLE_FUNC_NAME + " NOBUFFER FOR \""+ GridReduceQueryExecutor.class.getName()+ ".mergeTableFunction\"");
}
