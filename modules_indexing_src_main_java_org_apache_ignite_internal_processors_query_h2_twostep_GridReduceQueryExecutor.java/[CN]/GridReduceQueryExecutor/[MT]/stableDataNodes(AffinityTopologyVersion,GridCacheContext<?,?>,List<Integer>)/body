{
  Set<ClusterNode> nodes=new HashSet<>(cctx.affinity().assignment(topVer).primaryPartitionNodes());
  if (F.isEmpty(nodes))   throw new CacheException("Failed to find data nodes for cache: " + cctx.name());
  if (!F.isEmpty(extraSpaces)) {
    for (int i=0; i < extraSpaces.size(); i++) {
      GridCacheContext<?,?> extraCctx=cacheContext(extraSpaces.get(i));
      String extraSpace=extraCctx.name();
      if (extraCctx.isLocal())       continue;
      if (cctx.isReplicated() && !extraCctx.isReplicated())       throw new CacheException("Queries running on replicated cache should not contain JOINs " + "with partitioned tables [rCache=" + cctx.name() + ", pCache="+ extraSpace+ "]");
      Collection<ClusterNode> extraNodes=extraCctx.affinity().assignment(topVer).primaryPartitionNodes();
      if (F.isEmpty(extraNodes))       throw new CacheException("Failed to find data nodes for cache: " + extraSpace);
      if (cctx.isReplicated() && extraCctx.isReplicated()) {
        nodes.retainAll(extraNodes);
        if (nodes.isEmpty()) {
          if (isPreloadingActive(cctx,extraSpaces))           return null;
 else           throw new CacheException("Caches have distinct sets of data nodes [cache1=" + cctx.name() + ", cache2="+ extraSpace+ "]");
        }
      }
 else       if (!cctx.isReplicated() && extraCctx.isReplicated()) {
        if (!extraNodes.containsAll(nodes))         if (isPreloadingActive(cctx,extraSpaces))         return null;
 else         throw new CacheException("Caches have distinct sets of data nodes [cache1=" + cctx.name() + ", cache2="+ extraSpace+ "]");
      }
 else       if (!cctx.isReplicated() && !extraCctx.isReplicated()) {
        if (extraNodes.size() != nodes.size() || !nodes.containsAll(extraNodes))         if (isPreloadingActive(cctx,extraSpaces))         return null;
 else         throw new CacheException("Caches have distinct sets of data nodes [cache1=" + cctx.name() + ", cache2="+ extraSpace+ "]");
      }
 else       throw new IllegalStateException();
    }
  }
  return nodes;
}
