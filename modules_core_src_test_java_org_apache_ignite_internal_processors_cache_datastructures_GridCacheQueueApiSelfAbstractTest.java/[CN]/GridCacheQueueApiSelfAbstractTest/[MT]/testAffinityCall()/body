{
  final CollectionConfiguration colCfg=collectionConfiguration();
  colCfg.setCollocated(false);
  colCfg.setCacheMode(CacheMode.PARTITIONED);
  try (final IgniteQueue<Integer> queue1=grid(0).queue("Queue1",0,colCfg)){
    GridTestUtils.assertThrows(log,new Callable<Void>(){
      @Override public Void call() throws Exception {
        queue1.affinityCall(new IgniteCallable<Object>(){
          @Override public Object call(){
            return null;
          }
        }
);
        return null;
      }
    }
,IgniteException.class,"Failed to execute affinityCall() for non-collocated queue: " + queue1.name() + ". This operation is supported only for collocated queues.");
  }
   colCfg.setCollocated(true);
  try (final IgniteQueue<Integer> queue2=grid(0).queue("Queue2",0,colCfg)){
    queue2.add(100);
    Integer res=queue2.affinityCall(new IgniteCallable<Integer>(){
      @IgniteInstanceResource private IgniteEx ignite;
      @Override public Integer call(){
        assertTrue(ignite.cachex("datastructures_0").affinity().isPrimaryOrBackup(ignite.cluster().localNode(),"Queue2"));
        return queue2.take();
      }
    }
);
    assertEquals(100,res.intValue());
  }
 }
