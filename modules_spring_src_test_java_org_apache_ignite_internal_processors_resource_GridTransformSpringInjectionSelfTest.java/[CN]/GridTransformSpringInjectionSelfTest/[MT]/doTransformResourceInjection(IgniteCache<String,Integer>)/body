{
  final Collection<ResourceType> required=Arrays.asList(ResourceType.SPRING_APPLICATION_CONTEXT,ResourceType.SPRING_BEAN);
  Integer flags=cache.invoke(UUID.randomUUID().toString(),new SpringResourceInjectionEntryProcessor());
  assertTrue("Processor result is null",flags != null);
  log.info("Injection flag: " + Integer.toBinaryString(flags));
  Collection<ResourceType> notInjected=ResourceInfoSet.valueOf(flags).notInjected(required);
  if (!notInjected.isEmpty())   fail("Can't inject resource(s): " + Arrays.toString(notInjected.toArray()));
  Set<String> keys=new HashSet<>(Arrays.asList(UUID.randomUUID().toString(),UUID.randomUUID().toString(),UUID.randomUUID().toString(),UUID.randomUUID().toString()));
  Map<String,EntryProcessorResult<Integer>> results=cache.invokeAll(keys,new SpringResourceInjectionEntryProcessor());
  assertEquals(keys.size(),results.size());
  for (  EntryProcessorResult<Integer> res : results.values()) {
    Collection<ResourceType> notInjected1=ResourceInfoSet.valueOf(res.get()).notInjected(required);
    if (!notInjected1.isEmpty())     fail("Can't inject resource(s): " + Arrays.toString(notInjected1.toArray()));
  }
}
