{
  GridCache<String,Integer> cache=cache(0);
  for (int i=0; i < 10000; i++)   cache.put(String.valueOf(i),0);
  final AtomicInteger gridIdx=new AtomicInteger(1);
  IgniteFuture<?> fut=GridTestUtils.runMultiThreadedAsync(new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      int idx=gridIdx.getAndIncrement();
      startGrid(idx);
      return null;
    }
  }
,GRID_CNT - 1,"grid-starter-" + getName());
  waitForRemoteNodes(grid(0),2);
  Set<String> keys=new HashSet<>();
  for (int i=0; i < 10; i++)   keys.add(String.valueOf(i * 1000));
  cache.transformAll(keys,new C1<Integer,Integer>(){
    @Override public Integer apply(    Integer val){
      if (val == null)       keyNotLoaded=true;
      return val + 1;
    }
  }
);
  assertFalse(keyNotLoaded);
  fut.get();
  for (int i=0; i < GRID_CNT; i++)   cache(i).forceRepartition().get();
  for (int i=0; i < GRID_CNT; i++) {
    for (    String key : keys)     assertEquals("Unexpected value for cache " + i,(Integer)1,cache(i).get(key));
  }
}
