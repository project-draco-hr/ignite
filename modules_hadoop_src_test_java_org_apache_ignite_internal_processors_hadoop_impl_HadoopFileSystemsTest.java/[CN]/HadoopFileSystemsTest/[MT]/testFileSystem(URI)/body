{
  final Configuration cfg=new Configuration();
  setupFileSystems(cfg);
  cfg.set(HadoopFileSystemsUtils.LOC_FS_WORK_DIR_PROP,new Path(new Path(uri),"user/" + System.getProperty("user.name")).toString());
  final CountDownLatch changeUserPhase=new CountDownLatch(THREAD_COUNT);
  final CountDownLatch changeDirPhase=new CountDownLatch(THREAD_COUNT);
  final CountDownLatch changeAbsDirPhase=new CountDownLatch(THREAD_COUNT);
  final CountDownLatch finishPhase=new CountDownLatch(THREAD_COUNT);
  final Path[] newUserInitWorkDir=new Path[THREAD_COUNT];
  final Path[] newWorkDir=new Path[THREAD_COUNT];
  final Path[] newAbsWorkDir=new Path[THREAD_COUNT];
  final Path[] newInstanceWorkDir=new Path[THREAD_COUNT];
  final AtomicInteger threadNum=new AtomicInteger(0);
  GridTestUtils.runMultiThreadedAsync(new Runnable(){
    @Override public void run(){
      try {
        int curThreadNum=threadNum.getAndIncrement();
        if ("file".equals(uri.getScheme()))         FileSystem.get(uri,cfg).setWorkingDirectory(new Path("file:///user/user" + curThreadNum));
        changeUserPhase.countDown();
        changeUserPhase.await();
        newUserInitWorkDir[curThreadNum]=FileSystem.get(uri,cfg).getWorkingDirectory();
        FileSystem.get(uri,cfg).setWorkingDirectory(new Path("folder" + curThreadNum));
        changeDirPhase.countDown();
        changeDirPhase.await();
        newWorkDir[curThreadNum]=FileSystem.get(uri,cfg).getWorkingDirectory();
        FileSystem.get(uri,cfg).setWorkingDirectory(new Path("/folder" + curThreadNum));
        changeAbsDirPhase.countDown();
        changeAbsDirPhase.await();
        newAbsWorkDir[curThreadNum]=FileSystem.get(uri,cfg).getWorkingDirectory();
        newInstanceWorkDir[curThreadNum]=FileSystem.newInstance(uri,cfg).getWorkingDirectory();
        finishPhase.countDown();
      }
 catch (      InterruptedException|IOException e) {
        error("Failed to execute test thread.",e);
        fail();
      }
    }
  }
,THREAD_COUNT,"filesystems-test");
  finishPhase.await();
  for (int i=0; i < THREAD_COUNT; i++) {
    cfg.set(MRJobConfig.USER_NAME,"user" + i);
    Path workDir=new Path(new Path(uri),"user/user" + i);
    cfg.set(HadoopFileSystemsUtils.LOC_FS_WORK_DIR_PROP,workDir.toString());
    assertEquals(workDir,FileSystem.newInstance(uri,cfg).getWorkingDirectory());
    assertEquals(workDir,newUserInitWorkDir[i]);
    assertEquals(new Path(new Path(uri),"user/user" + i + "/folder"+ i),newWorkDir[i]);
    assertEquals(new Path("/folder" + i),newAbsWorkDir[i]);
    assertEquals(new Path(new Path(uri),"user/" + System.getProperty("user.name")),newInstanceWorkDir[i]);
  }
  System.out.println(System.getProperty("user.dir"));
}
