{
  long x=MAX_X;
  Random rnd=new Random();
  while (x-- > 0) {
    UUID id=UUID.randomUUID();
    GridH2Row row=row(id,System.currentTimeMillis(),rnd.nextBoolean() ? id.toString() : UUID.randomUUID().toString(),rnd.nextInt(100));
    tbl.doUpdate(row,false);
  }
  assertEquals(MAX_X,tbl.getRowCountApproximation());
  assertEquals(MAX_X,tbl.getRowCount(null));
  for (  GridH2IndexBase idx : tbl.indexes()) {
    assertEquals(MAX_X,idx.getRowCountApproximation());
    assertEquals(MAX_X,idx.getRowCount(null));
  }
  checkOrdered((GridH2TreeIndex)tbl.indexes().get(0),new Comparator<SearchRow>(){
    @Override public int compare(    SearchRow o1,    SearchRow o2){
      UUID id1=(UUID)o1.getValue(0).getObject();
      UUID id2=(UUID)o2.getValue(0).getObject();
      return id1.compareTo(id2);
    }
  }
);
  checkOrdered((GridH2TreeIndex)tbl.indexes().get(1),new Comparator<SearchRow>(){
    @Override public int compare(    SearchRow o1,    SearchRow o2){
      Long x1=(Long)o1.getValue(3).getObject();
      Long x2=(Long)o2.getValue(3).getObject();
      int c=x2.compareTo(x1);
      if (c != 0)       return c;
      Timestamp t1=(Timestamp)o1.getValue(1).getObject();
      Timestamp t2=(Timestamp)o2.getValue(1).getObject();
      return t1.compareTo(t2);
    }
  }
);
  checkOrdered((GridH2TreeIndex)tbl.indexes().get(2),new Comparator<SearchRow>(){
    @Override public int compare(    SearchRow o1,    SearchRow o2){
      String s1=(String)o1.getValue(2).getObject();
      String s2=(String)o2.getValue(2).getObject();
      return s2.compareTo(s1);
    }
  }
);
  ArrayList<? extends Index> idxs=tbl.indexes();
  checkIndexesConsistent((ArrayList<Index>)idxs,null);
  UUID id=UUID.randomUUID();
  UUID id2=UUID.randomUUID();
  assertTrue(tbl.doUpdate(row(id,System.currentTimeMillis(),id.toString(),rnd.nextInt(100)),false));
  assertTrue(tbl.doUpdate(row(id2,System.currentTimeMillis(),id2.toString(),rnd.nextInt(100)),false));
  checkQueryPlan(conn,"SELECT * FROM T",SCAN_IDX_NAME);
  checkQueryPlan(conn,"SELECT * FROM T WHERE ID IS NULL",PK_NAME);
  checkQueryPlan(conn,"SELECT * FROM T WHERE ID = RANDOM_UUID()",PK_NAME);
  checkQueryPlan(conn,"SELECT * FROM T WHERE ID > RANDOM_UUID()",PK_NAME);
  checkQueryPlan(conn,"SELECT * FROM T ORDER BY ID",PK_NAME);
  checkQueryPlan(conn,"SELECT * FROM T WHERE STR IS NULL",STR_IDX_NAME);
  checkQueryPlan(conn,"SELECT * FROM T WHERE STR = 'aaaa'",STR_IDX_NAME);
  checkQueryPlan(conn,"SELECT * FROM T WHERE STR > 'aaaa'",STR_IDX_NAME);
  checkQueryPlan(conn,"SELECT * FROM T ORDER BY STR DESC",STR_IDX_NAME);
  checkQueryPlan(conn,"SELECT * FROM T WHERE X IS NULL",NON_UNIQUE_IDX_NAME);
  checkQueryPlan(conn,"SELECT * FROM T WHERE X = 10000",NON_UNIQUE_IDX_NAME);
  checkQueryPlan(conn,"SELECT * FROM T WHERE X > 10000",NON_UNIQUE_IDX_NAME);
  checkQueryPlan(conn,"SELECT * FROM T ORDER BY X DESC",NON_UNIQUE_IDX_NAME);
  checkQueryPlan(conn,"SELECT * FROM T ORDER BY X DESC, T",NON_UNIQUE_IDX_NAME);
  checkQueryPlan(conn,"SELECT * FROM T ORDER BY T, X DESC",SCAN_IDX_NAME);
  Statement s=conn.createStatement();
  ResultSet rs=s.executeQuery("select id from t where x between 0 and 100");
  int i=0;
  while (rs.next())   i++;
  assertEquals(MAX_X + 2,i);
  rs=s.executeQuery("select id from t where t is not null");
  i=0;
  while (rs.next())   i++;
  assertEquals(MAX_X + 2,i);
  int cnt=10 + rnd.nextInt(25);
  long t=System.currentTimeMillis();
  for (i=0; i < cnt; i++) {
    id=UUID.randomUUID();
    assertTrue(tbl.doUpdate(row(id,t,id.toString(),51),false));
  }
  rs=s.executeQuery("select x, id from t where x = 51 limit " + cnt);
  i=0;
  while (rs.next()) {
    assertEquals(51,rs.getInt(1));
    i++;
  }
  assertEquals(cnt,i);
}
