{
switch (type) {
case TYPE_BYTE:
    return in.readByte();
case TYPE_SHORT:
  return in.readShort();
case TYPE_INT:
return in.readInt();
case TYPE_LONG:
return in.readLong();
case TYPE_FLOAT:
return in.readFloat();
case TYPE_DOUBLE:
return in.readDouble();
case TYPE_CHAR:
return in.readChar();
case TYPE_BOOLEAN:
return in.readBoolean();
case TYPE_BYTE_ARR:
return in.readByteArray();
case TYPE_SHORT_ARR:
return in.readShortArray();
case TYPE_INT_ARR:
return in.readIntArray();
case TYPE_LONG_ARR:
return in.readLongArray();
case TYPE_FLOAT_ARR:
return in.readFloatArray();
case TYPE_DOUBLE_ARR:
return in.readDoubleArray();
case TYPE_CHAR_ARR:
return in.readCharArray();
case TYPE_BOOLEAN_ARR:
return in.readBooleanArray();
case TYPE_OBJ_ARR:
return in.readArray(arrCompType);
case TYPE_STR:
return in.readString();
case TYPE_ENUM:
return enumVals[in.readInt()];
case TYPE_UUID:
return in.readUuid();
case TYPE_PROPS:
return in.readProperties();
case TYPE_ARRAY_LIST:
return in.readArrayList();
case TYPE_HASH_MAP:
return in.readHashMap(false);
case TYPE_HASH_SET:
return in.readHashSet(mapFieldOff);
case TYPE_LINKED_LIST:
return in.readLinkedList();
case TYPE_LINKED_HASH_MAP:
return in.readLinkedHashMap(false);
case TYPE_LINKED_HASH_SET:
return in.readLinkedHashSet(mapFieldOff);
case TYPE_DATE:
return in.readDate();
case TYPE_CLS:
return OptimizedMarshallerUtils.classDescriptor(in.readInt(),in.classLoader(),ctx,mapper).describedClass();
case TYPE_EXTERNALIZABLE:
verifyChecksum(in.readShort());
return in.readExternalizable(constructor,readResolveMtd);
case TYPE_SERIALIZABLE:
verifyChecksum(in.readShort());
return in.readSerializable(cls,readObjMtds,readResolveMtd,fields);
default :
throw new IllegalStateException("Invalid class type: " + type);
}
}
