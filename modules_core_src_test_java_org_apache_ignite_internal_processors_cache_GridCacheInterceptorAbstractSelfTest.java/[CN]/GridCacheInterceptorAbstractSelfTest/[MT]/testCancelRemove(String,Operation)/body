{
  interceptor.retInterceptor=new BeforeRemoveInterceptor(new IgniteBiTuple(true,null));
  log.info("Remove 1 " + op);
  remove(0,op,key,null,null);
  checkCacheValue(key,null);
  assertEquals(0,interceptor.beforeRmvMap.size());
  assertEquals(null,interceptor.beforeRmvMap.get(key));
  log.info("Remove 2 " + op);
  interceptor.reset();
  interceptor.retInterceptor=new BeforeRemoveInterceptor(new IgniteBiTuple(true,900));
  remove(0,op,key,null,900);
  checkCacheValue(key,null);
  assertEquals(0,interceptor.beforeRmvMap.size());
  assertEquals(null,interceptor.beforeRmvMap.get(key));
  interceptor.reset();
  interceptor.disabled=true;
  clearCaches();
  jcache(0).put(key,1);
  checkCacheValue(key,1);
  interceptor.reset();
  interceptor.disabled=false;
  interceptor.retInterceptor=new BeforeRemoveInterceptor(new IgniteBiTuple(true,null));
  log.info("Remove 3 " + op);
  remove(0,op,key,1,null);
  checkCacheValue(key,1);
  assertEquals(1,interceptor.beforeRmvMap.size());
  assertEquals(1,interceptor.beforeRmvMap.get(key));
  interceptor.reset();
  interceptor.retInterceptor=new BeforeRemoveInterceptor(new IgniteBiTuple(true,1000));
  log.info("Remove 4 " + op);
  remove(0,op,key,1,1000);
  checkCacheValue(key,1);
  assertEquals(1,interceptor.beforeRmvMap.size());
  assertEquals(1,interceptor.beforeRmvMap.get(key));
}
