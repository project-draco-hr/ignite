{
  interceptor.retInterceptor=new InterceptorAdapter(){
    @Nullable @Override public IgniteBiTuple onBeforeRemove(    Cache.Entry entry){
      return new IgniteBiTuple(false,null);
    }
  }
;
  log.info("Remove 1 " + op);
  remove(0,op,key,null,null);
  checkCacheValue(key,null);
  assertEquals(0,interceptor.beforeRmvMap.size());
  assertEquals(0,interceptor.afterRmvMap.size());
  log.info("Remove 2 " + op);
  interceptor.reset();
  interceptor.retInterceptor=new InterceptorAdapter(){
    @Nullable @Override public IgniteBiTuple onBeforeRemove(    Cache.Entry entry){
      return new IgniteBiTuple(false,900);
    }
  }
;
  remove(0,op,key,null,900);
  checkCacheValue(key,null);
  assertEquals(0,interceptor.beforeRmvMap.size());
  assertEquals(0,interceptor.afterRmvMap.size());
  interceptor.reset();
  interceptor.disabled=true;
  clearCaches();
  jcache(0).put(key,1);
  checkCacheValue(key,1);
  interceptor.reset();
  interceptor.disabled=false;
  interceptor.retInterceptor=new InterceptorAdapter(){
    @Nullable @Override public IgniteBiTuple onBeforeRemove(    Cache.Entry entry){
      return new IgniteBiTuple(false,null);
    }
  }
;
  log.info("Remove 3 " + op);
  remove(0,op,key,1,null);
  checkCacheValue(key,null);
  assertEquals(1,interceptor.beforeRmvMap.size());
  assertEquals(1,interceptor.beforeRmvMap.get(key));
  assertEquals(1,interceptor.afterRmvMap.size());
  assertEquals(1,interceptor.afterRmvMap.get(key));
  interceptor.disabled=true;
  clearCaches();
  jcache(0).put(key,2);
  checkCacheValue(key,2);
  interceptor.reset();
  interceptor.disabled=false;
  interceptor.retInterceptor=new InterceptorAdapter(){
    @Nullable @Override public IgniteBiTuple onBeforeRemove(    Cache.Entry entry){
      return new IgniteBiTuple(false,1000);
    }
  }
;
  log.info("Remove 4 " + op);
  remove(0,op,key,2,1000);
  checkCacheValue(key,null);
  assertEquals(1,interceptor.beforeRmvMap.size());
  assertEquals(2,interceptor.beforeRmvMap.get(key));
  assertEquals(1,interceptor.afterRmvMap.size());
  assertEquals(2,interceptor.afterRmvMap.get(key));
}
