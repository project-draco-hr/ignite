{
  final boolean tx=concurrency != null && isolation != null;
  if (tx)   put(ignite(0),jcache(),ENTRY_CNT,concurrency,isolation);
 else   put(jcache(),ENTRY_CNT);
  check(jcache(),ENTRY_CNT);
  final int half=ENTRY_CNT / 2;
  IgniteInternalFuture<?> fut=GridTestUtils.runMultiThreadedAsync(new CA(){
    @Override public void apply(){
      info("Run topology change.");
      try {
        for (int i=0; i < TOP_CHANGE_CNT; i++) {
          info("Topology change " + i);
          String name=UUID.randomUUID().toString();
          try {
            final Ignite g=startGrid(name);
            for (int k=half; k < ENTRY_CNT; k++)             assertNotNull("Failed to get key: 'key" + k + "'",cache(g).get("key" + k));
          }
  finally {
            G.stop(name,false);
          }
        }
      }
 catch (      Exception e) {
        throw F.wrap(e);
      }
    }
  }
,TOP_CHANGE_THREAD_CNT,"topology-change-thread");
  while (!fut.isDone()) {
    if (tx) {
      remove(grid(0),jcache(),half,concurrency,isolation);
      put(grid(0),jcache(),half,concurrency,isolation);
    }
 else {
      remove(jcache(),half);
      put(jcache(),half);
    }
  }
  fut.get();
}
