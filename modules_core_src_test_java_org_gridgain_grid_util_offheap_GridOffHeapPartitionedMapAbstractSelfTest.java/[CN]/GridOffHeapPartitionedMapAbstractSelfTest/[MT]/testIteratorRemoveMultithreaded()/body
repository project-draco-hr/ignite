{
  initCap=10;
  map=newMap();
  final int max=1024;
  final Map<String,String> m=new ConcurrentHashMap<>(max * parts);
  for (int i=0; i < max; i++) {
    String key=string();
    String val=string();
    m.put(key,val);
    map.put(0,hash(key),key.getBytes(),val.getBytes());
  }
  final AtomicBoolean running=new AtomicBoolean(true);
  GridFuture<?> iterFut=multithreadedAsync(new Runnable(){
    @Override public void run(){
      try {
        while (running.get()) {
          try (GridCloseableIterator<IgniteBiTuple<byte[],byte[]>> it=map.iterator()){
            while (it.hasNext()) {
              IgniteBiTuple<byte[],byte[]> tup=it.next();
              String key=new String(tup.get1());
              String val=new String(tup.get2());
              String exp=m.get(key);
              assertEquals(exp,val);
            }
          }
         }
      }
 catch (      GridException e) {
        fail("Unexpected exception caught: " + e);
      }
    }
  }
,1);
  for (  String key : m.keySet())   map.remove(0,hash(key),key.getBytes());
  running.set(false);
  iterFut.get();
  map.destruct();
}
