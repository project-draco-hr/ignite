{
  super.beforeTestsStarted();
  hiveHome=IgniteSystemProperties.getString("HIVE_HOME");
  assertFalse("HIVE_HOME hasn't been set.",F.isEmpty(hiveHome));
  hadoopHome=IgniteSystemProperties.getString("HADOOP_HOME");
  assertFalse("HADOOP_HOME hasn't been set.",F.isEmpty(hadoopHome));
  String mapredHome=hadoopHome + "/share/hadoop/mapreduce";
  File[] fileList=new File(mapredHome).listFiles(new FileFilter(){
    @Override public boolean accept(    File pathname){
      return pathname.getName().startsWith("hadoop-mapreduce-examples-") && pathname.getName().endsWith(".jar");
    }
  }
);
  assertEquals("Invalid hadoop distribution.",1,fileList.length);
  examplesJar=fileList[0];
  testWorkDir=Files.createTempDirectory("hadoop-cli-test").toFile();
  U.copy(U.resolveGridGainPath("docs/core-site.ignite.xml"),new File(testWorkDir,"core-site.xml"),false);
  File srcFile=U.resolveGridGainPath("docs/mapred-site.ignite.xml");
  File dstFile=new File(testWorkDir,"mapred-site.xml");
  try (BufferedReader in=new BufferedReader(new FileReader(srcFile));PrintWriter out=new PrintWriter(dstFile)){
    String line;
    while ((line=in.readLine()) != null) {
      if (line.startsWith("</configuration>"))       out.println("    <property>\n" + "        <name>" + GridHadoopUtils.JOB_COUNTER_WRITER_PROPERTY + "</name>\n"+ "        <value>"+ GridHadoopFSCounterWriter.class.getName()+ "</value>\n"+ "    </property>\n");
      out.println(line);
    }
    out.flush();
  }
   generateTestFile(new File(testWorkDir,"test-data"),"red",100,"green",200,"blue",150,"yellow",50);
  generateHiveTestFiles();
}
