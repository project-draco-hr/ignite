{
  List<GridClientData> datas=Arrays.asList(client.data(),client.data(CACHE_NAME));
  String key=UUID.randomUUID().toString();
  for (  GridClientData data : datas) {
    assertNotNull(data);
    data.remove(key);
    assertFalse(data.append(key,".suffix"));
    assertTrue(data.put(key,"val"));
    assertTrue(data.append(key,".suffix"));
    assertEquals("val.suffix",data.get(key));
    assertTrue(data.remove(key));
    assertFalse(data.append(key,".suffix"));
    data.remove(key);
    assertFalse(data.prepend(key,"postfix."));
    assertTrue(data.put(key,"val"));
    assertTrue(data.prepend(key,"postfix."));
    assertEquals("postfix.val",data.get(key));
    assertTrue(data.remove(key));
    assertFalse(data.prepend(key,"postfix."));
  }
  if (protocol() != GridClientProtocol.TCP)   return;
  List<String> origList=new ArrayList<>(Arrays.asList("1","2"));
  List<String> newList=Arrays.asList("3","4");
  Map<String,String> origMap=F.asMap("1","a1","2","a2");
  Map<String,String> newMap=F.asMap("2","b2","3","b3");
  for (  GridClientData data : datas) {
    assertNotNull(data);
    data.remove(key);
    assertFalse(data.append(key,newList));
    assertTrue(data.put(key,origList));
    assertTrue(data.append(key,newList));
    assertEquals(Arrays.asList("1","2","3","4"),data.get(key));
    data.remove(key);
    assertFalse(data.prepend(key,newList));
    assertTrue(data.put(key,origList));
    assertTrue(data.prepend(key,newList));
    assertEquals(Arrays.asList("3","4","1","2"),data.get(key));
    data.remove(key);
    assertFalse(data.append(key,newMap));
    assertTrue(data.put(key,origMap));
    assertTrue(data.append(key,newMap));
    assertEquals(F.asMap("1","a1","2","b2","3","b3"),data.get(key));
    data.remove(key);
    assertFalse(data.prepend(key,newMap));
    assertTrue(data.put(key,origMap));
    assertTrue(data.prepend(key,newMap));
    assertEquals(F.asMap("1","a1","2","a2","3","b3"),data.get(key));
  }
}
