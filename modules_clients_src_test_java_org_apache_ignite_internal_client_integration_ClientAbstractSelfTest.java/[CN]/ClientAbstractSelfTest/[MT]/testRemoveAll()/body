{
  GridClientData dfltData=client.data();
  assertNotNull(dfltData);
  GridClientData namedData=client.data(CACHE_NAME);
  assertNotNull(namedData);
  assertTrue(grid().cache(null).putx("key1","val1"));
  assertTrue(grid().cache(null).putx("key2","val2"));
  assertTrue(grid().cache(null).putx("key3","val3"));
  assertTrue(grid().cache(null).putx("key4","val4"));
  dfltData.removeAll(F.asList("key1","key2"));
  dfltData.removeAllAsync(F.asList("key3","key4")).get();
  assertNull(grid().cache(null).get("key1"));
  assertNull(grid().cache(null).get("key2"));
  assertNull(grid().cache(null).get("key3"));
  assertNull(grid().cache(null).get("key4"));
  assertTrue(grid().cache(CACHE_NAME).putx("key1","val1"));
  assertTrue(grid().cache(CACHE_NAME).putx("key2","val2"));
  assertTrue(grid().cache(CACHE_NAME).putx("key3","val3"));
  assertTrue(grid().cache(CACHE_NAME).putx("key4","val4"));
  namedData.removeAll(F.asList("key1","key2"));
  namedData.removeAllAsync(F.asList("key3","key4")).get();
  assertNull(grid().cache(CACHE_NAME).get("key1"));
  assertNull(grid().cache(CACHE_NAME).get("key2"));
  assertNull(grid().cache(CACHE_NAME).get("key3"));
  assertNull(grid().cache(CACHE_NAME).get("key4"));
}
