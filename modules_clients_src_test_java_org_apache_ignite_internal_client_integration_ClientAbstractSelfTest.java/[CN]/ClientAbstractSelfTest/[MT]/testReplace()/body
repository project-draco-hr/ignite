{
  GridClientData dfltData=client.data();
  assertNotNull(dfltData);
  GridClientData namedData=client.data(CACHE_NAME);
  assertNotNull(namedData);
  assertFalse(dfltData.replace("key1","val1"));
  assertTrue(grid().cache(null).putx("key1","val1"));
  assertTrue(dfltData.replace("key1","val2"));
  assertEquals("val2",grid().cache(null).get("key1"));
  assertFalse(dfltData.replace("key2","val1"));
  assertTrue(grid().cache(null).putx("key2","val1"));
  assertTrue(dfltData.replace("key2","val2"));
  assertEquals("val2",grid().cache(null).get("key2"));
  grid().cache(null).removeAll(F.asList("key1","key2"));
  assertFalse(dfltData.replaceAsync("key1","val1").get());
  assertTrue(grid().cache(null).putx("key1","val1"));
  assertTrue(dfltData.replaceAsync("key1","val2").get());
  assertEquals("val2",grid().cache(null).get("key1"));
  assertFalse(dfltData.replaceAsync("key2","val1").get());
  assertTrue(grid().cache(null).putx("key2","val1"));
  assertTrue(dfltData.replaceAsync("key2","val2").get());
  assertEquals("val2",grid().cache(null).get("key2"));
  assertFalse(namedData.replace("key1","val1"));
  assertTrue(grid().cache(CACHE_NAME).putx("key1","val1"));
  assertTrue(namedData.replace("key1","val2"));
  assertEquals("val2",grid().cache(CACHE_NAME).get("key1"));
  assertFalse(namedData.replaceAsync("key2","val1").get());
  assertTrue(grid().cache(CACHE_NAME).putx("key2","val1"));
  assertTrue(namedData.replaceAsync("key2","val2").get());
  assertEquals("val2",grid().cache(CACHE_NAME).get("key2"));
  grid().cache(CACHE_NAME).removeAll(F.asList("key1","key2"));
  assertFalse(namedData.replaceAsync("key1","val1").get());
  assertTrue(grid().cache(CACHE_NAME).putx("key1","val1"));
  assertTrue(namedData.replaceAsync("key1","val2").get());
  assertEquals("val2",grid().cache(CACHE_NAME).get("key1"));
  assertFalse(namedData.replaceAsync("key2","val1").get());
  assertTrue(grid().cache(CACHE_NAME).putx("key2","val1"));
  assertTrue(namedData.replaceAsync("key2","val2").get());
}
