{
  GridClientData dfltData=client.data();
  assertNotNull(dfltData);
  GridClientData namedData=client.data(CACHE_NAME);
  assertNotNull(namedData);
  dfltData.putAll(F.asMap("key1","val1","key2","val2"));
  Map<String,String> map=grid().<String,String>jcache(null).getAll(F.asSet("key1","key2"));
  assertEquals(2,map.size());
  assertEquals("val1",map.get("key1"));
  assertEquals("val2",map.get("key2"));
  dfltData.putAllAsync(F.asMap("key3","val3","key4","val4")).get();
  map=grid().<String,String>jcache(null).getAll(F.asSet("key3","key4"));
  assertEquals(2,map.size());
  assertEquals("val3",map.get("key3"));
  assertEquals("val4",map.get("key4"));
  namedData.putAll(F.asMap("key1","val1","key2","val2"));
  map=grid().<String,String>jcache(CACHE_NAME).getAll(F.asSet("key1","key2"));
  assertEquals(2,map.size());
  assertEquals("val1",map.get("key1"));
  assertEquals("val2",map.get("key2"));
  namedData.putAllAsync(F.asMap("key3","val3","key4","val4")).get();
  map=grid().<String,String>jcache(CACHE_NAME).getAll(F.asSet("key3","key4"));
  assertEquals(2,map.size());
  assertEquals("val3",map.get("key3"));
  assertEquals("val4",map.get("key4"));
}
