{
  GridClientCompute compute=client.compute();
  assertNull(compute.refreshNode(UUID.randomUUID(),true,false));
  assertNull(compute.refreshNode(UUID.randomUUID(),false,false));
  GridClientNode node=compute.refreshNode(grid().localNode().id(),true,false);
  assertNotNull(node);
  assertFalse(node.attributes().isEmpty());
  assertTrue(node.metrics() == null);
  assertNotNull(node.tcpAddresses());
  assertEquals(grid().localNode().id(),node.nodeId());
  assertEquals(4,node.caches().size());
  Map<String,GridClientCacheMode> caches=node.caches();
  for (  Map.Entry<String,GridClientCacheMode> e : caches.entrySet()) {
    if (e.getKey() == null || CACHE_NAME.equals(e.getKey()))     assertEquals(GridClientCacheMode.LOCAL,e.getValue());
 else     if ("replicated".equals(e.getKey()))     assertEquals(GridClientCacheMode.REPLICATED,e.getValue());
 else     if ("partitioned".equals(e.getKey()))     assertEquals(GridClientCacheMode.PARTITIONED,e.getValue());
 else     fail("Unexpected cache name: " + e.getKey());
  }
  node=compute.refreshNode(grid().localNode().id(),false,false);
  assertNotNull(node);
  assertTrue(node.attributes().isEmpty());
  assertTrue(node.metrics() == null);
  assertNotNull(node.tcpAddresses());
  assertEquals(grid().localNode().id(),node.nodeId());
  assertEquals(4,node.caches().size());
  caches=node.caches();
  for (  Map.Entry<String,GridClientCacheMode> e : caches.entrySet()) {
    if (e.getKey() == null || CACHE_NAME.equals(e.getKey()))     assertEquals(GridClientCacheMode.LOCAL,e.getValue());
 else     if ("replicated".equals(e.getKey()))     assertEquals(GridClientCacheMode.REPLICATED,e.getValue());
 else     if ("partitioned".equals(e.getKey()))     assertEquals(GridClientCacheMode.PARTITIONED,e.getValue());
 else     fail("Unexpected cache name: " + e.getKey());
  }
  node=compute.refreshNode(grid().localNode().id(),false,true);
  assertNotNull(node);
  assertTrue(node.attributes().isEmpty());
  assertFalse(node.metrics() == null);
  assertTrue(node.metrics().getCurrentActiveJobs() != -1);
  assertTrue(node.metrics().getCurrentIdleTime() != -1);
  assertTrue(node.metrics().getLastUpdateTime() != -1);
  assertNotNull(node.tcpAddresses());
  assertEquals(grid().localNode().id(),node.nodeId());
  assertEquals(4,node.caches().size());
  caches=node.caches();
  for (  Map.Entry<String,GridClientCacheMode> e : caches.entrySet()) {
    if (e.getKey() == null || CACHE_NAME.equals(e.getKey()))     assertEquals(GridClientCacheMode.LOCAL,e.getValue());
 else     if ("replicated".equals(e.getKey()))     assertEquals(GridClientCacheMode.REPLICATED,e.getValue());
 else     if ("partitioned".equals(e.getKey()))     assertEquals(GridClientCacheMode.PARTITIONED,e.getValue());
 else     fail("Unexpected cache name: " + e.getKey());
  }
  assertNull(compute.refreshNodeAsync(UUID.randomUUID(),true,false).get());
  assertNull(compute.refreshNodeAsync(UUID.randomUUID(),false,false).get());
  node=compute.refreshNodeAsync(grid().localNode().id(),true,false).get();
  assertNotNull(node);
  assertFalse(node.attributes().isEmpty());
  assertTrue(node.metrics() == null);
  assertNotNull(node.tcpAddresses());
  assertEquals(grid().localNode().id(),node.nodeId());
  assertEquals(4,node.caches().size());
  caches=node.caches();
  for (  Map.Entry<String,GridClientCacheMode> e : caches.entrySet()) {
    if (e.getKey() == null || CACHE_NAME.equals(e.getKey()))     assertEquals(GridClientCacheMode.LOCAL,e.getValue());
 else     if ("replicated".equals(e.getKey()))     assertEquals(GridClientCacheMode.REPLICATED,e.getValue());
 else     if ("partitioned".equals(e.getKey()))     assertEquals(GridClientCacheMode.PARTITIONED,e.getValue());
 else     fail("Unexpected cache name: " + e.getKey());
  }
  node=compute.refreshNodeAsync(grid().localNode().id(),false,false).get();
  assertNotNull(node);
  assertTrue(node.attributes().isEmpty());
  assertTrue(node.metrics() == null);
  assertNotNull(node.tcpAddresses());
  assertEquals(grid().localNode().id(),node.nodeId());
  assertEquals(4,node.caches().size());
  caches=node.caches();
  for (  Map.Entry<String,GridClientCacheMode> e : caches.entrySet()) {
    if (e.getKey() == null || CACHE_NAME.equals(e.getKey()))     assertEquals(GridClientCacheMode.LOCAL,e.getValue());
 else     if ("replicated".equals(e.getKey()))     assertEquals(GridClientCacheMode.REPLICATED,e.getValue());
 else     if ("partitioned".equals(e.getKey()))     assertEquals(GridClientCacheMode.PARTITIONED,e.getValue());
 else     fail("Unexpected cache name: " + e.getKey());
  }
  node=compute.refreshNodeAsync(grid().localNode().id(),false,true).get();
  assertNotNull(node);
  assertTrue(node.attributes().isEmpty());
  assertFalse(node.metrics() == null);
  assertNotNull(node.tcpAddresses());
  assertEquals(grid().localNode().id(),node.nodeId());
  assertEquals(4,node.caches().size());
  caches=node.caches();
  for (  Map.Entry<String,GridClientCacheMode> e : caches.entrySet()) {
    if (e.getKey() == null || CACHE_NAME.equals(e.getKey()))     assertEquals(GridClientCacheMode.LOCAL,e.getValue());
 else     if ("replicated".equals(e.getKey()))     assertEquals(GridClientCacheMode.REPLICATED,e.getValue());
 else     if ("partitioned".equals(e.getKey()))     assertEquals(GridClientCacheMode.PARTITIONED,e.getValue());
 else     fail("Unexpected cache name: " + e.getKey());
  }
}
