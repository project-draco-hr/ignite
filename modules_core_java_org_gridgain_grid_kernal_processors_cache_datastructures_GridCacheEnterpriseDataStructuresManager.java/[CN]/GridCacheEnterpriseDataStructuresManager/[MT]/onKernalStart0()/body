{
  try {
    dsView=cctx.cache().<GridCacheInternal,GridCacheInternal>projection(GridCacheInternal.class,GridCacheInternal.class).flagsOn(CLONE);
    cntDownLatchView=cctx.cache().<GridCacheInternalKey,GridCacheCountDownLatchValue>projection(GridCacheInternalKey.class,GridCacheCountDownLatchValue.class).flagsOn(CLONE);
    atomicLongView=cctx.cache().<GridCacheInternalKey,GridCacheAtomicLongValue>projection(GridCacheInternalKey.class,GridCacheAtomicLongValue.class).flagsOn(CLONE);
    atomicRefView=cctx.cache().<GridCacheInternalKey,GridCacheAtomicReferenceValue>projection(GridCacheInternalKey.class,GridCacheAtomicReferenceValue.class).flagsOn(CLONE);
    atomicStampedView=cctx.cache().<GridCacheInternalKey,GridCacheAtomicStampedValue>projection(GridCacheInternalKey.class,GridCacheAtomicStampedValue.class).flagsOn(CLONE);
    seqView=cctx.cache().<GridCacheInternalKey,GridCacheAtomicSequenceValue>projection(GridCacheInternalKey.class,GridCacheAtomicSequenceValue.class).flagsOn(CLONE);
    queueHdrView=cctx.cache().<GridCacheInternalKey,GridCacheQueueHeader>projection(GridCacheInternalKey.class,GridCacheQueueHeader.class).flagsOn(CLONE);
    queueItemView=cctx.cache().<GridCacheQueueItemKey,GridCacheQueueItem>projection(GridCacheQueueItemKey.class,GridCacheQueueItem.class).flagsOn(CLONE);
    queueView=cctx.cache().<GridCacheQueueKey,GridCacheQueueHeader2>projection(GridCacheQueueKey.class,GridCacheQueueHeader2.class).flagsOn(CLONE);
    queueQryFactory=new GridCacheQueueQueryFactory(cctx);
    queueDelWorker=new QueueDeleteWorker(cctx.kernalContext().gridName(),"queue-del-worker",log);
    initFlag=true;
  }
  finally {
    initLatch.countDown();
  }
}
