{
  if (U.isHashCodeMethod(mtd))   return System.identityHashCode(proxy);
 else   if (U.isEqualsMethod(mtd))   return proxy == args[0];
 else   if (U.isToStringMethod(mtd))   return GridServiceProxy.class.getSimpleName() + " [name=" + name+ ", sticky="+ sticky+ ']';
  ctx.gateway().readLock();
  try {
    while (true) {
      ClusterNode node=null;
      try {
        node=nodeForService(name,sticky);
        if (node == null)         throw new IgniteException("Failed to find deployed service: " + name);
        if (node.isLocal()) {
          ServiceContextImpl svcCtx=ctx.service().serviceContext(name);
          if (svcCtx != null)           return mtd.invoke(svcCtx.service(),args);
        }
 else {
          return ctx.closure().callAsyncNoFailover(GridClosureCallMode.BROADCAST,new ServiceProxyCallable(mtd.getName(),name,mtd.getParameterTypes(),args),Collections.singleton(node),false).get();
        }
      }
 catch (      GridServiceNotFoundException|ClusterTopologyCheckedException e) {
        if (log.isDebugEnabled())         log.debug("Service was not found or topology changed (will retry): " + e.getMessage());
      }
catch (      RuntimeException|Error e) {
        throw e;
      }
catch (      IgniteCheckedException e) {
        throw U.convertException(e);
      }
catch (      Exception e) {
        throw new IgniteException(e);
      }
      rmtNode.compareAndSet(node,null);
      try {
        Thread.sleep(10);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        throw new IgniteException(e);
      }
    }
  }
  finally {
    ctx.gateway().readUnlock();
  }
}
