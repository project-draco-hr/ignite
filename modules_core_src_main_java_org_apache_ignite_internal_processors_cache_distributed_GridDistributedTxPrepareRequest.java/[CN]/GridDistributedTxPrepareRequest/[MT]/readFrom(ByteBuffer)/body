{
  reader.setBuffer(buf);
  if (!super.readFrom(buf))   return false;
switch (readState) {
case 8:
    commitVer=reader.readField("commitVer",MessageFieldType.MSG);
  if (!reader.isLastRead())   return false;
readState++;
case 9:
byte concurrencyOrd;
concurrencyOrd=reader.readField("concurrency",MessageFieldType.BYTE);
if (!reader.isLastRead()) return false;
concurrency=IgniteTxConcurrency.fromOrdinal(concurrencyOrd);
readState++;
case 10:
dhtVersBytes=reader.readField("dhtVersBytes",MessageFieldType.BYTE_ARR);
if (!reader.isLastRead()) return false;
readState++;
case 11:
grpLockKeyBytes=reader.readField("grpLockKeyBytes",MessageFieldType.BYTE_ARR);
if (!reader.isLastRead()) return false;
readState++;
case 12:
invalidate=reader.readField("invalidate",MessageFieldType.BOOLEAN);
if (!reader.isLastRead()) return false;
readState++;
case 13:
byte isolationOrd;
isolationOrd=reader.readField("isolation",MessageFieldType.BYTE);
if (!reader.isLastRead()) return false;
isolation=IgniteTxIsolation.fromOrdinal(isolationOrd);
readState++;
case 14:
partLock=reader.readField("partLock",MessageFieldType.BOOLEAN);
if (!reader.isLastRead()) return false;
readState++;
case 15:
readsBytes=reader.readCollectionField("readsBytes",MessageFieldType.BYTE_ARR);
if (!reader.isLastRead()) return false;
readState++;
case 16:
sys=reader.readField("sys",MessageFieldType.BOOLEAN);
if (!reader.isLastRead()) return false;
readState++;
case 17:
threadId=reader.readField("threadId",MessageFieldType.LONG);
if (!reader.isLastRead()) return false;
readState++;
case 18:
timeout=reader.readField("timeout",MessageFieldType.LONG);
if (!reader.isLastRead()) return false;
readState++;
case 19:
txNodesBytes=reader.readField("txNodesBytes",MessageFieldType.BYTE_ARR);
if (!reader.isLastRead()) return false;
readState++;
case 20:
txSize=reader.readField("txSize",MessageFieldType.INT);
if (!reader.isLastRead()) return false;
readState++;
case 21:
writesBytes=reader.readCollectionField("writesBytes",MessageFieldType.BYTE_ARR);
if (!reader.isLastRead()) return false;
readState++;
}
return true;
}
