{
  Grid g=GridGain.grid();
  GridCache<Integer,String> cache=g.cache(CACHE_NAME);
  GridFuture<?> fut=g.forCache(CACHE_NAME).events().consumeRemote(new GridBiPredicate<UUID,GridCacheEvent>(){
    @Override public boolean apply(    UUID nodeId,    GridCacheEvent evt){
      System.out.println();
      System.out.println("Received event [evt=" + evt.name() + ", key="+ evt.key()+ ", oldVal="+ evt.oldValue()+ ", newVal="+ evt.newValue());
      return true;
    }
  }
,new GridPredicate<GridCacheEvent>(){
    /** 
 * Auto-inject grid instance. 
 */
    @GridInstanceResource private Grid g;
    @Override public boolean apply(    GridCacheEvent evt){
      Integer key=evt.key();
      return key >= 10 && g.cache(CACHE_NAME).affinity().isPrimary(g.localNode(),key);
    }
  }
,EVT_CACHE_OBJECT_PUT,EVT_CACHE_OBJECT_READ,EVT_CACHE_OBJECT_REMOVED);
  fut.get();
  int keyCnt=20;
  for (int i=0; i < keyCnt; i++)   cache.putx(i,Integer.toString(i));
}
