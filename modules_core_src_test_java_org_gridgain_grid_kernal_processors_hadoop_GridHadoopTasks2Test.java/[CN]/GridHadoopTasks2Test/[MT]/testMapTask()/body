{
  File testInputFile=File.createTempFile(GridGainWordCount2.class.getSimpleName(),"-input");
  testInputFile.deleteOnExit();
  URI testInputFileURI=URI.create(testInputFile.getAbsolutePath());
  PrintWriter testInputFileWriter=new PrintWriter(testInputFile);
  testInputFileWriter.println("hello0 world0");
  testInputFileWriter.println("world1 hello1");
  testInputFileWriter.flush();
  GridHadoopFileBlock fileBlock1=new GridHadoopFileBlock(null,testInputFileURI,0,testInputFile.length() - 1);
  testInputFileWriter.println("hello2 world2");
  testInputFileWriter.println("world3 hello3");
  testInputFileWriter.close();
  GridHadoopFileBlock fileBlock2=new GridHadoopFileBlock(null,testInputFileURI,fileBlock1.length(),testInputFile.length() - fileBlock1.length());
  Job hadoopJob=GridGainWordCount2.getJob(testInputFileURI.toString(),"/");
  hadoopJob.setJobID(new JobID());
  GridHadoopJobId jobId=new GridHadoopJobId(new UUID(0,0),0);
  GridHadoopDefaultJobInfo jobInfo=new GridHadoopDefaultJobInfo(hadoopJob.getConfiguration());
  GridHadoopV2JobImpl gridJob=new GridHadoopV2JobImpl(jobId,jobInfo);
  GridHadoopTestTaskContext ctx=new GridHadoopTestTaskContext(gridJob);
  ctx.mockOutput().clear();
  GridHadoopTaskInfo taskInfo=new GridHadoopTaskInfo(null,GridHadoopTaskType.MAP,jobId,0,0,fileBlock1);
  GridHadoopTask task=gridJob.createTask(taskInfo);
  task.run(ctx);
  assertEquals("hello0,1; world0,1; world1,1; hello1,1",Joiner.on("; ").join(ctx.mockOutput()));
  ctx.mockOutput().clear();
  taskInfo=new GridHadoopTaskInfo(null,GridHadoopTaskType.MAP,jobId,0,0,fileBlock2);
  task=gridJob.createTask(taskInfo);
  task.run(ctx);
  assertEquals("hello2,1; world2,1; world3,1; hello3,1",Joiner.on("; ").join(ctx.mockOutput()));
}
