{
  startStopwatch();
  assertParameter(ipFinder != null,"ipFinder != null");
  assertParameter(ipFinderCleanFreq > 0,"ipFinderCleanFreq > 0");
  assertParameter(locPort > 1023,"localPort > 1023");
  assertParameter(locPortRange >= 0,"localPortRange >= 0");
  assertParameter(locPort + locPortRange <= 0xffff,"locPort + locPortRange <= 0xffff");
  assertParameter(netTimeout > 0,"networkTimeout > 0");
  assertParameter(sockTimeout > 0,"sockTimeout > 0");
  assertParameter(ackTimeout > 0,"ackTimeout > 0");
  assertParameter(maxAckTimeout > ackTimeout,"maxAckTimeout > ackTimeout");
  assertParameter(reconCnt > 0,"reconnectCnt > 0");
  assertParameter(hbFreq > 0,"heartbeatFreq > 0");
  assertParameter(maxMissedHbs > 0,"maxMissedHeartbeats > 0");
  assertParameter(maxMissedClientHbs > 0,"maxMissedClientHeartbeats > 0");
  assertParameter(threadPri > 0,"threadPri > 0");
  assertParameter(statsPrintFreq >= 0,"statsPrintFreq >= 0");
  try {
    locHost=U.resolveLocalHost(locAddr);
  }
 catch (  IOException e) {
    throw new IgniteSpiException("Unknown local address: " + locAddr,e);
  }
  if (log.isDebugEnabled()) {
    log.debug(configInfo("localHost",locHost.getHostAddress()));
    log.debug(configInfo("localPort",locPort));
    log.debug(configInfo("localPortRange",locPortRange));
    log.debug(configInfo("threadPri",threadPri));
    log.debug(configInfo("networkTimeout",netTimeout));
    log.debug(configInfo("sockTimeout",sockTimeout));
    log.debug(configInfo("ackTimeout",ackTimeout));
    log.debug(configInfo("maxAckTimeout",maxAckTimeout));
    log.debug(configInfo("reconnectCount",reconCnt));
    log.debug(configInfo("ipFinder",ipFinder));
    log.debug(configInfo("ipFinderCleanFreq",ipFinderCleanFreq));
    log.debug(configInfo("heartbeatFreq",hbFreq));
    log.debug(configInfo("maxMissedHeartbeats",maxMissedHbs));
    log.debug(configInfo("statsPrintFreq",statsPrintFreq));
  }
  if (netTimeout < 3000)   U.warn(log,"Network timeout is too low (at least 3000 ms recommended): " + netTimeout);
  if (hbFreq < 2000)   U.warn(log,"Heartbeat frequency is too high (at least 2000 ms recommended): " + hbFreq);
  registerMBean(gridName,this,GridTcpDiscoverySpiMBean.class);
  if (ipFinder instanceof GridTcpDiscoveryMulticastIpFinder) {
    GridTcpDiscoveryMulticastIpFinder mcastIpFinder=((GridTcpDiscoveryMulticastIpFinder)ipFinder);
    if (mcastIpFinder.getLocalAddress() == null)     mcastIpFinder.setLocalAddress(locAddr);
  }
}
