{
  if (metrics == null) {
    metrics=new GridLocalMetrics(){
      @Override public int getAvailableProcessors(){
        return os.getAvailableProcessors();
      }
      @Override public double getCurrentCpuLoad(){
        return cpuLoad;
      }
      @Override public double getCurrentGcCpuLoad(){
        return gcCpuLoad;
      }
      @Override public long getHeapMemoryInitialized(){
        return mem.getHeapMemoryUsage().getInit();
      }
      @Override public long getHeapMemoryUsed(){
        return mem.getHeapMemoryUsage().getUsed();
      }
      @Override public long getHeapMemoryCommitted(){
        return mem.getHeapMemoryUsage().getCommitted();
      }
      @Override public long getHeapMemoryMaximum(){
        return mem.getHeapMemoryUsage().getMax();
      }
      @Override public long getNonHeapMemoryInitialized(){
        return nonHeapMemoryUsage().getInit();
      }
      @Override public long getNonHeapMemoryUsed(){
        return nonHeapMemoryUsage().getUsed();
      }
      @Override public long getNonHeapMemoryCommitted(){
        return nonHeapMemoryUsage().getCommitted();
      }
      @Override public long getNonHeapMemoryMaximum(){
        return nonHeapMemoryUsage().getMax();
      }
      @Override public long getUptime(){
        return rt.getUptime();
      }
      @Override public long getStartTime(){
        return rt.getStartTime();
      }
      @Override public int getThreadCount(){
        return threads.getThreadCount();
      }
      @Override public int getPeakThreadCount(){
        return threads.getPeakThreadCount();
      }
      @Override public long getTotalStartedThreadCount(){
        return threads.getTotalStartedThreadCount();
      }
      @Override public int getDaemonThreadCount(){
        return threads.getDaemonThreadCount();
      }
      @Override public long getFileSystemFreeSpace(){
        return fsRootFile == null ? -1 : fsRootFile.getFreeSpace();
      }
      @Override public long getFileSystemTotalSpace(){
        return fsRootFile == null ? -1 : fsRootFile.getTotalSpace();
      }
      @Override public long getFileSystemUsableSpace(){
        return fsRootFile == null ? -1 : fsRootFile.getUsableSpace();
      }
    }
;
  }
  return metrics;
}
