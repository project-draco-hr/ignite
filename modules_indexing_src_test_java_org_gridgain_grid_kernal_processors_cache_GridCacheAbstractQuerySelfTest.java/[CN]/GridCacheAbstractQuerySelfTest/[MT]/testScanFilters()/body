{
  GridCache<Integer,Integer> cache=grid.cache(null);
  for (int i=0; i < 50; i++)   assertTrue(cache.putx(i,i));
  GridCacheQuery<Map.Entry<Integer,Integer>> q=cache.queries().createScanQuery(new P2<Integer,Integer>(){
    @Override public boolean apply(    Integer k,    Integer v){
      assertNotNull(k);
      assertNotNull(v);
      return k >= 20 && v < 40;
    }
  }
);
  q.enableDedup(true);
  List<Map.Entry<Integer,Integer>> list=new ArrayList<>(q.execute().get());
  Collections.sort(list,new Comparator<Map.Entry<Integer,Integer>>(){
    @Override public int compare(    Map.Entry<Integer,Integer> e1,    Map.Entry<Integer,Integer> e2){
      return e1.getKey().compareTo(e2.getKey());
    }
  }
);
  assertEquals(20,list.size());
  for (int i=20; i < 40; i++) {
    Map.Entry<Integer,Integer> e=list.get(i - 20);
    assertEquals(i,(int)e.getKey());
    assertEquals(i,(int)e.getValue());
  }
}
