{
  if (log.isDebugEnabled())   log.debug("Starting streamer: " + name);
  if (F.isEmpty(c.getStages()))   throw new IgniteCheckedException("Streamer should have at least one stage configured " + "(fix configuration and restart): " + name);
  if (F.isEmpty(c.getWindows()))   throw new IgniteCheckedException("Streamer should have at least one window configured " + "(fix configuration and restart): " + name);
  prepareResources();
  U.startLifecycleAware(lifecycleAwares());
  stages=U.newLinkedHashMap(c.getStages().size());
  int stageIdx=0;
  StreamerStageWrapper prev=null;
  for (  StreamerStage s : c.getStages()) {
    String sName=s.name();
    if (F.isEmpty(sName))     throw new IgniteCheckedException("Streamer stage should have non-empty name [streamerName=" + name + ", stage="+ s+ ']');
    if (stages.containsKey(sName))     throw new IgniteCheckedException("Streamer stages have duplicate names (all names should be unique) " + "[streamerName=" + name + ", stage="+ s+ ", stageName="+ sName+ ']');
    if (firstStage == null)     firstStage=sName;
    StreamerStageWrapper wrapper=new StreamerStageWrapper(s,stageIdx);
    stages.put(sName,wrapper);
    if (prev != null)     prev.nextStageName(s.name());
    prev=wrapper;
    stageIdx++;
  }
  winMap=new LinkedHashMap<>();
  for (  StreamerWindow w : c.getWindows()) {
    String wName=w.name();
    if (F.isEmpty(wName))     throw new IgniteCheckedException("Streamer window should have non-empty name [streamerName=" + name + ", window="+ w+ ']');
    if (winMap.containsKey(wName))     throw new IgniteCheckedException("Streamer windows have duplicate names (all names should be unique). " + "If you use two or more windows of the same type you need to assign their names explicitly " + "[streamer=" + name + ", windowName="+ wName+ ']');
    winMap.put(wName,w);
    if (dfltWin == null)     dfltWin=w;
  }
  execSvc=new IgniteThreadPoolExecutor(ctx.gridName(),c.getThreadPoolSize(),c.getThreadPoolSize(),0,new LinkedBlockingQueue<Runnable>());
  execSvcCap=c.getThreadPoolSize();
  resetMetrics();
  if (router == null)   router=new StreamerLocalEventRouter();
  ctx.io().addMessageListener(topic,new GridMessageListener(){
    @Override public void onMessage(    UUID nodeId,    Object msg){
      if (log.isDebugEnabled())       log.debug("Received message [nodeId=" + nodeId + ", msg="+ msg+ ']');
      processStreamerMessage(nodeId,msg);
    }
  }
);
  ctx.event().addLocalEventListener(new GridLocalEventListener(){
    @Override public void onEvent(    Event evt){
      DiscoveryEvent discoEvt=(DiscoveryEvent)evt;
      for (      GridStreamerStageExecutionFuture fut : stageFuts.values())       fut.onNodeLeft(discoEvt.eventNode().id());
    }
  }
,EVT_NODE_LEFT,EVT_NODE_FAILED);
}
