{
  try {
    final CountDownLatch startLatch=new CountDownLatch(1);
    final CountDownLatch stopLatch=new CountDownLatch(1);
    GridTestUtils.runMultiThreadedAsync(new Callable<Object>(){
      @Nullable @Override public Object call() throws Exception {
        Ignite g=startGrid("first");
        g.events().localListen(new IgnitePredicate<GridEvent>(){
          @Override public boolean apply(          GridEvent evt){
            stopLatch.countDown();
            return true;
          }
        }
,GridEventType.EVT_NODE_JOINED);
        startLatch.countDown();
        stopLatch.await();
        G.stop(g.name(),false);
        return null;
      }
    }
,1,"first");
    GridTestUtils.runMultiThreaded(new Callable<Object>(){
      @Nullable @Override public Object call() throws Exception {
        startLatch.await();
        startGrid("second");
        return null;
      }
    }
,1,"second");
  }
  finally {
    G.stopAll(false);
  }
}
