{
  final GridOffHeapSnapTreeMap.KeyLock lock=new GridOffHeapSnapTreeMap.KeyLock();
  final int[] ints=new int[2000];
  final int iterations=1000000;
  final int threads=37;
  final AtomicInteger sum0=new AtomicInteger();
  final ConcurrentMap<Integer,Object> locked=new ConcurrentHashMap<>();
  multithreaded(new Runnable(){
    @Override public void run(){
      Random rnd=new Random();
      for (int i=0; i < iterations; i++)       sum0.addAndGet(increment(rnd,1 + rnd.nextInt(ints.length - 1),new HashSet<Integer>()));
    }
    /** 
 * @param rnd Random.
 * @param idx Index.
 * @param locIdxs Locked indexes.
 * @return Count of incremented cells.
 */
    int increment(    Random rnd,    int idx,    HashSet<Integer> locIdxs){
      if (idx >= ints.length)       return 0;
      int res=1;
      GridOffHeapSnapTreeMap.KeyLock.Lock l=lock.lock(idx);
      try {
        assertTrue(locIdxs.add(idx));
        Object check=F.asList(l == null ? Boolean.TRUE : l,Thread.currentThread().getName(),idx);
        Object check2=locked.putIfAbsent(idx,check);
        if (check2 != null)         fail(">> " + check + " <><><> "+ check2);
        ints[idx]++;
        assertNull(lock.lock(idx));
        if (rnd.nextInt(10) > 2)         res+=increment(rnd,idx + 1 + rnd.nextInt(3),locIdxs);
        assertTrue(locIdxs.remove(idx));
        assertSame(check,locked.remove(idx));
      }
  finally {
        if (l != null)         l.unlock();
      }
      return res;
    }
  }
,threads);
  int sum=0;
  for (int i=1; i < ints.length; i++) {
    GridOffHeapSnapTreeMap.KeyLock.Lock l=lock.lock(i);
    assertNotNull(l);
    sum+=ints[i];
    assertNull(lock.lock(i));
    l.unlock();
  }
  assertEquals(sum0.get(),sum);
  X.println("Sum: ",sum);
}
