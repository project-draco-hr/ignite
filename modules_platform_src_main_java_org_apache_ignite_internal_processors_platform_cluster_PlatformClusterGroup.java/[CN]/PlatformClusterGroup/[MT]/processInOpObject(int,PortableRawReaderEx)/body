{
switch (type) {
case OP_FOR_NODE_IDS:
{
      Collection<UUID> ids=PlatformUtils.readCollection(reader);
      return new PlatformClusterGroup(platformCtx,(ClusterGroupEx)prj.forNodeIds(ids));
    }
case OP_FOR_ATTRIBUTE:
  return new PlatformClusterGroup(platformCtx,(ClusterGroupEx)prj.forAttribute(reader.readString(),reader.readString()));
case OP_FOR_CACHE:
{
  String cacheName=reader.readString();
  return new PlatformClusterGroup(platformCtx,(ClusterGroupEx)prj.forCacheNodes(cacheName));
}
case OP_FOR_CLIENT:
{
String cacheName=reader.readString();
return new PlatformClusterGroup(platformCtx,(ClusterGroupEx)prj.forClientNodes(cacheName));
}
case OP_FOR_DATA:
{
String cacheName=reader.readString();
return new PlatformClusterGroup(platformCtx,(ClusterGroupEx)prj.forDataNodes(cacheName));
}
case OP_FOR_HOST:
{
UUID nodeId=reader.readUuid();
ClusterNode node=prj.node(nodeId);
return new PlatformClusterGroup(platformCtx,(ClusterGroupEx)prj.forHost(node));
}
default :
return throwUnsupported(type);
}
}
