{
  reader.setBuffer(buf);
  if (!super.readFrom(buf))   return false;
switch (state) {
case 9:
    futId=reader.readIgniteUuid("futId");
  if (!reader.isLastRead())   return false;
state++;
case 10:
grpLockKeyBytes=reader.readByteArray("grpLockKeyBytes");
if (!reader.isLastRead()) return false;
state++;
case 11:
isInTx=reader.readBoolean("isInTx");
if (!reader.isLastRead()) return false;
state++;
case 12:
isInvalidate=reader.readBoolean("isInvalidate");
if (!reader.isLastRead()) return false;
state++;
case 13:
isRead=reader.readBoolean("isRead");
if (!reader.isLastRead()) return false;
state++;
case 14:
isolation=reader.readEnum("isolation",IgniteTxIsolation.class);
if (!reader.isLastRead()) return false;
state++;
case 15:
keyBytes=reader.readCollection("keyBytes",byte[].class);
if (!reader.isLastRead()) return false;
state++;
case 16:
nearXidVer=reader.readMessage("nearXidVer");
if (!reader.isLastRead()) return false;
state++;
case 17:
nodeId=reader.readUuid("nodeId");
if (!reader.isLastRead()) return false;
state++;
case 18:
partLock=reader.readBoolean("partLock");
if (!reader.isLastRead()) return false;
state++;
case 19:
retVals=reader.readBooleanArray("retVals");
if (!reader.isLastRead()) return false;
state++;
case 20:
threadId=reader.readLong("threadId");
if (!reader.isLastRead()) return false;
state++;
case 21:
timeout=reader.readLong("timeout");
if (!reader.isLastRead()) return false;
state++;
case 22:
txSize=reader.readInt("txSize");
if (!reader.isLastRead()) return false;
state++;
}
return true;
}
