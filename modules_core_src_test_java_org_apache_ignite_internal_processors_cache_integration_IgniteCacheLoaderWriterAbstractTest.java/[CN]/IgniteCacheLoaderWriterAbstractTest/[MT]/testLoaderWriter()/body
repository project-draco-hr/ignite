{
  final Object key=Integer.MAX_VALUE;
  for (int i=0; i < gridCount(); i++) {
    log.info("Test with grid: " + i);
    storeMap.clear();
    ldrCallCnt.set(0);
    writerCallCnt.set(0);
    IgniteCache<Object,Object> cache=jcache(i);
    assertNull(cache.get(key));
    checkCalls(1,0);
    storeMap.put(key,"test");
    assertEquals("test",cache.get(key));
    checkCalls(2,0);
    assertTrue(storeMap.containsKey(key));
    cache.remove(key);
    checkCalls(2,1);
    assertFalse(storeMap.containsKey(key));
    assertNull(cache.get(key));
    checkCalls(3,1);
    cache.put(key,"test1");
    checkCalls(3,2);
    assertEquals("test1",storeMap.get(key));
    assertEquals("test1",cache.get(key));
    checkCalls(3,2);
    cache.invoke(key,new EntryProcessor<Object,Object,Object>(){
      @Override public Object process(      MutableEntry<Object,Object> e,      Object... args){
        e.setValue("test2");
        return null;
      }
    }
);
    checkCalls(3,3);
    assertEquals("test2",storeMap.get(key));
    assertEquals("test2",cache.get(key));
    checkCalls(3,3);
    cache.invoke(key,new EntryProcessor<Object,Object,Object>(){
      @Override public Object process(      MutableEntry<Object,Object> e,      Object... args){
        e.remove();
        return null;
      }
    }
);
    checkCalls(3,4);
    assertFalse(storeMap.containsKey(key));
    assertNull(cache.get(key));
  }
}
