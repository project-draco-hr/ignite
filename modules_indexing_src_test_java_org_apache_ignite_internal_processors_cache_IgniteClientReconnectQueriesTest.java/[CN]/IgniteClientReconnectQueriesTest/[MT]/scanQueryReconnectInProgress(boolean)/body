{
  Ignite cln=grid(serverCount());
  assertTrue(cln.cluster().localNode().isClient());
  final Ignite srv=clientRouter(cln);
  final IgniteCache<Integer,Person> clnCache=cln.getOrCreateCache(QUERY_CACHE);
  clnCache.put(1,new Person(1,"name1","surname1"));
  clnCache.put(2,new Person(2,"name2","surname2"));
  clnCache.put(3,new Person(3,"name3","surname3"));
  final ScanQuery<Integer,Person> scanQry=new ScanQuery<>();
  scanQry.setPageSize(1);
  scanQry.setFilter(new IgniteBiPredicate<Integer,Person>(){
    @Override public boolean apply(    Integer integer,    Person person){
      return true;
    }
  }
);
  if (setPart)   scanQry.setPartition(1);
  blockMessage(GridCacheQueryResponse.class);
  final IgniteInternalFuture<Object> fut=GridTestUtils.runAsync(new Callable<Object>(){
    @Override public Object call() throws Exception {
      try {
        QueryCursor<Cache.Entry<Integer,Person>> qryCursor=clnCache.query(scanQry);
        qryCursor.getAll();
      }
 catch (      CacheException e) {
        checkAndWait(e);
        return true;
      }
      return false;
    }
  }
);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return fut.get(200);
    }
  }
,IgniteFutureTimeoutCheckedException.class,null);
  assertNotDone(fut);
  unblockMessage();
  reconnectClientNode(cln,srv,null);
  assertTrue((Boolean)fut.get(2,SECONDS));
  QueryCursor<Cache.Entry<Integer,Person>> qryCursor2=clnCache.query(scanQry);
  List<Cache.Entry<Integer,Person>> entries=qryCursor2.getAll();
  assertEquals(setPart ? 1 : 3,entries.size());
  for (  Cache.Entry<Integer,Person> entry : entries) {
    assertEquals(Integer.class,entry.getKey().getClass());
    assertEquals(Person.class,entry.getValue().getClass());
  }
}
