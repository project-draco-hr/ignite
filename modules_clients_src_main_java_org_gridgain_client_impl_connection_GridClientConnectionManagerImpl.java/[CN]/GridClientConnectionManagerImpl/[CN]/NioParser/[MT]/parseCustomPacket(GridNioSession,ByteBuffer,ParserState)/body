{
  ByteArrayOutputStream tmp=state.buffer();
  int len=state.index();
  if (buf.remaining() > 0) {
    if (len == 0) {
      byte[] lenBytes=statefulRead(buf,tmp,4);
      if (lenBytes != null) {
        len=U.bytesToInt(lenBytes,0);
        if (len == 0)         return GridClientPingPacket.PING_MESSAGE;
 else         if (len < 0)         throw new IOException("Failed to parse incoming packet (invalid packet length) " + "[ses=" + ses + ", len="+ len+ ']');
        state.index(len);
      }
    }
    if (len > 0 && state.requestData() == null) {
      byte[] hdrBytes=statefulRead(buf,tmp,40);
      if (hdrBytes != null) {
        long reqId=GridClientByteUtils.bytesToLong(hdrBytes,0);
        UUID clientId=GridClientByteUtils.bytesToUuid(hdrBytes,8);
        UUID destId=GridClientByteUtils.bytesToUuid(hdrBytes,24);
        state.requestData(new GridClientRequestData(reqId,clientId,destId));
      }
    }
    if (len > 0 && state.requestData() != null) {
      final int packetSize=len - 40;
      if (tmp.size() + buf.remaining() >= packetSize) {
        if (buf.remaining() > 0) {
          byte[] bodyBytes=new byte[packetSize - tmp.size()];
          buf.get(bodyBytes);
          tmp.write(bodyBytes);
        }
        GridClientRequestData reqData=state.requestData();
        reqData.body(state.buffer().toByteArray());
        return reqData;
      }
 else       copyRemaining(buf,tmp);
    }
  }
  return null;
}
