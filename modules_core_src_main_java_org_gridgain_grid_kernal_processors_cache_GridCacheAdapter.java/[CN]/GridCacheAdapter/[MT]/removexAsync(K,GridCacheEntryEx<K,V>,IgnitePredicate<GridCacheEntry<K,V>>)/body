{
  final boolean statsEnabled=ctx.config().isStatisticsEnabled();
  final long start=statsEnabled ? System.nanoTime() : 0L;
  ctx.denyOnLocalRead();
  A.notNull(key,"key");
  if (keyCheck)   validateCacheKey(key);
  IgniteFuture<Boolean> fut=asyncOp(new AsyncOp<Boolean>(key){
    @Override public IgniteFuture<Boolean> op(    IgniteTxLocalAdapter<K,V> tx){
      return tx.removeAllAsync(ctx,Collections.singletonList(key),entry,false,filter).chain((IgniteClosure<IgniteFuture<GridCacheReturn<V>>,Boolean>)RET2FLAG);
    }
    @Override public String toString(){
      return "removeAsync [key=" + key + ", filter="+ Arrays.toString(filter)+ ']';
    }
  }
);
  if (statsEnabled)   fut.listenAsync(new CI1<IgniteFuture<Boolean>>(){
    @Override public void apply(    IgniteFuture<Boolean> fut){
      try {
        if (!fut.isCancelled()) {
          fut.get();
          ctx.cache().metrics0().addRemoveTimeNanos(System.nanoTime() - start);
        }
      }
 catch (      IgniteCheckedException ignore) {
      }
    }
  }
);
  return fut;
}
