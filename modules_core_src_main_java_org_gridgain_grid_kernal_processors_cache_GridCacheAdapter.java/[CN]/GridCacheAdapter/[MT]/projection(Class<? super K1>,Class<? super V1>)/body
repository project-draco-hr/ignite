{
  if (PortableObject.class.isAssignableFrom(keyType) || PortableObject.class.isAssignableFrom(valType))   throw new IllegalStateException("Failed to create cache projection for portable objects. " + "Use keepPortable() method instead.");
  if (ctx.deploymentEnabled()) {
    try {
      ctx.deploy().registerClasses(keyType,valType);
    }
 catch (    IgniteCheckedException e) {
      throw new IgniteException(e);
    }
  }
  GridCacheProjectionImpl<K1,V1> prj=new GridCacheProjectionImpl<>((GridCacheProjection<K1,V1>)this,(GridCacheContext<K1,V1>)ctx,CU.<K1,V1>typeFilter(keyType,valType),null,null,null,false);
  return new GridCacheProxyImpl<>((GridCacheContext<K1,V1>)ctx,prj,prj);
}
