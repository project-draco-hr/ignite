{
  SecurityPermission perm=null;
  String name=null;
switch (req.command()) {
case CACHE_GET:
case CACHE_CONTAINS_KEY:
case CACHE_CONTAINS_KEYS:
case CACHE_GET_ALL:
    perm=SecurityPermission.CACHE_READ;
  name=((GridRestCacheRequest)req).cacheName();
break;
case EXECUTE_SQL_QUERY:
case EXECUTE_SQL_FIELDS_QUERY:
case CLOSE_SQL_QUERY:
case FETCH_SQL_QUERY:
perm=SecurityPermission.CACHE_READ;
name=((RestSqlQueryRequest)req).cacheName();
break;
case CACHE_PUT:
case CACHE_ADD:
case CACHE_PUT_ALL:
case CACHE_REPLACE:
case CACHE_CAS:
case CACHE_APPEND:
case CACHE_PREPEND:
case CACHE_GET_AND_PUT:
case CACHE_GET_AND_REPLACE:
case CACHE_GET_AND_PUT_IF_ABSENT:
case CACHE_PUT_IF_ABSENT:
case CACHE_REPLACE_VALUE:
perm=SecurityPermission.CACHE_PUT;
name=((GridRestCacheRequest)req).cacheName();
break;
case CACHE_REMOVE:
case CACHE_REMOVE_ALL:
case CACHE_GET_AND_REMOVE:
case CACHE_REMOVE_VALUE:
perm=SecurityPermission.CACHE_REMOVE;
name=((GridRestCacheRequest)req).cacheName();
break;
case EXE:
case RESULT:
perm=SecurityPermission.TASK_EXECUTE;
name=((GridRestTaskRequest)req).taskName();
break;
case GET_OR_CREATE_CACHE:
case DESTROY_CACHE:
perm=SecurityPermission.ADMIN_CACHE;
name=((GridRestCacheRequest)req).cacheName();
break;
case CACHE_METRICS:
case CACHE_SIZE:
case TOPOLOGY:
case NODE:
case VERSION:
case NOOP:
case QUIT:
case ATOMIC_INCREMENT:
case ATOMIC_DECREMENT:
case NAME:
case LOG:
break;
default :
throw new AssertionError("Unexpected command: " + req.command());
}
if (perm != null) ctx.security().authorize(name,perm,sCtx);
}
