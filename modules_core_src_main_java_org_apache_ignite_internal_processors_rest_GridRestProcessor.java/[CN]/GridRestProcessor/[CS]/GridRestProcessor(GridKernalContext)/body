{
  super(ctx);
  long sesExpTime0;
  String sesExpTime=null;
  try {
    sesExpTime=System.getProperty(IgniteSystemProperties.IGNITE_REST_SESSION_TIMEOUT);
    if (sesExpTime != null)     sesExpTime0=Long.valueOf(sesExpTime) * 1000;
 else     sesExpTime0=DEFAULT_SES_TIMEOUT;
  }
 catch (  NumberFormatException ignore) {
    U.warn(log,"Failed parsing IGNITE_REST_SESSION_TIMEOUT system variable [IGNITE_REST_SESSION_TIMEOUT=" + sesExpTime + "]");
    sesExpTime0=DEFAULT_SES_TIMEOUT;
  }
  sesTtl=sesExpTime0;
  sesTimeoutCheckerThread=new IgniteThread(ctx.gridName(),"session-timeout-worker",new GridWorker(ctx.gridName(),"session-timeout-worker",log){
    @Override protected void body() throws InterruptedException {
      while (!isCancelled()) {
        Thread.sleep(SES_TIMEOUT_CHECK_DELAY);
        for (        Map.Entry<UUID,Session> e : sesId2Ses.entrySet()) {
          Session ses=e.getValue();
          if (ses.isTimedOut(sesTtl)) {
            sesId2Ses.remove(ses.sesId,ses);
            clientId2SesId.remove(ses.clientId,ses.sesId);
          }
        }
      }
    }
  }
);
}
