{
  Random random=random();
  List<T2<Path,Integer>> files=new ArrayList<>(filesNum);
  for (int i=0; i < filesNum; i++) {
    int size=maxSize == minSize ? minSize : minSize + random.nextInt(maxSize - minSize);
    Path file=new Path(dirs[i % dirs.length],"file-" + UUID.randomUUID());
    createFile(fs,file,size,CREATE_BUF_SIZE);
    files.add(new T2<>(file,size));
  }
  List<Path> toDel=new ArrayList<>(deletes);
  for (int i=0; i < deletes; i++) {
    int size=maxSize == minSize ? minSize : minSize + random.nextInt(maxSize - minSize);
    Path file=new Path(dirs[i % dirs.length],"file-to-delete-" + UUID.randomUUID());
    createFile(fs,file,size,CREATE_BUF_SIZE);
    toDel.add(file);
  }
  while (reads > 0 || writes > 0 || deletes > 0) {
    if (reads > 0) {
      reads--;
      T2<Path,Integer> file=files.get(reads % files.size());
      readFull(fs,file.get1(),CREATE_BUF_SIZE);
      int fileSize=file.get2();
      readRandom(fs,file.get1(),fileSize,random.nextInt(fileSize) + 1);
    }
    if (writes > 0) {
      writes--;
      T2<Path,Integer> file=files.get(writes % files.size());
      overwriteFile(fs,file.get1(),file.get2(),CREATE_BUF_SIZE);
      appendToFile(fs,file.get1(),random.nextInt(CREATE_BUF_SIZE) + 1);
    }
    if (deletes > 0) {
      deletes--;
      deleteFile(fs,toDel.get(deletes));
    }
    U.sleep(delay);
  }
}
