{
  boolean valid=false;
  TransactionState prev;
  boolean notify=false;
synchronized (this) {
    prev=this.state;
switch (state) {
case ACTIVE:
{
        valid=false;
        break;
      }
case PREPARING:
{
      valid=prev == ACTIVE;
      break;
    }
case PREPARED:
{
    valid=prev == PREPARING;
    break;
  }
case COMMITTING:
{
  valid=prev == PREPARED;
  break;
}
case UNKNOWN:
{
if (setDone()) notify=true;
valid=prev == ROLLING_BACK || prev == COMMITTING;
break;
}
case COMMITTED:
{
if (setDone()) notify=true;
valid=prev == COMMITTING;
break;
}
case ROLLED_BACK:
{
if (setDone()) notify=true;
valid=prev == ROLLING_BACK;
break;
}
case MARKED_ROLLBACK:
{
valid=prev == ACTIVE || prev == PREPARING || prev == PREPARED || prev == COMMITTING;
break;
}
case ROLLING_BACK:
{
valid=prev == ACTIVE || prev == MARKED_ROLLBACK || prev == PREPARING || prev == PREPARED || (prev == COMMITTING && local() && !dht());
break;
}
}
if (valid) {
this.state=state;
this.timedOut=timedOut;
if (log.isDebugEnabled()) log.debug("Changed transaction state [prev=" + prev + ", new="+ this.state+ ", tx="+ this+ ']');
notifyAll();
}
 else {
if (log.isDebugEnabled()) log.debug("Invalid transaction state transition [invalid=" + state + ", cur="+ this.state+ ", tx="+ this+ ']');
}
}
if (notify) {
GridFutureAdapter<IgniteInternalTx> fut=finFut;
if (fut != null) fut.onDone(this);
}
if (valid) {
if (state != ACTIVE) seal();
}
return valid;
}
