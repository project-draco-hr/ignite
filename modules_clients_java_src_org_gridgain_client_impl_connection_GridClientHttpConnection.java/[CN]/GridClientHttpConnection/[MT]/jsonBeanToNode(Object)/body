{
  if (!(obj instanceof JSONObject))   return null;
  JSONObject nodeBean=(JSONObject)obj;
  GridClientNodeImpl.Builder nodeBuilder=GridClientNodeImpl.builder().nodeId(UUID.fromString((String)nodeBean.get("nodeId"))).consistentId(nodeBean.get("consistentId")).tcpAddresses((Collection<String>)nodeBean.get("tcpAddresses")).tcpHostNames((Collection<String>)nodeBean.get("tcpHostNames")).jettyAddresses((Collection<String>)nodeBean.get("jettyAddresses")).jettyHostNames((Collection<String>)nodeBean.get("jettyHostNames")).tcpPort((Integer)nodeBean.get("tcpPort")).httpPort((Integer)nodeBean.get("jettyPort")).replicaCount((Integer)nodeBean.get("replicaCount"));
  Map<String,GridClientCacheMode> caches=new HashMap<>();
  if (nodeBean.get("caches") instanceof JSONObject) {
    Map<String,String> rawCaches=(Map<String,String>)nodeBean.get("caches");
    for (    Map.Entry<String,String> e : rawCaches.entrySet())     try {
      caches.put(e.getKey(),GridClientCacheMode.valueOf(e.getValue()));
    }
 catch (    IllegalArgumentException ignored) {
      log.warning("Invalid cache mode received from remote node (will ignore) [srv=" + serverAddress() + ", cacheName="+ e.getKey()+ ", cacheMode="+ e.getValue()+ ']');
    }
    Object dfltCacheMode=nodeBean.get("defaultCacheMode");
    if (dfltCacheMode instanceof String && !((String)dfltCacheMode).isEmpty())     try {
      caches.put(null,GridClientCacheMode.valueOf((String)dfltCacheMode));
    }
 catch (    IllegalArgumentException ignored) {
      log.warning("Invalid cache mode received for default cache from remote node (will ignore) [srv=" + serverAddress() + ", cacheMode="+ dfltCacheMode+ ']');
    }
    nodeBuilder.caches(caches);
  }
  Object attrs=nodeBean.get("attributes");
  if (attrs != null && !(attrs instanceof JSONNull))   nodeBuilder.attributes((Map<String,Object>)attrs);
  Object metrics=nodeBean.get("metrics");
  if (metrics != null && !(metrics instanceof JSONNull)) {
    Map<String,Number> metricsMap=(Map<String,Number>)metrics;
    GridClientNodeMetricsAdapter metricsAdapter=new GridClientNodeMetricsAdapter();
    metricsAdapter.setStartTime(safeLong(metricsMap,"startTime"));
    metricsAdapter.setAverageActiveJobs((float)safeDouble(metricsMap,"averageActiveJobs"));
    metricsAdapter.setAverageCancelledJobs((float)safeDouble(metricsMap,"averageCancelledJobs"));
    metricsAdapter.setAverageCpuLoad(safeDouble(metricsMap,"averageCpuLoad"));
    metricsAdapter.setAverageJobExecuteTime(safeDouble(metricsMap,"averageJobExecuteTime"));
    metricsAdapter.setAverageJobWaitTime(safeDouble(metricsMap,"averageJobWaitTime"));
    metricsAdapter.setAverageRejectedJobs((float)safeDouble(metricsMap,"averageRejectedJobs"));
    metricsAdapter.setAverageWaitingJobs((float)safeDouble(metricsMap,"averageWaitingJobs"));
    metricsAdapter.setCurrentActiveJobs((int)safeLong(metricsMap,"currentActiveJobs"));
    metricsAdapter.setCurrentCancelledJobs((int)safeLong(metricsMap,"currentCancelledJobs"));
    metricsAdapter.setCurrentCpuLoad(safeDouble(metricsMap,"currentCpuLoad"));
    metricsAdapter.setCurrentGcCpuLoad(safeDouble(metricsMap,"currentGcCpuLoad"));
    metricsAdapter.setCurrentDaemonThreadCount((int)safeLong(metricsMap,"currentDaemonThreadCount"));
    metricsAdapter.setCurrentIdleTime(safeLong(metricsMap,"currentIdleTime"));
    metricsAdapter.setCurrentJobExecuteTime(safeLong(metricsMap,"currentJobExecuteTime"));
    metricsAdapter.setCurrentJobWaitTime(safeLong(metricsMap,"currentJobWaitTime"));
    metricsAdapter.setCurrentRejectedJobs((int)safeLong(metricsMap,"currentRejectedJobs"));
    metricsAdapter.setCurrentThreadCount((int)safeLong(metricsMap,"currentThreadCount"));
    metricsAdapter.setCurrentWaitingJobs((int)safeLong(metricsMap,"currentWaitingJobs"));
    metricsAdapter.setFileSystemFreeSpace(safeLong(metricsMap,"fileSystemFreeSpace"));
    metricsAdapter.setFileSystemTotalSpace(safeLong(metricsMap,"fileSystemTotalSpace"));
    metricsAdapter.setFileSystemUsableSpace(safeLong(metricsMap,"fileSystemUsableSpace"));
    metricsAdapter.setHeapMemoryCommitted(safeLong(metricsMap,"heapMemoryCommitted"));
    metricsAdapter.setHeapMemoryInitialized(safeLong(metricsMap,"heapMemoryInitialized"));
    metricsAdapter.setHeapMemoryMaximum(safeLong(metricsMap,"heapMemoryMaximum"));
    metricsAdapter.setHeapMemoryUsed(safeLong(metricsMap,"heapMemoryUsed"));
    metricsAdapter.setLastDataVersion(safeLong(metricsMap,"lastDataVersion"));
    metricsAdapter.setLastUpdateTime(safeLong(metricsMap,"lastUpdateTime"));
    metricsAdapter.setMaximumActiveJobs((int)safeLong(metricsMap,"maximumActiveJobs"));
    metricsAdapter.setMaximumCancelledJobs((int)safeLong(metricsMap,"maximumCancelledJobs"));
    metricsAdapter.setMaximumJobExecuteTime(safeLong(metricsMap,"maximumJobExecuteTime"));
    metricsAdapter.setMaximumJobWaitTime(safeLong(metricsMap,"maximumJobWaitTime"));
    metricsAdapter.setMaximumRejectedJobs((int)safeLong(metricsMap,"maximumRejectedJobs"));
    metricsAdapter.setMaximumThreadCount((int)safeLong(metricsMap,"maximumThreadCount"));
    metricsAdapter.setMaximumWaitingJobs((int)safeLong(metricsMap,"maximumWaitingJobs"));
    metricsAdapter.setNodeStartTime(safeLong(metricsMap,"nodeStartTime"));
    metricsAdapter.setNonHeapMemoryCommitted(safeLong(metricsMap,"nonHeapMemoryCommitted"));
    metricsAdapter.setNonHeapMemoryInitialized(safeLong(metricsMap,"nonHeapMemoryInitialized"));
    metricsAdapter.setNonHeapMemoryMaximum(safeLong(metricsMap,"nonHeapMemoryMaximum"));
    metricsAdapter.setNonHeapMemoryUsed(safeLong(metricsMap,"nonHeapMemoryUsed"));
    metricsAdapter.setStartTime(safeLong(metricsMap,"startTime"));
    metricsAdapter.setTotalCancelledJobs((int)safeLong(metricsMap,"totalCancelledJobs"));
    metricsAdapter.setTotalCpus((int)safeLong(metricsMap,"totalCpus"));
    metricsAdapter.setTotalExecutedJobs((int)safeLong(metricsMap,"totalExecutedJobs"));
    metricsAdapter.setTotalIdleTime(safeLong(metricsMap,"totalIdleTime"));
    metricsAdapter.setTotalRejectedJobs((int)safeLong(metricsMap,"totalRejectedJobs"));
    metricsAdapter.setTotalStartedThreadCount(safeLong(metricsMap,"totalStartedThreadCount"));
    metricsAdapter.setSentMessagesCount((int)safeLong(metricsMap,"sentMessagesCount"));
    metricsAdapter.setSentBytesCount(safeLong(metricsMap,"sentBytesCount"));
    metricsAdapter.setReceivedMessagesCount((int)safeLong(metricsMap,"receivedMessagesCount"));
    metricsAdapter.setReceivedBytesCount(safeLong(metricsMap,"receivedBytesCount"));
    metricsAdapter.setUpTime(safeLong(metricsMap,"upTime"));
    nodeBuilder.metrics(metricsAdapter);
  }
  return nodeBuilder.build();
}
