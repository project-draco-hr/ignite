{
  busyLock.writeLock().lock();
  try {
    if (closeReason != null)     return;
    closeReason=reason;
  }
  finally {
    busyLock.writeLock().unlock();
  }
  if (waitCompletion) {
    Iterator<FutureWorker> tasks=pendingReqs.iterator();
    try {
      while (tasks.hasNext()) {
        FutureWorker worker=tasks.next();
        worker.awaitCompletion();
        tasks.remove();
      }
    }
 catch (    InterruptedException ignored) {
      log.warning("Interrupted while waiting for all pending requests to complete (will cancel remaining " + "requests): " + serverAddress());
      Thread.currentThread().interrupt();
    }
  }
  if (log.isLoggable(Level.FINE))   log.fine("Cancelling " + pendingReqs.size() + " pending requests: "+ serverAddress());
  Iterator<FutureWorker> tasks=pendingReqs.iterator();
  while (tasks.hasNext()) {
    FutureWorker worker=tasks.next();
    worker.cancel();
    tasks.remove();
  }
  if (log.isLoggable(Level.INFO))   log.info("Client HTTP connection closed: " + serverAddress());
}
