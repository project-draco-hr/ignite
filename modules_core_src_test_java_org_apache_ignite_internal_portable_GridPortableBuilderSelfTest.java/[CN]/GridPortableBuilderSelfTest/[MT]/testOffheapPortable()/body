{
  PortableBuilder builder=builder("Class");
  builder.hashCode(100);
  builder.setField("i",111);
  builder.setField("f",111.111f);
  builder.setField("iArr",new int[]{1,2,3});
  builder.setField("obj",new Key(1));
  builder.setField("col",Arrays.asList(new Value(1),new Value(2)));
  PortableObject po=builder.build();
  byte[] arr=((CacheObjectPortableProcessorImpl)(grid(0)).context().cacheObjects()).marshal(po);
  long ptr=UNSAFE.allocateMemory(arr.length + 5);
  try {
    long ptr0=ptr;
    UNSAFE.putBoolean(null,ptr0++,false);
    UNSAFE.putInt(ptr0,arr.length);
    UNSAFE.copyMemory(arr,BYTE_ARR_OFF,null,ptr0 + 4,arr.length);
    PortableObject offheapObj=(PortableObject)((CacheObjectPortableProcessorImpl)(grid(0)).context().cacheObjects()).unmarshal(ptr,false);
    assertEquals(PortableObjectOffheapImpl.class,offheapObj.getClass());
    assertEquals("class".hashCode(),offheapObj.typeId());
    assertEquals(100,offheapObj.hashCode());
    assertEquals(111,offheapObj.<Integer>field("i").intValue());
    assertEquals(111.111f,offheapObj.<Float>field("f").floatValue(),0);
    assertTrue(Arrays.equals(new int[]{1,2,3},offheapObj.<int[]>field("iArr")));
    assertEquals(1,offheapObj.<PortableObject>field("obj").<Key>deserialize().i);
    List<PortableObject> list=offheapObj.field("col");
    assertEquals(2,list.size());
    assertEquals(1,list.get(0).<Value>deserialize().i);
    assertEquals(2,list.get(1).<Value>deserialize().i);
    assertEquals(po,offheapObj);
    assertEquals(offheapObj,po);
  }
  finally {
    UNSAFE.freeMemory(ptr);
  }
}
