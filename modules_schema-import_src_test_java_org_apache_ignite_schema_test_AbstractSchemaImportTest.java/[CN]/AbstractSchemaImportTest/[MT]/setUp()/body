{
  Class.forName("org.h2.Driver");
  Connection conn=DriverManager.getConnection(CONN_URL,"sa","");
  Statement stmt=conn.createStatement();
  stmt.executeUpdate("CREATE TABLE IF NOT EXISTS PRIMITIVES (pk INTEGER PRIMARY KEY, " + " boolCol BOOLEAN NOT NULL," + " byteCol TINYINT NOT NULL,"+ " shortCol SMALLINT NOT NULL,"+ " intCol INTEGER NOT NULL, "+ " longCol BIGINT NOT NULL,"+ " floatCol REAL NOT NULL,"+ " doubleCol DOUBLE NOT NULL,"+ " doubleCol2 DOUBLE NOT NULL, "+ " bigDecimalCol DECIMAL(10, 0),"+ " strCol VARCHAR(10),"+ " dateCol DATE,"+ " timeCol TIME,"+ " tsCol TIMESTAMP, "+ " arrCol BINARY(10),"+ " FIELD_WITH_ALIAS VARCHAR(10))");
  stmt.executeUpdate("CREATE TABLE IF NOT EXISTS OBJECTS (pk INTEGER PRIMARY KEY, " + " boolCol BOOLEAN," + " byteCol TINYINT,"+ " shortCol SMALLINT,"+ " intCol INTEGER,"+ " longCol BIGINT,"+ " floatCol REAL,"+ " doubleCol DOUBLE,"+ " doubleCol2 DOUBLE,"+ " bigDecimalCol DECIMAL(10, 0),"+ " strCol VARCHAR(10), "+ " dateCol DATE,"+ " timeCol TIME,"+ " tsCol TIMESTAMP,"+ " arrCol BINARY(10),"+ " FIELD_WITH_ALIAS VARCHAR(10))");
  stmt.executeUpdate("CREATE INDEX IF NOT EXISTS IDX_1 ON OBJECTS (INTCOL ASC, LONGCOL ASC)");
  stmt.executeUpdate("CREATE INDEX IF NOT EXISTS IDX_2 ON OBJECTS (INTCOL ASC, LONGCOL DESC)");
  stmt.executeUpdate("CREATE SCHEMA IF NOT EXISTS TESTSCHEMA");
  stmt.executeUpdate("CREATE TABLE IF NOT EXISTS TESTSCHEMA.TST(pk INTEGER PRIMARY KEY, " + " boolCol BOOLEAN NOT NULL," + " byteCol TINYINT NOT NULL,"+ " shortCol SMALLINT NOT NULL,"+ " intCol INTEGER NOT NULL, "+ " longCol BIGINT NOT NULL,"+ " floatCol REAL NOT NULL,"+ " doubleCol DOUBLE NOT NULL,"+ " doubleCol2 DOUBLE NOT NULL, "+ " bigDecimalCol DECIMAL(10, 0),"+ " strCol VARCHAR(10),"+ " dateCol DATE,"+ " timeCol TIME,"+ " tsCol TIMESTAMP, "+ " arrCol BINARY(10),"+ " FIELD_WITH_ALIAS VARCHAR(10))");
  stmt.executeUpdate("CREATE INDEX IF NOT EXISTS IDX_3 ON TESTSCHEMA.TST (INTCOL ASC, LONGCOL ASC)");
  stmt.executeUpdate("CREATE INDEX IF NOT EXISTS IDX_4 ON TESTSCHEMA.TST (INTCOL ASC, LONGCOL DESC)");
  conn.commit();
  U.closeQuiet(stmt);
  List<String> schemas=new ArrayList<>();
  all=DatabaseMetadataParser.parse(conn,schemas,false);
  pojos=new ArrayList<>();
  for (  PojoDescriptor pojo : all)   if (pojo.parent() != null)   pojos.add(pojo);
  U.closeQuiet(conn);
}
