{
  final IgniteEx slowClient=grid(nodeCount() - 1);
  assertTrue(slowClient.cluster().localNode().isClient());
  IgniteCache<Object,Object> cache=slowClient.getOrCreateCache(PARTITIONED);
  IgniteEx client0=grid(nodeCount() - 2);
  assertTrue(client0.cluster().localNode().isClient());
  IgniteCache<Object,Object> cache0=client0.getOrCreateCache(PARTITIONED);
  cache.query(new ContinuousQuery<>().setLocalListener(new Listener()));
  for (int i=0; i < 100; i++)   cache0.put(0,i);
  GridIoManager ioMgr=slowClient.context().io();
  TcpCommunicationSpi commSpi=(TcpCommunicationSpi)((Object[])U.field(ioMgr,"spis"))[0];
  GridNioServer nioSrvr=U.field(commSpi,"nioSrvr");
  GridTestUtils.setFieldValue(nioSrvr,"skipRead",true);
  for (int i=0; i < 100; i++)   cache0.put(0,new byte[10 * 1024]);
  GridTestUtils.waitForCondition(new GridAbsPredicate(){
    @Override public boolean apply(){
      return Ignition.state(slowClient.name()) == IgniteState.STOPPED_ON_SEGMENTATION;
    }
  }
,getTestTimeout());
}
