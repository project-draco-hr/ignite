{
  final Iterator<Map.Entry<SwapKey,byte[]>> it=data.entrySet().iterator();
  return new IgniteSpiCloseableIterator<Map.Entry<byte[],byte[]>>(){
    /** 
 * Next entry in this iterator. 
 */
    private Map.Entry<SwapKey,byte[]> next;
    private Map.Entry<SwapKey,byte[]> cur;
{
      advance();
    }
    @Override public void close(){
    }
    @Override public boolean hasNext(){
      return next != null;
    }
    @Override public Map.Entry<byte[],byte[]> next(){
      if (next == null)       throw new NoSuchElementException();
      final Map.Entry<SwapKey,byte[]> ret=next;
      cur=ret;
      advance();
      return new Map.Entry<byte[],byte[]>(){
        @Override public byte[] getKey(){
          return ret.getKey().keyBytes();
        }
        @Override public byte[] getValue(){
          return ret.getValue();
        }
        @Override public byte[] setValue(        byte[] val){
          return data.put(ret.getKey(),val);
        }
      }
;
    }
    @Override public void remove(){
      if (cur == null)       throw new IllegalStateException();
      data.remove(cur.getKey(),cur.getValue());
    }
    private void advance(){
      while (it.hasNext()) {
        Map.Entry<SwapKey,byte[]> entry=it.next();
        if (entry.getKey().partition() == part) {
          cur=next;
          next=entry;
          return;
        }
      }
      next=null;
    }
  }
;
}
