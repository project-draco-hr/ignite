{
  final IgniteCache<Integer,Person> cache=grid(0).jcache(null);
  cache.clear();
  final AtomicBoolean stop=new AtomicBoolean();
  IgniteInternalFuture<?> fut1=multithreadedAsync(new Callable<Void>(){
    @Override public Void call() throws Exception {
      Random rnd=new GridRandom();
      while (!stop.get()) {
        List<List<?>> res=cache.queryFields(new SqlFieldsQuery("select avg(age) from Person where age > 0")).getAll();
        assertEquals(1,res.size());
        if (res.get(0).get(0) == null)         continue;
        int avgAge=((Number)res.get(0).get(0)).intValue();
        if (rnd.nextInt(300) == 0)         X.println("__ " + avgAge);
      }
      return null;
    }
  }
,20);
  IgniteInternalFuture<?> fut2=multithreadedAsync(new Callable<Void>(){
    @Override public Void call() throws Exception {
      Random rnd=new GridRandom();
      Random age=new GridRandom();
      while (!stop.get())       cache.put(rnd.nextInt(2000),new Person(age.nextInt(3000) - 1000));
      return null;
    }
  }
,20);
  Thread.sleep(30 * 1000);
  stop.set(true);
  fut2.get(10 * 1000);
  fut1.get(10 * 1000);
}
