{
  Collection<String> cfgNames=new HashSet<>();
  for (  FileSystemConfiguration cfg : cfgs) {
    String name=cfg.getName();
    if (cfgNames.contains(name))     throw new IgniteCheckedException("Duplicate IGFS name found (check configuration and " + "assign unique name to each): " + name);
    CacheConfiguration dataCacheCfg=config(cfg.getDataCacheName());
    CacheConfiguration metaCacheCfg=config(cfg.getMetaCacheName());
    if (dataCacheCfg == null)     throw new IgniteCheckedException("Data cache is not configured locally for IGFS: " + cfg);
    if (GridQueryProcessor.isEnabled(dataCacheCfg))     throw new IgniteCheckedException("IGFS data cache cannot start with enabled query indexing.");
    if (dataCacheCfg.getAtomicityMode() != TRANSACTIONAL)     throw new IgniteCheckedException("Data cache should be transactional: " + cfg.getDataCacheName());
    if (metaCacheCfg == null)     throw new IgniteCheckedException("Metadata cache is not configured locally for IGFS: " + cfg);
    if (GridQueryProcessor.isEnabled(metaCacheCfg))     throw new IgniteCheckedException("IGFS metadata cache cannot start with enabled query indexing.");
    if (GridQueryProcessor.isEnabled(metaCacheCfg))     throw new IgniteCheckedException("IGFS metadata cache cannot start with enabled query indexing.");
    if (metaCacheCfg.getAtomicityMode() != TRANSACTIONAL)     throw new IgniteCheckedException("Meta cache should be transactional: " + cfg.getMetaCacheName());
    if (F.eq(cfg.getDataCacheName(),cfg.getMetaCacheName()))     throw new IgniteCheckedException("Cannot use same cache as both data and meta cache: " + cfg.getName());
    if (!(dataCacheCfg.getAffinityMapper() instanceof IgfsGroupDataBlocksKeyMapper))     throw new IgniteCheckedException("Invalid IGFS data cache configuration (key affinity mapper class should be " + IgfsGroupDataBlocksKeyMapper.class.getSimpleName() + "): "+ cfg);
    long maxSpaceSize=cfg.getMaxSpaceSize();
    if (maxSpaceSize > 0) {
      long maxHeapSize=Runtime.getRuntime().maxMemory();
      long offHeapSize=dataCacheCfg.getOffHeapMaxMemory();
      if (offHeapSize < 0 && maxSpaceSize > maxHeapSize)       throw new IgniteCheckedException("Maximum IGFS space size cannot be greater that size of available heap " + "memory [maxHeapSize=" + maxHeapSize + ", maxIgfsSpaceSize="+ maxSpaceSize+ ']');
 else       if (offHeapSize > 0 && maxSpaceSize > maxHeapSize + offHeapSize)       throw new IgniteCheckedException("Maximum IGFS space size cannot be greater than size of available heap " + "memory and offheap storage [maxHeapSize=" + maxHeapSize + ", offHeapSize="+ offHeapSize+ ", maxIgfsSpaceSize="+ maxSpaceSize+ ']');
    }
    if (cfg.getMaxSpaceSize() == 0 && dataCacheCfg.getMemoryMode() == OFFHEAP_VALUES)     U.warn(log,"IGFS max space size is not specified but data cache values are stored off-heap (max " + "space will be limited to 80% of max JVM heap size): " + cfg.getName());
    boolean secondary=cfg.getDefaultMode() == PROXY;
    if (cfg.getPathModes() != null) {
      for (      Map.Entry<String,IgfsMode> mode : cfg.getPathModes().entrySet()) {
        if (mode.getValue() == PROXY)         secondary=true;
      }
    }
    if (secondary) {
      assertParameter(cfg.getSecondaryFileSystem() != null,"secondaryFileSystem cannot be null when mode is not " + IgfsMode.PRIMARY);
    }
    cfgNames.add(name);
  }
}
