{
  if (!in.readBoolean())   return;
  cfg.setClientMode(in.readBoolean());
  cfg.setIncludeEventTypes(in.readIntArray());
  cfg.setMetricsExpireTime(in.readLong());
  cfg.setMetricsHistorySize(in.readInt());
  cfg.setMetricsLogFrequency(in.readLong());
  cfg.setMetricsUpdateFrequency(in.readLong());
  cfg.setNetworkSendRetryCount(in.readInt());
  cfg.setNetworkSendRetryDelay(in.readLong());
  cfg.setNetworkTimeout(in.readLong());
  cfg.setWorkDirectory(in.readString());
  cfg.setLocalHost(in.readString());
  cfg.setDaemon(in.readBoolean());
  cfg.setLateAffinityAssignment(in.readBoolean());
  readCacheConfigurations(in,cfg);
  readDiscoveryConfiguration(in,cfg);
  if (in.readBoolean()) {
    TcpCommunicationSpi comm=new TcpCommunicationSpi();
    comm.setAckSendThreshold(in.readInt());
    comm.setConnectTimeout(in.readLong());
    comm.setDirectBuffer(in.readBoolean());
    comm.setDirectSendBuffer(in.readBoolean());
    comm.setIdleConnectionTimeout(in.readLong());
    comm.setLocalAddress(in.readString());
    comm.setLocalPort(in.readInt());
    comm.setLocalPortRange(in.readInt());
    comm.setMaxConnectTimeout(in.readLong());
    comm.setMessageQueueLimit(in.readInt());
    comm.setReconnectCount(in.readInt());
    comm.setSelectorsCount(in.readInt());
    comm.setSlowClientQueueLimit(in.readInt());
    comm.setSocketReceiveBuffer(in.readInt());
    comm.setSocketSendBuffer(in.readInt());
    comm.setTcpNoDelay(in.readBoolean());
    comm.setUnacknowledgedMessagesBufferSize(in.readInt());
    cfg.setCommunicationSpi(comm);
  }
  if (in.readBoolean()) {
    if (cfg.getBinaryConfiguration() == null)     cfg.setBinaryConfiguration(new BinaryConfiguration());
    cfg.getBinaryConfiguration().setCompactFooter(in.readBoolean());
  }
  int attrCnt=in.readInt();
  if (attrCnt > 0) {
    Map<String,Object> attrs=new HashMap<>(attrCnt);
    for (int i=0; i < attrCnt; i++)     attrs.put(in.readString(),in.readObject());
    cfg.setUserAttributes(attrs);
  }
  if (in.readBoolean()) {
    AtomicConfiguration atomic=new AtomicConfiguration();
    atomic.setAtomicSequenceReserveSize(in.readInt());
    atomic.setBackups(in.readInt());
    atomic.setCacheMode(CacheMode.fromOrdinal(in.readInt()));
    cfg.setAtomicConfiguration(atomic);
  }
  if (in.readBoolean()) {
    TransactionConfiguration tx=new TransactionConfiguration();
    tx.setPessimisticTxLogSize(in.readInt());
    tx.setDefaultTxConcurrency(TransactionConcurrency.fromOrdinal(in.readInt()));
    tx.setDefaultTxIsolation(TransactionIsolation.fromOrdinal(in.readInt()));
    tx.setDefaultTxTimeout(in.readLong());
    tx.setPessimisticTxLogLinger(in.readInt());
    cfg.setTransactionConfiguration(tx);
  }
}
