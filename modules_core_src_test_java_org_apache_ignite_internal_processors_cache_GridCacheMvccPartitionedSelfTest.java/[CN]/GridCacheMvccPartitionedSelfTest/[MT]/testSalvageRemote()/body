{
  GridCacheAdapter<String,String> cache=grid.internalCache();
  GridCacheTestEntryEx<String,String> entry=new GridCacheTestEntryEx<>(cache.context(),"1");
  UUID node1=UUID.randomUUID();
  GridCacheVersion ver1=version(1);
  GridCacheVersion ver2=version(2);
  GridCacheVersion ver3=version(3);
  GridCacheVersion ver4=version(4);
  GridCacheVersion ver5=version(5);
  GridCacheVersion ver6=version(6);
  entry.addRemote(node1,1,ver1,0,false,true);
  entry.addRemote(node1,1,ver2,0,false,true);
  GridCacheMvccCandidate<String> c3=entry.addNearLocal(node1,1,ver3,0,true);
  GridCacheMvccCandidate<String> c4=entry.addRemote(node1,1,ver4,0,false,true);
  entry.addRemote(node1,1,ver5,0,false,true);
  entry.addRemote(node1,1,ver6,0,false,true);
  Collection<GridCacheMvccCandidate<String>> rmtCands=entry.remoteMvccSnapshot();
  assertEquals(5,rmtCands.size());
  assertEquals(ver1,rmtCands.iterator().next().version());
  Collection<GridCacheMvccCandidate<String>> nearLocCands=entry.localCandidates();
  assertEquals(1,nearLocCands.size());
  assertEquals(ver3,nearLocCands.iterator().next().version());
  entry.salvageRemote(ver4);
  rmtCands=entry.remoteMvccSnapshot();
  boolean before=true;
  for (  GridCacheMvccCandidate<String> cand : rmtCands) {
    if (cand == c4) {
      before=false;
      continue;
    }
    if (before && cand != c3) {
      assertTrue(cand.owner());
      assertTrue(cand.used());
    }
 else {
      assertFalse(cand.owner());
      assertFalse(cand.used());
    }
  }
}
