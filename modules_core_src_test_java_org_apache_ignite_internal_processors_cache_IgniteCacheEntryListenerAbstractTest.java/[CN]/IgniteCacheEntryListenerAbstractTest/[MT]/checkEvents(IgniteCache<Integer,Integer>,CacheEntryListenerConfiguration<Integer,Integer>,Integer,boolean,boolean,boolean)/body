{
  GridTestUtils.assertThrows(log,new Callable<Void>(){
    @Override public Void call() throws Exception {
      cache.registerCacheEntryListener(lsnrCfg);
      return null;
    }
  }
,IllegalArgumentException.class,null);
  final int UPDATES=10;
  int expEvts=0;
  if (create)   expEvts+=2;
  if (update)   expEvts+=(UPDATES + 1);
  if (rmv)   expEvts+=2;
  evts=new ArrayList<>();
  evtsLatch=new CountDownLatch(expEvts);
  cache.put(key,0);
  for (int i=0; i < UPDATES; i++)   cache.put(key,i + 1);
  assertFalse(cache.putIfAbsent(key,-1));
  assertFalse(cache.remove(key,-1));
  assertTrue(cache.remove(key));
  IgniteCache<Integer,Integer> cache1=cache;
  if (gridCount() > 1)   cache1=jcache(1);
  cache1.put(key,1);
  cache1.put(key,2);
  assertTrue(cache1.remove(key));
  evtsLatch.await(5000,TimeUnit.MILLISECONDS);
  assertEquals(expEvts,evts.size());
  Iterator<CacheEntryEvent<? extends Integer,? extends Integer>> iter=evts.iterator();
  if (create)   checkEvent(iter,key,CREATED,0,null);
  if (update) {
    for (int i=0; i < UPDATES; i++)     checkEvent(iter,key,UPDATED,i + 1,i);
  }
  if (rmv)   checkEvent(iter,key,REMOVED,null,UPDATES);
  if (create)   checkEvent(iter,key,CREATED,1,null);
  if (update)   checkEvent(iter,key,UPDATED,2,1);
  if (rmv)   checkEvent(iter,key,REMOVED,null,2);
  assertEquals(0,evts.size());
  log.info("Remove listener. ");
  cache.deregisterCacheEntryListener(lsnrCfg);
  cache.put(key,1);
  cache.put(key,2);
  assertTrue(cache.remove(key));
  U.sleep(500);
  assertEquals(0,evts.size());
  cache.registerCacheEntryListener(lsnrCfg);
  cache.deregisterCacheEntryListener(lsnrCfg);
}
