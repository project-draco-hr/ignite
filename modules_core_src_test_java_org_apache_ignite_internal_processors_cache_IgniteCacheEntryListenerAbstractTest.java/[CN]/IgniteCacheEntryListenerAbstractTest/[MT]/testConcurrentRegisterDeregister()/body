{
  final int THREADS=10;
  final CyclicBarrier barrier=new CyclicBarrier(THREADS);
  final IgniteCache<Integer,Integer> cache=jcache(0);
  GridTestUtils.runMultiThreadedAsync(new Callable<Void>(){
    @Override public Void call() throws Exception {
      CacheEntryListenerConfiguration<Integer,Integer> cfg=new MutableCacheEntryListenerConfiguration<>(new Factory<CacheEntryListener<Integer,Integer>>(){
        @Override public CacheEntryListener<Integer,Integer> create(){
          return new CreateUpdateRemoveExpireListener();
        }
      }
,null,true,false);
      barrier.await();
      for (int i=0; i < 200; i++) {
        cache.registerCacheEntryListener(cfg);
        cache.deregisterCacheEntryListener(cfg);
      }
      return null;
    }
  }
,THREADS,"register-thread").get();
}
