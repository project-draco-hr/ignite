{
  CacheEntryListenerConfiguration<Integer,Integer> lsnrCfg=new MutableCacheEntryListenerConfiguration<>(new Factory<CacheEntryListener<Integer,Integer>>(){
    @Override public CacheEntryListener<Integer,Integer> create(){
      return new ExceptionListener();
    }
  }
,null,false,false);
  IgniteCache<Integer,Integer> cache=jcache();
  cache.registerCacheEntryListener(lsnrCfg);
  try {
    for (    Integer key : keys()) {
      log.info("Check listener exceptions are ignored [key=" + key + ']');
      cache.put(key,key);
      cache.remove(key);
    }
  }
  finally {
    cache.deregisterCacheEntryListener(lsnrCfg);
  }
  lsnrCfg=new MutableCacheEntryListenerConfiguration<>(new Factory<CacheEntryListener<Integer,Integer>>(){
    @Override public CacheEntryListener<Integer,Integer> create(){
      return new CreateUpdateRemoveExpireListener();
    }
  }
,new Factory<CacheEntryEventFilter<? super Integer,? super Integer>>(){
    @Override public CacheEntryEventFilter<? super Integer,? super Integer> create(){
      return new ExceptionFilter();
    }
  }
,false,false);
  cache.registerCacheEntryListener(lsnrCfg);
  try {
    for (    Integer key : keys()) {
      log.info("Check filter exceptions are ignored [key=" + key + ']');
      cache.put(key,key);
      cache.remove(key);
    }
  }
  finally {
    cache.deregisterCacheEntryListener(lsnrCfg);
  }
}
