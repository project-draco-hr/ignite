{
  lsnrCfg=new MutableCacheEntryListenerConfiguration<>(new Factory<CacheEntryListener<Integer,Integer>>(){
    @Override public CacheEntryListener<Integer,Integer> create(){
      return new CreateUpdateRemoveListener();
    }
  }
,null,true,false);
  Ignite grid=startGrid(gridCount());
  IgniteCache<Integer,Integer> cache=grid.jcache(null);
  Integer key=Integer.MAX_VALUE;
  log.info("Check create/update/remove events for listener in configuration [key=" + key + ']');
  checkEvents(cache,lsnrCfg,key,true,true,true);
  stopGrid(gridCount());
  lsnrCfg=new MutableCacheEntryListenerConfiguration<>(new Factory<CacheEntryListener<Integer,Integer>>(){
    @Override public CacheEntryListener<Integer,Integer> create(){
      return new CreateUpdateRemoveListener();
    }
  }
,new TestFilterFactory(),true,false);
  grid=startGrid(gridCount());
  cache=grid.jcache(null);
  log.info("Check filter for listener in configuration.");
  checkFilter(cache,vals);
  stopGrid(gridCount());
}
