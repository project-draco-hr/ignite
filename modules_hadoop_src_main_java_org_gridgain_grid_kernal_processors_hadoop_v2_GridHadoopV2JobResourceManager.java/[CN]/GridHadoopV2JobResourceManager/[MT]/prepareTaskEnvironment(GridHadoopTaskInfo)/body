{
  try {
switch (info.type()) {
case MAP:
case REDUCE:
      File locDir=taskLocalDir(info);
    if (locDir.exists())     throw new IOException("Task local directory already exists: " + locDir);
  if (!locDir.mkdir())   throw new IOException("Failed to create directory: " + locDir);
for (File resource : rsrcList) {
  File symLink=new File(locDir,resource.getName());
  try {
    Files.createSymbolicLink(symLink.toPath(),resource.toPath());
  }
 catch (  IOException e) {
    String msg="Unable to create symlink \"" + symLink + "\" to \""+ resource+ "\".";
    if (U.isWindows() && e instanceof FileSystemException)     msg+="\n\nAbility to create symbolic links is required!\n" + "On Windows platform you have to grant permission 'Create symbolic links'\n" + "to your user or run the Accelerator as Administrator.\n";
    throw new IOException(msg,e);
  }
}
FileSystem.getLocal(ctx.getJobConf()).setWorkingDirectory(new Path(locDir.getAbsolutePath()));
break;
default :
setJobWorkingDirectory();
}
}
 catch (IOException e) {
throw new GridException("Unable to prepare local working directory for the task " + "[jobId=" + jobId + ", task="+ info+ ']',e);
}
}
