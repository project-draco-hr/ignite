{
  try {
    GridCacheEntryEx cached=null;
    try {
      cached=cctx.dht().entryEx(entry.key());
      if (log.isDebugEnabled())       log.debug("Rebalancing key [key=" + entry.key() + ", part="+ p+ ", node="+ pick.id()+ ']');
      if (cctx.dht().isIgfsDataCache() && cctx.dht().igfsDataSpaceUsed() > cctx.dht().igfsDataSpaceMax()) {
        LT.error(log,null,"Failed to rebalance IGFS data cache (IGFS space size exceeded maximum " + "value, will ignore rebalance entries)");
        if (cached.markObsoleteIfEmpty(null))         cached.context().cache().removeIfObsolete(cached.key());
        return true;
      }
      if (preloadPred == null || preloadPred.apply(entry)) {
        if (cached.initialValue(entry.value(),entry.version(),entry.ttl(),entry.expireTime(),true,topVer,cctx.isDrEnabled() ? DR_PRELOAD : DR_NONE)) {
          cctx.evicts().touch(cached,topVer);
          if (cctx.events().isRecordable(EVT_CACHE_REBALANCE_OBJECT_LOADED) && !cached.isInternal())           cctx.events().addEvent(cached.partition(),cached.key(),cctx.localNodeId(),(IgniteUuid)null,null,EVT_CACHE_REBALANCE_OBJECT_LOADED,entry.value(),true,null,false,null,null,null,true);
        }
 else {
          if (cctx.isSwapOrOffheapEnabled())           cctx.evicts().touch(cached,topVer);
          if (log.isDebugEnabled())           log.debug("Rebalancing entry is already in cache (will ignore) [key=" + cached.key() + ", part="+ p+ ']');
        }
      }
 else       if (log.isDebugEnabled())       log.debug("Rebalance predicate evaluated to false for entry (will ignore): " + entry);
    }
 catch (    GridCacheEntryRemovedException ignored) {
      if (log.isDebugEnabled())       log.debug("Entry has been concurrently removed while rebalancing (will ignore) [key=" + cached.key() + ", part="+ p+ ']');
    }
catch (    GridDhtInvalidPartitionException ignored) {
      if (log.isDebugEnabled())       log.debug("Partition became invalid during rebalancing (will ignore): " + p);
      return false;
    }
  }
 catch (  IgniteInterruptedCheckedException e) {
    throw e;
  }
catch (  IgniteCheckedException e) {
    throw new IgniteCheckedException("Failed to cache rebalanced entry (will stop rebalancing) [local=" + cctx.nodeId() + ", node="+ pick.id()+ ", key="+ entry.key()+ ", part="+ p+ ']',e);
  }
  return true;
}
