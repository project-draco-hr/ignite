{
  GridStreamerIndexProvider<String,String,Integer> idxProvider=indexProvider(true,"idx",new IndexUpdater(),EVENT_TRACKING_ON,false);
  GridStreamerIndexProvider<String,String,String> idxProvider1=indexProvider(true,"idx1",new UniqueStringIndexUpdater(),EVENT_TRACKING_ON,true);
  StreamerBoundedSizeWindow<String> win=new StreamerBoundedSizeWindow<>();
  win.setMaximumSize(5);
  win.setIndexes(idxProvider,idxProvider1);
  win.start();
  win.enqueue("A");
  win.enqueue("B");
  win.enqueue("C");
  win.enqueue("D");
  GridStreamerIndex<String,String,Integer> idx=win.index("idx");
  GridStreamerIndex<String,String,String> idx1=win.index("idx1");
  info("Idx: " + idx.entries(0));
  info("Idx1: " + idx1.entries(0));
  try {
    win.enqueue("A");
    fail("Exception should have been thrown.");
  }
 catch (  GridException e) {
    info("Caught expected exception: " + e);
  }
  GridStreamerIndex<String,String,Integer> idxAfter=win.index("idx");
  GridStreamerIndex<String,String,String> idx1After=win.index("idx1");
  info("Idx (after): " + idxAfter.entries(0));
  info("Idx1 (after): " + idx1After.entries(0));
  assertEquals(4,idx.entries(0).size());
  assertEquals(4,idx1.entries(0).size());
  assertTrue(F.eqOrdered(idx.entries(0),idxAfter.entries(0)));
  assertTrue(F.eqOrdered(idx1.entries(0),idx1After.entries(0)));
  idxProvider.reset();
  assertEquals(4,idx.entries(0).size());
}
