{
  GridNode node=cctx.node(nodeId);
  if (node == null)   return false;
  int attempt=1;
  GridException err=null;
  while (!Thread.currentThread().isInterrupted()) {
    try {
      if (log.isDebugEnabled())       log.debug("Send query response: " + res);
      Object topic=topic(nodeId,res.requestId());
      cctx.io().sendOrderedMessage(node,topic,cctx.io().messageId(topic,nodeId),res,timeout > 0 ? timeout : Long.MAX_VALUE);
      return true;
    }
 catch (    GridTopologyException ignored) {
      if (log.isDebugEnabled())       log.debug("Failed to send query response since node left grid [nodeId=" + nodeId + ", res="+ res+ "]");
      return false;
    }
catch (    GridException e) {
      if (err == null)       err=e;
      if (Thread.currentThread().isInterrupted())       break;
      if (attempt < RESEND_ATTEMPTS) {
        if (log.isDebugEnabled())         log.debug("Failed to send queries response (will try again) [nodeId=" + nodeId + ", res="+ res+ ", attempt="+ attempt+ ", err="+ e+ "]");
        if (!Thread.currentThread().isInterrupted())         try {
          U.sleep(RESEND_FREQ);
        }
 catch (        GridInterruptedException e1) {
          U.error(log,"Waiting for queries response resending was interrupted (response will not be sent) " + "[nodeId=" + nodeId + ", response="+ res+ "]",e1);
          return false;
        }
      }
 else {
        U.error(log,"Failed to sender cache response [nodeId=" + nodeId + ", response="+ res+ "]",err);
        return false;
      }
    }
    attempt++;
  }
  return false;
}
