{
  hasCache=true;
  try {
    final Map<UUID,Map<Long,GridFutureAdapter<GridQueryFieldsResult>>> map=U.field(((GridKernal)grid(0)).internalCache().context().queries(),"fieldsQryRes");
    map.clear();
    Ignite g=startGrid();
    GridCache<Integer,Integer> cache=g.cache(null);
    CacheQuery<List<?>> q=cache.queries().createSqlFieldsQuery("select _key from Integer where _key >= " + "0 order by _key");
    q.pageSize(50);
    ClusterGroup prj=g.cluster().forNodes(Arrays.asList(g.cluster().localNode(),grid(0).localNode()));
    q=q.projection(prj);
    CacheQueryFuture<List<?>> fut=q.execute();
    assertEquals(0,fut.next().get(0));
    assertTrue(GridTestUtils.waitForCondition(new PA(){
      @Override public boolean apply(){
        return map.size() == 1;
      }
    }
,getTestTimeout()));
    Map<Long,GridFutureAdapter<GridQueryFieldsResult>> futs=map.get(g.cluster().localNode().id());
    assertEquals(1,futs.size());
    final UUID nodeId=g.cluster().localNode().id();
    final CountDownLatch latch=new CountDownLatch(1);
    grid(0).events().localListen(new IgnitePredicate<IgniteEvent>(){
      @Override public boolean apply(      IgniteEvent evt){
        if (((IgniteDiscoveryEvent)evt).eventNode().id().equals(nodeId))         latch.countDown();
        return true;
      }
    }
,EVT_NODE_LEFT);
    stopGrid();
    latch.await();
    assertEquals(0,map.size());
  }
  finally {
    stopGrid();
  }
}
