{
  if (cleared)   return F.emptyIterator();
  final Iterator<Map.Entry<KeyCacheObject,IgniteBiTuple<CacheObject,GridCacheVersion>>> it0=map.entrySet().iterator();
  return new Iterator<Cache.Entry<?,?>>(){
    /** 
 */
    private Cache.Entry<Object,Object> cur;
    /** 
 */
    private Cache.Entry<Object,Object> next;
    /** 
 */
{
      checkNext();
    }
    /** 
 */
    private void checkNext(){
      while (it0.hasNext()) {
        Map.Entry<KeyCacheObject,IgniteBiTuple<CacheObject,GridCacheVersion>> e=it0.next();
        KeyCacheObject k=e.getKey();
        if (rmvd != null && rmvd.contains(k))         continue;
        Object storeKey=e.getKey().value(cctx.cacheObjectContext(),false);
        Object storeVal=CU.value(e.getValue().get1(),cctx,false);
        if (convertPortable) {
          storeKey=cctx.unwrapPortableIfNeeded(storeKey,false);
          storeVal=cctx.unwrapPortableIfNeeded(storeVal,false);
        }
        next=new EntryImpl<>(k,storeKey,storeVal);
        break;
      }
    }
    @Override public boolean hasNext(){
      return next != null;
    }
    @Override public Cache.Entry<Object,Object> next(){
      if (next == null)       throw new NoSuchElementException();
      cur=next;
      next=null;
      checkNext();
      return cur;
    }
    @Override public void remove(){
      if (cur == null)       throw new IllegalStateException();
      addRemoved(cur);
      cur=null;
    }
  }
;
}
