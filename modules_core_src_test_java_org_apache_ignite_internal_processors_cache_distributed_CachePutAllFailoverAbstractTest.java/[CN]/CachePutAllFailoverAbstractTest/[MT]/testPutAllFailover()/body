{
  final AtomicBoolean finished=new AtomicBoolean();
  final long endTime=System.currentTimeMillis() + TEST_TIME;
  IgniteInternalFuture<Object> restartFut=GridTestUtils.runAsync(new Callable<Object>(){
    @Override public Object call() throws Exception {
      Thread.currentThread().setName("restart-thread");
      while (!finished.get() && System.currentTimeMillis() < endTime) {
        startGrid(NODE_CNT);
        U.sleep(500);
        stopGrid(NODE_CNT);
      }
      return null;
    }
  }
);
  try {
    final IgniteCache<TestKey,TestValue> cache=ignite(0).cache(null);
    GridTestUtils.runMultiThreaded(new Callable<Object>(){
      @Override public Object call() throws Exception {
        int iter=0;
        ThreadLocalRandom rnd=ThreadLocalRandom.current();
        long time;
        long lastInfo=0;
        while ((time=System.currentTimeMillis()) < endTime) {
          if (time - lastInfo > 5000)           log.info("Do putAll [iter=" + iter + ']');
          TreeMap<TestKey,TestValue> map=new TreeMap<>();
          for (int k=0; k < 100; k++)           map.put(new TestKey(rnd.nextInt(200)),new TestValue(iter));
          cache.putAll(map);
          iter++;
        }
        return null;
      }
    }
,2,"update-thread");
    finished.set(true);
    restartFut.get();
  }
  finally {
    finished.set(true);
  }
}
