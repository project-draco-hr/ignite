{
  mem=0;
  initCap=10;
  concurrency=2;
  map=newMap();
  final CountDownLatch startLatch=new CountDownLatch(1);
  final AtomicBoolean run=new AtomicBoolean(true);
  IgniteFuture<?> itFut=multithreadedAsync(new Runnable(){
    @Override public void run(){
      try {
        startLatch.await();
        while (run.get()) {
          GridCloseableIterator<IgniteBiTuple<byte[],byte[]>> it=map.iterator();
          while (it.hasNext())           it.next();
          it.close();
        }
      }
 catch (      GridException e) {
        e.printStackTrace();
      }
catch (      InterruptedException e) {
        e.printStackTrace();
        Thread.currentThread().interrupt();
      }
    }
  }
,1);
  IgniteFuture<?> putFut=multithreadedAsync(new Runnable(){
    @Override public void run(){
      try {
        startLatch.await();
        Random rnd=new Random();
        for (int size=50; size < 5000; size++) {
          int valSize=rnd.nextInt(50) + 1;
          for (int i=0; i < size; i++)           map.put(i,U.intToBytes(i),new byte[valSize]);
        }
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
        Thread.currentThread().interrupt();
      }
    }
  }
,1);
  startLatch.countDown();
  putFut.get();
  run.set(false);
  itFut.get();
}
