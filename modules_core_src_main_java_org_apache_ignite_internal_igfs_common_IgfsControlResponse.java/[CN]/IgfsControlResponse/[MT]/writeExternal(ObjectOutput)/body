{
  byte[] hdr=new byte[RES_HEADER_SIZE];
  IgniteByteUtils.intToBytes(resType,hdr,0);
  int off=4;
  hdr[off++]=err != null ? (byte)1 : (byte)0;
  if (resType == RES_TYPE_BYTE_ARRAY)   IgniteByteUtils.intToBytes(len,hdr,off);
  out.write(hdr);
  if (err != null) {
    out.writeUTF(err);
    out.writeInt(errCode);
    if (resType == RES_TYPE_ERR_STREAM_ID)     out.writeLong((Long)res);
    return;
  }
switch (resType) {
case RES_TYPE_BOOLEAN:
    out.writeBoolean((Boolean)res);
  break;
case RES_TYPE_LONG:
out.writeLong((Long)res);
break;
case RES_TYPE_BYTE_ARRAY:
byte[][] buf=(byte[][])res;
for (byte[] bytes : buf) out.write(bytes);
break;
case RES_TYPE_IGFS_PATH:
case RES_TYPE_IGFS_PATH_SUMMARY:
case RES_TYPE_IGFS_FILE:
case RES_TYPE_IGFS_STREAM_DESCRIPTOR:
case RES_TYPE_HANDSHAKE:
case RES_TYPE_STATUS:
{
out.writeBoolean(res != null);
if (res != null) ((Externalizable)res).writeExternal(out);
break;
}
case RES_TYPE_COL_IGFS_FILE:
case RES_TYPE_COL_IGFS_PATH:
case RES_TYPE_COL_IGFS_BLOCK_LOCATION:
{
Collection<Externalizable> items=(Collection<Externalizable>)res;
if (items != null) {
out.writeInt(items.size());
for (Externalizable item : items) item.writeExternal(out);
}
 else out.writeInt(-1);
break;
}
}
}
