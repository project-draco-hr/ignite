{
  assertParameter(discoDelay > 0,"discoveryStartupDelay > 0");
  startSpi();
  pubPool=ctx.config().getExecutorService();
  p2pPool=ctx.config().getPeerClassLoadingExecutorService();
  sysPool=ctx.config().getSystemExecutorService();
  mgmtPool=ctx.config().getManagementExecutorService();
  utilityCachePool=ctx.utilityCachePool();
  affPool=Executors.newFixedThreadPool(1);
  getSpi().setListener(commLsnr=new CommunicationListener<Serializable>(){
    @Override public void onMessage(    UUID nodeId,    Serializable msg,    IgniteRunnable msgC){
      try {
        onMessage0(nodeId,(GridIoMessage)msg,msgC);
      }
 catch (      ClassCastException ignored) {
        U.error(log,"Communication manager received message of unknown type (will ignore): " + msg.getClass().getName() + ". Most likely GridCommunicationSpi is being used directly, "+ "which is illegal - make sure to send messages only via GridProjection API.");
      }
    }
    @Override public void onDisconnected(    UUID nodeId){
      for (      GridDisconnectListener lsnr : disconnectLsnrs)       lsnr.onNodeDisconnected(nodeId);
    }
  }
);
  MessageWriterFactory[] writerExt=ctx.plugins().extensions(MessageWriterFactory.class);
  if (writerExt != null && writerExt.length > 0)   writerFactory=writerExt[0];
 else {
    writerFactory=new MessageWriterFactory(){
      @Override public MessageWriter writer(){
        return new GridTcpCommunicationMessageWriter();
      }
    }
;
  }
  MessageReaderFactory[] readerExt=ctx.plugins().extensions(MessageReaderFactory.class);
  if (readerExt != null && readerExt.length > 0)   readerFactory=readerExt[0];
 else {
    readerFactory=new MessageReaderFactory(){
      @Override public MessageReader reader(){
        return new GridTcpCommunicationMessageReader(msgFactory);
      }
    }
;
  }
  if (log.isDebugEnabled())   log.debug(startInfo());
}
