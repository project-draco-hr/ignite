{
  assertParameter(discoDelay > 0,"discoveryStartupDelay > 0");
  startSpi();
  pubPool=ctx.getExecutorService();
  p2pPool=ctx.getPeerClassLoadingExecutorService();
  sysPool=ctx.getSystemExecutorService();
  mgmtPool=ctx.getManagementExecutorService();
  utilityCachePool=ctx.utilityCachePool();
  marshCachePool=ctx.marshallerCachePool();
  affPool=new IgniteThreadPoolExecutor("aff-" + ctx.gridName(),1,1,0,new LinkedBlockingQueue<Runnable>());
  getSpi().setListener(commLsnr=new CommunicationListener<Serializable>(){
    @Override public void onMessage(    UUID nodeId,    Serializable msg,    IgniteRunnable msgC){
      try {
        onMessage0(nodeId,(GridIoMessage)msg,msgC);
      }
 catch (      ClassCastException ignored) {
        U.error(log,"Communication manager received message of unknown type (will ignore): " + msg.getClass().getName() + ". Most likely GridCommunicationSpi is being used directly, "+ "which is illegal - make sure to send messages only via GridProjection API.");
      }
    }
    @Override public void onDisconnected(    UUID nodeId){
      for (      GridDisconnectListener lsnr : disconnectLsnrs)       lsnr.onNodeDisconnected(nodeId);
    }
  }
);
  MessageFormatter[] formatterExt=ctx.plugins().extensions(MessageFormatter.class);
  if (formatterExt != null && formatterExt.length > 0) {
    if (formatterExt.length > 1)     throw new IgniteCheckedException("More than one MessageFormatter extension is defined. Check your " + "plugins configuration and make sure that only one of them provides custom message format.");
    formatter=formatterExt[0];
  }
 else {
    formatter=new MessageFormatter(){
      @Override public MessageWriter writer(){
        return new DirectMessageWriter();
      }
      @Override public MessageReader reader(      MessageFactory factory){
        return new DirectMessageReader(msgFactory,this);
      }
    }
;
  }
  MessageFactory[] msgs=ctx.plugins().extensions(MessageFactory.class);
  if (msgs == null)   msgs=EMPTY;
  List<MessageFactory> compMsgs=new ArrayList<>();
  for (  IgniteComponentType compType : IgniteComponentType.values()) {
    MessageFactory f=compType.messageFactory();
    if (f != null)     compMsgs.add(f);
  }
  if (!compMsgs.isEmpty())   msgs=F.concat(msgs,compMsgs.toArray(new MessageFactory[compMsgs.size()]));
  msgFactory=new GridIoMessageFactory(msgs);
  if (log.isDebugEnabled())   log.debug(startInfo());
  registerIoPoolExtensions();
}
