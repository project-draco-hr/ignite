{
  TestRecordingCommunicationSpi commSpi0=(TestRecordingCommunicationSpi)ignite.configuration().getCommunicationSpi();
  IgniteCache<Object,Object> cache=ignite.cache(ccfg.getName());
  final Integer key=primaryKey(cache);
  cache.remove(key);
  waitKeyRemoved(ccfg.getName(),key);
  commSpi0.record(GridDhtTxFinishRequest.class);
  commSpi0.blockMessages(new IgnitePredicateX<GridIoMessage>(){
    @Override public boolean applyx(    GridIoMessage e) throws IgniteCheckedException {
      return e.message() instanceof GridDhtTxFinishRequest;
    }
  }
);
  c.apply(key,cache);
  assertEquals(key,cache.localPeek(key));
  U.sleep(50);
  for (int i=0; i < SRVS; i++) {
    Ignite node=ignite(i);
    if (node != ignite)     assertNull(node.cache(null).localPeek(key));
  }
  commSpi0.stopBlock(true);
  waitKeyUpdated(ignite,ccfg.getBackups() + 1,ccfg.getName(),key);
  List<Object> msgs=commSpi0.recordedMessages(true);
  assertEquals(ccfg.getBackups(),msgs.size());
  cache.remove(key);
  waitKeyRemoved(ccfg.getName(),key);
  c.apply(key,cache);
  waitKeyUpdated(ignite,ccfg.getBackups() + 1,ccfg.getName(),key);
}
