{
  Collection<GridJobResultImpl> doomed=new LinkedList<>();
synchronized (mux) {
    if (jobRes != null)     for (    GridJobResultImpl res : jobRes.values())     if (!res.hasResponse())     doomed.add(res);
  }
  for (  GridJobResultImpl res : doomed) {
    UUID nodeId=res.getNode().id();
    if (nodeId.equals(ctx.localNodeId()))     ctx.job().cancelJob(ses.getId(),res.getJobContext().getJobId(),true);
 else {
      try {
        GridNode node=ctx.discovery().node(nodeId);
        if (node != null)         ctx.io().send(node,TOPIC_JOB_CANCEL,new GridJobCancelRequest(ses.getId(),res.getJobContext().getJobId(),true),PUBLIC_POOL);
      }
 catch (      GridException e) {
        if (!isDeadNode(nodeId))         U.error(log,"Failed to send cancel request to node (will ignore) [nodeId=" + nodeId + ", taskName="+ ses.getTaskName()+ ", taskSesId="+ ses.getId()+ ", jobSesId="+ res.getJobContext().getJobId()+ ']',e);
      }
    }
  }
}
