{
  final GridConfiguration c=g.configuration();
  final GridProductLicense lic=g.product().license();
  final VisorBasicConfig basic=new VisorBasicConfig(c.getGridName(),getProperty(GG_HOME,c.getGridGainHome()),getProperty(GG_LOCAL_HOST,c.getLocalHost()),g.localNode().id(),compactObject(c.getMarshaller()),compactObject(c.getDeploymentMode()),boolValue(GG_DAEMON,c.isDaemon()),g.isJmxRemoteEnabled(),g.isRestartEnabled(),c.getNetworkTimeout(),c.getLicenseUrl(),compactObject(c.getGridLogger()),c.getDiscoveryStartupDelay(),compactObject(c.getMBeanServer()),boolValue(GG_NO_ASCII,false),boolValue(GG_NO_DISCO_ORDER,false),boolValue(GG_NO_SHUTDOWN_HOOK,false),getProperty(GG_PROG_NAME),boolValue(GG_QUIET,true),getProperty(GG_SUCCESS_FILE),boolValue(GG_UPDATE_NOTIFIER,true));
  final VisorMetricsConfig metrics=new VisorMetricsConfig(c.getMetricsExpireTime(),c.getMetricsHistorySize(),c.getMetricsLogFrequency());
  final VisorSpisConfig spis=new VisorSpisConfig(compactObject(c.getDiscoverySpi()),compactObject(c.getCommunicationSpi()),compactObject(c.getEventStorageSpi()),compactObject(c.getCollisionSpi()),compactObject(c.getAuthenticationSpi()),compactObject(c.getSecureSessionSpi()),compactObject(c.getDeploymentSpi()),compactArray(c.getCheckpointSpi()),compactArray(c.getFailoverSpi()),compactArray(c.getLoadBalancingSpi()),compactObject(c.getSwapSpaceSpi()));
  final VisorPeerToPeerConfig p2p=new VisorPeerToPeerConfig(c.isPeerClassLoadingEnabled(),c.getPeerClassLoadingMissedResourcesCacheSize(),compactArray(c.getPeerClassLoadingLocalClassPathExclude()));
  final VisorEmailConfig email=new VisorEmailConfig(getProperty(GG_SMTP_HOST,c.getSmtpHost()),intValue(GG_SMTP_PORT,c.getSmtpPort()),getProperty(GG_SMTP_USERNAME,c.getSmtpUsername()),getProperty(GG_ADMIN_EMAILS,compactArray(c.getAdminEmails())),getProperty(GG_SMTP_FROM,c.getSmtpFromEmail()),boolValue(GG_SMTP_SSL,c.isSmtpSsl()),boolValue(GG_SMTP_STARTTLS,c.isSmtpStartTls()));
  final VisorLifecycleConfig lifecycle=new VisorLifecycleConfig(compactArray(c.getLifecycleBeans()),boolValue(GG_LIFECYCLE_EMAIL_NOTIFY,c.isLifeCycleEmailNotification()));
  final VisorExecServiceConfig execSvc=new VisorExecServiceConfig(compactObject(c.getExecutorService()),c.getExecutorServiceShutdown(),compactObject(c.getSystemExecutorService()),c.getSystemExecutorServiceShutdown(),compactObject(c.getPeerClassLoadingExecutorService()),c.getPeerClassLoadingExecutorServiceShutdown());
  final VisorSegmentationConfig seg=new VisorSegmentationConfig(c.getSegmentationPolicy(),compactArray(c.getSegmentationResolvers()),c.getSegmentCheckFrequency(),c.isWaitForSegmentOnStart(),c.isAllSegmentationResolversPassRequired());
  final List<VisorCacheConfig> caches=Collections.emptyList();
  for (  GridCacheConfiguration cacheCfg : c.getCacheConfiguration()) {
    VisorAffinityConfig affinity=new VisorAffinityConfig(compactObject(cacheCfg.getAffinity()),compactObject(cacheCfg.getAffinityMapper()));
    VisorPreloadConfig preload=new VisorPreloadConfig(cacheCfg.getPreloadMode(),cacheCfg.getPreloadBatchSize(),cacheCfg.getPreloadThreadPoolSize());
    VisorEvictionConfig evict=new VisorEvictionConfig(compactObject(cacheCfg.getEvictionPolicy()),cacheCfg.getEvictSynchronizedKeyBufferSize(),cacheCfg.isEvictSynchronized(),cacheCfg.isEvictNearSynchronized(),cacheCfg.getEvictMaxOverflowRatio());
    VisorNearCacheConfig near=new VisorNearCacheConfig(GridCacheUtils.isNearEnabled(cacheCfg),cacheCfg.getNearStartSize(),compactObject(cacheCfg.getNearEvictionPolicy()));
    VisorDefaultCacheConfig dflt=new VisorDefaultCacheConfig(cacheCfg.getDefaultTxIsolation(),cacheCfg.getDefaultTxConcurrency(),cacheCfg.getDefaultTxTimeout(),cacheCfg.getDefaultLockTimeout());
    VisorDgcConfig dgc=new VisorDgcConfig(cacheCfg.getDgcFrequency(),cacheCfg.isDgcRemoveLocks(),cacheCfg.getDgcSuspectLockTimeout());
    VisorStoreConfig store=new VisorStoreConfig(compactObject(cacheCfg.getStore()),cacheCfg.isStoreValueBytes());
    caches.add(new VisorCacheConfig(cacheCfg.getName(),cacheCfg.getCacheMode(),cacheCfg.getDefaultTimeToLive(),cacheCfg.getRefreshAheadRatio(),cacheCfg.getAtomicSequenceReserveSize(),cacheCfg.isSwapEnabled(),cacheCfg.isBatchUpdateOnCommit(),cacheCfg.isInvalidate(),cacheCfg.getStartSize(),compactObject(cacheCfg.getCloner()),cacheCfg.getTransactionManagerLookupClassName(),affinity,preload,evict,near,dflt,dgc,store));
  }
  return new VisorConfiguration(lic,basic,metrics,spis,p2p,email,lifecycle,execSvc,seg,compactArray(c.getIncludeProperties()),c.getIncludeEventTypes(),c.isRestEnabled(),c.getRestJettyPath(),getProperty(GG_JETTY_HOST),intValue(GG_JETTY_PORT,null),c.getUserAttributes(),caches,getenv(),getProperties());
}
