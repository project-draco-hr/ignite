{
  String hadoopHome=System.getenv("HADOOP_HOME");
  if (hadoopHome == null || hadoopHome.isEmpty())   exit("HADOOP_HOME environment variable is not set. Please set HADOOP_HOME to " + "valid Hadoop installation folder and run setup tool again.");
  hadoopHome=hadoopHome.replaceAll("\"","");
  X.println("HADOOP_HOME is set to '" + hadoopHome + "'.");
  File hadoopDir=new File(hadoopHome);
  if (!hadoopDir.exists())   exit("Hadoop installation folder does not exist.");
  if (!hadoopDir.isDirectory())   exit("HADOOP_HOME must point to a directory.");
  if (!hadoopDir.canRead())   exit("Hadoop installation folder can not be read. Please check permissions.");
  File hadoopCommonDir;
  String hadoopCommonHome=System.getenv("HADOOP_COMMON_HOME");
  if (F.isEmpty(hadoopCommonHome)) {
    hadoopCommonDir=new File(hadoopDir,"share/hadoop/common");
    X.println("HADOOP_COMMON_HOME is not set, will use '" + hadoopCommonDir.getPath() + "'.");
  }
 else {
    X.println("HADOOP_COMMON_HOME is set to '" + hadoopCommonHome + "'.");
    hadoopCommonDir=new File(hadoopCommonHome);
  }
  if (!hadoopCommonDir.canRead())   exit("Failed to read Hadoop common dir in '" + hadoopCommonHome + "'.");
  File hadoopCommonLibDir=new File(hadoopCommonDir,"lib");
  if (!hadoopCommonLibDir.canRead())   exit("Failed to read Hadoop 'lib' folder in '" + hadoopCommonLibDir.getPath() + "'.");
  if (U.isWindows()) {
    File hadoopBinDir=new File(hadoopDir,"bin");
    if (!hadoopBinDir.canRead())     exit("Failed to read subdirectory 'bin' in HADOOP_HOME.");
    File winutilsFile=new File(hadoopBinDir,WINUTILS_EXE);
    if (!winutilsFile.exists() && getAnswer("File " + WINUTILS_EXE + " does not exist. "+ "It may be replaced by a stub. Create it?")) {
      boolean ok=false;
      try {
        ok=winutilsFile.createNewFile();
      }
 catch (      IOException ignore) {
      }
      if (!ok)       exit("Failed to create '" + WINUTILS_EXE + "' file. Please check permissions.");
    }
    processCmdFiles(hadoopDir,"bin","sbin","libexec");
  }
  String gridgainHome=U.getGridGainHome();
  X.println("GRIDGAIN_HOME=" + gridgainHome);
  File gridGainLibs=new File(new File(gridgainHome),"libs");
  if (!gridGainLibs.exists())   exit("GridGain 'libs' folder is not found.");
  File[] jarFiles=gridGainLibs.listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.endsWith(".jar");
    }
  }
);
  boolean jarsExist=true;
  for (  File file : jarFiles) {
    File targetFile=new File(hadoopCommonLibDir,file.getName());
    if (!targetFile.exists())     jarsExist=false;
  }
  if (!jarsExist && getAnswer("GridGain JAR files are not found in Hadoop 'lib' directory. " + "Create appropriate symbolic links?")) {
    File[] oldGridGainJarFiles=hadoopCommonLibDir.listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.startsWith("gridgain-");
      }
    }
);
    if (oldGridGainJarFiles.length > 0) {
      if (!getAnswer("The Hadoop 'lib' directory contains JARs from other GridGain installation. " + "It needs to be deleted to continue. Continue?"))       return;
      for (      File file : oldGridGainJarFiles) {
        if (!file.delete())         exit("Failed to delete file '" + file.getPath() + "'.");
      }
    }
    for (    File file : jarFiles) {
      File targetFile=new File(hadoopCommonLibDir,file.getName());
      try {
        Files.createSymbolicLink(targetFile.toPath(),file.toPath());
      }
 catch (      IOException e) {
        exit("Failed to create symbolic link '" + targetFile.getPath() + "'. Please check permissions.");
      }
    }
  }
  X.println("Hadoop setup is successfully completed.");
}
