{
  String gridgainHome=U.getGridGainHome();
  println("GRIDGAIN_HOME is set to '" + gridgainHome + "'.");
  String hadoopHome=System.getenv("HADOOP_HOME");
  if (hadoopHome == null || hadoopHome.isEmpty())   exit("HADOOP_HOME environment variable is not set. Please set HADOOP_HOME to " + "valid Hadoop installation folder and run setup tool again.");
  hadoopHome=hadoopHome.replaceAll("\"","");
  println("HADOOP_HOME is set to '" + hadoopHome + "'.");
  File hadoopDir=new File(hadoopHome);
  if (!hadoopDir.exists())   exit("Hadoop installation folder does not exist.");
  if (!hadoopDir.isDirectory())   exit("HADOOP_HOME must point to a directory.");
  if (!hadoopDir.canRead())   exit("Hadoop installation folder can not be read. Please check permissions.");
  File hadoopCommonDir;
  String hadoopCommonHome=System.getenv("HADOOP_COMMON_HOME");
  if (F.isEmpty(hadoopCommonHome)) {
    hadoopCommonDir=new File(hadoopDir,"share/hadoop/common");
    println("HADOOP_COMMON_HOME is not set, will use '" + hadoopCommonDir.getPath() + "'.");
  }
 else {
    println("HADOOP_COMMON_HOME is set to '" + hadoopCommonHome + "'.");
    hadoopCommonDir=new File(hadoopCommonHome);
  }
  if (!hadoopCommonDir.canRead())   exit("Failed to read Hadoop common dir in '" + hadoopCommonHome + "'.");
  File hadoopCommonLibDir=new File(hadoopCommonDir,"lib");
  if (!hadoopCommonLibDir.canRead())   exit("Failed to read Hadoop 'lib' folder in '" + hadoopCommonLibDir.getPath() + "'.");
  if (U.isWindows()) {
    File hadoopBinDir=new File(hadoopDir,"bin");
    if (!hadoopBinDir.canRead())     exit("Failed to read subdirectory 'bin' in HADOOP_HOME.");
    File winutilsFile=new File(hadoopBinDir,WINUTILS_EXE);
    if (!winutilsFile.exists()) {
      if (ask("File '" + WINUTILS_EXE + "' does not exist. "+ "It may be replaced by a stub. Create it?")) {
        println("Creating file stub '" + winutilsFile.getAbsolutePath() + "'.");
        boolean ok=false;
        try {
          ok=winutilsFile.createNewFile();
        }
 catch (        IOException ignore) {
        }
        if (!ok)         exit("Failed to create '" + WINUTILS_EXE + "' file. Please check permissions.");
      }
 else       println("Ok. But Hadoop client probably will not work on Windows this way...");
    }
    processCmdFiles(hadoopDir,"bin","sbin","libexec");
  }
  File gridgainLibs=new File(new File(gridgainHome),"libs");
  if (!gridgainLibs.exists())   exit("GridGain 'libs' folder is not found.");
  File[] jarFiles=gridgainLibs.listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.endsWith(".jar");
    }
  }
);
  boolean jarsExist=true;
  for (  File file : jarFiles) {
    File targetFile=new File(hadoopCommonLibDir,file.getName());
    if (!linkTargetExists(targetFile) || !targetFile.exists())     jarsExist=false;
  }
  if (!jarsExist) {
    if (ask("GridGain JAR files are not found in Hadoop 'lib' directory. " + "Create appropriate symbolic links?")) {
      File[] oldGridGainJarFiles=hadoopCommonLibDir.listFiles(new FilenameFilter(){
        @Override public boolean accept(        File dir,        String name){
          return name.startsWith("gridgain-");
        }
      }
);
      if (oldGridGainJarFiles.length > 0 && ask("The Hadoop 'lib' directory contains JARs from other GridGain " + "installation. They must be deleted to continue. Continue?")) {
        for (        File file : oldGridGainJarFiles) {
          println("Deleting file '" + file.getAbsolutePath() + "'.");
          if (!file.delete())           exit("Failed to delete file '" + file.getPath() + "'.");
        }
      }
      for (      File file : jarFiles) {
        File targetFile=new File(hadoopCommonLibDir,file.getName());
        println("Creating symbolic link '" + targetFile.getAbsolutePath() + "'.");
        try {
          Files.createSymbolicLink(targetFile.toPath(),file.toPath());
        }
 catch (        IOException e) {
          exit("Failed to create symbolic link '" + targetFile.getPath() + "'. Please check permissions.");
        }
      }
    }
 else     println("Ok. But Hadoop client will not be able to talk to GridGain cluster without those JARs in classpath...");
  }
  if (ask("Replace 'core-site.xml' and 'mapred-site.xml' files with preconfigured templates?")) {
    File gridgainDocs=new File(gridgainHome,"docs");
    if (!gridgainDocs.canRead())     exit("Failed to read GridGain 'docs' folder at '" + gridgainDocs.getAbsolutePath() + "'.");
    File hadoopEtc=new File(hadoopDir,"etc" + File.separator + "hadoop");
    if (!hadoopEtc.canWrite())     exit("Failed to write to directory '" + hadoopEtc + "'.");
    replace(new File(gridgainDocs,"core-site.xml.gridgain"),renameToBak(new File(hadoopEtc,"core-site.xml")));
    replace(new File(gridgainDocs,"mapred-site.xml.gridgain"),renameToBak(new File(hadoopEtc,"mapred-site.xml")));
  }
 else   println("Ok. You can configure them later, the templates are available at GridGain's 'docs' directory...");
  println("Hadoop setup is complete.");
}
