{
  startStopwatch();
  assertParameter(cred != null,"awsCredentials != null");
  if (log.isDebugEnabled()) {
    log.debug(configInfo("awsCredentials",cred));
    log.debug(configInfo("clientConfiguration",cfg));
    log.debug(configInfo("bucketNameSuffix",bucketNameSuffix));
  }
  if (cfg == null)   U.warn(log,"Amazon client configuration is not set (will use default).");
  if (F.isEmpty(bucketNameSuffix)) {
    U.warn(log,"Bucket name suffix is null or empty (will use default bucket name).");
    bucketName=BUCKET_NAME_PREFIX + DFLT_BUCKET_NAME_SUFFIX;
  }
 else   bucketName=BUCKET_NAME_PREFIX + bucketNameSuffix;
  s3=cfg != null ? new AmazonS3Client(cred,cfg) : new AmazonS3Client(cred);
  if (!s3.doesBucketExist(bucketName)) {
    try {
      s3.createBucket(bucketName);
      if (log.isDebugEnabled())       log.debug("Created S3 bucket: " + bucketName);
      while (!s3.doesBucketExist(bucketName))       try {
        U.sleep(200);
      }
 catch (      IgniteInterruptedException e) {
        throw new IgniteSpiException("Thread has been interrupted.",e);
      }
    }
 catch (    AmazonClientException e) {
      try {
        if (!s3.doesBucketExist(bucketName))         throw new IgniteSpiException("Failed to create bucket: " + bucketName,e);
      }
 catch (      AmazonClientException ignored) {
        throw new IgniteSpiException("Failed to create bucket: " + bucketName,e);
      }
    }
  }
  Collection<S3TimeData> s3TimeDataLst=new LinkedList<>();
  try {
    ObjectListing list=s3.listObjects(bucketName);
    while (true) {
      for (      S3ObjectSummary sum : list.getObjectSummaries()) {
        S3CheckpointData data=read(sum.getKey());
        if (data != null) {
          s3TimeDataLst.add(new S3TimeData(data.getExpireTime(),data.getKey()));
          if (log.isDebugEnabled())           log.debug("Registered existing checkpoint from key: " + data.getKey());
        }
      }
      if (list.isTruncated())       list=s3.listNextBatchOfObjects(list);
 else       break;
    }
  }
 catch (  AmazonClientException e) {
    throw new IgniteSpiException("Failed to read checkpoint bucket: " + bucketName,e);
  }
catch (  IgniteCheckedException e) {
    throw new IgniteSpiException("Failed to marshal/unmarshal objects in bucket: " + bucketName,e);
  }
  timeoutWrk=new S3TimeoutWorker();
  timeoutWrk.add(s3TimeDataLst);
  timeoutWrk.start();
  registerMBean(gridName,this,S3CheckpointSpiMBean.class);
  if (log.isDebugEnabled())   log.debug(startInfo());
}
