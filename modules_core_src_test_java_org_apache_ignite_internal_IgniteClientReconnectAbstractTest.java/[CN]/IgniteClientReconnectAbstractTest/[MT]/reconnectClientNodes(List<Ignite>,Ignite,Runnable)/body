{
  final TestTcpDiscoverySpi srvSpi=spi(srv);
  final CountDownLatch disconnectLatch=new CountDownLatch(clients.size());
  final CountDownLatch reconnectLatch=new CountDownLatch(clients.size());
  log.info("Block reconnect.");
  for (  Ignite client : clients)   spi(client).writeLatch=new CountDownLatch(1);
  IgnitePredicate<Event> p=new IgnitePredicate<Event>(){
    @Override public boolean apply(    Event evt){
      if (evt.type() == EVT_CLIENT_NODE_DISCONNECTED) {
        info("Disconnected: " + evt);
        disconnectLatch.countDown();
      }
 else       if (evt.type() == EVT_CLIENT_NODE_RECONNECTED) {
        info("Reconnected: " + evt);
        reconnectLatch.countDown();
      }
      return true;
    }
  }
;
  for (  Ignite client : clients)   client.events().localListen(p,EVT_CLIENT_NODE_DISCONNECTED,EVT_CLIENT_NODE_RECONNECTED);
  for (  Ignite client : clients)   srvSpi.failNode(client.cluster().localNode().id(),null);
  waitReconnectEvent(disconnectLatch);
  if (disconnectedC != null)   disconnectedC.run();
  log.info("Allow reconnect.");
  for (  Ignite client : clients)   spi(client).writeLatch.countDown();
  waitReconnectEvent(reconnectLatch);
  for (  Ignite client : clients)   client.events().stopLocalListen(p);
}
