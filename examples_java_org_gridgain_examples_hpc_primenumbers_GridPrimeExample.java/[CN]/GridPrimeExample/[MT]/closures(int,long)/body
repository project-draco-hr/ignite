{
  Collection<GridOutClosure<Long>> cls=new ArrayList<>(gridSize);
  long taskMinRange=2;
  long numbersPerTask=val / gridSize < 10 ? 10 : val / gridSize;
  long jobMinRange;
  long jobMaxRange=0;
  for (int i=0; jobMaxRange < val; i++) {
    jobMinRange=i * numbersPerTask + taskMinRange;
    jobMaxRange=(i + 1) * numbersPerTask + taskMinRange - 1;
    if (jobMaxRange > val)     jobMaxRange=val;
    final long min=jobMinRange;
    final long max=jobMaxRange;
    cls.add(new GridOutClosure<Long>(){
      /** 
 * Check if the value passed in is divisible by
 * any of the divisors in the range. If so,
 * return the first divisor found, otherwise
 * return {@code null}.
 * @return First divisor found or {@code null} if no
 * divisor was found.
 */
      @Nullable @Override public Long apply(){
        return GridPrimeChecker.checkPrime(val,min,max);
      }
    }
);
  }
  return cls;
}
