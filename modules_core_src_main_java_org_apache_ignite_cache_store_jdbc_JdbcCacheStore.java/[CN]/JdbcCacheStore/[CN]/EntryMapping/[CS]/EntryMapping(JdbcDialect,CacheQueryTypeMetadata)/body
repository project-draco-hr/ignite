{
  this.dialect=dialect;
  this.typeMetadata=typeMetadata;
  final Collection<CacheQueryTypeDescriptor> keyFields=typeMetadata.getKeyDescriptors();
  Collection<CacheQueryTypeDescriptor> valFields=typeMetadata.getValueDescriptors();
  uniqValFields=F.view(typeMetadata.getValueDescriptors(),new IgnitePredicate<CacheQueryTypeDescriptor>(){
    @Override public boolean apply(    CacheQueryTypeDescriptor desc){
      return !keyFields.contains(desc);
    }
  }
);
  String schema=typeMetadata.getSchema();
  String tblName=typeMetadata.getTableName();
  keyCols=databaseColumns(keyFields);
  Collection<String> valCols=databaseColumns(valFields);
  Collection<String> uniqValCols=databaseColumns(uniqValFields);
  loadCacheQry=dialect.loadCacheQuery(schema,tblName,F.concat(false,keyCols,uniqValCols));
  loadQrySingle=dialect.loadQuery(schema,tblName,keyCols,valCols,1);
  maxKeysPerStmt=dialect.getMaxParamsCnt() / keyCols.size();
  loadQry=dialect.loadQuery(schema,tblName,keyCols,uniqValCols,maxKeysPerStmt);
  insQry=dialect.insertQuery(schema,tblName,keyCols,uniqValCols);
  updQry=dialect.updateQuery(schema,tblName,keyCols,uniqValCols);
  mergeQry=dialect.mergeQuery(schema,tblName,keyCols,uniqValCols);
  remQry=dialect.removeQuery(schema,tblName,keyCols);
  cols=F.concat(false,keyCols,valCols);
}
