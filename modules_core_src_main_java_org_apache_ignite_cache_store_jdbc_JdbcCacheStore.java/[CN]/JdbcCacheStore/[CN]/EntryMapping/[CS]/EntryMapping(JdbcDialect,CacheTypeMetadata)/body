{
  this.dialect=dialect;
  this.typeMeta=typeMeta;
  final Collection<CacheTypeFieldMetadata> keyFields=typeMeta.getKeyFields();
  Collection<CacheTypeFieldMetadata> valFields=typeMeta.getValueFields();
  uniqValFields=F.view(valFields,new IgnitePredicate<CacheTypeFieldMetadata>(){
    @Override public boolean apply(    CacheTypeFieldMetadata col){
      return !keyFields.contains(col);
    }
  }
);
  String schema=typeMeta.getDatabaseSchema();
  String tblName=typeMeta.getDatabaseTable();
  fullTblName=F.isEmpty(schema) ? tblName : schema + "." + tblName;
  keyCols=databaseColumns(keyFields);
  Collection<String> uniqValCols=databaseColumns(uniqValFields);
  cols=F.concat(false,keyCols,uniqValCols);
  loadColIdxs=U.newHashMap(cols.size());
  int idx=1;
  for (  String col : cols)   loadColIdxs.put(col,idx++);
  loadCacheQry=dialect.loadCacheQuery(fullTblName,cols);
  loadCacheSelRangeQry=dialect.loadCacheSelectRangeQuery(fullTblName,keyCols);
  loadQrySingle=dialect.loadQuery(fullTblName,keyCols,cols,1);
  maxKeysPerStmt=dialect.getMaxParamsCnt() / keyCols.size();
  loadQry=dialect.loadQuery(fullTblName,keyCols,cols,maxKeysPerStmt);
  insQry=dialect.insertQuery(fullTblName,keyCols,uniqValCols);
  updQry=dialect.updateQuery(fullTblName,keyCols,uniqValCols);
  mergeQry=dialect.mergeQuery(fullTblName,keyCols,uniqValCols);
  remQry=dialect.removeQuery(fullTblName,keyCols);
}
