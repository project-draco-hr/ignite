{
  depExe.submit(new BusyRunnable(){
    @Override public void run0(){
      boolean firstTime=true;
      for (      CacheEntryEvent<?,?> e : assignCol) {
        if (!(e.getKey() instanceof GridServiceAssignmentsKey))         continue;
        if (firstTime) {
          markCompatibilityStateAsUsed();
          firstTime=false;
        }
        GridServiceAssignments assigns;
        try {
          assigns=(GridServiceAssignments)e.getValue();
        }
 catch (        IgniteException ex) {
          if (X.hasCause(ex,ClassNotFoundException.class))           continue;
 else           throw ex;
        }
        if (assigns != null) {
          svcName.set(assigns.name());
          Throwable t=null;
          try {
            redeploy(assigns);
          }
 catch (          Error|RuntimeException th) {
            t=th;
          }
          GridServiceDeploymentFuture fut=depFuts.get(assigns.name());
          if (fut != null && fut.configuration().equalsIgnoreNodeFilter(assigns.configuration())) {
            depFuts.remove(assigns.name(),fut);
            fut.onDone(null,t);
          }
        }
 else {
          String name=((GridServiceAssignmentsKey)e.getKey()).name();
          svcName.set(name);
          Collection<ServiceContextImpl> ctxs;
synchronized (locSvcs) {
            ctxs=locSvcs.remove(name);
          }
          if (ctxs != null) {
synchronized (ctxs) {
              cancel(ctxs,ctxs.size());
            }
          }
        }
      }
    }
  }
);
}
