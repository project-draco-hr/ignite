{
  IgniteNodeValidationResult res=super.validateNode(node);
  if (res != null)   return res;
  boolean rmtNodeIsOld=node.version().compareToIgnoreTimestamp(LAZY_SERVICES_CFG_SINCE) < 0;
  if (!rmtNodeIsOld)   return null;
  while (true) {
    ServicesCompatibilityState state=compatibilityState.get();
    if (state.srvcCompatibility)     return null;
    if (!state.used) {
      if (!compatibilityState.compareAndSet(state,new ServicesCompatibilityState(true,false)))       continue;
      return null;
    }
    ClusterNode locNode=ctx.discovery().localNode();
    return new IgniteNodeValidationResult(node.id(),"Local node uses IgniteServices and works in not " + "compatible mode with old nodes (" + IGNITE_SERVICES_COMPATIBILITY_MODE + " system property can be "+ "set explicitly) [locNodeId="+ locNode.id()+ ", rmtNodeId="+ node.id()+ "]","Remote node uses IgniteServices and works in not compatible mode with old nodes " + IGNITE_SERVICES_COMPATIBILITY_MODE + " system property can be set explicitly"+ "[locNodeId="+ node.id()+ ", rmtNodeId="+ locNode.id()+ "]");
  }
}
