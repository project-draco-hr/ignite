{
  A.notNull(cfg,"cfg");
  ServicesCompatibilityState state=markCompatibilityStateAsUsed();
  validate(cfg);
  if (!state.srvcCompatibility) {
    Marshaller marsh=ctx.config().getMarshaller();
    LazyServiceConfiguration cfg0;
    try {
      byte[] srvcBytes=marsh.marshal(cfg.getService());
      cfg0=new LazyServiceConfiguration(cfg,srvcBytes);
    }
 catch (    IgniteCheckedException e) {
      U.error(log,"Failed to marshal service with configured marshaller [srvc=" + cfg.getService() + ", marsh="+ marsh+ "]",e);
      return new GridFinishedFuture<>(e);
    }
    cfg=cfg0;
  }
  GridServiceDeploymentFuture fut=new GridServiceDeploymentFuture(cfg);
  GridServiceDeploymentFuture old=depFuts.putIfAbsent(cfg.getName(),fut);
  if (old != null) {
    if (!old.configuration().equalsIgnoreNodeFilter(cfg)) {
      fut.onDone(new IgniteCheckedException("Failed to deploy service (service already exists with " + "different configuration) [deployed=" + old.configuration() + ", new="+ cfg+ ']'));
      return fut;
    }
    return old;
  }
  if (ctx.clientDisconnected()) {
    fut.onDone(new IgniteClientDisconnectedCheckedException(ctx.cluster().clientReconnectFuture(),"Failed to deploy service, client node disconnected."));
    depFuts.remove(cfg.getName(),fut);
  }
  while (true) {
    try {
      GridServiceDeploymentKey key=new GridServiceDeploymentKey(cfg.getName());
      if (ctx.deploy().enabled())       ctx.cache().context().deploy().ignoreOwnership(true);
      try {
        GridServiceDeployment dep=(GridServiceDeployment)cache.getAndPutIfAbsent(key,new GridServiceDeployment(ctx.localNodeId(),cfg));
        if (dep != null) {
          if (!dep.configuration().equalsIgnoreNodeFilter(cfg)) {
            depFuts.remove(cfg.getName(),fut);
            fut.onDone(new IgniteCheckedException("Failed to deploy service (service already exists with " + "different configuration) [deployed=" + dep.configuration() + ", new="+ cfg+ ']'));
          }
 else {
            Iterator<Cache.Entry<Object,Object>> it=serviceEntries(ServiceAssignmentsPredicate.INSTANCE);
            while (it.hasNext()) {
              Cache.Entry<Object,Object> e=it.next();
              if (e.getKey() instanceof GridServiceAssignmentsKey) {
                GridServiceAssignments assigns=(GridServiceAssignments)e.getValue();
                if (assigns.name().equals(cfg.getName())) {
                  depFuts.remove(cfg.getName(),fut);
                  fut.onDone();
                  break;
                }
              }
            }
            if (!dep.configuration().equalsIgnoreNodeFilter(cfg))             U.warn(log,"Service already deployed with different configuration (will ignore) " + "[deployed=" + dep.configuration() + ", new="+ cfg+ ']');
          }
        }
      }
  finally {
        if (ctx.deploy().enabled())         ctx.cache().context().deploy().ignoreOwnership(false);
      }
      return fut;
    }
 catch (    ClusterTopologyCheckedException e) {
      if (log.isDebugEnabled())       log.debug("Topology changed while deploying service (will retry): " + e.getMessage());
    }
catch (    IgniteCheckedException e) {
      if (e.hasCause(ClusterTopologyCheckedException.class)) {
        if (log.isDebugEnabled())         log.debug("Topology changed while deploying service (will retry): " + e.getMessage());
        continue;
      }
      U.error(log,"Failed to deploy service: " + cfg.getName(),e);
      return new GridFinishedFuture<>(e);
    }
  }
}
