{
  return new GridCacheIterator<K,V,V>(ctx,map.values(),F.<K,V>cacheEntry2Get(),ctx.vararg(F0.and(filter,F.<K,V>cacheHasPeekValue()))){
{
      advance();
    }
    private V next;
    private void advance(){
      if (next != null)       return;
      boolean has;
      while (has=super.hasNext()) {
        next=super.next();
        if (next != null)         break;
      }
      if (!has)       next=null;
    }
    @SuppressWarnings({"IteratorHasNextCallsIteratorNext"}) @Override public boolean hasNext(){
      advance();
      return next != null;
    }
    @Override public V next(){
      advance();
      if (next == null)       throw new NoSuchElementException();
      V v=next;
      next=null;
      return v;
    }
  }
;
}
