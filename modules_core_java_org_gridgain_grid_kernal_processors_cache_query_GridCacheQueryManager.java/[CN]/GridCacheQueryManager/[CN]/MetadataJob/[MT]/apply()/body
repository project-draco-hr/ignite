{
  final GridKernalContext ctx=((GridKernal)grid).context();
  Collection<String> cacheNames=F.viewReadOnly(ctx.cache().caches(),new C1<GridCache<?,?>,String>(){
    @Override public String apply(    GridCache<?,?> c){
      return c.name();
    }
  }
,new P1<GridCache<?,?>>(){
    @Override public boolean apply(    GridCache<?,?> c){
      return F.eq(spiName,c.configuration().getIndexingSpiName());
    }
  }
);
  return F.transform(cacheNames,new C1<String,CacheMetadata>(){
    @Override public CacheMetadata apply(    String cacheName){
      Collection<GridIndexingTypeDescriptor> types=ctx.indexing().types(cacheName);
      Collection<String> names=new HashSet<>(types.size());
      Map<String,String> keyClasses=new HashMap<>(types.size());
      Map<String,String> valClasses=new HashMap<>(types.size());
      Map<String,Map<String,String>> fields=new HashMap<>(types.size());
      Map<String,Collection<GridCacheMetadataIndex>> indexes=new HashMap<>(types.size());
      for (      GridIndexingTypeDescriptor type : types) {
        if (type.name().startsWith("GridCache"))         continue;
        names.add(type.name());
        keyClasses.put(type.name(),type.keyClass().getName());
        valClasses.put(type.name(),type.valueClass().getName());
        int size=2 + type.keyFields().size() + type.valueFields().size();
        Map<String,String> fieldsMap=new LinkedHashMap<>(size);
        fieldsMap.put("_KEY",type.keyClass().getName());
        fieldsMap.put("_VAL",type.valueClass().getName());
        for (        Map.Entry<String,Class<?>> e : type.keyFields().entrySet())         fieldsMap.put(e.getKey().toUpperCase(),e.getValue().getName());
        for (        Map.Entry<String,Class<?>> e : type.valueFields().entrySet())         fieldsMap.put(e.getKey().toUpperCase(),e.getValue().getName());
        fields.put(type.name(),fieldsMap);
        Collection<GridCacheMetadataIndex> indexesCol=new ArrayList<>(type.indexes().size());
        for (        Map.Entry<String,GridIndexDescriptor> e : type.indexes().entrySet()) {
          GridIndexDescriptor desc=e.getValue();
          if (!desc.text()) {
            Collection<String> idxFields=e.getValue().fields();
            Collection<String> descendings=new LinkedList<>();
            for (            String idxField : idxFields)             if (desc.descending(idxField))             descendings.add(idxField);
            indexesCol.add(new CacheMetadataIndex(e.getKey().toUpperCase(),idxFields,descendings,desc.unique()));
          }
        }
        indexes.put(type.name(),indexesCol);
      }
      return new CacheMetadata(cacheName,names,keyClasses,valClasses,fields,indexes);
    }
  }
);
}
