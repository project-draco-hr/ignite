{
  try {
    ses.newSession(tx);
    final OrganizationKey k1=new OrganizationKey(1);
    final Organization v1=new Organization(1,"Name1","City1");
    store.write(new CacheEntryImpl<>(k1,v1));
    if (tx != null && commit) {
      store.txEnd(true);
      tx=new DummyTx();
      ses.newSession(tx);
    }
    if (tx == null || commit)     assertEquals(v1,store.load(k1));
    Collection<Cache.Entry<?,?>> col=new ArrayList<>();
    final OrganizationKey k2=new OrganizationKey(2);
    final Organization v2=new Organization(2,"Name2","City2");
    final OrganizationKey k3=new OrganizationKey(3);
    final Organization v3=new Organization(3,"Name3","City3");
    col.add(new CacheEntryImpl<>(k2,v2));
    col.add(new CacheEntryImpl<>(k3,v3));
    store.writeAll(col);
    if (tx != null && commit) {
      store.txEnd(true);
      tx=new DummyTx();
      ses.newSession(tx);
    }
    final AtomicInteger cntr=new AtomicInteger();
    final OrganizationKey no_such_key=new OrganizationKey(4);
    if (tx == null || commit) {
      Map<Object,Object> loaded=store.loadAll(Arrays.asList(k1,k2,k3,no_such_key));
      for (      Map.Entry<Object,Object> e : loaded.entrySet()) {
        Object key=e.getKey();
        Object val=e.getValue();
        if (k1.equals(key))         assertEquals(v1,val);
        if (k2.equals(key))         assertEquals(v2,val);
        if (k3.equals(key))         assertEquals(v3,val);
        if (no_such_key.equals(key))         fail();
        cntr.incrementAndGet();
      }
      assertEquals(3,cntr.get());
    }
    store.deleteAll(Arrays.asList(k2,k3));
    if (tx != null && commit) {
      store.txEnd(true);
      tx=new DummyTx();
      ses.newSession(tx);
    }
    if (tx == null || commit) {
      assertNull(store.load(k2));
      assertNull(store.load(k3));
      assertEquals(v1,store.load(k1));
    }
    store.delete(k1);
    if (tx != null && commit) {
      store.txEnd(true);
      tx=new DummyTx();
      ses.newSession(tx);
    }
    if (tx == null || commit)     assertNull(store.load(k1));
  }
  finally {
    if (tx != null)     store.txEnd(false);
  }
}
