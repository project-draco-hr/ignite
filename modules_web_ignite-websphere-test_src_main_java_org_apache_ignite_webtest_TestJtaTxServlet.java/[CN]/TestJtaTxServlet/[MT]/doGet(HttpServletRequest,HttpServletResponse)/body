{
  final int key1=1;
  final int key2=2;
  final String correctVal1="correct_val1";
  final String correctVal2="correct_val1";
  final String incorrectVal1="incorrect_val2";
  final String incorrectVal2="incorrect_val2";
  final PrintWriter writer=res.getWriter();
  try {
    final Ignite ignite=Ignition.ignite();
    final IgniteCache<Integer,String> cache=ignite.cache("tx");
    TransactionManager tmMgr=TransactionManagerFactory.getTransactionManager();
    tmMgr.begin();
    cache.put(key1,correctVal1);
    cache.put(key2,correctVal2);
    writer.println("Transaction #1. Put values [key1=" + key1 + ", val1="+ cache.get(key1)+ ", key2="+ key2+ ", val2="+ cache.get(key2)+ "]");
    writer.println();
    tmMgr.commit();
    try {
      tmMgr.begin();
      writer.println("Transaction #2. Current values [key1=" + key1 + ", val1="+ cache.get(key1)+ ", key2="+ key2+ ", val2="+ cache.get(key2)+ "]");
      cache.put(key1,incorrectVal1);
      cache.put(key2,incorrectVal2);
      writer.println("Transaction #2. Put values [key1=" + key1 + ", val1="+ cache.get(key1)+ ", key2="+ key2+ ", val2="+ cache.get(key2)+ "]");
      tmMgr.setRollbackOnly();
      tmMgr.commit();
    }
 catch (    final RollbackException ignored) {
      writer.println("Transaction #2. setRollbackOnly [key1=" + key1 + ", val1="+ cache.get(key1)+ ", key2="+ key2+ ", val2="+ cache.get(key2)+ "]");
    }
    writer.println();
    tmMgr.begin();
    writer.println("Transaction #2. Current values [key1=" + key1 + ", val1="+ cache.get(key1)+ ", key2="+ key2+ ", val2="+ cache.get(key2)+ "]");
    tmMgr.commit();
  }
 catch (  final Throwable e) {
    e.printStackTrace(writer);
  }
}
