{
  Byte flag=PLAIN_CLASS_TO_FLAG.get(val.getClass());
  if (flag == null)   throw new IllegalArgumentException("Can't write object with type: " + val.getClass());
switch (flag) {
case GridBinaryMarshaller.BYTE:
    writer.writeByte(flag);
  writer.writeByte((Byte)val);
break;
case GridBinaryMarshaller.SHORT:
writer.writeByte(flag);
writer.writeShort((Short)val);
break;
case GridBinaryMarshaller.INT:
writer.writeByte(flag);
writer.writeInt((Integer)val);
break;
case GridBinaryMarshaller.LONG:
writer.writeByte(flag);
writer.writeLong((Long)val);
break;
case GridBinaryMarshaller.FLOAT:
writer.writeByte(flag);
writer.writeFloat((Float)val);
break;
case GridBinaryMarshaller.DOUBLE:
writer.writeByte(flag);
writer.writeDouble((Double)val);
break;
case GridBinaryMarshaller.CHAR:
writer.writeByte(flag);
writer.writeChar((Character)val);
break;
case GridBinaryMarshaller.BOOLEAN:
writer.writeByte(flag);
writer.writeBoolean((Boolean)val);
break;
case GridBinaryMarshaller.DECIMAL:
writer.doWriteDecimal((BigDecimal)val);
break;
case GridBinaryMarshaller.STRING:
writer.doWriteString((String)val);
break;
case GridBinaryMarshaller.UUID:
writer.doWriteUuid((UUID)val);
break;
case GridBinaryMarshaller.DATE:
writer.doWriteDate((Date)val);
break;
case GridBinaryMarshaller.TIMESTAMP:
writer.doWriteTimestamp((Timestamp)val);
break;
case GridBinaryMarshaller.BYTE_ARR:
writer.doWriteByteArray((byte[])val);
break;
case GridBinaryMarshaller.SHORT_ARR:
writer.doWriteShortArray((short[])val);
break;
case GridBinaryMarshaller.INT_ARR:
writer.doWriteIntArray((int[])val);
break;
case GridBinaryMarshaller.LONG_ARR:
writer.doWriteLongArray((long[])val);
break;
case GridBinaryMarshaller.FLOAT_ARR:
writer.doWriteFloatArray((float[])val);
break;
case GridBinaryMarshaller.DOUBLE_ARR:
writer.doWriteDoubleArray((double[])val);
break;
case GridBinaryMarshaller.CHAR_ARR:
writer.doWriteCharArray((char[])val);
break;
case GridBinaryMarshaller.BOOLEAN_ARR:
writer.doWriteBooleanArray((boolean[])val);
break;
case GridBinaryMarshaller.DECIMAL_ARR:
writer.doWriteDecimalArray((BigDecimal[])val);
break;
case GridBinaryMarshaller.STRING_ARR:
writer.doWriteStringArray((String[])val);
break;
case GridBinaryMarshaller.UUID_ARR:
writer.doWriteUuidArray((UUID[])val);
break;
case GridBinaryMarshaller.DATE_ARR:
writer.doWriteDateArray((Date[])val);
break;
case GridBinaryMarshaller.TIMESTAMP_ARR:
writer.doWriteTimestampArray((Timestamp[])val);
break;
default :
throw new IllegalArgumentException("Can't write object with type: " + val.getClass());
}
}
