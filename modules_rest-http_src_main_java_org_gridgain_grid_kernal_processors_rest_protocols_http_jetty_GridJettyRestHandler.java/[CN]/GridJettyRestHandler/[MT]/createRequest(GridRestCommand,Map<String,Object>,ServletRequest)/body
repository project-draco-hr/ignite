{
  GridRestRequest restReq;
switch (cmd) {
case CACHE_GET:
case CACHE_GET_ALL:
case CACHE_PUT:
case CACHE_PUT_ALL:
case CACHE_REMOVE:
case CACHE_REMOVE_ALL:
case CACHE_ADD:
case CACHE_CAS:
case CACHE_METRICS:
case CACHE_REPLACE:
case CACHE_DECREMENT:
case CACHE_INCREMENT:
case CACHE_APPEND:
case CACHE_PREPEND:
{
      GridRestCacheRequest restReq0=new GridRestCacheRequest();
      restReq0.cacheName((String)params.get("cacheName"));
      restReq0.key(params.get("key"));
      restReq0.value(params.get("val"));
      restReq0.value2(params.get("val2"));
      Object val1=params.get("val1");
      if (val1 != null)       restReq0.value(val1);
      restReq0.cacheFlags(intValue("cacheFlags",params,0));
      restReq0.ttl(longValue("exp",params,null));
      restReq0.initial(longValue("init",params,null));
      restReq0.delta(longValue("delta",params,null));
      if (cmd == CACHE_GET_ALL || cmd == CACHE_PUT_ALL || cmd == CACHE_REMOVE_ALL) {
        List<Object> keys=values("k",params);
        List<Object> vals=values("v",params);
        if (keys.size() < vals.size())         throw new GridException("Number of keys must be greater or equals to number of values.");
        Map<Object,Object> map=U.newHashMap(keys.size());
        Iterator<Object> keyIt=keys.iterator();
        Iterator<Object> valIt=vals.iterator();
        while (keyIt.hasNext())         map.put(keyIt.next(),valIt.hasNext() ? valIt.next() : null);
        restReq0.values(map);
      }
      restReq=restReq0;
      break;
    }
case TOPOLOGY:
case NODE:
{
    GridRestTopologyRequest restReq0=new GridRestTopologyRequest();
    restReq0.includeMetrics(Boolean.parseBoolean((String)params.get("mtr")));
    restReq0.includeAttributes(Boolean.parseBoolean((String)params.get("attr")));
    restReq0.nodeIp((String)params.get("ip"));
    restReq0.nodeId(uuidValue("id",params));
    restReq=restReq0;
    break;
  }
case EXE:
case RESULT:
case NOOP:
{
  GridRestTaskRequest restReq0=new GridRestTaskRequest();
  restReq0.taskId((String)params.get("id"));
  restReq0.taskName((String)params.get("name"));
  restReq0.params(values("p",params));
  restReq0.async(Boolean.parseBoolean((String)params.get("async")));
  restReq0.timeout(longValue("timeout",params,0L));
  restReq=restReq0;
  break;
}
case LOG:
{
GridRestLogRequest restReq0=new GridRestLogRequest();
restReq0.path((String)params.get("path"));
restReq0.from(intValue("from",params,-1));
restReq0.to(intValue("to",params,-1));
restReq=restReq0;
break;
}
case VERSION:
{
restReq=new GridRestRequest();
break;
}
default :
throw new GridException("Invalid command: " + cmd);
}
restReq.address(new InetSocketAddress(req.getRemoteAddr(),req.getRemotePort()));
restReq.command(cmd);
if (params.containsKey("gridgain.login") || params.containsKey("gridgain.password")) {
GridSecurityCredentials cred=new GridSecurityCredentials((String)params.get("gridgain.login"),(String)params.get("gridgain.password"));
restReq.credentials(cred);
}
String clientId=(String)params.get("clientId");
try {
if (clientId != null) restReq.clientId(UUID.fromString(clientId));
}
 catch (Exception ignored) {
}
String destId=(String)params.get("destId");
try {
if (destId != null) restReq.destinationId(UUID.fromString(destId));
}
 catch (IllegalArgumentException ignored) {
}
String sesTokStr=(String)params.get("sessionToken");
try {
if (sesTokStr != null) restReq.sessionToken(U.hexString2ByteArray(sesTokStr));
}
 catch (IllegalArgumentException ignored) {
}
return restReq;
}
