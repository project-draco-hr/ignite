{
  final AtomicInteger idx=new AtomicInteger();
  runMultiThreaded(new Callable<Object>(){
    private final Random rnd=new Random();
    @Override public Object call() throws Exception {
      int threadIdx=idx.getAndIncrement();
      int node=threadIdx % 2 + (GRID_CNT - 2);
      IgniteCache<Object,Object> cache=jcache(node);
      for (int i=0; i < TX_CNT; i++) {
        Map<Integer,String> map=new TreeMap<>();
        for (int j=0; j < 3; j++)         map.put(rnd.nextInt(10),"value");
        cache.putAll(map);
        if (i % 100 == 0)         log.info("Iteration: " + i + " "+ node);
      }
      return null;
    }
  }
,8,"putAll");
}
