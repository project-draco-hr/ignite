{
  List<String> keys=new ArrayList<>();
  for (int i=0; i < 1000; i++)   keys.add(String.valueOf(i));
  interceptor.retInterceptor=new InterceptorAdapter(){
    @Nullable @Override public Object onGet(    Object key,    Object val){
      return null;
    }
  }
;
  Map<String,Integer> map=cache(0).getAll(keys);
  for (  String key : keys)   assertEquals(null,map.get(key));
  assertEquals(1000,interceptor.invokeCnt.get());
  interceptor.reset();
  interceptor.retInterceptor=new InterceptorAdapter(){
    @Nullable @Override public Object onGet(    Object key,    Object val){
      int k=Integer.valueOf((String)key);
      return k % 2 == 0 ? null : (k * 2);
    }
  }
;
  map=cache(0).getAll(keys);
  for (  String key : keys) {
    int k=Integer.valueOf(key);
    if (k % 2 == 0)     assertEquals(null,map.get(key));
 else     assertEquals((Integer)(k * 2),map.get(key));
  }
  assertEquals(1000,interceptor.invokeCnt.get());
  interceptor.disabled=true;
  for (int i=0; i < 500; i++)   cache(0).put(String.valueOf(i),i);
  interceptor.disabled=false;
  for (int j=0; j < 2; j++) {
    interceptor.reset();
    interceptor.retInterceptor=new InterceptorAdapter(){
      @Nullable @Override public Object onGet(      Object key,      Object val){
        int k=Integer.valueOf((String)key);
switch (k % 3) {
case 0:
          return null;
case 1:
        return val;
case 2:
      return k * 3;
default :
    fail();
}
return null;
}
}
;
map=j == 0 ? cache(0).getAll(keys) : cache(0).getAllAsync(keys).get();
for (int i=0; i < keys.size(); i++) {
String key=keys.get(i);
switch (i % 3) {
case 0:
assertEquals(null,map.get(key));
break;
case 1:
Integer exp=i < 500 ? i : null;
assertEquals(exp,map.get(key));
break;
case 2:
assertEquals((Integer)(i * 3),map.get(key));
break;
default :
fail();
}
}
assertEquals(1000,interceptor.invokeCnt.get());
}
}
