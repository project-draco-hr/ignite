{
  interceptor.retInterceptor=new InterceptorAdapter(){
    @Nullable @Override public Object onBeforePut(    Object key,    @Nullable Object oldVal,    Object newVal){
      return (Integer)newVal + 1;
    }
  }
;
  String key1=primaryKey(0);
  String key2=backupKey(0);
  String key3=nearKey(0);
  interceptor.disabled=true;
  cache(1).putAll(F.asMap(key1,1,key2,2,key3,3));
  interceptor.disabled=false;
  log.info("Update [op=" + op + ", key1="+ key1+ ", key2="+ key2+ ", key3="+ key3+ ", txConcurrency="+ txConcurrency+ ", txIsolation="+ txIsolation+ ']');
  if (txConcurrency != null) {
    assertNotNull(txIsolation);
    assertNotNull(op);
    try (IgniteTx tx=cache(0).txStart(txConcurrency,txIsolation)){
      update(0,op,key1,100,1);
      update(0,op,key2,200,2);
      update(0,op,key3,300,3);
      tx.commit();
    }
   }
 else   cache(0).putAll(F.asMap(key1,100,key2,200,key3,300));
  checkCacheValue(key1,101);
  checkCacheValue(key2,201);
  checkCacheValue(key3,301);
}
