{
  initCap=10;
  map=newMap();
  final AtomicInteger rehashes=new AtomicInteger();
  final AtomicInteger releases=new AtomicInteger();
  map.eventListener(new GridOffHeapEventListener(){
    @Override public void onEvent(    GridOffHeapEvent evt){
switch (evt) {
case REHASH:
        rehashes.incrementAndGet();
      break;
case RELEASE:
    releases.incrementAndGet();
  break;
default :
}
}
}
);
final int max=1024;
int threads=5;
final Map<String,String> m=new ConcurrentHashMap8<>(max);
multithreaded(new Callable(){
@Override public Object call() throws Exception {
for (int i=0; i < max; i++) {
String key=string();
String val=string();
m.put(key,val);
assertTrue(map.put(hash(key),key.getBytes(),val.getBytes()));
assertTrue(map.contains(hash(key),key.getBytes()));
assertNotNull(map.get(hash(key),key.getBytes()));
assertEquals(new String(map.get(hash(key),key.getBytes())),val);
try (GridCloseableIterator<IgniteBiTuple<byte[],byte[]>> it=map.iterator()){
  while (it.hasNext()) {
    IgniteBiTuple<byte[],byte[]> t=it.next();
    String k=new String(t.get1());
    String v=new String(t.get2());
    assertEquals(m.get(k),v);
  }
}
 }
return null;
}
}
,threads);
assertEquals(max * threads,map.totalSize());
info("Stats [size=" + map.totalSize() + ", rehashes="+ rehashes+ ", releases="+ releases+ ']');
assertTrue(rehashes.get() > 0);
assertEquals(rehashes.get(),releases.get());
}
