{
  mem=1000 + 64 * 16;
  lruStripes=6;
  concurrency=8;
  final AtomicInteger evictCnt=new AtomicInteger();
  evictLsnr=new GridOffHeapEvictListener(){
    @Override public void onEvict(    int part,    int hash,    byte[] k,    byte[] v){
      evictCnt.incrementAndGet();
    }
    @Override public boolean removedEvicted(){
      return true;
    }
  }
;
  map=newMap();
  for (int i=0; i < 10000; i++) {
    String key=string();
    byte[] keyBytes=key.getBytes();
    byte[] valBytes=bytes(100);
    map.insert(hash(key),keyBytes,valBytes);
  }
  assertTrue(evictCnt.get() > 10);
  assertTrue("Invalid map free size [size=" + map.freeSize() + ", evictCnt="+ evictCnt+ ']',map.freeSize() >= 0);
}
