{
  try {
    startGrid();
    MockEntry e1=new MockEntry("1","1");
    MockEntry e2=new MockEntry("2","2");
    MockEntry e3=new MockEntry("3","3");
    MockEntry e4=new MockEntry("4","4");
    MockEntry e5=new MockEntry("5","5");
    FifoEvictionPolicy<String,String> p=policy();
    p.setMaxSize(3);
    p.setBatchSize(2);
    p.onEntryAccessed(false,e1);
    check(p.queue(),e1);
    p.onEntryAccessed(false,e2);
    check(p.queue(),e1,e2);
    p.onEntryAccessed(false,e3);
    check(p.queue(),e1,e2,e3);
    p.onEntryAccessed(false,e4);
    check(p.queue(),e1,e2,e3,e4);
    assertFalse(e1.isEvicted());
    assertFalse(e2.isEvicted());
    assertFalse(e3.isEvicted());
    assertFalse(e4.isEvicted());
    assertEquals(4,p.getCurrentSize());
    p.onEntryAccessed(false,e5);
    check(p.queue(),e3,e4,e5);
    assertEquals(3,p.getCurrentSize());
    assertTrue(e1.isEvicted());
    assertTrue(e2.isEvicted());
    assertFalse(e3.isEvicted());
    assertFalse(e4.isEvicted());
    assertFalse(e5.isEvicted());
    p.onEntryAccessed(false,e1=new MockEntry("1","1"));
    check(p.queue(),e3,e4,e5,e1);
    assertEquals(4,p.getCurrentSize());
    assertFalse(e3.isEvicted());
    assertFalse(e4.isEvicted());
    assertFalse(e5.isEvicted());
    assertFalse(e1.isEvicted());
    p.onEntryAccessed(false,e5);
    check(p.queue(),e3,e4,e5,e1);
    assertFalse(e3.isEvicted());
    assertFalse(e4.isEvicted());
    assertFalse(e5.isEvicted());
    assertFalse(e1.isEvicted());
    p.onEntryAccessed(false,e1);
    assertEquals(4,p.getCurrentSize());
    check(p.queue(),e3,e4,e5,e1);
    assertFalse(e3.isEvicted());
    assertFalse(e4.isEvicted());
    assertFalse(e5.isEvicted());
    assertFalse(e1.isEvicted());
    p.onEntryAccessed(true,e1);
    assertEquals(3,p.getCurrentSize());
    assertFalse(e3.isEvicted());
    assertFalse(e4.isEvicted());
    assertFalse(e5.isEvicted());
    p.onEntryAccessed(true,e4);
    assertEquals(2,p.getCurrentSize());
    assertFalse(e3.isEvicted());
    assertFalse(e5.isEvicted());
    p.onEntryAccessed(true,e5);
    assertEquals(1,p.getCurrentSize());
    assertFalse(e3.isEvicted());
    p.onEntryAccessed(true,e3);
    assertEquals(0,p.getCurrentSize());
    assertFalse(e3.isEvicted());
    info(p);
  }
  finally {
    stopAllGrids();
  }
}
