{
  final Random rnd=new Random();
  for (int i=0; i < 30; i++) {
    info("Iteration " + i);
    Object proxy=Proxy.newProxyInstance(getClass().getClassLoader(),new Class[]{ResultSet.class,Statement.class},new InvocationHandler(){
      private volatile boolean closed;
      @Override public Object invoke(      Object o,      Method method,      Object[] objects) throws Throwable {
        if ("close".equals(method.getName()))         closed=true;
 else         if ("isClosed".equals(method.getName()))         return closed;
 else         if ("next".equals(method.getName()))         return true;
        return null;
      }
    }
);
    final GridCloseableIterator<Integer> it=new TestIterator((ResultSet)proxy,(Statement)proxy);
    GridFuture<?> fut=multithreadedAsync(new Callable<Object>(){
      @Override public Object call() throws Exception {
        Thread.sleep(500 + rnd.nextInt(500));
        it.close();
        return null;
      }
    }
,1);
    while (it.hasNext())     it.next();
    fut.get();
  }
}
