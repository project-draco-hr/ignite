{
  ctx.checkSecurity(SecurityPermission.CACHE_READ);
  if (F.isEmpty(keys))   return new GridFinishedFuture<>(Collections.<K,V>emptyMap());
  if (keyCheck)   validateCacheKeys(keys);
  IgniteTxLocalAdapter tx=ctx.tm().threadLocalTx(ctx);
  final CacheOperationContext opCtx=ctx.operationContextPerCall();
  if (tx != null && !tx.implicit() && !skipTx) {
    return asyncOp(tx,new AsyncOp<Map<K,V>>(keys){
      @Override public IgniteInternalFuture<Map<K,V>> op(      IgniteTxLocalAdapter tx){
        return tx.getAllAsync(ctx,ctx.cacheKeysView(keys),deserializeBinary,skipVals,false,opCtx != null && opCtx.skipStore());
      }
    }
,opCtx);
  }
  AffinityTopologyVersion topVer=tx == null ? (canRemap ? ctx.affinity().affinityTopologyVersion() : ctx.shared().exchange().readyAffinityVersion()) : tx.topologyVersion();
  subjId=ctx.subjectIdPerCall(subjId,opCtx);
  return loadAsync(ctx.cacheKeysView(keys),opCtx == null || !opCtx.skipStore(),forcePrimary,topVer,subjId,taskName,deserializeBinary,skipVals ? null : expiryPolicy(opCtx != null ? opCtx.expiry() : null),skipVals,canRemap);
}
