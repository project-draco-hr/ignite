{
  try (IgniteCache<Integer,String> cache=grid(0).createCache(ccfg)){
    ContinuousQuery<Integer,String> qry=new ContinuousQuery<>();
    final CountDownLatch latch=new CountDownLatch(16);
    final AtomicInteger cnt=new AtomicInteger(0);
    qry.setLocalListener(new CacheEntryUpdatedListener<Integer,String>(){
      @Override public void onUpdated(      Iterable<CacheEntryEvent<? extends Integer,? extends String>> iterable) throws CacheEntryListenerException {
        for (        CacheEntryEvent<? extends Integer,? extends String> e : iterable) {
          cnt.incrementAndGet();
          latch.countDown();
        }
      }
    }
);
    qry.setRemoteFilterFactory(FactoryBuilder.factoryOf(new CacheEntryEventSerializableFilter<Integer,String>(){
      @Override public boolean evaluate(      CacheEntryEvent<? extends Integer,? extends String> e) throws CacheEntryListenerException {
        return e.getKey() % 2 == 0;
      }
    }
));
    executeQuery(cache,qry,ccfg.getAtomicityMode() == TRANSACTIONAL);
    assertTrue(latch.await(LATCH_TIMEOUT,MILLISECONDS));
    assertEquals(16,cnt.get());
  }
  finally {
    ignite(0).destroyCache(ccfg.getName());
  }
}
