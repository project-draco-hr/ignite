{
  startGrids(GRID_CNT);
  int threads=4;
  final AtomicBoolean run=new AtomicBoolean(true);
  final AtomicInteger idx=new AtomicInteger();
  final AtomicReferenceArray<Exception> arr=new AtomicReferenceArray<>(threads);
  IgniteInternalFuture<Long> fut=GridTestUtils.runMultiThreadedAsync(new Callable<Void>(){
    /** 
 * {@inheritDoc} 
 */
    @Override public Void call() throws Exception {
      int base=idx.getAndIncrement();
      try {
        int delta=0;
        while (run.get()) {
          IgniteAtomicLong cntr=ignite(0).atomicLong(ATOMIC_LONG_NAME + "-" + base+ "-"+ delta,0,true);
          for (int i=0; i < 5; i++)           queue.add(cntr.getAndIncrement());
          cntr.close();
          delta++;
        }
      }
 catch (      Exception e) {
        arr.set(base,e);
        throw e;
      }
 finally {
        info("RUNNER THREAD IS STOPPING");
      }
      return null;
    }
  }
,threads,"increment-runner");
  for (int i=0; i < RESTART_CNT; i++) {
    int restartIdx=ThreadLocalRandom.current().nextInt(GRID_CNT - 1) + 1;
    stopGrid(restartIdx);
    U.sleep(500);
    startGrid(restartIdx);
  }
  run.set(false);
  fut.get();
  for (int i=0; i < threads; i++) {
    Exception err=arr.get(i);
    if (err != null)     throw err;
  }
}
