{
  String gridCfg=props.getProperty(GRID_CONFIG_PROPERTY);
  String gridName=props.getProperty(GRID_NAME_PROPERTY);
  if (gridCfg != null) {
    try {
      ignite=G.start(gridCfg);
    }
 catch (    IgniteException e) {
      throw new CacheException(e);
    }
  }
 else   ignite=Ignition.ignite(gridName);
  String accessType=props.getProperty(DFLT_ACCESS_TYPE_PROPERTY,NONSTRICT_READ_WRITE.name());
  dfltAccessType=AccessType.valueOf(accessType);
  for (  Map.Entry<Object,Object> prop : props.entrySet()) {
    String key=prop.getKey().toString();
    if (key.startsWith(REGION_CACHE_PROPERTY)) {
      String regionName=key.substring(REGION_CACHE_PROPERTY.length());
      String cacheName=prop.getValue().toString();
      if (((IgniteKernal)ignite).cache(cacheName) == null)       throw new CacheException("Cache '" + cacheName + "' specified for region '"+ regionName+ "' "+ "is not configured.");
      regionCaches.put(regionName,cacheName);
    }
  }
  String dfltCacheName=props.getProperty(DFLT_CACHE_NAME_PROPERTY);
  if (dfltCacheName != null) {
    dfltCache=((IgniteKernal)ignite).cache(dfltCacheName);
    if (dfltCache == null)     throw new CacheException("Cache specified as default is not configured: " + dfltCacheName);
  }
  IgniteLogger log=ignite.log().getLogger(HibernateRegionFactory.class);
  if (log.isDebugEnabled())   log.debug("HibernateRegionFactory started [grid=" + gridName + ']');
}
