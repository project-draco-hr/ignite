{
  IgniteFuture<?> fut1=runMultiThreadedAsync(new Callable<Object>(){
    private final Random rnd=new Random();
    @Override public Object call() throws Exception {
      for (int i=0; i < TX_CNT; i++) {
        GridCache<Integer,String> cache=cache(rnd.nextInt(GRID_CNT));
        cache.put(rnd.nextInt(1000),"value");
      }
      return null;
    }
  }
,4,"put");
  IgniteFuture<?> fut2=runMultiThreadedAsync(new Callable<Object>(){
    private final Random rnd=new Random();
    @Override public Object call() throws Exception {
      for (int i=0; i < TX_CNT; i++) {
        GridCache<Integer,String> cache=cache(rnd.nextInt(GRID_CNT));
        cache.putIfAbsent(rnd.nextInt(1000),"value");
      }
      return null;
    }
  }
,4,"putIfAbsent");
  fut1.get();
  fut2.get();
  checkOpenedClosedCount();
}
