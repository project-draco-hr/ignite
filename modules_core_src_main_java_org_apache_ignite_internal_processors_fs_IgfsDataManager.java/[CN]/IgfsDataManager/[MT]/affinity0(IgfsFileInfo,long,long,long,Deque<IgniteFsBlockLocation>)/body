{
  long firstGrpIdx=start / grpBlockSize;
  long limitGrpIdx=(start + len + grpBlockSize - 1) / grpBlockSize;
  if (limitGrpIdx - firstGrpIdx > Integer.MAX_VALUE)   throw new IgniteFsException("Failed to get affinity (range is too wide)" + " [info=" + info + ", start="+ start+ ", len="+ len+ ']');
  if (log.isDebugEnabled())   log.debug("Mapping file region [fileInfo=" + info + ", start="+ start+ ", len="+ len+ ']');
  for (long grpIdx=firstGrpIdx; grpIdx < limitGrpIdx; grpIdx++) {
    long blockStart;
    long blockLen;
    if (grpIdx == firstGrpIdx) {
      blockStart=start % grpBlockSize;
      blockLen=Math.min(grpBlockSize - blockStart,len);
    }
 else     if (grpIdx == limitGrpIdx - 1) {
      blockStart=0;
      blockLen=(start + len - 1) % grpBlockSize + 1;
    }
 else {
      blockStart=0;
      blockLen=grpBlockSize;
    }
    IgfsBlockKey key=new IgfsBlockKey(info.id(),info.affinityKey(),info.evictExclude(),grpIdx * grpSize);
    Collection<ClusterNode> affNodes=dataCache.affinity().mapKeyToPrimaryAndBackups(key);
    if (log.isDebugEnabled())     log.debug("Mapped key to nodes [key=" + key + ", nodes="+ F.nodeIds(affNodes)+ ", blockStart="+ blockStart+ ", blockLen="+ blockLen+ ']');
    IgniteFsBlockLocation last=res.peekLast();
    if (last != null && equal(last.nodeIds(),F.viewReadOnly(affNodes,F.node2id()))) {
      res.removeLast();
      splitBlocks(last.start(),last.length() + blockLen,maxLen,affNodes,res);
    }
 else     splitBlocks(grpIdx * grpBlockSize + blockStart,blockLen,maxLen,affNodes,res);
  }
  if (log.isDebugEnabled())   log.debug("Calculated file affinity [info=" + info + ", start="+ start+ ", len="+ len+ ", res="+ res+ ']');
}
