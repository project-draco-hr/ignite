{
  for (  File f : workTokDir.listFiles()) {
    if (!f.isDirectory()) {
      if (!f.getName().equals(LOCK_FILE_NAME)) {
        if (log.isDebugEnabled())         log.debug("Unexpected file: " + f.getName());
      }
      continue;
    }
    if (f.equals(tokDir)) {
      if (log.isDebugEnabled())       log.debug("Skipping own token directory: " + tokDir.getName());
      continue;
    }
    String name=f.getName();
    int pid;
    try {
      pid=Integer.parseInt(name.substring(name.lastIndexOf('-') + 1));
    }
 catch (    NumberFormatException ignored) {
      if (log.isDebugEnabled())       log.debug("Failed to parse file name: " + name);
      continue;
    }
    if (IpcSharedMemoryUtils.alive(pid)) {
      if (log.isDebugEnabled())       log.debug("Skipping alive node: " + pid);
      continue;
    }
    if (log.isDebugEnabled())     log.debug("Possibly stale token folder: " + f);
    File[] shmemToks=f.listFiles();
    if (shmemToks == null)     return;
    int rmvCnt=0;
    try {
      for (      File f0 : shmemToks) {
        if (log.isDebugEnabled())         log.debug("Processing token file: " + f0.getName());
        if (f0.isDirectory()) {
          if (log.isDebugEnabled())           log.debug("Unexpected directory: " + f0.getName());
        }
        String[] toks=f0.getName().split("-");
        if (toks.length != 6) {
          if (log.isDebugEnabled())           log.debug("Unrecognized token file: " + f0.getName());
          continue;
        }
        int pid0;
        int size;
        try {
          pid0=Integer.parseInt(toks[4]);
          size=Integer.parseInt(toks[5]);
        }
 catch (        NumberFormatException ignored) {
          if (log.isDebugEnabled())           log.debug("Failed to parse file name: " + name);
          continue;
        }
        if (IpcSharedMemoryUtils.alive(pid0)) {
          if (log.isDebugEnabled())           log.debug("Skipping alive process: " + pid0);
          continue;
        }
        if (log.isDebugEnabled())         log.debug("Possibly stale token file: " + f0);
        IpcSharedMemoryUtils.freeSystemResources(f0.getAbsolutePath(),size);
        if (f0.delete()) {
          if (log.isDebugEnabled())           log.debug("Deleted file: " + f0.getName());
          rmvCnt++;
        }
 else         if (!f0.exists()) {
          if (log.isDebugEnabled())           log.debug("File has been concurrently deleted: " + f0.getName());
          rmvCnt++;
        }
 else         if (log.isDebugEnabled())         log.debug("Failed to delete file: " + f0.getName());
      }
    }
  finally {
      if (rmvCnt == shmemToks.length) {
        U.delete(f);
        if (log.isDebugEnabled())         log.debug("Deleted empty token directory: " + f.getName());
      }
    }
  }
}
