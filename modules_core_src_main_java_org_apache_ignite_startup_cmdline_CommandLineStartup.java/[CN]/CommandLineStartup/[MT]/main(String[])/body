{
  if (!QUITE) {
    X.println("Ignite Command Line Startup, ver. " + ACK_VER_STR);
    X.println(IgniteProduct.COPYRIGHT);
    X.println();
  }
  if (args.length > 1)   exit("Too many arguments.",true,-1);
  if (args.length > 0 && isHelp(args[0]))   exit(null,true,0);
  if (args.length > 0 && args[0].isEmpty())   exit("Empty argument.",true,1);
  if (args.length > 0 && args[0].charAt(0) == '-')   exit("Invalid arguments: " + args[0],true,-1);
  String cfg=null;
  if (args.length > 0)   cfg=args[0];
 else {
    try {
      cfg=askConfigFile();
      if (cfg == null)       exit(null,false,0);
    }
 catch (    IOException e) {
      exit("Failed to run interactive mode: " + e.getMessage(),false,-1);
    }
  }
  final String gridName;
  try {
    gridName=G.start(cfg).name();
  }
 catch (  Throwable e) {
    e.printStackTrace();
    String note="";
    if (X.hasCause(e,ClassNotFoundException.class))     note="\nNote! You may use 'USER_LIBS' environment variable to specify your classpath.";
    exit("Failed to start grid: " + e.getMessage() + note,false,-1);
    return;
  }
  final CountDownLatch latch=new CountDownLatch(1);
  G.addListener(new IgnitionListener(){
    @Override public void onStateChange(    String name,    IgniteState state){
      if (!F.eq(gridName,name))       return;
      if (state == STOPPED || state == STOPPED_ON_SEGMENTATION)       latch.countDown();
    }
  }
);
  try {
    latch.await();
  }
 catch (  InterruptedException e) {
    X.error("Start was interrupted (exiting): " + e.getMessage());
  }
  String code=System.getProperty(IGNITE_RESTART_CODE);
  if (code != null)   try {
    System.exit(Integer.parseInt(code));
  }
 catch (  NumberFormatException ignore) {
    System.exit(0);
  }
 else   System.exit(0);
}
