{
  reader.setBuffer(buf);
  if (!reader.beforeMessageRead())   return false;
  if (!super.readFrom(buf))   return false;
switch (readState) {
case 10:
    dhtVer=reader.readMessage("dhtVer");
  if (!reader.isLastRead())   return false;
readState++;
case 11:
filterFailedKeyBytes=reader.readByteArray("filterFailedKeyBytes");
if (!reader.isLastRead()) return false;
readState++;
case 12:
futId=reader.readIgniteUuid("futId");
if (!reader.isLastRead()) return false;
readState++;
case 13:
invalidParts=reader.readCollection("invalidParts",Type.INT);
if (!reader.isLastRead()) return false;
readState++;
case 14:
miniId=reader.readIgniteUuid("miniId");
if (!reader.isLastRead()) return false;
readState++;
case 15:
ownedValsBytes=reader.readCollection("ownedValsBytes",Type.BYTE_ARR);
if (!reader.isLastRead()) return false;
readState++;
case 16:
pending=reader.readCollection("pending",Type.MSG);
if (!reader.isLastRead()) return false;
readState++;
case 17:
retValBytes=reader.readByteArray("retValBytes");
if (!reader.isLastRead()) return false;
readState++;
}
return true;
}
