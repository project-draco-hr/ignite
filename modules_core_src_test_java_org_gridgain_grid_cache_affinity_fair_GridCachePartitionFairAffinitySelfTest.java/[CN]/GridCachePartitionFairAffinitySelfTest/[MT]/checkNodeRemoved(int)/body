{
  int parts=256;
  GridCacheAffinityFunction aff=new GridCachePartitionFairAffinity(parts);
  int nodesCnt=50;
  List<ClusterNode> nodes=new ArrayList<>(nodesCnt);
  List<List<ClusterNode>> prev=null;
  for (int i=0; i < nodesCnt; i++) {
    info("======================================");
    info("Assigning partitions: " + i);
    info("======================================");
    ClusterNode node=new GridTestNode(UUID.randomUUID());
    nodes.add(node);
    GridDiscoveryEvent discoEvt=new GridDiscoveryEvent(node,"",IgniteEventType.EVT_NODE_JOINED,node);
    List<List<ClusterNode>> assignment=aff.assignPartitions(new GridCacheAffinityFunctionContextImpl(nodes,prev,discoEvt,i,backups));
    info("Assigned.");
    verifyAssignment(assignment,backups,parts,nodes.size());
    prev=assignment;
  }
  info("======================================");
  info("Will remove nodes.");
  info("======================================");
  for (int i=0; i < nodesCnt - 1; i++) {
    info("======================================");
    info("Assigning partitions: " + i);
    info("======================================");
    ClusterNode rmv=nodes.remove(nodes.size() - 1);
    GridDiscoveryEvent discoEvt=new GridDiscoveryEvent(rmv,"",IgniteEventType.EVT_NODE_LEFT,rmv);
    List<List<ClusterNode>> assignment=aff.assignPartitions(new GridCacheAffinityFunctionContextImpl(nodes,prev,discoEvt,i,backups));
    info("Assigned.");
    verifyAssignment(assignment,backups,parts,nodes.size());
    prev=assignment;
  }
}
