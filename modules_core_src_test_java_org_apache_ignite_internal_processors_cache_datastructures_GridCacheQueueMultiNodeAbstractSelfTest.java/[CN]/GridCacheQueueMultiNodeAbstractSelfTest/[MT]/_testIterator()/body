{
  final String queueName=UUID.randomUUID().toString();
  info("Queue name: " + queueName);
  IgniteQueue<Integer> queue=grid(0).cache(null).dataStructures().queue(queueName,QUEUE_CAPACITY,false,true);
  assertTrue(queue.isEmpty());
  grid(0).compute().call(new AddAllJob(queueName,RETRIES));
  assertEquals(GRID_CNT * RETRIES,queue.size());
  Collection<ClusterNode> nodes=grid(0).nodes();
  for (  ClusterNode node : nodes) {
    Collection<Integer> queueElements=compute(grid(0).forNode(node)).call(new IgniteCallable<Collection<Integer>>(){
      @IgniteInstanceResource private Ignite grid;
      /** 
 * {@inheritDoc} 
 */
      @Override public Collection<Integer> call() throws Exception {
        Collection<Integer> values=new ArrayList<>();
        grid.log().info("Running job [node=" + grid.cluster().localNode().id() + ", job="+ this+ "]");
        IgniteQueue<Integer> locQueue=grid.cache(null).dataStructures().queue(queueName,QUEUE_CAPACITY,false,true);
        grid.log().info("Queue size " + locQueue.size());
        for (        Integer element : locQueue)         values.add(element);
        grid.log().info("Returning: " + values);
        return values;
      }
    }
);
    assertTrue(F.eqOrdered(queue,queueElements));
  }
  grid(0).cache(null).dataStructures().removeQueue(queueName);
}
