{
  int grids=9;
  startGrids(grids);
  try {
    Object key=12345;
    int copies=backups + 1;
    for (int i=0; i < grids; i++) {
      final Grid g=grid(i);
      GridCacheAffinity<Object> aff=affinity(g);
      List<GridTcpDiscoveryNode> top=new ArrayList<>();
      for (      GridNode node : g.cluster().nodes())       top.add((GridTcpDiscoveryNode)node);
      Collections.sort(top);
      assertEquals(grids,top.size());
      int idx=1;
      for (      GridNode n : top) {
        assertEquals(idx,n.order());
        idx++;
      }
      Collection<? extends GridNode> affNodes=nodes(aff,key);
      info("Affinity picture for grid [i=" + i + ", aff="+ U.toShortString(affNodes));
      assertEquals(copies,affNodes.size());
      Set<String> macs=new HashSet<>();
      for (      GridNode node : affNodes)       macs.add((String)node.attribute(GridNodeAttributes.ATTR_MACS));
      assertEquals(copies,macs.size());
    }
  }
  finally {
    stopAllGrids();
  }
}
