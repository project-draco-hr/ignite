{
  Ignite g0=grid(0);
  GridCache<Integer,Integer> cache0=g0.cache(null);
  int key;
  for (int i=0; ; i++) {
    if (cache0.affinity().isPrimary(g0.cluster().localNode(),i)) {
      cache0.put(i,i);
      cache0.get(i);
      key=i;
      info("Puts: " + cache0.metrics().getCachePuts());
      info("Reads: " + cache0.metrics().getCacheGets());
      info("Affinity nodes: " + U.nodes2names(cache0.affinity().mapKeyToPrimaryAndBackups(i)));
      break;
    }
  }
  for (int j=0; j < gridCount(); j++) {
    Ignite g=grid(j);
    info("Checking grid: " + g.name());
    info("Puts: " + g.cache(null).metrics().getCachePuts());
    info("Reads: " + g.cache(null).metrics().getCacheGets());
    if (g.cache(null).affinity().isPrimaryOrBackup(g.cluster().localNode(),key))     assertEquals(1,g.cache(null).metrics().getCachePuts());
 else     assertEquals(0,g.cache(null).metrics().getCachePuts());
    if (g.cache(null).affinity().isPrimary(g.cluster().localNode(),key)) {
      assertEquals(2,g.cache(null).metrics().getCacheGets());
      assertEquals(1,g.cache(null).metrics().getCacheHits());
      assertEquals(1,g.cache(null).metrics().getCacheHits());
    }
 else {
      assertEquals(0,g.cache(null).metrics().getCacheGets());
      assertEquals(0,g.cache(null).metrics().getCacheHits());
      assertEquals(0,g.cache(null).metrics().getCacheMisses());
    }
  }
}
