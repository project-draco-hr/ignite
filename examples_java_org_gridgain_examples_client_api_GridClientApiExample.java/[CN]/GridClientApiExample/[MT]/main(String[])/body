{
  try (GridClient client=createClient()){
    System.out.println(">>> Client created, current grid topology: " + client.compute().nodes());
    final UUID randNodeId=client.compute().nodes().iterator().next().nodeId();
    GridClientCompute prj=client.compute().projection(new GridClientPredicate<GridClientNode>(){
      @Override public boolean apply(      GridClientNode node){
        return node.nodeId().equals(randNodeId);
      }
    }
);
    Integer entryCnt=prj.execute(GridClientExampleTask.class.getName(),"Client example.");
    System.out.println(">>> Predicate projection : " + entryCnt + " nodes participated in task.");
    GridClientNode clntNode=prj.node(randNodeId);
    prj=prj.projection(clntNode);
    entryCnt=prj.execute(GridClientExampleTask.class.getName(),"Client example - single node.");
    System.out.println(">>> GridClientNode projection : " + entryCnt + " nodes participated in task.");
    prj=prj.projection(Collections.singleton(clntNode));
    entryCnt=prj.execute(GridClientExampleTask.class.getName(),"Client example - collection of nodes.");
    System.out.println(">>> Collection projection : " + entryCnt + " nodes participated in task.");
    GridClientLoadBalancer balancer=new GridClientRandomBalancer();
    prj=client.compute().projection(new GridClientPredicate<GridClientNode>(){
      @Override public boolean apply(      GridClientNode node){
        return node.nodeId().equals(randNodeId);
      }
    }
,balancer);
    entryCnt=prj.execute(GridClientExampleTask.class.getName(),"Client example - explicit random balancer.");
    System.out.println(">>> Predicate projection with balancer : " + entryCnt + " nodes participated in task.");
    balancer=new GridClientRoundRobinBalancer();
    prj=prj.projection(Collections.singleton(clntNode),balancer);
    entryCnt=prj.execute(GridClientExampleTask.class.getName(),"Client example - explicit roundrobin balancer.");
    System.out.println(">>> GridClientNode projection : " + entryCnt + " nodes participated in task.");
    GridClientFuture<Integer> fut=prj.executeAsync(GridClientExampleTask.class.getName(),"Client example - asynchronous execution.");
    System.out.println(">>> Execute async : " + fut.get() + " nodes participated in task.");
    Collection c=prj.nodes(Collections.singleton(randNodeId));
    System.out.println(">>> Nodes with UUID " + randNodeId + " : "+ c);
    c=prj.nodes(new GridClientPredicate<GridClientNode>(){
      @Override public boolean apply(      GridClientNode node){
        return node.nodeId().equals(randNodeId);
      }
    }
);
    System.out.println(">>> Nodes filtered with predicate : " + c);
    clntNode=prj.refreshNode(randNodeId,true,true);
    System.out.println(">>> Refreshed node : " + clntNode);
    GridClientFuture<GridClientNode> futClntNode=prj.refreshNodeAsync(randNodeId,false,false);
    System.out.println(">>> Refreshed node asynchronously : " + futClntNode.get());
    String clntAddr="127.0.0.1";
    for (    InetSocketAddress addr : clntNode.availableAddresses(GridClientProtocol.TCP))     if (addr != null)     clntAddr=addr.getAddress().getHostAddress();
    clntNode=prj.refreshNode(clntAddr,true,true);
    if (clntNode != null)     System.out.println(">>> Refreshed node by IP : " + clntNode.toString());
 else     System.err.println(">>> Failed to refresh node metrics! Please check the node is reachable by " + "making sure node has the right restTcpHost address set.");
    futClntNode=prj.refreshNodeAsync(clntAddr,false,false);
    System.out.println(">>> Refreshed node by IP asynchronously : " + futClntNode.get());
    Collection<GridClientNode> top=prj.refreshTopology(true,true);
    System.out.println(">>> Refreshed topology : " + top);
    GridClientFuture<List<GridClientNode>> topFut=prj.refreshTopologyAsync(false,false);
    System.out.println(">>> Refreshed topology asynchronously : " + topFut.get());
    try {
      Collection<String> log=prj.log(2,9);
      System.out.println(">>> First log lines:");
      for (      Object o : log.toArray())       System.out.println(o);
      System.out.println("<<< End of log.");
      GridClientFuture<List<String>> futLog=prj.logAsync(2,9);
      System.out.println(">>> First log lines fetched asynchronously:");
      for (      Object o : futLog.get().toArray())       System.out.println(o);
      System.out.println("<<< End of log.");
      log=prj.log("work/log/gridgain.log",2,9);
      System.out.println(">>> First log lines from log file work/log/gridgain.log:");
      for (      Object o : log.toArray())       System.out.println(o);
      System.out.println("<<< End of log.");
      futLog=prj.logAsync("work/log/gridgain.log",2,9);
      System.out.println(">>> First log lines fetched asynchronously:");
      for (      Object o : futLog.get().toArray())       System.out.println(o);
      System.out.println("<<< End of log.");
    }
 catch (    GridClientException e) {
      System.out.println("Log file was not found: " + e);
    }
  }
 }
