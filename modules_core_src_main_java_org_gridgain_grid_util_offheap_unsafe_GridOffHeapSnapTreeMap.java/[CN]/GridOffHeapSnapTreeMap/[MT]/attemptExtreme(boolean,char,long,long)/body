{
  while (true) {
    final long child=child(node,dir);
    if (child == 0) {
      V vo=vOpt(node);
      if (isOutdatedOVL(node,nodeOVL)) {
        return SpecialRetry;
      }
      assert(vo != null);
      return returnKey ? key(node) : new SimpleImmutableEntry<K,V>(key(node),vo);
    }
 else {
      final long childOVL=shrinkOVL(child);
      if (isShrinkingOrUnlinked(childOVL)) {
        waitUntilShrinkCompleted(child,childOVL);
        if (isOutdatedOVL(node,nodeOVL)) {
          return SpecialRetry;
        }
      }
 else       if (child != child(node,dir)) {
        if (isOutdatedOVL(node,nodeOVL)) {
          return SpecialRetry;
        }
      }
 else {
        if (isOutdatedOVL(node,nodeOVL)) {
          return SpecialRetry;
        }
        final Object vo=attemptExtreme(returnKey,dir,child,childOVL);
        if (vo != SpecialRetry) {
          return vo;
        }
      }
    }
  }
}
