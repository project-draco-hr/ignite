{
  Collection<ClusterNode> nodes=nodes();
  cctx.checkSecurity(GridSecurityPermission.CACHE_READ);
  if (nodes.isEmpty())   return new GridCacheQueryErrorFuture<>(cctx.kernalContext(),new ClusterGroupEmptyException());
  if (log.isDebugEnabled())   log.debug("Executing query [query=" + this + ", nodes="+ nodes+ ']');
  if (cctx.deploymentEnabled()) {
    try {
      cctx.deploy().registerClasses(filter,rmtReducer,rmtTransform);
      cctx.deploy().registerClasses(args);
    }
 catch (    IgniteCheckedException e) {
      return new GridCacheQueryErrorFuture<>(cctx.kernalContext(),e);
    }
  }
  if (subjId == null)   subjId=cctx.localNodeId();
  taskHash=cctx.kernalContext().job().currentTaskNameHash();
  GridCacheQueryBean bean=new GridCacheQueryBean(this,(IgniteReducer<Object,Object>)rmtReducer,(IgniteClosure<Object,Object>)rmtTransform,args);
  GridCacheQueryManager qryMgr=cctx.queries();
  boolean loc=nodes.size() == 1 && F.first(nodes).id().equals(cctx.localNodeId());
  if (type == SQL_FIELDS || type == SPI)   return (GridCacheQueryFuture<R>)(loc ? qryMgr.queryFieldsLocal(bean) : qryMgr.queryFieldsDistributed(bean,nodes));
 else   return (GridCacheQueryFuture<R>)(loc ? qryMgr.queryLocal(bean) : qryMgr.queryDistributed(bean,nodes));
}
