{
  try {
    GenericApplicationContext springCtx=new GenericApplicationContext();
    BeanFactoryPostProcessor postProc=new BeanFactoryPostProcessor(){
      @Override public void postProcessBeanFactory(      ConfigurableListableBeanFactory beanFactory) throws BeansException {
        for (        String beanName : beanFactory.getBeanDefinitionNames()) {
          BeanDefinition def=beanFactory.getBeanDefinition(beanName);
          if (def.getBeanClassName() != null) {
            try {
              Class.forName(def.getBeanClassName());
            }
 catch (            ClassNotFoundException ignored) {
              ((BeanDefinitionRegistry)beanFactory).removeBeanDefinition(beanName);
              continue;
            }
          }
          MutablePropertyValues vals=def.getPropertyValues();
          for (          PropertyValue val : new ArrayList<>(vals.getPropertyValueList())) {
            for (            String excludedProp : excludedProps) {
              if (val.getName().equals(excludedProp))               vals.removePropertyValue(val);
            }
          }
        }
      }
    }
;
    springCtx.addBeanFactoryPostProcessor(postProc);
    new XmlBeanDefinitionReader(springCtx).loadBeanDefinitions(new UrlResource(cfgUrl));
    springCtx.refresh();
    return springCtx;
  }
 catch (  BeansException e) {
    if (X.hasCause(e,ClassNotFoundException.class))     throw new IgniteCheckedException("Failed to instantiate Spring XML application context " + "(make sure all classes used in Spring configuration are present at CLASSPATH) " + "[springUrl=" + cfgUrl + ']',e);
 else     throw new IgniteCheckedException("Failed to instantiate Spring XML application context [springUrl=" + cfgUrl + ", err="+ e.getMessage()+ ']',e);
  }
}
