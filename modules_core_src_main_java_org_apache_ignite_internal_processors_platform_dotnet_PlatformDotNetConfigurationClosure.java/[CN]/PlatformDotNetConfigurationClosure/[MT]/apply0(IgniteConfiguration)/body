{
  PlatformConfiguration interopCfg=igniteCfg.getPlatformConfiguration();
  if (interopCfg != null && !(interopCfg instanceof PlatformDotNetConfiguration))   throw new IgniteException("Illegal platform configuration (must be of type " + PlatformDotNetConfiguration.class.getName() + "): "+ interopCfg.getClass().getName());
  PlatformDotNetConfiguration dotNetCfg=interopCfg != null ? (PlatformDotNetConfiguration)interopCfg : null;
  if (dotNetCfg == null)   dotNetCfg=new PlatformDotNetConfiguration();
  memMgr=new PlatformMemoryManagerImpl(gate,1024);
  PlatformLogger userLogger=null;
  if (igniteCfg.getGridLogger() instanceof PlatformLogger) {
    userLogger=(PlatformLogger)igniteCfg.getGridLogger();
    userLogger.setGateway(gate);
  }
  PlatformDotNetConfigurationEx dotNetCfg0=new PlatformDotNetConfigurationEx(dotNetCfg,gate,memMgr,userLogger);
  igniteCfg.setPlatformConfiguration(dotNetCfg0);
  Marshaller marsh=igniteCfg.getMarshaller();
  if (marsh == null) {
    igniteCfg.setMarshaller(new BinaryMarshaller());
    dotNetCfg0.warnings(Collections.singleton("Marshaller is automatically set to " + BinaryMarshaller.class.getName() + " (other nodes must have the same marshaller type)."));
  }
 else   if (!(marsh instanceof BinaryMarshaller))   throw new IgniteException("Unsupported marshaller (only " + BinaryMarshaller.class.getName() + " can be used when running Apache Ignite.NET): "+ marsh.getClass().getName());
  BinaryConfiguration bCfg=igniteCfg.getBinaryConfiguration();
  if (bCfg == null) {
    bCfg=new BinaryConfiguration();
    bCfg.setNameMapper(new BinaryBasicNameMapper(true));
    bCfg.setIdMapper(new BinaryBasicIdMapper(true));
    igniteCfg.setBinaryConfiguration(bCfg);
    dotNetCfg0.warnings(Collections.singleton("Binary configuration is automatically initiated, " + "note that binary name mapper is set to " + bCfg.getNameMapper() + " and binary ID mapper is set to "+ bCfg.getIdMapper()+ " (other nodes must have the same binary name and ID mapper types)."));
  }
 else {
    BinaryNameMapper nameMapper=bCfg.getNameMapper();
    if (nameMapper == null) {
      bCfg.setNameMapper(new BinaryBasicNameMapper(true));
      dotNetCfg0.warnings(Collections.singleton("Binary name mapper is automatically set to " + bCfg.getNameMapper() + " (other nodes must have the same binary name mapper type)."));
    }
    BinaryIdMapper idMapper=bCfg.getIdMapper();
    if (idMapper == null) {
      bCfg.setIdMapper(new BinaryBasicIdMapper(true));
      dotNetCfg0.warnings(Collections.singleton("Binary ID mapper is automatically set to " + bCfg.getIdMapper() + " (other nodes must have the same binary ID mapper type)."));
    }
  }
  String ggHome=igniteCfg.getIgniteHome();
  if (ggHome == null)   ggHome=U.getIgniteHome();
 else   U.setIgniteHome(ggHome);
  try {
    U.setWorkDirectory(igniteCfg.getWorkDirectory(),ggHome);
  }
 catch (  IgniteCheckedException e) {
    throw U.convertException(e);
  }
  prepare(igniteCfg,dotNetCfg0);
}
