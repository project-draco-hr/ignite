{
  final IgniteCache<Integer,Integer> cache=grid(0).jcache(null);
  cache.put(key,0);
  final int THREADS=5;
  final int ITERATIONS_PER_THREAD=iterations();
  GridTestUtils.runMultiThreaded(new Callable<Void>(){
    @Override public Void call() throws Exception {
      IgniteTransactions txs=ignite(0).transactions();
      for (int i=0; i < ITERATIONS_PER_THREAD && !failed; i++) {
        if (i % 500 == 0)         log.info("Iteration " + i);
        try (Transaction tx=txs.txStart(txConcurrency,REPEATABLE_READ)){
          cache.invoke(key,new IncProcessor());
          tx.commit();
        }
       }
      return null;
    }
  }
,THREADS,"transform");
  for (int i=0; i < gridCount(); i++) {
    Integer val=(Integer)grid(i).jcache(null).get(key);
    if (txConcurrency == PESSIMISTIC)     assertEquals("Unexpected value for grid " + i,(Integer)(ITERATIONS_PER_THREAD * THREADS),val);
 else     assertNotNull("Unexpected value for grid " + i,val);
  }
  if (failed) {
    for (int g=0; g < gridCount(); g++)     info("Value for cache [g=" + g + ", val="+ grid(g).jcache(null).get(key)+ ']');
    assertFalse(failed);
  }
}
