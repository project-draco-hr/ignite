{
  int duration=60 * 1000;
  final int keyCnt=5000;
  final int logFreq=50;
  final String txt="Value";
  final GridCache<Integer,H2TextValue> c=grid(0).cache(null);
  IgniteFuture<?> fut1=multithreadedAsync(new Callable(){
    @Override public Object call() throws Exception {
      for (int i=0; i < keyCnt; i++) {
        c.putx(i,new H2TextValue(txt));
        if (i % logFreq == 0)         X.println("Stored values: " + i);
      }
      return null;
    }
  }
,1);
  final CacheQuery<Map.Entry<Integer,H2TextValue>> qry=c.queries().createFullTextQuery(H2TextValue.class,txt);
  qry.enableDedup(false);
  qry.includeBackups(false);
  qry.timeout(TEST_TIMEOUT);
  final AtomicBoolean stop=new AtomicBoolean();
  IgniteFuture<?> fut2=multithreadedAsync(new Callable(){
    @Override public Object call() throws Exception {
      int cnt=0;
      while (!stop.get()) {
        Collection<Map.Entry<Integer,H2TextValue>> res=qry.execute().get();
        cnt++;
        if (cnt % logFreq == 0) {
          X.println("Result set: " + res.size());
          X.println("Executed queries: " + cnt);
        }
      }
      return null;
    }
  }
,1);
  Thread.sleep(duration);
  fut1.get();
  stop.set(true);
  fut2.get();
}
