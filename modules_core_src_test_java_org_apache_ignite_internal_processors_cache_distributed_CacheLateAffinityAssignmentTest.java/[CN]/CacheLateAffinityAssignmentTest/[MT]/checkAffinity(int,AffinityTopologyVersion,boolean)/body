{
  List<Ignite> nodes=G.allGrids();
  Map<String,List<List<ClusterNode>>> aff=new HashMap<>();
  for (  Ignite node : nodes) {
    log.info("Check node: " + node.name());
    IgniteKernal node0=(IgniteKernal)node;
    IgniteInternalFuture<?> fut=node0.context().cache().context().exchange().affinityReadyFuture(topVer);
    if (fut != null)     fut.get();
    for (    GridCacheContext cctx : node0.context().cache().context().cacheContexts()) {
      if (cctx.startTopologyVersion() != null && cctx.startTopologyVersion().compareTo(topVer) > 0)       continue;
      List<List<ClusterNode>> aff1=aff.get(cctx.name());
      List<List<ClusterNode>> aff2=cctx.affinity().assignments(topVer);
      if (aff1 == null)       aff.put(cctx.name(),aff2);
 else       assertAffinity(aff1,aff2,node,cctx.name(),topVer);
      if (expIdeal) {
        List<List<ClusterNode>> ideal=idealAssignment(topVer,cctx.cacheId());
        assertAffinity(ideal,aff2,node,cctx.name(),topVer);
        Affinity<Object> cacheAff=node.affinity(cctx.name());
        for (int i=0; i < 10; i++) {
          int part=cacheAff.partition(i);
          List<ClusterNode> partNodes=ideal.get(part);
          if (partNodes.isEmpty()) {
            try {
              ClusterNode primary=cacheAff.mapKeyToNode(i);
              fail();
            }
 catch (            IgniteException ignore) {
            }
          }
 else {
            ClusterNode primary=cacheAff.mapKeyToNode(i);
            assertEquals(primary,partNodes.get(0));
          }
        }
        for (int p=0; p < ideal.size(); p++) {
          List<ClusterNode> exp=ideal.get(p);
          Collection<ClusterNode> partNodes=cacheAff.mapPartitionToPrimaryAndBackups(p);
          assertEqualsCollections(exp,partNodes);
        }
      }
    }
  }
  assertEquals(expNodes,nodes.size());
  if (!skipCheckOrder)   checkOrderCounters(expNodes,topVer);
  return aff;
}
