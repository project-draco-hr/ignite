{
  Map<String,DataStructureInfo> dsMap=utilityCache.get(DATA_STRUCTURES_KEY);
  if (!create && (dsMap == null || !dsMap.containsKey(dsInfo.name)))   return null;
  IgniteCheckedException err=validateDataStructure(dsMap,dsInfo,create);
  if (err != null)   throw err;
  final GridCacheInternalKey key=new GridCacheInternalKeyImpl(dsInfo.name);
  T dataStructure=cast(this.dsMap.get(key),cls);
  if (dataStructure != null)   return dataStructure;
  while (true) {
    try {
      if (!create)       return c.applyx();
      try (IgniteInternalTx tx=utilityCache.txStartEx(PESSIMISTIC,REPEATABLE_READ)){
        err=utilityCache.invoke(DATA_STRUCTURES_KEY,new AddAtomicProcessor(dsInfo)).get();
        if (err != null)         throw err;
        dataStructure=c.applyx();
        tx.commit();
        return dataStructure;
      }
     }
 catch (    IgniteTxRollbackCheckedException ignore) {
    }
catch (    IgniteCheckedException e) {
      ClusterTopologyCheckedException topErr=e.getCause(ClusterTopologyCheckedException.class);
      if (topErr == null)       throw e;
      IgniteInternalFuture<?> fut=topErr.retryReadyFuture();
      if (fut != null)       fut.get();
    }
  }
}
