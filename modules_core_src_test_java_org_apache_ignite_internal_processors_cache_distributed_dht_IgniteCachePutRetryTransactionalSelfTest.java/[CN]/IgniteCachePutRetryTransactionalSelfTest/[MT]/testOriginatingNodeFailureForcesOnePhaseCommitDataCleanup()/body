{
  ignite(0).createCache(cacheConfiguration(TestMemoryMode.HEAP,false));
  final AtomicBoolean finished=new AtomicBoolean();
  final int keysCnt=keysCount();
  IgniteInternalFuture<Object> fut=runAsync(new Callable<Object>(){
    @Override public Object call() throws Exception {
      Random rnd=new Random();
      while (!finished.get()) {
        stopGrid(0);
        U.sleep(300);
        startGrid(0);
        if (rnd.nextBoolean())         awaitPartitionMapExchange();
      }
      return null;
    }
  }
);
  IgniteInternalFuture<Object> fut2=runAsync(new Callable<Object>(){
    @Override public Object call() throws Exception {
      int iter=0;
      while (!finished.get()) {
        try {
          IgniteCache<Integer,Integer> cache=ignite(0).cache(null);
          Integer val=++iter;
          for (int i=0; i < keysCnt; i++)           cache.invoke(i,new SetEntryProcessor(val));
        }
 catch (        Exception e) {
        }
      }
      return null;
    }
  }
);
  try {
    U.sleep(DURATION);
  }
  finally {
    finished.set(true);
    fut.get();
    fut2.get();
  }
  checkOnePhaseCommitReturnValuesCleaned();
}
