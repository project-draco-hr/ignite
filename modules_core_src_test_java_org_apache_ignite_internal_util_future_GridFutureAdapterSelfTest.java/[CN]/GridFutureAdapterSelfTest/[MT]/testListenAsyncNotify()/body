{
  GridTestKernalContext ctx=new GridTestKernalContext(log);
  ctx.config().setExecutorService(Executors.newFixedThreadPool(1));
  ctx.config().setSystemExecutorService(Executors.newFixedThreadPool(1));
  ctx.add(new GridClosureProcessor(ctx));
  ctx.start();
  try {
    GridFutureAdapter<String> fut=new GridFutureAdapter<>(ctx,false);
    int lsnrCnt=10;
    final CountDownLatch latch=new CountDownLatch(lsnrCnt);
    final Thread runThread=Thread.currentThread();
    final AtomicReference<Exception> err=new AtomicReference<>();
    for (int i=0; i < lsnrCnt; i++) {
      fut.listenAsync(new CI1<IgniteInternalFuture<String>>(){
        @Override public void apply(        IgniteInternalFuture<String> t){
          if (Thread.currentThread() == runThread)           err.compareAndSet(null,new Exception("Wrong notification thread: " + Thread.currentThread()));
          latch.countDown();
        }
      }
);
    }
    fut.onDone();
    latch.await();
    if (err.get() != null)     throw err.get();
    final CountDownLatch doneLatch=new CountDownLatch(1);
    err.set(null);
    fut.listenAsync(new CI1<IgniteInternalFuture<String>>(){
      @Override public void apply(      IgniteInternalFuture<String> t){
        if (Thread.currentThread() == runThread)         err.compareAndSet(null,new Exception("Wrong notification thread: " + Thread.currentThread()));
        doneLatch.countDown();
      }
    }
);
    doneLatch.await();
    if (err.get() != null)     throw err.get();
  }
  finally {
    ctx.stop(false);
  }
}
