{
  A.notNull(addr,"addr");
  A.notNull(lsnr,"lsnr");
  A.notNull(log,"log");
  A.notNull(order,"order");
  A.ensure(port == -1 || (port > 0 && port < 0xffff),"port");
  A.ensure(selectorCnt > 0,"selectorCnt");
  A.ensure(sockRcvBuf >= 0,"sockRcvBuf");
  A.ensure(sockSndBuf >= 0,"sockSndBuf");
  A.ensure(sndQueueLimit >= 0,"sndQueueLimit");
  this.log=log;
  this.directBuf=directBuf;
  this.order=order;
  this.tcpNoDelay=tcpNoDelay;
  this.sockRcvBuf=sockRcvBuf;
  this.sockSndBuf=sockSndBuf;
  this.sndQueueLimit=sndQueueLimit;
  filterChain=new GridNioFilterChain<>(log,lsnr,new HeadFilter(),filters);
  if (port != -1) {
    locAddr=new InetSocketAddress(addr,port);
    Selector acceptSelector=createSelector(locAddr);
    acceptThread=new GridThread(new GridNioAcceptWorker(gridName,"nio-acceptor",log,acceptSelector));
  }
 else {
    locAddr=null;
    acceptThread=null;
  }
  clientWorkers=new ArrayList<>(selectorCnt);
  clientThreads=new GridThread[selectorCnt];
  for (int i=0; i < selectorCnt; i++) {
    AbstractNioClientWorker worker=directMode ? new DirectNioClientWorker(i,gridName,"grid-nio-worker-" + i,log) : new ByteBufferNioClientWorker(i,gridName,"grid-nio-worker-" + i,log);
    clientWorkers.add(worker);
    clientThreads[i]=new GridThread(worker);
  }
  this.directMode=directMode;
  this.metricsLsnr=metricsLsnr;
  this.msgWriter=msgWriter;
}
