{
  GridCacheConsistentHashAffinityFunction aff=new GridCacheConsistentHashAffinityFunction();
  getTestResources().inject(aff);
  aff.setHashIdResolver(new GridCacheAffinityNodeIdHashResolver());
  List<GridNode> nodes=new ArrayList<>();
  nodes.add(createNode("000ea4cd-f449-4dcb-869a-5317c63bd619",50));
  nodes.add(createNode("010ea4cd-f449-4dcb-869a-5317c63bd62a",60));
  nodes.add(createNode("0209ec54-ff53-4fdb-8239-5a3ac1fb31bd",70));
  nodes.add(createNode("0309ec54-ff53-4fdb-8239-5a3ac1fb31ef",80));
  nodes.add(createNode("040c9b94-02ae-45a6-9d5c-a066dbdf2636",90));
  nodes.add(createNode("050c9b94-02ae-45a6-9d5c-a066dbdf2747",100));
  nodes.add(createNode("0601f916-4357-4cfe-a7df-49d4721690bf",110));
  nodes.add(createNode("0702f916-4357-4cfe-a7df-49d4721691c0",120));
  Map<Object,Integer> data=new LinkedHashMap<>();
  data.put("",4);
  data.put("asdf",4);
  data.put("224ea4cd-f449-4dcb-869a-5317c63bd619",5);
  data.put("fdc9ec54-ff53-4fdb-8239-5a3ac1fb31bd",2);
  data.put("0f9c9b94-02ae-45a6-9d5c-a066dbdf2636",2);
  data.put("d8f1f916-4357-4cfe-a7df-49d4721690bf",7);
  data.put("c77ffeae-78a1-4ee6-a0fd-8d197a794412",3);
  data.put("35de9f21-3c9b-4f4a-a7d5-3e2c6cb01564",1);
  data.put("d67eb652-4e76-47fb-ad4e-cd902d9b868a",7);
  data.put(0,4);
  data.put(1,7);
  data.put(12,5);
  data.put(123,6);
  data.put(1234,4);
  data.put(12345,6);
  data.put(123456,6);
  data.put(1234567,6);
  data.put(12345678,0);
  data.put(123456789,7);
  data.put(1234567890,7);
  data.put(1234567890L,7);
  data.put(12345678901L,2);
  data.put(123456789012L,1);
  data.put(1234567890123L,0);
  data.put(12345678901234L,1);
  data.put(123456789012345L,6);
  data.put(1234567890123456L,7);
  data.put(-23456789012345L,4);
  data.put(-2345678901234L,1);
  data.put(-234567890123L,5);
  data.put(-23456789012L,5);
  data.put(-2345678901L,7);
  data.put(-234567890L,4);
  data.put(-234567890,7);
  data.put(-23456789,7);
  data.put(-2345678,0);
  data.put(-234567,6);
  data.put(-23456,6);
  data.put(-2345,6);
  data.put(-234,7);
  data.put(-23,5);
  data.put(-2,4);
  data.put(0x80000000,4);
  data.put(0x7fffffff,7);
  data.put(0x8000000000000000L,4);
  data.put(0x7fffffffffffffffL,4);
  data.put(+1.1,3);
  data.put(-10.01,4);
  data.put(+100.001,4);
  data.put(-1000.0001,4);
  data.put(+1.7976931348623157E+308,6);
  data.put(-1.7976931348623157E+308,6);
  data.put(+4.9E-324,7);
  data.put(-4.9E-324,7);
  boolean ok=true;
  for (  Map.Entry<Object,Integer> entry : data.entrySet()) {
    int part=aff.partition(entry.getKey());
    Collection<GridNode> affNodes=aff.nodes(part,nodes,1);
    UUID act=F.<GridNode>first(affNodes).id();
    UUID exp=nodes.get(entry.getValue()).id();
    if (!exp.equals(act)) {
      ok=false;
      info("Failed to validate affinity for key '" + entry.getKey() + "' [expected="+ exp+ ", actual="+ act+ ".");
    }
  }
  if (ok)   return;
  fail("Server partitioned affinity validation fails.");
}
