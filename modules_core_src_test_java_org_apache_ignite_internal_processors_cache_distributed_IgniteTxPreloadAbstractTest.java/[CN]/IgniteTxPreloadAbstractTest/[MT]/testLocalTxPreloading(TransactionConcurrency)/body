{
  Map<String,Integer> map=new HashMap<>();
  for (int i=0; i < 10000; i++)   map.put(String.valueOf(i),0);
  IgniteCache<String,Integer> cache0=jcache(0);
  cache0.putAll(map);
  final String TX_KEY="9000";
  int expVal=0;
  for (int i=1; i < GRID_CNT; i++) {
    assertEquals((Integer)expVal,cache0.get(TX_KEY));
    startGrid(i);
    IgniteCache<String,Integer> cache=jcache(i);
    IgniteTransactions txs=ignite(i).transactions();
    try (Transaction tx=txs.txStart(txConcurrency,TransactionIsolation.READ_COMMITTED)){
      cache.invoke(TX_KEY,new EntryProcessor<String,Integer,Void>(){
        @Override public Void process(        MutableEntry<String,Integer> e,        Object... args){
          Integer val=e.getValue();
          if (val == null) {
            keyNotLoaded=true;
            e.setValue(1);
            return null;
          }
          e.setValue(val + 1);
          return null;
        }
      }
);
      tx.commit();
    }
     assertFalse(keyNotLoaded);
    expVal++;
    assertEquals((Integer)expVal,cache.get(TX_KEY));
  }
  for (int i=0; i < GRID_CNT; i++)   assertEquals("Unexpected value for cache " + i,(Integer)expVal,jcache(i).get(TX_KEY));
}
