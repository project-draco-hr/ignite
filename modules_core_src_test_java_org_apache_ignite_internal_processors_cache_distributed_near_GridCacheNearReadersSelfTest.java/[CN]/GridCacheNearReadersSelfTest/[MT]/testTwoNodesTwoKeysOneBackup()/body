{
  aff.backups(1);
  grids=2;
  aff.partitions(grids);
  startGrids();
  ClusterNode n1=F.first(aff.nodes(aff.partition(1),grid(0).cluster().nodes()));
  ClusterNode n2=F.first(aff.nodes(aff.partition(2),grid(0).cluster().nodes()));
  assertNotNull(n1);
  assertNotNull(n2);
  assertNotSame(n1,n2);
  assertFalse("Nodes cannot be equal: " + n1,n1.equals(n2));
  Ignite g1=grid(n1.id());
  Ignite g2=grid(n2.id());
  awaitPartitionMapExchange();
  GridCacheContext ctx=((IgniteKernal)g1).internalCache(null).context();
  List<KeyCacheObject> cacheKeys=F.asList(ctx.toCacheKeyObject(1),ctx.toCacheKeyObject(2));
  ((IgniteKernal)g1).internalCache(null).preloader().request(cacheKeys,new AffinityTopologyVersion(2)).get();
  ((IgniteKernal)g2).internalCache(null).preloader().request(cacheKeys,new AffinityTopologyVersion(2)).get();
  IgniteCache<Integer,String> cache1=g1.jcache(null);
  IgniteCache<Integer,String> cache2=g2.jcache(null);
  assertEquals(g1.affinity(null).mapKeyToNode(1),g1.cluster().localNode());
  assertFalse(g1.affinity(null).mapKeyToNode(2).equals(g1.cluster().localNode()));
  assertEquals(g1.affinity(null).mapKeyToNode(2),g2.cluster().localNode());
  assertFalse(g2.affinity(null).mapKeyToNode(1).equals(g2.cluster().localNode()));
  assertNull(cache1.getAndPut(1,"v1"));
  assertTrue(cache1.containsKey(1));
  assertTrue(cache2.containsKey(1));
  assertEquals("v1",near(cache1).peek(1));
  assertEquals("v1",near(cache2).peek(1));
  assertEquals("v1",dht(cache1).peek(1));
  assertEquals("v1",dht(cache2).peek(1));
  assertNull(near(cache1).peekNearOnly(1));
  assertNull(near(cache2).peekNearOnly(1));
  GridDhtCacheEntry e1=(GridDhtCacheEntry)dht(cache1).entryEx(1);
  assertNull(cache1.getAndPut(2,"v2"));
  assertTrue(cache1.containsKey(2));
  assertTrue(cache2.containsKey(2));
  assertEquals("v2",near(cache1).peek(2));
  assertEquals("v2",near(cache2).peek(2));
  assertEquals("v2",dht(cache1).peek(2));
  assertEquals("v2",dht(cache2).peek(2));
  assertNull(near(cache1).peekNearOnly(2));
  assertNull(near(cache2).peekNearOnly(2));
  GridDhtCacheEntry c2e2=(GridDhtCacheEntry)dht(cache2).entryEx(2);
  assertFalse(c2e2.readers().contains(n1.id()));
  assertFalse(e1.readers().contains(n2.id()));
  assertEquals("v1",cache2.get(1));
  assertNull(near(cache2).peekNearOnly(1));
  assertFalse(e1.readers().contains(n2.id()));
  cache2.localEvict(Collections.singleton(1));
  assertNull(near(cache2).peekNearOnly(1));
  assertEquals("v1",dht(cache2).peek(1));
  assertEquals("v1",cache1.getAndPut(1,"z1"));
  assertFalse(e1.readers().contains(n2.id()));
  assertNull(near(cache2).peekNearOnly(1));
  assertEquals("z1",dht(cache2).peek(1));
}
