{
  aff.backups(0);
  grids=2;
  aff.partitions(grids);
  startGrids();
  ClusterNode n1=F.first(aff.nodes(aff.partition(1),grid(0).cluster().nodes()));
  ClusterNode n2=F.first(aff.nodes(aff.partition(2),grid(0).cluster().nodes()));
  assertNotNull(n1);
  assertNotNull(n2);
  assertNotSame(n1,n2);
  assertFalse("Nodes cannot be equal: " + n1,n1.equals(n2));
  Ignite g1=grid(n1.id());
  Ignite g2=grid(n2.id());
  IgniteCache<Integer,String> cache1=g1.cache(null);
  IgniteCache<Integer,String> cache2=g2.cache(null);
  assertNull(cache1.getAndPut(1,"v1"));
  assertNull(cache1.getAndPut(2,"v2"));
  GridDhtCacheEntry e1=(GridDhtCacheEntry)dht(cache1).entryEx(1);
  GridDhtCacheEntry e2=(GridDhtCacheEntry)dht(cache2).entryEx(2);
  assertNotNull(e1.readers());
  assertTrue(cache1.containsKey(1));
  assertTrue(cache1.containsKey(2));
  assertNotNull(nearPeek(cache1,1));
  assertNotNull(nearPeek(cache1,2));
  assertNotNull(dhtPeek(cache1,1));
  assertNull(dhtPeek(cache1,2));
  assertNull(nearPeek(cache2,1));
  assertNotNull(dhtPeek(cache2,2));
  assertTrue(e2.readers().contains(n1.id()));
  assertFalse(e1.readers().contains(n2.id()));
  assertEquals("v1",cache2.get(1));
  assertNotNull(nearPeek(cache2,1));
  assertTrue(e1.readers().contains(n2.id()));
  cache2.localEvict(Collections.singleton(1));
  assertNull(nearPeek(cache2,1));
  assertNull(dhtPeek(cache2,1));
  assertTrue(e1.readers().contains(n2.id()));
  assertNotNull(cache1.getAndPut(1,"z1"));
  assertFalse(e1.readers().contains(n2.id()));
}
