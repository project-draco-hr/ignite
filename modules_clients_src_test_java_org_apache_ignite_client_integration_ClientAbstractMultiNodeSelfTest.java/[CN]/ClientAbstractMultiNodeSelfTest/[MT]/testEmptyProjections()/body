{
  final GridClientCompute dflt=client.compute();
  Collection<? extends GridClientNode> nodes=dflt.nodes();
  assertEquals(NODES_CNT,nodes.size());
  Iterator<? extends GridClientNode> iter=nodes.iterator();
  final GridClientCompute singleNodePrj=dflt.projection(Collections.singletonList(iter.next()));
  final GridClientNode second=iter.next();
  final GridClientPredicate<GridClientNode> noneFilter=new GridClientPredicate<GridClientNode>(){
    @Override public boolean apply(    GridClientNode node){
      return false;
    }
  }
;
  final GridClientPredicate<GridClientNode> targetFilter=new GridClientPredicate<GridClientNode>(){
    @Override public boolean apply(    GridClientNode node){
      return node.nodeId().equals(second.nodeId());
    }
  }
;
  GridTestUtils.assertThrows(log(),new Callable<Object>(){
    @Override public Object call() throws Exception {
      return dflt.projection(noneFilter).log(-1,-1);
    }
  }
,GridServerUnreachableException.class,null);
  GridTestUtils.assertThrows(log(),new Callable<Object>(){
    @Override public Object call() throws Exception {
      return singleNodePrj.projection(second);
    }
  }
,GridClientException.class,null);
  GridTestUtils.assertThrows(log(),new Callable<Object>(){
    @Override public Object call() throws Exception {
      return singleNodePrj.projection(targetFilter);
    }
  }
,GridClientException.class,null);
}
