{
  for (int k=0; k < 10; k++) {
    log.info("Iteration: " + k);
    clientFlagGlobal=false;
    final int START_NODES=5;
    final int JOIN_NODES=5;
    startGrids(START_NODES);
    ignite(0).createCache(new CacheConfiguration<>());
    final AtomicInteger startIdx=new AtomicInteger(START_NODES);
    final CyclicBarrier barrier=new CyclicBarrier(JOIN_NODES + 1);
    clientFlagGlobal=true;
    IgniteInternalFuture<?> fut=GridTestUtils.runMultiThreadedAsync(new Callable<Object>(){
      @Override public Object call() throws Exception {
        int idx=startIdx.getAndIncrement();
        Thread.currentThread().setName("start-thread-" + idx);
        barrier.await();
        Ignite ignite=startGrid(idx);
        assertTrue(ignite.configuration().isClientMode());
        log.info("Started node: " + ignite.name());
        IgniteCache<Object,Object> cache=ignite.getOrCreateCache((String)null);
        for (int i=0; i < 10; i++) {
          ContinuousQuery<Object,Object> qry=new ContinuousQuery<>();
          qry.setLocalListener(new CacheEntryUpdatedListener<Object,Object>(){
            @Override public void onUpdated(            Iterable<CacheEntryEvent<?,?>> evts){
            }
          }
);
          cache.query(qry);
        }
        return null;
      }
    }
,JOIN_NODES,"start-thread");
    barrier.await();
    U.sleep(ThreadLocalRandom.current().nextInt(100,500));
    for (int i=0; i < START_NODES - 1; i++) {
      GridTestUtils.invoke(ignite(i).configuration().getDiscoverySpi(),"simulateNodeFailure");
      stopGrid(i);
    }
    fut.get();
    stopAllGrids();
  }
}
