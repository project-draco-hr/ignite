{
  clientFlagGlobal=false;
  startGrids(GRID_CNT);
  final CyclicBarrier barrier=new CyclicBarrier(GRID_CNT + 4);
  final AtomicInteger startIdx=new AtomicInteger(GRID_CNT);
  IgniteInternalFuture<?> fut=GridTestUtils.runMultiThreadedAsync(new Callable<Object>(){
    @Override public Object call() throws Exception {
      barrier.await();
      Ignite ignite=startGrid(startIdx.getAndIncrement());
      assertFalse(ignite.configuration().isClientMode());
      log.info("Started node: " + ignite.name());
      return null;
    }
  }
,GRID_CNT + 3,"start-thread");
  barrier.await();
  U.sleep(ThreadLocalRandom.current().nextInt(10,100));
  for (int i=0; i < GRID_CNT; i++)   stopGrid(i);
  fut.get();
}
