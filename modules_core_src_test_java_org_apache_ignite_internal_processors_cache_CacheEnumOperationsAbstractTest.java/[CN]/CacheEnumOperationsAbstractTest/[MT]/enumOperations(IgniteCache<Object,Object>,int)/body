{
  assertNull(cache.get(key));
  assertFalse(cache.replace(key,TestEnum.VAL1));
  assertTrue(cache.putIfAbsent(key,TestEnum.VAL1));
  assertEquals(TestEnum.VAL1,cache.get(key));
  assertBinaryEnum(cache,key,TestEnum.VAL1);
  assertFalse(cache.putIfAbsent(key,TestEnum.VAL2));
  assertEquals(TestEnum.VAL1,cache.get(key));
  assertBinaryEnum(cache,key,TestEnum.VAL1);
  assertTrue(cache.replace(key,TestEnum.VAL2));
  assertEquals(TestEnum.VAL2,cache.get(key));
  assertBinaryEnum(cache,key,TestEnum.VAL2);
  assertFalse(cache.replace(key,TestEnum.VAL1,TestEnum.VAL3));
  assertEquals(TestEnum.VAL2,cache.get(key));
  assertBinaryEnum(cache,key,TestEnum.VAL2);
  assertTrue(cache.replace(key,TestEnum.VAL2,TestEnum.VAL3));
  assertEquals(TestEnum.VAL3,cache.get(key));
  assertBinaryEnum(cache,key,TestEnum.VAL3);
  assertEquals(TestEnum.VAL3,cache.getAndPut(key,TestEnum.VAL1));
  assertEquals(TestEnum.VAL1,cache.get(key));
  assertBinaryEnum(cache,key,TestEnum.VAL1);
  assertEquals(TestEnum.VAL1,cache.invoke(key,new EnumProcessor(TestEnum.VAL2,TestEnum.VAL1)));
  assertEquals(TestEnum.VAL2,cache.get(key));
  assertBinaryEnum(cache,key,TestEnum.VAL2);
  assertEquals(TestEnum.VAL2,cache.getAndReplace(key,TestEnum.VAL3));
  assertEquals(TestEnum.VAL3,cache.get(key));
  assertBinaryEnum(cache,key,TestEnum.VAL3);
  assertEquals(TestEnum.VAL3,cache.getAndPutIfAbsent(key,TestEnum.VAL1));
  assertEquals(TestEnum.VAL3,cache.get(key));
  assertBinaryEnum(cache,key,TestEnum.VAL3);
  cache.put(key,TestEnum.VAL1);
  assertEquals(TestEnum.VAL1,cache.get(key));
  assertBinaryEnum(cache,key,TestEnum.VAL1);
  assertEquals(TestEnum.VAL1,cache.getAndRemove(key));
  assertNull(cache.get(key));
  assertFalse(cache.replace(key,TestEnum.VAL2,TestEnum.VAL3));
  assertNull(cache.getAndPutIfAbsent(key,TestEnum.VAL1));
  assertEquals(TestEnum.VAL1,cache.get(key));
  assertBinaryEnum(cache,key,TestEnum.VAL1);
}
