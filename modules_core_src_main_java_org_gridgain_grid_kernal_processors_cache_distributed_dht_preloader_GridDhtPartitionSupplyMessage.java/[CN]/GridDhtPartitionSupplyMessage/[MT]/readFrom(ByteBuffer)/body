{
  commState.setBuffer(buf);
  if (!super.readFrom(buf))   return false;
switch (commState.idx) {
case 3:
    if (buf.remaining() < 1)     return false;
  ack=commState.getBoolean(null);
commState.idx++;
case 4:
byte[] infoBytes0=commState.getByteArray(null);
if (infoBytes0 == BYTE_ARR_NOT_READ) return false;
infoBytes=infoBytes0;
commState.idx++;
case 5:
if (commState.readSize == -1) {
if (buf.remaining() < 4) return false;
commState.readSize=commState.getInt(null);
}
if (commState.readSize >= 0) {
if (last == null) last=new HashSet<>(commState.readSize);
for (int i=commState.readItems; i < commState.readSize; i++) {
if (buf.remaining() < 4) return false;
int _val=commState.getInt(null);
last.add((Integer)_val);
commState.readItems++;
}
}
commState.readSize=-1;
commState.readItems=0;
commState.idx++;
case 6:
if (commState.readSize == -1) {
if (buf.remaining() < 4) return false;
commState.readSize=commState.getInt(null);
}
if (commState.readSize >= 0) {
if (missed == null) missed=new HashSet<>(commState.readSize);
for (int i=commState.readItems; i < commState.readSize; i++) {
if (buf.remaining() < 4) return false;
int _val=commState.getInt(null);
missed.add((Integer)_val);
commState.readItems++;
}
}
commState.readSize=-1;
commState.readItems=0;
commState.idx++;
case 7:
if (buf.remaining() < 8) return false;
updateSeq=commState.getLong(null);
commState.idx++;
case 8:
if (buf.remaining() < 4) return false;
workerId=commState.getInt(null);
commState.idx++;
}
return true;
}
