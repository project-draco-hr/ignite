{
  ByteArrayInputStream in=new ByteArrayInputStream(bytes);
  ObjectWrapper msg=ObjectWrapper.parseFrom(in);
switch (msg.getType()) {
case CACHE_REQUEST:
{
      ProtoRequest req=ProtoRequest.parseFrom(msg.getBinary());
      ProtoCacheRequest reqBean=ProtoCacheRequest.parseFrom(req.getBody());
      GridClientCacheRequest res=new GridClientCacheRequest(cacheOpFromProtobuf(reqBean.getOperation()));
      fillClientMessage(res,req);
      if (reqBean.hasCacheName())       res.cacheName(reqBean.getCacheName());
      if (reqBean.hasKey())       res.key(unwrapObject(reqBean.getKey()));
      if (reqBean.hasValue())       res.value(unwrapObject(reqBean.getValue()));
      if (reqBean.hasValue2())       res.value2(unwrapObject(reqBean.getValue2()));
      if (reqBean.hasCacheFlagsOn())       res.cacheFlagsOn(reqBean.getCacheFlagsOn());
      res.values(unwrapMap(reqBean.getValues()));
      return (T)res;
    }
case TASK_REQUEST:
{
    ProtoRequest req=ProtoRequest.parseFrom(msg.getBinary());
    ProtoTaskRequest reqBean=ProtoTaskRequest.parseFrom(req.getBody());
    GridClientTaskRequest res=new GridClientTaskRequest();
    fillClientMessage(res,req);
    res.taskName(reqBean.getTaskName());
    res.argument(unwrapObject(reqBean.getArgument()));
    return (T)res;
  }
case LOG_REQUEST:
{
  ProtoRequest req=ProtoRequest.parseFrom(msg.getBinary());
  ProtoLogRequest reqBean=ProtoLogRequest.parseFrom(req.getBody());
  GridClientLogRequest res=new GridClientLogRequest();
  fillClientMessage(res,req);
  if (reqBean.hasPath())   res.path(reqBean.getPath());
  res.from(reqBean.getFrom());
  res.to(reqBean.getTo());
  return (T)res;
}
case TOPOLOGY_REQUEST:
{
ProtoRequest req=ProtoRequest.parseFrom(msg.getBinary());
ProtoTopologyRequest reqBean=ProtoTopologyRequest.parseFrom(req.getBody());
GridClientTopologyRequest res=new GridClientTopologyRequest();
fillClientMessage(res,req);
if (reqBean.hasNodeId()) res.nodeId(java.util.UUID.fromString(reqBean.getNodeId()));
if (reqBean.hasNodeIp()) res.nodeIp(reqBean.getNodeIp());
res.includeAttributes(reqBean.getIncludeAttributes());
res.includeMetrics(reqBean.getIncludeMetrics());
return (T)res;
}
case AUTH_REQUEST:
{
ProtoRequest req=ProtoRequest.parseFrom(msg.getBinary());
ProtoAuthenticationRequest reqBean=ProtoAuthenticationRequest.parseFrom(req.getBody());
GridClientAuthenticationRequest res=new GridClientAuthenticationRequest();
fillClientMessage(res,req);
res.credentials(unwrapObject(reqBean.getCredentials()));
return (T)res;
}
case RESPONSE:
{
ProtoResponse resBean=ProtoResponse.parseFrom(msg.getBinary());
GridClientResponse res=new GridClientResponse();
if (resBean.hasSessionToken()) res.sessionToken(resBean.getSessionToken().toByteArray());
res.successStatus(resBean.getStatus());
if (resBean.hasErrorMessage()) res.errorMessage(resBean.getErrorMessage());
if (resBean.hasResultBean()) res.result(unwrapObject(resBean.getResultBean()));
return (T)res;
}
default :
throw new IOException("Failed to unmarshal message (invalid message type was received): " + msg.getType());
}
}
