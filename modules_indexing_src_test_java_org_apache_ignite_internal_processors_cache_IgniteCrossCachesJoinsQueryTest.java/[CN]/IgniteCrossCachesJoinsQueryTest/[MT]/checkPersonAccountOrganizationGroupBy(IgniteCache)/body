{
  qry="checkPersonAccountOrganizationGroupBy";
  SqlFieldsQuery q=new SqlFieldsQuery("select max(count(a.id)) " + "from " + "\"" + PERSON_CACHE_NAME + "\".Person p "+ "\""+ ORG_CACHE_NAME+ "\".Organization o "+ "\""+ ACC_CACHE_NAME+ "\".Account a "+ "where p.id = a.personId and p.orgStrId = o.strId "+ "group by org.id "+ "having o.id = ?");
  q.setDistributedJoins(distributedJoins());
  for (  Map.Entry<Integer,Integer> e : data.accountsPerPerson.entrySet()) {
    Integer personId=e.getKey();
    Integer cnt=e.getValue();
    q.setArgs(personId);
    List<List<?>> res=cache.query(q).getAll();
    String errMsg="Expected data [personId=" + personId + ", cnt="+ cnt+ ", data="+ data+ "]";
    if (cnt > 0) {
      assertEquals(errMsg,1,res.size());
      assertEquals(errMsg,1,res.get(0).size());
      assertEquals(errMsg,(long)cnt,res.get(0).get(0));
    }
 else     assertEquals(errMsg,0,res.size());
  }
}
