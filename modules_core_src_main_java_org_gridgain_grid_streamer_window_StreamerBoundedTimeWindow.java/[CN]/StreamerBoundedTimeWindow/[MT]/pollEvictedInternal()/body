{
  WindowHolder tup=ref.get();
  AtomicInteger size=tup.size();
  GridConcurrentSkipListSet<Holder<E>> evtsQueue=tup.collection();
  long now=U.currentTimeMillis();
  while (true) {
    int curSize=size.get();
    if (maxSize > 0 && curSize > maxSize) {
      if (size.compareAndSet(curSize,curSize - 1)) {
        Holder hldr=evtsQueue.pollFirst();
        if (hldr != null) {
          if (unique)           tup.set().remove(hldr.val);
          return (T)hldr.val;
        }
 else {
          size.incrementAndGet();
          return null;
        }
      }
    }
 else {
      Holder first=evtsQueue.firstx();
      if (first != null && first.ts < now - timeInterval) {
        if (evtsQueue.remove(first)) {
          if (unique)           tup.set().remove(first.val);
          size.decrementAndGet();
          return (T)first.val;
        }
      }
 else       return null;
    }
  }
}
