{
  cacheEnabled=true;
  cacheMode=PARTITIONED;
  backups=1;
  aff=new GridCacheConsistentHashAffinityFunction(false,100);
  startGrid(1);
  aff=new GridCacheConsistentHashAffinityFunction(true,100);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return startGrid(2);
    }
  }
,GridException.class,"Affinity include neighbors mismatch");
  backups=2;
  aff=new GridCacheConsistentHashAffinityFunction(false,100);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return startGrid(2);
    }
  }
,GridException.class,"Affinity key backups mismatch");
  backups=1;
  aff=new GridCacheConsistentHashAffinityFunction(false,1000);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return startGrid(2);
    }
  }
,GridException.class,"Affinity partitions count mismatch");
  aff=new GridCacheConsistentHashAffinityFunction(false,100);
  ((GridCacheConsistentHashAffinityFunction)aff).setDefaultReplicas(1024);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return startGrid(2);
    }
  }
,GridException.class,"Affinity replicas mismatch");
  aff=new GridCacheConsistentHashAffinityFunction(false,100);
  ((GridCacheConsistentHashAffinityFunction)aff).setReplicaCountAttributeName("attr_name");
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return startGrid(2);
    }
  }
,GridException.class,"Affinity replica count attribute name mismatch");
  GridCacheConsistentHashAffinityFunction aff0=new GridCacheConsistentHashAffinityFunction(false,100);
  aff0.setHashIdResolver(new GridCacheAffinityNodeIdHashResolver());
  aff=aff0;
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return startGrid(2);
    }
  }
,GridException.class,"Partitioned cache affinity hash ID resolver class mismatch");
}
