{
  memcachedLsnr=new GridTcpMemcachedNioListener(log,hnd,ctx);
  this.log=log;
  this.proto=proto;
  this.hnd=hnd;
  Map<Byte,GridClientMarshaller> tmpMap=new GridLeanMap<>(3);
  tmpMap.put(U.JDK_CLIENT_PROTO_ID,new GridClientJdkMarshaller());
  addProtobufMarshaller(tmpMap);
  GridRestConfiguration restCfg=ctx.config().getRestConfiguration();
  Map<Integer,Class<? extends GridPortableObject>> typesMap;
  if (restCfg != null && restCfg.getPortableTypesMap() != null)   typesMap=new HashMap<>(restCfg.getPortableTypesMap());
 else   typesMap=new HashMap<>();
  typesMap.put(GridClientAuthenticationRequest.PORTABLE_TYPE_ID,GridClientAuthenticationRequest.class);
  typesMap.put(GridClientCacheRequest.PORTABLE_TYPE_ID,GridClientCacheRequest.class);
  typesMap.put(GridClientLogRequest.PORTABLE_TYPE_ID,GridClientLogRequest.class);
  typesMap.put(GridClientNodeBean.PORTABLE_TYPE_ID,GridClientNodeBean.class);
  typesMap.put(GridClientNodeMetricsBean.PORTABLE_TYPE_ID,GridClientNodeMetricsBean.class);
  typesMap.put(GridClientResponse.PORTABLE_TYPE_ID,GridClientResponse.class);
  typesMap.put(GridClientTaskRequest.PORTABLE_TYPE_ID,GridClientTaskRequest.class);
  typesMap.put(GridClientTaskResultBean.PORTABLE_TYPE_ID,GridClientTaskResultBean.class);
  typesMap.put(GridClientTopologyRequest.PORTABLE_TYPE_ID,GridClientTopologyRequest.class);
  tmpMap.put(U.PORTABLE_OBJECT_PROTO_ID,new GridClientPortableMarshaller(typesMap));
  try {
    tmpMap.put(U.OPTIMIZED_CLIENT_PROTO_ID,new GridClientOptimizedMarshaller());
  }
 catch (  Exception e) {
    U.warn(log,"Failed to create " + GridClientOptimizedMarshaller.class.getSimpleName() + " for handling client communication ("+ e.getMessage()+ "). Local node will operate without this marshaller.","Failed to create " + GridClientOptimizedMarshaller.class.getSimpleName() + '.');
  }
  suppMarshMap=Collections.unmodifiableMap(tmpMap);
}
