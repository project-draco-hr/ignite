{
  if (ipStr.endsWith(":"))   ipStr=ipStr.substring(0,ipStr.length() - 1);
 else   if (ipStr.indexOf(':') >= 0) {
    StringTokenizer st=new StringTokenizer(ipStr,":");
    if (st.countTokens() == 2) {
      String addrStr=st.nextToken();
      String portStr=st.nextToken();
      if (portStr.contains("..")) {
        int port1;
        int port2;
        try {
          port1=Integer.parseInt(portStr.substring(0,portStr.indexOf("..")));
          port2=Integer.parseInt(portStr.substring(portStr.indexOf("..") + 2,portStr.length()));
          if (port2 < port1 || port1 == port2 || port1 <= 0 || port2 <= 0)           throw new GridSpiException("Failed to parse provided address: " + ipStr);
          Collection<InetSocketAddress> res=new ArrayList<>(port2 - port1);
          for (int i=port1; i <= port2; i++)           res.add(new InetSocketAddress(addrStr,i));
          return res;
        }
 catch (        IllegalArgumentException e) {
          throw new GridSpiException("Failed to parse provided address: " + ipStr,e);
        }
      }
 else {
        try {
          int port=Integer.parseInt(portStr);
          return Collections.singleton(new InetSocketAddress(addrStr,port));
        }
 catch (        IllegalArgumentException e) {
          throw new GridSpiException("Failed to parse provided address: " + ipStr,e);
        }
      }
    }
 else     throw new GridSpiException("Failed to parse provided address: " + ipStr);
  }
  return Collections.singleton(new InetSocketAddress(ipStr,0));
}
