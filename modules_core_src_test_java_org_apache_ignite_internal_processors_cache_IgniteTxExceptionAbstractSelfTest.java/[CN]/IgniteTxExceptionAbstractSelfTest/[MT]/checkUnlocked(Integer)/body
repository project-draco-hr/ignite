{
  failIndexingSpi(false);
  awaitPartitionMapExchange();
  info("Check key: " + key);
  for (int i=0; i < gridCount(); i++) {
    final int idx=i;
    GridTestUtils.waitForCondition(new PA(){
      @Override public boolean apply(){
        IgniteKernal grid=(IgniteKernal)grid(idx);
        GridCacheAdapter cache=grid.internalCache(null);
        GridCacheEntryEx entry=cache.peekEx(key);
        log.info("Entry: " + entry);
        if (entry != null) {
          try {
            boolean locked=entry.lockedByAny();
            if (locked) {
              info("Unexpected entry for grid [i=" + idx + ", entry="+ entry+ ']');
              return false;
            }
          }
 catch (          GridCacheEntryRemovedException ignore) {
          }
        }
        if (cache.isNear()) {
          entry=((GridNearCacheAdapter)cache).dht().peekEx(key);
          log.info("Dht entry: " + entry);
          if (entry != null) {
            try {
              boolean locked=entry.lockedByAny();
              if (locked) {
                info("Unexpected entry for grid [i=" + idx + ", entry="+ entry+ ']');
                return false;
              }
            }
 catch (            GridCacheEntryRemovedException ignore) {
            }
          }
        }
        return true;
      }
    }
,getTestTimeout());
  }
}
