{
  Ignite srv1=startGrid(0);
  ContinuousQuery<Object,Object> qry=new ContinuousQuery<>();
  qry.setLocalListener(new CacheEntryUpdatedListener<Object,Object>(){
    @Override public void onUpdated(    Iterable iterable) throws CacheEntryListenerException {
    }
  }
);
  qry.setAutoUnsubscribe(false);
  qry.setRemoteFilter(new CacheEntryEventSerializableFilter<Object,Object>(){
    @Override public boolean evaluate(    CacheEntryEvent<?,?> event) throws CacheEntryListenerException {
      cnt.incrementAndGet();
      return true;
    }
  }
);
  isClient=true;
  Ignite client=startGrid(1);
  isClient=false;
  IgniteCache<Object,Object> cache1=srv1.cache(null);
  IgniteCache<Object,Object> clCache=client.cache(null);
  putAndCheck(clCache,0);
  QueryCursor<Cache.Entry<Object,Object>> cur=(clientQuery ? clCache : cache1).query(qry);
  putAndCheck(clCache,1);
  final Ignite srv2=startGrid(2);
  putAndCheck(clCache,2);
  stopGrid(0);
  while (true) {
    try {
      clCache.get(1);
      break;
    }
 catch (    IgniteClientDisconnectedException e) {
      e.reconnectFuture().get();
    }
catch (    CacheException e) {
      if (e.getCause() instanceof IgniteClientDisconnectedException)       ((IgniteClientDisconnectedException)e.getCause()).reconnectFuture().get();
    }
  }
  putAndCheck(clCache,1);
  Ignite srv3=startGrid(3);
  putAndCheck(clCache,2);
  stopGrid(1);
  isClient=true;
  client=startGrid(4);
  isClient=false;
  clCache=client.cache(null);
  putAndCheck(clCache,2);
  Ignite srv4=startGrid(5);
  putAndCheck(clCache,3);
}
