{
  TcpCommunicationSpi spi0=spis.get(0);
  TcpCommunicationSpi spi1=spis.get(1);
  final TestListener lsnr0=(TestListener)spi0.getListener();
  final TestListener lsnr1=(TestListener)spi1.getListener();
  ClusterNode node0=nodes.get(0);
  ClusterNode node1=nodes.get(1);
  lsnr1.block();
  int msgId=0;
  for (int j=0; j < 10; j++) {
    spi0.sendMessage(node1,new GridTestMessage(node0.id(),++msgId,0));
    spi1.sendMessage(node0,new GridTestMessage(node1.id(),++msgId,0));
  }
  lsnr1.blockLatch.await();
  lsnr1.unblock();
  Thread.sleep(500);
  int errCnt=0;
  int msgs=0;
  while (true) {
    try {
      int id=msgId + 1;
      spi0.sendMessage(node1,new GridTestMessage(node0.id(),id,0));
      msgId++;
      msgs++;
      if (msgs == 10)       break;
    }
 catch (    IgniteSpiException e) {
      errCnt++;
      if (errCnt > 10)       fail("Failed to send message: " + e);
    }
  }
  for (int j=0; j < 10; j++)   spi1.sendMessage(node0,new GridTestMessage(node1.id(),++msgId,0));
  final int expMsgs=20;
  GridTestUtils.waitForCondition(new GridAbsPredicate(){
    @Override public boolean apply(){
      return lsnr0.rcvCnt.get() >= expMsgs && lsnr1.rcvCnt.get() >= expMsgs;
    }
  }
,5000);
  assertEquals(expMsgs,lsnr0.rcvCnt.get());
  assertEquals(expMsgs,lsnr1.rcvCnt.get());
}
