{
  try {
    String destIdStr=req.getParameter("destId");
    UUID destId;
    try {
      destId=F.isEmpty(destIdStr) ? null : UUID.fromString(destIdStr);
    }
 catch (    IllegalArgumentException ignore) {
      writeFailure(httpRes,"Failed to parse required parameter 'destId': " + destIdStr);
      return;
    }
    Collection<? extends GridClientNode> nodes=client.compute().nodes();
    if (F.isEmpty(nodes)) {
      writeFailure(httpRes,"No available nodes on the router.");
      return;
    }
    Collection<InetSocketAddress> addrs=getEndpoints(destId);
    if (F.isEmpty(addrs)) {
      writeFailure(httpRes,"No available nodes on the router for destination node ID: " + destId);
      return;
    }
    Exception lastEx=null;
    for (    InetSocketAddress addr : addrs) {
      try {
        forward(extractRequestParameters(req),httpRes,addr);
        return;
      }
 catch (      Exception e) {
        U.warn(log,"Failed to perform HTTP request forwarding " + "(will try next endpoint available for this request): " + e.getMessage(),"Failed to forward HTTP request (will try another endpoint).");
        lastEx=e;
      }
    }
    if (lastEx != null)     writeFailure(httpRes,"Failed to route request to all of the available nodes. " + "Last exception was: " + lastEx.getMessage());
  }
 catch (  GridClientException e) {
    log.warning("Failed to connect to grid (is grid started?).",e);
    writeFailure(httpRes,"Failed to connect to grid (is grid started?): " + e.getMessage());
  }
catch (  RuntimeException e) {
    U.error(log,"Unhandled runtime exception in HTTP router.",e);
    throw e;
  }
 finally {
    req.setHandled(true);
    reqCnt++;
  }
}
