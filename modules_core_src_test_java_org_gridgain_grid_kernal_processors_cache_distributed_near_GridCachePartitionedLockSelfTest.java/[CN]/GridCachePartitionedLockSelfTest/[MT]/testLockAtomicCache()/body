{
  IgniteConfiguration cfg=new IgniteConfiguration();
  cfg.setGridName(getTestGridName(0));
  cfg.setRestEnabled(false);
  cfg.setCacheConfiguration(new GridCacheConfiguration());
  final Ignite g0=G.start(cfg);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return g0.jcache(null).lock(1).tryLock(Long.MAX_VALUE,TimeUnit.MILLISECONDS);
    }
  }
,IgniteCheckedException.class,"Locks are not supported");
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return g0.cache(null).lockAll(Arrays.asList(1),Long.MAX_VALUE);
    }
  }
,IgniteCheckedException.class,"Locks are not supported");
  final IgniteFuture<Boolean> lockFut1=g0.cache(null).lockAsync(1,Long.MAX_VALUE);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return lockFut1.get();
    }
  }
,IgniteCheckedException.class,"Locks are not supported");
  final IgniteFuture<Boolean> lockFut2=g0.cache(null).lockAllAsync(Arrays.asList(1),Long.MAX_VALUE);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return lockFut2.get();
    }
  }
,IgniteCheckedException.class,"Locks are not supported");
}
