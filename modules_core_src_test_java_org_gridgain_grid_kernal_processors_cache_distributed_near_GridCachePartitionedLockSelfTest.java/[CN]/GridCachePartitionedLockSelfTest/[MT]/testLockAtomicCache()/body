{
  IgniteConfiguration cfg=new IgniteConfiguration();
  cfg.setGridName(getTestGridName(0));
  cfg.setRestEnabled(false);
  cfg.setCacheConfiguration(new CacheConfiguration());
  final Ignite g0=G.start(cfg);
  final IgniteCache<Object,Object> cache=g0.jcache(null);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return cache.lock(1).tryLock(Long.MAX_VALUE,TimeUnit.MILLISECONDS);
    }
  }
,CacheException.class,"Locks are not supported");
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return cache.lockAll(Collections.singleton(1)).tryLock(Long.MAX_VALUE,TimeUnit.MILLISECONDS);
    }
  }
,CacheException.class,"Locks are not supported");
  CacheLock lock=g0.jcache(null).lock(1);
  lock.enableAsync().tryLock(Long.MAX_VALUE,TimeUnit.MILLISECONDS);
  final IgniteFuture<Boolean> lockFut1=lock.enableAsync().future();
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return lockFut1.get();
    }
  }
,IgniteCheckedException.class,"Locks are not supported");
}
