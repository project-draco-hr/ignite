{
  long nextTime=0;
  Collection<String> rmvKeys=new HashSet<>();
  while (!isInterrupted()) {
    rmvKeys.clear();
synchronized (mux) {
      long delay=U.currentTimeMillis() - nextTime;
      if (nextTime != 0 && delay > 0)       mux.wait(delay);
      long now=U.currentTimeMillis();
      nextTime=-1;
      for (Iterator<Map.Entry<String,GridS3TimeData>> iter=map.entrySet().iterator(); iter.hasNext(); ) {
        Map.Entry<String,GridS3TimeData> entry=iter.next();
        String key=entry.getKey();
        GridS3TimeData timeData=entry.getValue();
        if (timeData.getExpireTime() > 0)         if (timeData.getExpireTime() <= now) {
          try {
            delete(key);
            if (log.isDebugEnabled())             log.debug("Data was deleted by timeout: " + key);
          }
 catch (          AmazonClientException e) {
            U.error(log,"Failed to delete data by key: " + key,e);
          }
          iter.remove();
          rmvKeys.add(timeData.getKey());
        }
 else         if (timeData.getExpireTime() < nextTime || nextTime == -1)         nextTime=timeData.getExpireTime();
      }
    }
    CheckpointListener tmpLsnr=lsnr;
    if (tmpLsnr != null)     for (    String key : rmvKeys)     tmpLsnr.onCheckpointRemoved(key);
  }
synchronized (mux) {
    map.clear();
  }
}
