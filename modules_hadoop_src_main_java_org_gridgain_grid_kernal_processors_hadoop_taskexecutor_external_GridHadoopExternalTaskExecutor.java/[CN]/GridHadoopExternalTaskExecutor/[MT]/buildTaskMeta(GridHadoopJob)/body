{
  GridHadoopExternalTaskMetadata meta=new GridHadoopExternalTaskMetadata();
  try {
    String mrDir=job.property("mapreduce.job.dir");
    final Collection<String> jars=new ArrayList<>();
    if (mrDir != null) {
      URI uri=new URI(mrDir);
      Path path=new Path(uri);
      JobConf cfg=((GridHadoopDefaultJobInfo)job.info()).configuration();
      FileSystem fs=FileSystem.get(path.toUri(),cfg);
      File dir=new File(jobWorkFolder(job.id()) + File.separator + "jars");
      if (log.isDebugEnabled())       log.debug("Copying job submission directory " + path + " to local "+ dir.getAbsolutePath());
      if (dir.exists() && !dir.delete())       throw new IllegalStateException("Failed to delete job jars folder: " + dir);
      if (!fs.exists(path))       throw new IllegalStateException();
      if (!FileUtil.copy(fs,path,dir,false,cfg))       throw new IllegalStateException();
      Files.walkFileTree(dir.toPath(),new SimpleFileVisitor<java.nio.file.Path>(){
        @Override public FileVisitResult visitFile(        java.nio.file.Path file,        BasicFileAttributes attrs) throws IOException {
          if (file.getFileName().toString().endsWith(".jar")) {
            String jar=file.normalize().toAbsolutePath().toString();
            if (log.isDebugEnabled())             log.debug("Adding to classpath: " + jar);
            jars.add(jar);
          }
          return super.visitFile(file,attrs);
        }
      }
);
    }
    jars.addAll(Arrays.asList(System.getProperty("java.class.path").split(":")));
    meta.classpath(jars);
  }
 catch (  Exception e) {
    throw new IllegalStateException(e);
  }
  meta.jvmOptions(Arrays.asList("-Xmx1g","-ea","-DGRIDGAIN_HOME=" + U.getGridGainHome()));
  return meta;
}
