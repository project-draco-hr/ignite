{
  final AtomicInteger idGen=new AtomicInteger();
  final Iterable<Integer> rootOrderIds=new ArrayList<Integer>(){
{
      for (int i=0; i < ROOT_ORDER_CNT; i++)       add(idGen.incrementAndGet());
    }
  }
;
  final Date curDate=new Date(new java.util.Date().getTime());
  final List<Date> dates=new ArrayList<Date>(){
{
      for (int i=0; i < DATES_CNT; i++)       add(new Date(curDate.getTime() - i * 24 * 60* 60* 1000));
    }
  }
;
  final Iterable<CustOrder> orders=new ArrayList<CustOrder>(){
{
      for (      int rootOrderId : rootOrderIds) {
        for (int i=0; i < rootOrderId % 5; i++) {
          int orderId=idGen.incrementAndGet();
          CustOrder order=new CustOrder(orderId,rootOrderId,dates.get(orderId % dates.size()),orderId % 2 == 0 ? "CUSTOM" : "OTHER",orderId);
          add(order);
          pCache.put(order.orderId,order);
          insertInDb(order);
        }
      }
    }
  }
;
  final Collection<OrderParams> params=new ArrayList<OrderParams>(){
{
      for (      CustOrder o : orders) {
        OrderParams op=new OrderParams(idGen.incrementAndGet(),o.orderId,o.date,o.orderId % 2 == 0 ? "Algo 1" : "Algo 2");
        add(op);
        pCache.put(op.key(),op);
        insertInDb(op);
      }
    }
  }
;
  final Collection<ReplaceOrder> replaces=new ArrayList<ReplaceOrder>(){
{
      for (      CustOrder o : orders) {
        if (o.orderId % 7 == 0) {
          ReplaceOrder replace=new ReplaceOrder(idGen.incrementAndGet(),o.orderId,o.rootOrderId,o.alias,new Date(o.date.getTime() + 12 * 60 * 60* 1000),o.orderId);
          add(replace);
          pCache.put(replace.key(),replace);
          insertInDb(replace);
        }
      }
    }
  }
;
  final Collection<Cancel> cancels=new ArrayList<Cancel>(){
{
      for (      CustOrder o : orders) {
        if (o.orderId % 9 == 0) {
          Cancel c=new Cancel(idGen.incrementAndGet(),o.orderId,new Date(o.date.getTime() + 12 * 60 * 60* 1000));
          add(c);
          pCache.put(c.key(),c);
          insertInDb(c);
        }
      }
    }
  }
;
  final Collection<Exec> execs=new ArrayList<Exec>(){
{
      for (      int rootOrderId : rootOrderIds) {
        int execShares=10000 + rootOrderId;
        int price=1000 + rootOrderId;
        int latsMkt=3000 + rootOrderId;
        Exec exec=new Exec(rootOrderId,dates.get(rootOrderId % dates.size()),execShares,price,latsMkt);
        add(exec);
        rCache.put(exec.rootOrderId,exec);
        insertInDb(exec);
      }
    }
  }
;
}
