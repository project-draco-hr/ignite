{
  final UUID clientId=UUID.randomUUID();
  Ignite srv=grid(0);
  final CountDownLatch joinLatch=new CountDownLatch(1);
  srv.events().localListen(new IgnitePredicate<Event>(){
    @Override public boolean apply(    Event evt){
      if (evt.type() == EVT_NODE_JOINED && ((DiscoveryEvent)evt).eventNode().id().equals(clientId)) {
        info("Client joined: " + evt);
        joinLatch.countDown();
      }
      return true;
    }
  }
,EVT_NODE_JOINED);
  TestCommunicationSpi srvCommSpi=(TestCommunicationSpi)srv.configuration().getCommunicationSpi();
  srvCommSpi.blockMessages(GridDhtPartitionsFullMessage.class,clientId);
  clientMode=true;
  nodeId=clientId;
  IgniteInternalFuture<Boolean> fut=GridTestUtils.runAsync(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      try {
        Ignition.start(getConfiguration(getTestGridName(SRV_CNT)));
        fail();
        return false;
      }
 catch (      IgniteClientDisconnectedException e) {
        log.info("Expected start error: " + e);
        try {
          e.reconnectFuture().get();
          fail();
        }
 catch (        IgniteException e0) {
          log.info("Expected future error: " + e0);
        }
        return true;
      }
catch (      Throwable e) {
        log.error("Unexpected error: " + e,e);
        throw e;
      }
    }
  }
);
  TestTcpDiscoverySpi srvSpi=spi(srv);
  try {
    assertTrue(joinLatch.await(5000,MILLISECONDS));
    U.sleep(1000);
    assertNotDone(fut);
    srvSpi.failNode(clientId,null);
  }
  finally {
    srvCommSpi.stopBlock(false);
  }
  assertTrue(fut.get());
}
