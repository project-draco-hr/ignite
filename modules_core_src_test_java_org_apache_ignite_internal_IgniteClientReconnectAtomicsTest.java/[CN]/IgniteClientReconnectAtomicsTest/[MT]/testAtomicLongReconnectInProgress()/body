{
  Ignite client=grid(serverCount());
  assertTrue(client.cluster().localNode().isClient());
  Ignite srv=clientRouter(client);
  BlockTcpCommunicationSpi commSpi=commSpi(srv);
  final IgniteAtomicLong clientAtomicLong=client.atomicLong("atomicLongInProggress",0,true);
  final IgniteAtomicLong srvAtomicLong=srv.atomicLong("atomicLongInProggress",0,false);
  commSpi.blockMessage(GridNearLockResponse.class);
  final IgniteInternalFuture<Object> fut=GridTestUtils.runAsync(new Callable<Object>(){
    @Override public Object call() throws Exception {
      try {
        clientAtomicLong.getAndAdd(1);
      }
 catch (      IgniteClientDisconnectedException e) {
        checkAndWait(e);
        return true;
      }
      return false;
    }
  }
);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return fut.get(200);
    }
  }
,IgniteFutureTimeoutCheckedException.class,null);
  assertNotDone(fut);
  commSpi.unblockMessage();
  reconnectClientNode(client,srv,null);
  assertTrue((Boolean)fut.get(2,TimeUnit.SECONDS));
  assertEquals(1,clientAtomicLong.addAndGet(1));
  assertEquals(2,srvAtomicLong.addAndGet(1));
  clientAtomicLong.close();
}
