{
  Ignite client=grid(serverCount());
  assertTrue(client.cluster().localNode().isClient());
  Ignite srv=clientRouter(client);
  final IgniteAtomicReference<String> clientAtomicRef=client.atomicReference("atomicRefInProg","1st value",true);
  assertEquals("1st value",clientAtomicRef.get());
  assertTrue(clientAtomicRef.compareAndSet("1st value","2st value"));
  assertEquals("2st value",clientAtomicRef.get());
  IgniteAtomicReference<String> srvAtomicRef=srv.atomicReference("atomicRefInProg","1st value",false);
  assertEquals("2st value",srvAtomicRef.get());
  assertTrue(srvAtomicRef.compareAndSet("2st value","3st value"));
  assertEquals("3st value",srvAtomicRef.get());
  BlockTpcCommunicationSpi servCommSpi=commSpi(srv);
  servCommSpi.blockMessage(GridNearLockResponse.class);
  final IgniteInternalFuture<Object> fut=GridTestUtils.runAsync(new Callable<Object>(){
    @Override public Object call() throws Exception {
      try {
        clientAtomicRef.compareAndSet("3st value","4st value");
      }
 catch (      IgniteClientDisconnectedException e) {
        checkAndWait(e);
        return true;
      }
      return false;
    }
  }
);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return fut.get(200);
    }
  }
,IgniteFutureTimeoutCheckedException.class,null);
  assertNotDone(fut);
  servCommSpi.unblockMessage();
  reconnectClientNode(client,srv,null);
  assertTrue((Boolean)fut.get(2,TimeUnit.SECONDS));
  assertEquals("3st value",clientAtomicRef.get());
  assertTrue(clientAtomicRef.compareAndSet("3st value","4st value"));
  assertEquals("4st value",clientAtomicRef.get());
  assertEquals("4st value",srvAtomicRef.get());
  assertTrue(srvAtomicRef.compareAndSet("4st value","5st value"));
  assertEquals("5st value",srvAtomicRef.get());
  srvAtomicRef.close();
}
