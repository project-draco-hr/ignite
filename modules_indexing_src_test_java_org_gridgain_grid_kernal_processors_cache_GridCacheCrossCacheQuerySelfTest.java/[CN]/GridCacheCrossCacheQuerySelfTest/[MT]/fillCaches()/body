{
  awaitPartitionMapExchange();
  int idGen=0;
  GridCache<Integer,Object> dimCache=ignite.cache("replicated");
  for (int i=0; i < 2; i++) {
    int id=idGen++;
    dimCache.put(id,new DimStore(id,"Store" + id));
  }
  for (int i=0; i < 5; i++) {
    int id=idGen++;
    dimCache.put(id,new DimProduct(id,"Product" + id));
  }
  GridCacheProjection<Integer,DimStore> stores=dimCache.projection(Integer.class,DimStore.class);
  GridCacheProjection<Integer,DimProduct> prods=dimCache.projection(Integer.class,DimProduct.class);
  GridCache<Integer,FactPurchase> factCache=ignite.cache("partitioned");
  List<DimStore> dimStores=new ArrayList<>(stores.values());
  Collections.sort(dimStores,new Comparator<DimStore>(){
    @Override public int compare(    DimStore o1,    DimStore o2){
      return o1.getId() > o2.getId() ? 1 : o1.getId() < o2.getId() ? -1 : 0;
    }
  }
);
  List<DimProduct> dimProds=new ArrayList<>(prods.values());
  Collections.sort(dimProds,new Comparator<DimProduct>(){
    @Override public int compare(    DimProduct o1,    DimProduct o2){
      return o1.getId() > o2.getId() ? 1 : o1.getId() < o2.getId() ? -1 : 0;
    }
  }
);
  for (int i=0; i < 10; i++) {
    int id=idGen++;
    DimStore store=dimStores.get(i % dimStores.size());
    DimProduct prod=dimProds.get(i % dimProds.size());
    factCache.put(id,new FactPurchase(id,prod.getId(),store.getId()));
  }
}
