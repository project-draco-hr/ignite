{
  while (!isInterrupted()) {
    SocketStream sockStream;
    UUID rmtNodeId;
synchronized (mux) {
      if (this.sockStream == null) {
        mux.wait();
        continue;
      }
      sockStream=this.sockStream;
      rmtNodeId=this.rmtNodeId;
    }
    Socket sock=sockStream.socket();
    try {
      InputStream in=sockStream.stream();
      sock.setKeepAlive(true);
      sock.setTcpNoDelay(true);
      while (!isInterrupted()) {
        TcpDiscoveryAbstractMessage msg;
        try {
          msg=spi.marshaller().unmarshal(in,U.resolveClassLoader(spi.ignite().configuration()));
        }
 catch (        IgniteCheckedException e) {
          if (log.isDebugEnabled())           U.error(log,"Failed to read message [sock=" + sock + ", "+ "locNodeId="+ getLocalNodeId()+ ", rmtNodeId="+ rmtNodeId+ ']',e);
          IOException ioEx=X.cause(e,IOException.class);
          if (ioEx != null)           throw ioEx;
          ClassNotFoundException clsNotFoundEx=X.cause(e,ClassNotFoundException.class);
          if (clsNotFoundEx != null)           LT.warn(log,"Failed to read message due to ClassNotFoundException " + "(make sure same versions of all classes are available on all nodes) " + "[rmtNodeId=" + rmtNodeId + ", err="+ clsNotFoundEx.getMessage()+ ']');
 else           LT.error(log,e,"Failed to read message [sock=" + sock + ", locNodeId="+ getLocalNodeId()+ ", rmtNodeId="+ rmtNodeId+ ']');
          continue;
        }
        msg.senderNodeId(rmtNodeId);
        if (log.isDebugEnabled())         log.debug("Message has been received: " + msg);
        spi.stats.onMessageReceived(msg);
        boolean ack=msg instanceof TcpDiscoveryClientAckResponse;
        if (!ack)         msgWorker.addMessage(msg);
 else         sockWriter.ackReceived((TcpDiscoveryClientAckResponse)msg);
      }
    }
 catch (    IOException e) {
      msgWorker.addMessage(new SocketClosedMessage(sockStream));
      if (log.isDebugEnabled())       U.error(log,"Connection failed [sock=" + sock + ", locNodeId="+ getLocalNodeId()+ ']',e);
    }
 finally {
      U.closeQuiet(sock);
synchronized (mux) {
        if (this.sockStream == sockStream) {
          this.sockStream=null;
          this.rmtNodeId=null;
        }
      }
    }
  }
}
