{
  if (gridCfg.isDaemon() || F.isEmpty(gridCfg.getGgfsConfiguration()) || F.isEmpty(gridCfg.getCacheConfiguration()))   return;
  final Map<String,GridCacheConfiguration> cacheCfgs=new HashMap<>();
  F.forEach(gridCfg.getCacheConfiguration(),new CI1<GridCacheConfiguration>(){
    @Override public void apply(    GridCacheConfiguration c){
      cacheCfgs.put(c.getName(),c);
    }
  }
);
  Collection<GridGgfsAttributes> attrVals=new ArrayList<>();
  for (  GridGgfsConfiguration ggfsCfg : gridCfg.getGgfsConfiguration()) {
    GridCacheConfiguration cacheCfg=cacheCfgs.get(ggfsCfg.getDataCacheName());
    if (cacheCfg == null)     continue;
    GridCacheAffinityMapper affMapper=cacheCfg.getAffinityMapper();
    if (!(affMapper instanceof GridGgfsGroupDataBlocksMapper))     continue;
    attrVals.add(new GridGgfsAttributes(ggfsCfg.getName(),ggfsCfg.getBlockSize(),((GridGgfsGroupDataBlocksMapper)affMapper).groupSize(),ggfsCfg.getMetaCacheName(),ggfsCfg.getDataCacheName(),ggfsCfg.getDefaultMode(),ggfsCfg.getPathModes(),ggfsCfg.isFragmentizerEnabled()));
  }
  attrs.put(ATTR_GGFS,attrVals.toArray(new GridGgfsAttributes[attrVals.size()]));
}
