{
  final String stampedName=UUID.randomUUID().toString();
  final String val=UUID.randomUUID().toString();
  final String stamp=UUID.randomUUID().toString();
  final String newVal=UUID.randomUUID().toString();
  final String newStamp=UUID.randomUUID().toString();
  IgniteAtomicStamped<String,String> stamped=grid(0).atomicStamped(stampedName,val,stamp,true);
  final Ignite ignite=grid(0);
  ignite.compute().call(new IgniteCallable<String>(){
    @Override public String call(){
      IgniteAtomicStamped<String,String> stamped=ignite.atomicStamped(stampedName,val,stamp,true);
      assertEquals(val,stamped.value());
      assertEquals(stamp,stamped.stamp());
      return stamped.value();
    }
  }
);
  stamped.compareAndSet("WRONG EXPECTED VALUE",newVal,"WRONG EXPECTED STAMP",newStamp);
  ignite.compute().call(new IgniteCallable<String>(){
    @Override public String call(){
      IgniteAtomicStamped<String,String> stamped=ignite.atomicStamped(stampedName,val,stamp,true);
      assertEquals(val,stamped.value());
      assertEquals(stamp,stamped.stamp());
      return stamped.value();
    }
  }
);
  stamped.compareAndSet(val,newVal,stamp,newStamp);
  ignite.compute().call(new IgniteCallable<String>(){
    @Override public String call(){
      IgniteAtomicStamped<String,String> stamped=ignite.atomicStamped(stampedName,val,stamp,true);
      assertEquals(newVal,stamped.value());
      assertEquals(newStamp,stamped.stamp());
      return stamped.value();
    }
  }
);
}
