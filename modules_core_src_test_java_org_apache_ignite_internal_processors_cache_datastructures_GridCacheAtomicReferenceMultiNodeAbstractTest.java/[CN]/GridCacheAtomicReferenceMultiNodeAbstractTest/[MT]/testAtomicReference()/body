{
  final String refName=UUID.randomUUID().toString();
  final String val=UUID.randomUUID().toString();
  final String newVal=UUID.randomUUID().toString();
  GridCacheAtomicReference<String> ref=grid(0).cache(null).dataStructures().atomicReference(refName,val,true);
  final Ignite ignite=grid(0);
  ignite.compute().call(new IgniteCallable<Object>(){
    @Override public String call() throws IgniteCheckedException {
      GridCacheAtomicReference<String> ref=ignite.cache(null).dataStructures().atomicReference(refName,val,true);
      assertEquals(val,ref.get());
      return ref.get();
    }
  }
);
  ref.compareAndSet("WRONG EXPECTED VALUE",newVal);
  ignite.compute().call(new IgniteCallable<String>(){
    @Override public String call() throws IgniteCheckedException {
      GridCacheAtomicReference<String> ref=ignite.cache(null).dataStructures().atomicReference(refName,val,true);
      assertEquals(val,ref.get());
      return ref.get();
    }
  }
);
  ref.compareAndSet(val,newVal);
  ignite.compute().call(new IgniteCallable<String>(){
    @Override public String call() throws IgniteCheckedException {
      GridCacheAtomicReference<String> ref=ignite.cache(null).dataStructures().atomicReference(refName,val,true);
      assertEquals(newVal,ref.get());
      return ref.get();
    }
  }
);
}
