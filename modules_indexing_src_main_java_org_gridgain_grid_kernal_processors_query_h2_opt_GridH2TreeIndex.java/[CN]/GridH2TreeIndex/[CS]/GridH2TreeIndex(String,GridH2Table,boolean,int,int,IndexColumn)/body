{
  super(keyCol,valCol);
  if (!pk) {
    cols=Arrays.copyOf(cols,cols.length + 1);
    cols[cols.length - 1]=tbl.indexColumn(keyCol,SortOrder.ASCENDING);
  }
  IndexColumn.mapColumns(cols,tbl);
  initBaseIndex(tbl,0,name,cols,pk ? IndexType.createUnique(false,false) : IndexType.createNonUnique(false,false,false));
  final GridH2RowDescriptor desc=tbl.rowDescriptor();
  tree=desc == null || desc.memory() == null ? new SnapTreeMap<GridSearchRowPointer,GridH2Row>(this){
    @Override protected void afterNodeUpdate_nl(    Node<GridSearchRowPointer,GridH2Row> node,    Object val){
      if (val != null)       node.key=(GridSearchRowPointer)val;
    }
    @Override protected Comparable<? super GridSearchRowPointer> comparable(    Object key){
      if (key instanceof ComparableRow)       return (Comparable<? super SearchRow>)key;
      return super.comparable(key);
    }
  }
 : new GridOffHeapSnapTreeMap<GridSearchRowPointer,GridH2Row>(desc,desc,desc.memory(),desc.guard(),this){
    @Override protected void afterNodeUpdate_nl(    long node,    GridH2Row val){
      final long oldKey=keyPtr(node);
      if (val != null) {
        key(node,val);
        guard.finalizeLater(new Runnable(){
          @Override public void run(){
            desc.createPointer(oldKey).decrementRefCount();
          }
        }
);
      }
    }
    @Override protected Comparable<? super GridSearchRowPointer> comparable(    Object key){
      if (key instanceof ComparableRow)       return (Comparable<? super SearchRow>)key;
      return super.comparable(key);
    }
  }
;
}
