{
  TypeDescriptor d=new TypeDescriptor();
  for (  Map.Entry<String,Class<?>> entry : meta.getAscendingFields().entrySet()) {
    PortableProperty prop=buildPortableProperty(entry.getKey(),entry.getValue());
    d.addProperty(prop,false);
    String idxName=prop.name() + "_idx";
    d.addIndex(idxName,isGeometryClass(prop.type()) ? GEO_SPATIAL : SORTED);
    d.addFieldToIndex(idxName,prop.name(),0,false);
  }
  for (  Map.Entry<String,Class<?>> entry : meta.getDescendingFields().entrySet()) {
    PortableProperty prop=buildPortableProperty(entry.getKey(),entry.getValue());
    d.addProperty(prop,false);
    String idxName=prop.name() + "_idx";
    d.addIndex(idxName,isGeometryClass(prop.type()) ? GEO_SPATIAL : SORTED);
    d.addFieldToIndex(idxName,prop.name(),0,true);
  }
  for (  String txtIdx : meta.getTextFields()) {
    PortableProperty prop=buildPortableProperty(txtIdx,String.class);
    d.addProperty(prop,false);
    d.addFieldToTextIndex(prop.name());
  }
  Map<String,LinkedHashMap<String,IgniteBiTuple<Class<?>,Boolean>>> grps=meta.getGroups();
  if (grps != null) {
    for (    Map.Entry<String,LinkedHashMap<String,IgniteBiTuple<Class<?>,Boolean>>> entry : grps.entrySet()) {
      String idxName=entry.getKey();
      LinkedHashMap<String,IgniteBiTuple<Class<?>,Boolean>> idxFields=entry.getValue();
      int order=0;
      for (      Map.Entry<String,IgniteBiTuple<Class<?>,Boolean>> idxField : idxFields.entrySet()) {
        PortableProperty prop=buildPortableProperty(idxField.getKey(),idxField.getValue().get1());
        d.addProperty(prop,false);
        Boolean descending=idxField.getValue().get2();
        d.addFieldToIndex(idxName,prop.name(),order,descending != null && descending);
        order++;
      }
    }
  }
  for (  Map.Entry<String,Class<?>> entry : meta.getQueryFields().entrySet()) {
    PortableProperty prop=buildPortableProperty(entry.getKey(),entry.getValue());
    if (!d.props.containsKey(prop.name()))     d.addProperty(prop,false);
  }
  return d;
}
