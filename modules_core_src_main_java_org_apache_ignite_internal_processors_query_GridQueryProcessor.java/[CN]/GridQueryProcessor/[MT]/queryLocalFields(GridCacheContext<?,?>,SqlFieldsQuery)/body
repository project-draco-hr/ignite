{
  if (!busyLock.enterBusy())   throw new IllegalStateException("Failed to execute query (grid is stopping).");
  try {
    final boolean keepBinary=cctx.keepBinary();
    return executeQuery(cctx,new IgniteOutClosureX<QueryCursor<List<?>>>(){
      @Override public QueryCursor<List<?>> applyx() throws IgniteCheckedException {
        String space=cctx.name();
        String sql=qry.getSql();
        Object[] args=qry.getArgs();
        final GridQueryFieldsResult res=idx.queryLocalSqlFields(space,sql,F.asList(args),idx.backupFilter(null,requestTopVer.get(),null),qry.isEnforceJoinOrder());
        sendQueryExecutedEvent(sql,args);
        QueryCursorImpl<List<?>> cursor=new QueryCursorImpl<>(new Iterable<List<?>>(){
          @Override public Iterator<List<?>> iterator(){
            return new GridQueryCacheObjectsIterator(res.iterator(),cctx,keepBinary);
          }
        }
);
        cursor.fieldsMeta(res.metaData());
        return cursor;
      }
    }
,true);
  }
 catch (  IgniteCheckedException e) {
    throw new CacheException(e);
  }
 finally {
    busyLock.leaveBusy();
  }
}
