{
  return new FetchingCursor(new Iterator<Row>(){
    /** 
 */
    Iterator<Value[]> iter=Collections.emptyIterator();
    @Override public boolean hasNext(){
      while (!iter.hasNext()) {
        GridResultPage page;
        for (; ; ) {
          try {
            page=queue.poll(500,TimeUnit.MILLISECONDS);
          }
 catch (          InterruptedException e) {
            throw new CacheException("Query execution was interrupted.",e);
          }
          if (page != null)           break;
          checkSourceNodesAlive();
        }
        if (page.isLast())         return false;
        fetchNextPage(page);
        iter=page.rows();
      }
      return true;
    }
    @Override public Row next(){
      return GridH2RowFactory.create(iter.next());
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
);
}
