{
  final int keyCnt=1000;
  final int retries=10000;
  int threadCnt=5;
  Grid g0=startGrid(0);
  Grid g1=startGrid(1);
  for (int i=0; i < keyCnt; i++)   g0.cache(null).putx(i,i);
  assertEquals(keyCnt,g0.cache(null).size());
  assertEquals(keyCnt,g1.cache(null).size());
  final AtomicInteger cnt=new AtomicInteger();
  multithreaded(new Callable(){
    @Nullable @Override public Object call() throws Exception {
      while (true) {
        int c=cnt.incrementAndGet();
        if (c > retries)         break;
        int idx=c + 1;
        info("Starting additional grid node with index: " + idx);
        startGrid(idx);
        info("Stopping additional grid node with index: " + idx);
        stopGrid(idx);
      }
      return null;
    }
  }
,threadCnt);
}
