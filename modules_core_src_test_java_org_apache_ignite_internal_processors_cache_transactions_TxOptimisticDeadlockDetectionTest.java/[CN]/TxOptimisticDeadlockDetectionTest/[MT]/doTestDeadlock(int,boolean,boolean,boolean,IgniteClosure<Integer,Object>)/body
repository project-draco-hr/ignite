{
  log.info(">>> Test deadlock [txCnt=" + txCnt + ", loc="+ loc+ ", lockPrimaryFirst="+ lockPrimaryFirst+ ", clientTx="+ clientTx+ ", transformer="+ transformer.getClass().getName()+ ']');
  TestCommunicationSpi.init(txCnt);
  final AtomicInteger threadCnt=new AtomicInteger();
  final CyclicBarrier barrier=new CyclicBarrier(txCnt);
  final AtomicReference<TransactionDeadlockException> deadlockErr=new AtomicReference<>();
  final List<List<Integer>> keySets=generateKeys(txCnt,loc,!lockPrimaryFirst);
  final Set<Integer> involvedKeys=new GridConcurrentHashSet<>();
  final Set<Integer> involvedLockedKeys=new GridConcurrentHashSet<>();
  final Set<IgniteInternalTx> involvedTxs=new GridConcurrentHashSet<>();
  IgniteInternalFuture<Long> fut=GridTestUtils.runMultiThreadedAsync(new Runnable(){
    @Override public void run(){
      int threadNum=threadCnt.incrementAndGet();
      Ignite ignite=loc ? ignite(0) : ignite(clientTx ? threadNum - 1 + txCnt : threadNum - 1);
      IgniteCache<Object,Integer> cache=ignite.cache(CACHE_NAME);
      List<Integer> keys=keySets.get(threadNum - 1);
      int txTimeout=500 + txCnt * 100;
      try (Transaction tx=ignite.transactions().txStart(OPTIMISTIC,REPEATABLE_READ,txTimeout,0)){
        IgniteInternalTx tx0=((TransactionProxyImpl)tx).tx();
        involvedTxs.add(tx0);
        Integer key=keys.get(0);
        involvedKeys.add(key);
        Object k;
        log.info(">>> Performs put [node=" + ((IgniteKernal)ignite).localNode() + ", tx="+ tx+ ", key="+ transformer.apply(key)+ ']');
        cache.put(transformer.apply(key),0);
        involvedLockedKeys.add(key);
        barrier.await();
        key=keys.get(1);
        ClusterNode primaryNode=((IgniteCacheProxy)cache).context().affinity().primary(key,NONE);
        List<Integer> primaryKeys=primaryKeys(grid(primaryNode).cache(CACHE_NAME),5,key + (100 * threadNum));
        Map<Object,Integer> entries=new HashMap<>();
        involvedKeys.add(key);
        entries.put(transformer.apply(key),0);
        for (        Integer i : primaryKeys) {
          involvedKeys.add(i);
          entries.put(transformer.apply(i),1);
          k=transformer.apply(i + 13);
          involvedKeys.add(i + 13);
          entries.put(k,2);
        }
        log.info(">>> Performs put [node=" + ((IgniteKernal)ignite).localNode() + ", tx="+ tx+ ", entries="+ entries+ ']');
        cache.putAll(entries);
        tx.commit();
      }
 catch (      Throwable e) {
        U.error(log,"Expected exception: ",e);
        if (hasCause(e,TransactionTimeoutException.class) && hasCause(e,TransactionDeadlockException.class)) {
          if (deadlockErr.compareAndSet(null,cause(e,TransactionDeadlockException.class)))           U.error(log,"At least one stack trace should contain " + TransactionDeadlockException.class.getSimpleName(),e);
        }
      }
    }
  }
,loc ? 2 : txCnt,"tx-thread");
  try {
    fut.get();
  }
 catch (  IgniteCheckedException e) {
    U.error(null,"Unexpected exception",e);
    fail();
  }
  U.sleep(1000);
  TransactionDeadlockException deadlockE=deadlockErr.get();
  assertNotNull(deadlockE);
  boolean fail=false;
  for (int i=0; i < NODES_CNT * 2; i++) {
    Ignite ignite=ignite(i);
    int cacheId=((IgniteCacheProxy)ignite.cache(CACHE_NAME)).context().cacheId();
    GridCacheSharedContext<Object,Object> cctx=((IgniteKernal)ignite).context().cache().context();
    IgniteTxManager txMgr=cctx.tm();
    Collection<IgniteInternalTx> activeTxs=txMgr.activeTransactions();
    for (    IgniteInternalTx tx : activeTxs) {
      Collection<IgniteTxEntry> entries=tx.allEntries();
      for (      IgniteTxEntry entry : entries) {
        if (entry.cacheId() == cacheId) {
          fail=true;
          U.error(log,"Transaction still exists: " + "\n" + tx.xidVersion() + "\n"+ tx.nearXidVersion()+ "\n nodeId="+ cctx.localNodeId()+ "\n tx="+ tx);
        }
      }
    }
    Collection<IgniteInternalFuture<?>> futs=txMgr.deadlockDetectionFutures();
    assertTrue(futs.isEmpty());
    GridCacheAdapter<Object,Integer> intCache=internalCache(i,CACHE_NAME);
    GridCacheConcurrentMap map=intCache.map();
    for (    Integer key : involvedKeys) {
      Object key0=transformer.apply(key);
      KeyCacheObject keyCacheObj=intCache.context().toCacheKeyObject(key0);
      GridCacheMapEntry entry=map.getEntry(keyCacheObj);
      if (entry != null)       assertNull("Entry still has locks " + entry,entry.mvccAllLocal());
    }
  }
  if (fail)   fail("Some transactions still exist");
  String msg=deadlockE.getMessage();
  for (  IgniteInternalTx tx : involvedTxs)   assertTrue(msg.contains("[txId=" + tx.xidVersion() + ", nodeId="+ tx.nodeId()+ ", threadId="+ tx.threadId()+ ']'));
  for (  Integer key : involvedKeys) {
    if (involvedLockedKeys.contains(key))     assertTrue(msg.contains("[key=" + transformer.apply(key) + ", cache="+ CACHE_NAME+ ']'));
 else     assertFalse(msg.contains("[key=" + transformer.apply(key)));
  }
}
