{
  assert depEnabled;
  if (mode == PRIVATE || mode == ISOLATED) {
    ClusterNode node=cctx.discovery().node(sndId);
    if (node == null) {
      if (log.isDebugEnabled())       log.debug("Ignoring p2p context (sender has left) [sndId=" + sndId + ", ldrId="+ ldrId+ ", userVer="+ userVer+ ", mode="+ mode+ ", participants="+ participants+ ']');
      return;
    }
    boolean daemon=node.isDaemon();
    if (log.isDebugEnabled())     log.debug("Ignoring deployment in PRIVATE or ISOLATED mode [sndId=" + sndId + ", ldrId="+ ldrId+ ", userVer="+ userVer+ ", mode="+ mode+ ", participants="+ participants+ ", daemon="+ daemon+ ']');
    if (!daemon) {
      LT.warn(log,"Ignoring deployment in PRIVATE or ISOLATED mode " + "[sndId=" + sndId + ", ldrId="+ ldrId+ ", userVer="+ userVer+ ", mode="+ mode+ ", participants="+ participants+ ", daemon="+ daemon+ ']');
    }
    return;
  }
  if (mode != cctx.gridConfig().getDeploymentMode()) {
    LT.warn(log,"Local and remote deployment mode mismatch (please fix configuration and restart) " + "[locDepMode=" + cctx.gridConfig().getDeploymentMode() + ", rmtDepMode="+ mode+ ", rmtNodeId="+ sndId+ ']');
    return;
  }
  if (log.isDebugEnabled())   log.debug("Setting p2p context [sndId=" + sndId + ", ldrId="+ ldrId+ ", userVer="+ userVer+ ", seqNum="+ ldrId.localId()+ ", mode="+ mode+ ", participants="+ participants+ ", locDepOwner="+ locDepOwner+ ']');
  CachedDeploymentInfo<K,V> depInfo;
  while (true) {
    depInfo=deps.get(ldrId);
    if (depInfo == null) {
      depInfo=new CachedDeploymentInfo<>(sndId,ldrId,userVer,mode,participants);
      CachedDeploymentInfo<K,V> old=deps.putIfAbsent(ldrId,depInfo);
      if (old != null)       depInfo=old;
 else       break;
    }
    if (participants != null) {
      if (!depInfo.addParticipants(participants,cctx)) {
        deps.remove(ldrId,depInfo);
        continue;
      }
    }
    break;
  }
  Map<UUID,IgniteUuid> added=null;
  if (locDepOwner)   added=addGlobalParticipants(sndId,ldrId,participants,locDepOwner);
  if (cctx.discovery().node(sndId) == null) {
    deps.remove(ldrId,depInfo);
    if (added != null)     added.remove(sndId);
    allParticipants.remove(sndId);
  }
  if (participants != null) {
    for (    UUID id : participants.keySet()) {
      if (cctx.discovery().node(id) == null) {
        if (depInfo.removeParticipant(id))         deps.remove(ldrId,depInfo);
        if (added != null)         added.remove(id);
        allParticipants.remove(id);
      }
    }
  }
  if (added != null && !added.isEmpty())   cctx.gridDeploy().addCacheParticipants(allParticipants,added);
}
