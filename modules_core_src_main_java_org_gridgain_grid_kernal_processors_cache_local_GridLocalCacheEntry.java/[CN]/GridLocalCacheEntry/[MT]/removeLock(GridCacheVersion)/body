{
  GridCacheMvccCandidate<K> prev=null;
  GridCacheMvccCandidate<K> owner=null;
  GridCacheMvccCandidate<K> doomed;
  V val;
  boolean hasVal;
synchronized (this) {
    GridCacheVersion obsoleteVer=obsoleteVersionExtras();
    if (obsoleteVer != null && !obsoleteVer.equals(ver))     checkObsolete();
    GridCacheMvcc<K> mvcc=mvccExtras();
    doomed=mvcc == null ? null : mvcc.candidate(ver);
    if (doomed != null) {
      prev=mvcc.localOwner();
      owner=mvcc.remove(ver);
      if (mvcc.isEmpty())       mvccExtras(null);
    }
    val=this.val;
    hasVal=hasValueUnlocked();
  }
  if (doomed != null) {
    checkThreadChain(doomed);
    if (cctx.events().isRecordable(EVT_CACHE_OBJECT_UNLOCKED))     cctx.events().addEvent(partition(),key,doomed.nodeId(),doomed,EVT_CACHE_OBJECT_UNLOCKED,val,hasVal,val,hasVal,null,null);
  }
  checkOwnerChanged(prev,owner);
  return doomed != null;
}
