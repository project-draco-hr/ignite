{
  super.onKernalStart();
  GridCacheContinuousQuery<GridHadoopJobId,GridHadoopJobMetadata> qry=jobMetaCache().queries().createContinuousQuery();
  qry.callback(new GridBiPredicate<UUID,Collection<Map.Entry<GridHadoopJobId,GridHadoopJobMetadata>>>(){
    @Override public boolean apply(    UUID nodeId,    final Collection<Map.Entry<GridHadoopJobId,GridHadoopJobMetadata>> evts){
      if (!busyLock.tryReadLock())       return false;
      try {
        evtProcSvc.submit(new EventHandler(){
          @Override protected void body() throws GridException {
            processJobMetadataUpdates(evts);
          }
        }
);
        return true;
      }
  finally {
        busyLock.readUnlock();
      }
    }
  }
);
  qry.execute();
  ctx.kernalContext().event().addLocalEventListener(new GridLocalEventListener(){
    @Override public void onEvent(    final GridEvent evt){
      if (!busyLock.tryReadLock())       return;
      try {
        evtProcSvc.submit(new EventHandler(){
          @Override protected void body(){
            processNodeLeft((GridDiscoveryEvent)evt);
          }
        }
);
      }
  finally {
        busyLock.readUnlock();
      }
    }
  }
,GridEventType.EVT_NODE_FAILED,GridEventType.EVT_NODE_LEFT);
}
