{
  final long batchId=reqIdCtr.getAndIncrement();
  final WriteCompletionFuture completionFut=pendingWrites.get(fileId);
  if (completionFut == null) {
    if (log.isDebugEnabled())     log.debug("Missing completion future for file write request (most likely exception occurred " + "which will be thrown upon stream close) [nodeId=" + node.id() + ", fileId="+ fileId+ ']');
    return;
  }
  if (completionFut.isDone())   completionFut.get();
  completionFut.onWriteRequest(node.id(),batchId);
  final UUID nodeId=node.id();
  if (!node.isLocal()) {
    final IgfsBlocksMessage msg=new IgfsBlocksMessage(fileId,batchId,blocks);
    callIgfsLocalSafe(new GridPlainCallable<Object>(){
      @Override @Nullable public Object call() throws Exception {
        try {
          igfsCtx.send(nodeId,topic,msg,SYSTEM_POOL);
        }
 catch (        IgniteCheckedException e) {
          completionFut.onError(nodeId,e);
        }
        return null;
      }
    }
);
  }
 else {
    callIgfsLocalSafe(new GridPlainCallable<Object>(){
      @Override @Nullable public Object call() throws Exception {
        storeBlocksAsync(blocks).listenAsync(new CI1<IgniteInternalFuture<?>>(){
          @Override public void apply(          IgniteInternalFuture<?> fut){
            try {
              fut.get();
              completionFut.onWriteAck(nodeId,batchId);
            }
 catch (            IgniteCheckedException e) {
              completionFut.onError(nodeId,e);
            }
          }
        }
);
        return null;
      }
    }
);
  }
}
