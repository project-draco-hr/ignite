{
  if (!propertiesSupported())   return;
  Map<String,String> props=properties(null,null,"0555");
  igfs.mkdirs(new IgfsPath("/x"),null);
  checkExist(igfs,igfsSecondary,new IgfsPath("/x"));
  igfs.mkdirs(new IgfsPath("/k/l"),null);
  checkExist(igfs,igfsSecondary,new IgfsPath("/k/l"));
  igfs.mkdirs(new IgfsPath("/x/y"),null);
  checkExist(igfs,igfsSecondary,new IgfsPath("/x/y"));
  igfs.mkdirs(new IgfsPath("/a/b/c/d"),null);
  checkExist(igfs,igfsSecondary,new IgfsPath("/a/b/c/d"));
  igfs.mkdirs(new IgfsPath("/a/b/c/d/e"),null);
  checkExist(igfs,igfsSecondary,new IgfsPath("/a/b/c/d/e"));
  create(igfs,null,new IgfsPath[]{new IgfsPath("/d/f")});
  checkExist(igfs,igfsSecondary,new IgfsPath("/d/f"));
  assertTrue(igfs.info(new IgfsPath("/d/f")).isFile());
  try {
    igfs.mkdirs(new IgfsPath("/d/f"),null);
    fail("IgfsParentNotDirectoryException expected.");
  }
 catch (  IgfsParentNotDirectoryException ignore) {
  }
catch (  IgfsException ignore) {
    if (!getClass().getSimpleName().startsWith("Hadoop"))     throw ignore;
  }
  try {
    igfs.mkdirs(new IgfsPath("/d/f/something/else"),null);
    fail("IgfsParentNotDirectoryException expected.");
  }
 catch (  IgfsParentNotDirectoryException ignore) {
  }
catch (  IgfsException ignore) {
    if (!getClass().getSimpleName().startsWith("Hadoop"))     throw ignore;
  }
  create(igfs,paths(DIR,SUBDIR),null);
  igfs.mkdirs(SUBSUBDIR,props);
  checkExist(igfs,igfsSecondary,SUBSUBDIR);
  if (permissionsSupported()) {
    if (dual)     assertEquals(props.get(IgfsUtils.PROP_PERMISSION),igfsSecondary.permissions(SUBSUBDIR.toString()));
    assertEquals(props.get(IgfsUtils.PROP_PERMISSION),igfs.info(SUBSUBDIR).properties().get(IgfsUtils.PROP_PERMISSION));
  }
}
