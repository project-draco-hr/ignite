{
  commState.setBuffer(buf);
  if (!super.readFrom(buf))   return false;
switch (commState.idx) {
case 2:
    if (commState.readSize == -1) {
      if (buf.remaining() < 4)       return false;
      commState.readSize=commState.getInt();
    }
  if (commState.readSize >= 0) {
    if (parts == null)     parts=U.newHashSet(commState.readSize);
    for (int i=commState.readItems; i < commState.readSize; i++) {
      if (buf.remaining() < 4)       return false;
      int _val=commState.getInt();
      parts.add((Integer)_val);
      commState.readItems++;
    }
  }
commState.readSize=-1;
commState.readItems=0;
commState.idx++;
case 3:
if (buf.remaining() < 8) return false;
timeout=commState.getLong();
commState.idx++;
case 4:
if (buf.remaining() < 8) return false;
topVer=commState.getLong();
commState.idx++;
case 5:
byte[] topicBytes0=commState.getByteArray();
if (topicBytes0 == BYTE_ARR_NOT_READ) return false;
topicBytes=topicBytes0;
commState.idx++;
case 6:
if (buf.remaining() < 8) return false;
updateSeq=commState.getLong();
commState.idx++;
case 7:
if (buf.remaining() < 4) return false;
workerId=commState.getInt();
commState.idx++;
}
return true;
}
