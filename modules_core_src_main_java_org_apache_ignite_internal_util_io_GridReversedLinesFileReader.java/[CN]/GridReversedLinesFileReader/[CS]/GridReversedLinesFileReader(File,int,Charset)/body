{
  this.blockSize=blockSize;
  this.encoding=charset;
  randomAccessFile=new RandomAccessFile(file,"r");
  totalByteLength=randomAccessFile.length();
  int lastBlockLength=(int)(totalByteLength % blockSize);
  if (lastBlockLength > 0) {
    totalBlockCount=totalByteLength / blockSize + 1;
  }
 else {
    totalBlockCount=totalByteLength / blockSize;
    if (totalByteLength > 0) {
      lastBlockLength=blockSize;
    }
  }
  currentFilePart=new FilePart(totalBlockCount,lastBlockLength,null);
  CharsetEncoder charsetEncoder=charset.newEncoder();
  float maxBytesPerChar=charsetEncoder.maxBytesPerChar();
  if (maxBytesPerChar == 1f) {
    byteDecrement=1;
  }
 else   if (charset == Charset.forName("UTF-8")) {
    byteDecrement=1;
  }
 else   if (charset == Charset.forName("Shift_JIS")) {
    byteDecrement=1;
  }
 else   if (charset == Charset.forName("UTF-16BE") || charset == Charset.forName("UTF-16LE")) {
    byteDecrement=2;
  }
 else   if (charset == Charset.forName("UTF-16")) {
    throw new UnsupportedEncodingException("For UTF-16, you need to specify the byte order (use UTF-16BE or UTF-16LE)");
  }
 else {
    throw new UnsupportedEncodingException("Encoding " + charset + " is not supported yet (feel free to submit a patch)");
  }
  newLineSequences=new byte[][]{"\r\n".getBytes(charset),"\n".getBytes(charset),"\r".getBytes(charset)};
  avoidNewlineSplitBufferSize=newLineSequences[0].length;
}
