{
  GridEx grid=grid(0);
  GridGgfs ggfs=grid.ggfs(ggfsName);
  String fileName="/testFile";
  long fileSize=256 * 1024;
  prepareFile(ggfs,fileName,fileSize);
  Collection<GridGgfsBlockLocation> aff=ggfs.affinity(new GridGgfsPath(fileName),0,fileSize);
  Collection<GridHadoopFileBlock> blocks=new ArrayList<>(aff.size());
  String[] hosts=new String[]{F.first(grid.localNode().hostNames())};
  for (  GridGgfsBlockLocation loc : aff) {
    GridHadoopFileBlock block=new GridHadoopFileBlock(hosts,new URI("ggfs://ipc" + fileName),loc.start(),loc.length());
    blocks.add(block);
  }
  GridKernal kernal=(GridKernal)grid;
  GridHadoopMapReducePlanner planner=kernal.context().hadoop().context().planner();
  Configuration cfg=jobConfiguration();
  GridHadoopDefaultJobInfo info=new GridHadoopDefaultJobInfo(cfg);
  GridHadoopJob job=new GridHadoopV2JobImpl(new GridHadoopJobId(UUID.randomUUID(),1),info);
  Collection<GridNode> nodes=grid.nodes();
  GridHadoopMapReducePlan plan=planner.preparePlan(blocks,nodes,job,null);
  int totalBlocks=0;
  for (  GridNode n : nodes)   totalBlocks+=plan.mappers(n.id()).size();
  assertEquals(aff.size(),totalBlocks);
  for (  GridGgfsBlockLocation loc : aff) {
    UUID primary=F.first(loc.nodeIds());
    Collection<GridHadoopFileBlock> mappers=plan.mappers(primary);
    assertTrue("Failed to find affinity block location in plan [loc=" + loc + ", mappers="+ mappers+ ']',hasLocation(loc,fileName,mappers));
  }
}
