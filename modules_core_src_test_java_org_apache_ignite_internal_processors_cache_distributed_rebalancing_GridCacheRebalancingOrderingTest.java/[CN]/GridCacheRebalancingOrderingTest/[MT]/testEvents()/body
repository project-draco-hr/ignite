{
  Ignite ignite=startGrid(0);
  ServerStarter srvStarter=startServers();
  IgniteCache<IntegerKey,Integer> cache=ignite.cache(TEST_CACHE_NAME);
  Map<Integer,IntegerKey> keyMap=generateKeysForPartitions(ignite,cache);
  Map<Integer,Set<IntegerKey>> partMap=new HashMap<>(keyMap.size());
  for (  Map.Entry<Integer,IntegerKey> entry : keyMap.entrySet()) {
    Integer part=entry.getKey();
    int affinity=entry.getValue().getKey();
    int cnt=RANDOM.nextInt(10) + 1;
    Set<IntegerKey> keys=new HashSet<>(cnt);
    for (int i=0; i < cnt; i++) {
      IntegerKey key=new IntegerKey(RANDOM.nextInt(10000),affinity);
      keys.add(key);
      cache.put(key,RANDOM.nextInt());
    }
    partMap.put(part,keys);
  }
  X.println("Partition Map:");
  for (  Map.Entry<Integer,Set<IntegerKey>> entry : partMap.entrySet())   X.println(entry.getKey() + ": " + entry.getValue());
  Affinity<IntegerKey> affinity=ignite.affinity(cache.getName());
  Map<IntegerKey,KeySetValidator> validatorMap=new HashMap<>(partMap.size());
  for (  Map.Entry<Integer,Set<IntegerKey>> partEntry : partMap.entrySet()) {
    Integer part=partEntry.getKey();
    validatorMap.put(keyMap.get(part),new KeySetValidator(partEntry.getValue()));
  }
  int i=0;
  while (!srvStarter.isDone()) {
    Map<IntegerKey,EntryProcessorResult<KeySetValidator.Result>> results=cache.invokeAll(validatorMap);
    Set<Integer> failures=new HashSet<>();
    Set<Integer> retries=new HashSet<>();
    for (    Map.Entry<IntegerKey,EntryProcessorResult<KeySetValidator.Result>> result : results.entrySet()) {
      try {
        if (result.getValue().get() == KeySetValidator.Result.RETRY)         retries.add(affinity.partition(result.getKey()));
      }
 catch (      Exception e) {
        X.println("!!! " + e.getMessage());
        e.printStackTrace();
        failures.add(affinity.partition(result.getKey()));
      }
    }
    if (!failures.isEmpty()) {
      X.println("*** Key validation failed for partitions: " + failures);
      fail("https://issues.apache.org/jira/browse/IGNITE-3456");
    }
 else     if (!retries.isEmpty()) {
      X.println("*** Key validation requires a retry for partitions: " + retries);
      retries.clear();
    }
 else     X.println("*** Key validation was successful: " + i);
    i++;
    Thread.sleep(500);
  }
}
