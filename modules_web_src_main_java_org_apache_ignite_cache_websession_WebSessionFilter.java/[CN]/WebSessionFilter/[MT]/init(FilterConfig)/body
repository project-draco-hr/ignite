{
  ctx=cfg.getServletContext();
  String gridName=U.firstNotNull(cfg.getInitParameter(WEB_SES_NAME_PARAM),ctx.getInitParameter(WEB_SES_NAME_PARAM));
  String cacheName=U.firstNotNull(cfg.getInitParameter(WEB_SES_CACHE_NAME_PARAM),ctx.getInitParameter(WEB_SES_CACHE_NAME_PARAM));
  String retriesStr=U.firstNotNull(cfg.getInitParameter(WEB_SES_MAX_RETRIES_ON_FAIL_NAME_PARAM),ctx.getInitParameter(WEB_SES_MAX_RETRIES_ON_FAIL_NAME_PARAM));
  try {
    retries=retriesStr != null ? Integer.parseInt(retriesStr) : DFLT_MAX_RETRIES_ON_FAIL;
  }
 catch (  NumberFormatException e) {
    throw new IgniteException("Maximum number of retries parameter is invalid: " + retriesStr,e);
  }
  Ignite webSesIgnite=G.ignite(gridName);
  if (webSesIgnite == null)   throw new IgniteException("Grid for web sessions caching is not started (is it configured?): " + gridName);
  txs=webSesIgnite.transactions();
  log=webSesIgnite.log();
  cache=webSesIgnite.cache(cacheName);
  if (cache == null)   throw new IgniteException("Cache for web sessions is not started (is it configured?): " + cacheName);
  CacheConfiguration cacheCfg=cache.getConfiguration(CacheConfiguration.class);
  if (cacheCfg.getWriteSynchronizationMode() == FULL_ASYNC)   throw new IgniteException("Cache for web sessions cannot be in FULL_ASYNC mode: " + cacheName);
  if (!cacheCfg.isEagerTtl())   throw new IgniteException("Cache for web sessions cannot operate with lazy TTL. " + "Consider setting eagerTtl to true for cache: " + cacheName);
  if (cacheCfg.getCacheMode() == LOCAL)   U.quietAndWarn(webSesIgnite.log(),"Using LOCAL cache for web sessions caching " + "(this is only OK in test mode): " + cacheName);
  if (cacheCfg.getCacheMode() == PARTITIONED && cacheCfg.getAtomicityMode() != ATOMIC)   U.quietAndWarn(webSesIgnite.log(),"Using " + cacheCfg.getAtomicityMode() + " atomicity for web sessions "+ "caching (switch to ATOMIC mode for better performance)");
  if (log.isInfoEnabled())   log.info("Started web sessions caching [gridName=" + gridName + ", cacheName="+ cacheName+ ", maxRetriesOnFail="+ retries+ ']');
  txEnabled=cacheCfg.getAtomicityMode() == TRANSACTIONAL;
  lsnr=new WebSessionListener(webSesIgnite,cache,retries);
  String srvInfo=ctx.getServerInfo();
  if (srvInfo != null && srvInfo.contains("WebLogic")) {
    sesIdTransformer=new C1<String,String>(){
      @Override public String apply(      String s){
        int idx=s.indexOf('!');
        if (idx < 0 || idx == s.length() - 1)         return s;
        idx=s.indexOf('!',idx + 1);
        if (idx < 0)         return s;
        return s.substring(0,idx);
      }
    }
;
  }
}
