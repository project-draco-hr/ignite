{
  Map<GridCacheVersion,Set<GridCacheVersion>> wfg=new HashMap<GridCacheVersion,Set<GridCacheVersion>>(){
{
      put(T1,Collections.singleton(T2));
      put(T2,Collections.singleton(T3));
      put(T3,Collections.singleton(T1));
    }
  }
;
  assertEquals(F.asList(T3,T2,T1,T3),findCycle(wfg,T1));
  assertEquals(F.asList(T1,T3,T2,T1),findCycle(wfg,T2));
  assertEquals(F.asList(T2,T1,T3,T2),findCycle(wfg,T3));
  assertAllNull(wfg,T1,T2,T3);
  wfg=new HashMap<GridCacheVersion,Set<GridCacheVersion>>(){
{
      put(T1,Collections.singleton(T2));
      put(T2,Collections.singleton(T3));
      put(T3,Collections.singleton(T4));
      put(T4,asLinkedHashSet(T2,T5));
    }
  }
;
  assertEquals(F.asList(T4,T3,T2,T4),findCycle(wfg,T1));
  assertEquals(F.asList(T4,T3,T2,T4),findCycle(wfg,T2));
  assertEquals(F.asList(T2,T4,T3,T2),findCycle(wfg,T3));
  assertEquals(F.asList(T3,T2,T4,T3),findCycle(wfg,T4));
  assertAllNull(wfg,T1,T2,T3,T4);
  wfg=new HashMap<GridCacheVersion,Set<GridCacheVersion>>(){
{
      put(T1,Collections.singleton(T2));
      put(T2,asLinkedHashSet(T3,T4));
      put(T3,Collections.singleton(T1));
      put(T4,Collections.singleton(T5));
      put(T5,Collections.singleton(T6));
      put(T6,Collections.singleton(T4));
    }
  }
;
  assertEquals(F.asList(T6,T5,T4,T6),findCycle(wfg,T1));
  assertEquals(F.asList(T6,T5,T4,T6),findCycle(wfg,T2));
  assertEquals(F.asList(T2,T1,T3,T2),findCycle(wfg,T3));
  wfg=new HashMap<GridCacheVersion,Set<GridCacheVersion>>(){
{
      put(T1,Collections.singleton(T2));
      put(T2,Collections.singleton(T3));
      put(T3,Collections.singleton(T4));
      put(T4,Collections.singleton(T5));
      put(T5,Collections.singleton(T6));
      put(T6,Collections.singleton(T4));
    }
  }
;
  assertEquals(F.asList(T6,T5,T4,T6),findCycle(wfg,T1));
  assertEquals(F.asList(T6,T5,T4,T6),findCycle(wfg,T2));
  assertEquals(F.asList(T6,T5,T4,T6),findCycle(wfg,T3));
  assertEquals(F.asList(T6,T5,T4,T6),findCycle(wfg,T4));
  assertEquals(F.asList(T4,T6,T5,T4),findCycle(wfg,T5));
  assertEquals(F.asList(T5,T4,T6,T5),findCycle(wfg,T6));
}
