{
  enterBusy();
  try {
    if (rmtClient != null)     throw new IOException("File system is already initialized: " + rmtClient);
    A.notNull(name,"name");
    A.notNull(cfg,"cfg");
    super.initialize(name,cfg);
    mgmt=cfg.getBoolean(GGFS_MANAGEMENT,false);
    if (!GGFS_SCHEME.equals(name.getScheme()))     throw new IOException("Illegal file system URI [expected=" + GGFS_SCHEME + "://[name]/[optional_path], actual="+ name+ ']');
    uriAuthority=name.getAuthority();
    try {
      uri=new URI(name.getScheme(),uriAuthority,name.getPath(),null,null);
    }
 catch (    URISyntaxException e) {
      throw new IOException("Failed to create URI for name: " + name,e);
    }
    String type=parameter(cfg,PARAM_GGFS_ENDPOINT_TYPE,uriAuthority,U.isWindows() ? IPC_TCP : IPC_SHMEM);
    String host=IPC_SHMEM.equals(type) ? IPC_SHMEM : parameter(cfg,PARAM_GGFS_ENDPOINT_HOST,uriAuthority,"127.0.0.1");
    int port=parameter(cfg,PARAM_GGFS_ENDPOINT_PORT,uriAuthority,DFLT_IPC_PORT);
    endpoint=host + ':' + port;
    rmtClient=new GridGgfsHadoop(LOG,endpoint);
    seqReadsBeforePrefetch=parameter(cfg,PARAM_GGFS_SEQ_READS_BEFORE_PREFETCH,uriAuthority,0);
    if (seqReadsBeforePrefetch > 0)     seqReadsBeforePrefetchOverride=true;
    dfltReplication=(short)cfg.getInt("dfs.replication",3);
    colocateFileWrites=parameter(cfg,PARAM_GGFS_COLOCATED_WRITES,uriAuthority,false);
    String logDirCfg=parameter(cfg,PARAM_GGFS_LOG_DIR,uriAuthority,DFLT_GGFS_LOG_DIR);
    File logDirFile=U.resolveGridGainPath(logDirCfg);
    String logDir=logDirFile != null ? logDirFile.getAbsolutePath() : null;
    GridGgfsHandshakeResponse handshake;
    GridGgfsPaths paths;
    try {
      handshake=rmtClient.handshake(logDir).get();
      paths=handshake.secondaryPaths();
    }
 catch (    GridException e) {
      throw new IOException("Failed to perform handshake with GGFS.",e);
    }
    ggfsGrpBlockSize=handshake.blockSize();
    Boolean logEnabled=parameter(cfg,PARAM_GGFS_LOG_ENABLED,uriAuthority,false);
    if (handshake.sampling() != null ? handshake.sampling() : logEnabled) {
      if (logDir == null)       throw new IOException("Failed to resolve log directory: " + logDirCfg);
      Integer batchSize=parameter(cfg,PARAM_GGFS_LOG_BATCH_SIZE,uriAuthority,DFLT_GGFS_LOG_BATCH_SIZE);
      clientLog=GridGgfsHadoopLogger.logger(endpoint,handshake.ggfsName(),logDir,batchSize);
    }
 else     clientLog=GridGgfsHadoopLogger.disabledLogger();
    modeRslvr=new GridGgfsModeResolver(paths.defaultMode(),paths.pathModes());
    boolean initSecondary=paths.defaultMode() == PROXY;
    if (paths.pathModes() != null && !paths.pathModes().isEmpty()) {
      for (      T2<GridGgfsPath,GridGgfsMode> pathMode : paths.pathModes()) {
        GridGgfsMode mode=pathMode.getValue();
        initSecondary|=mode == PROXY;
      }
    }
    if (initSecondary) {
      if (paths.secondaryConfigurationPath() == null)       throw new IOException("Failed to connect to the secondary file system because configuration " + "path is not provided.");
      if (paths.secondaryUri() == null)       throw new IOException("Failed to connect to the secondary file system because URI is not " + "provided.");
      String secondaryConfPath=paths.secondaryConfigurationPath();
      try {
        secondaryUri=new URI(paths.secondaryUri());
        URL secondaryCfgUrl=U.resolveGridGainUrl(secondaryConfPath);
        Configuration conf=new Configuration();
        if (secondaryCfgUrl != null)         conf.addResource(secondaryCfgUrl);
        String prop=String.format("fs.%s.impl.disable.cache",secondaryUri.getScheme());
        conf.setBoolean(prop,true);
        secondaryFs=FileSystem.get(secondaryUri,conf);
      }
 catch (      URISyntaxException ignore) {
        if (!mgmt)         throw new IOException("Failed to resolve secondary file system URI: " + paths.secondaryUri());
 else         LOG.warn("Visor failed to create secondary file system (operations on paths with PROXY mode " + "will have no effect).");
      }
catch (      IOException e) {
        if (!mgmt)         throw new IOException("Failed to connect to the secondary file system: " + paths.secondaryUri(),e);
 else         LOG.warn("Visor failed to create secondary file system (operations on paths with PROXY mode " + "will have no effect): " + e.getMessage());
      }
    }
  }
  finally {
    leaveBusy();
  }
}
