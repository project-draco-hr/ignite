{
  name=ccfg.getName();
  mode=ccfg.getCacheMode();
  atomicityMode=ccfg.getAtomicityMode();
  atomicWriteOrderMode=ccfg.getAtomicWriteOrderMode();
  eagerTtl=ccfg.isEagerTtl();
  writeSynchronizationMode=ccfg.getWriteSynchronizationMode();
  swapEnabled=ccfg.isSwapEnabled();
  invalidate=ccfg.isInvalidate();
  startSize=ccfg.getStartSize();
  offHeapMaxMemory=ccfg.getOffHeapMaxMemory();
  maxConcurrentAsyncOps=ccfg.getMaxConcurrentAsyncOperations();
  memoryMode=ccfg.getMemoryMode();
  interceptor=compactClass(ccfg.getInterceptor());
  typeMeta=VisorCacheTypeMetadata.list(ccfg.getTypeMetadata());
  statisticsEnabled=ccfg.isStatisticsEnabled();
  mgmtEnabled=ccfg.isManagementEnabled();
  ldrFactory=compactClass(ccfg.getCacheLoaderFactory());
  writerFactory=compactClass(ccfg.getCacheWriterFactory());
  expiryPlcFactory=compactClass(ccfg.getExpiryPolicyFactory());
  sys=ignite.context().cache().systemCache(ccfg.getName());
  affinityCfg=VisorCacheAffinityConfiguration.from(ccfg);
  rebalanceCfg=VisorCacheRebalanceConfiguration.from(ccfg);
  evictCfg=VisorCacheEvictionConfiguration.from(ccfg);
  nearCfg=VisorCacheNearConfiguration.from(ccfg);
  dfltCfg=VisorCacheDefaultConfiguration.from(ccfg);
  storeCfg=VisorCacheStoreConfiguration.from(ignite,ccfg);
  qryCfg=VisorCacheQueryConfiguration.from(ccfg);
  return this;
}
