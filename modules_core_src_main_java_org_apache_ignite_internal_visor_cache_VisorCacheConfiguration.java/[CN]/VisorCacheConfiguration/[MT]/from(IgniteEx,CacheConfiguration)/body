{
  name=ccfg.getName();
  mode=ccfg.getCacheMode();
  atomicityMode=ccfg.getAtomicityMode();
  atomicWriteOrderMode=ccfg.getAtomicWriteOrderMode();
  eagerTtl=ccfg.isEagerTtl();
  writeSynchronizationMode=ccfg.getWriteSynchronizationMode();
  swapEnabled=ccfg.isSwapEnabled();
  invalidate=ccfg.isInvalidate();
  startSize=ccfg.getStartSize();
  offHeapMaxMemory=ccfg.getOffHeapMaxMemory();
  maxConcurrentAsyncOps=ccfg.getMaxConcurrentAsyncOperations();
  memoryMode=ccfg.getMemoryMode();
  interceptor=compactClass(ccfg.getInterceptor());
  typeMeta=VisorCacheTypeMetadata.list(ccfg.getQueryEntities(),ccfg.getCacheStoreFactory(),ccfg.getTypeMetadata());
  statisticsEnabled=ccfg.isStatisticsEnabled();
  mgmtEnabled=ccfg.isManagementEnabled();
  ldrFactory=compactClass(ccfg.getCacheLoaderFactory());
  writerFactory=compactClass(ccfg.getCacheWriterFactory());
  expiryPlcFactory=compactClass(ccfg.getExpiryPolicyFactory());
  sys=ignite.context().cache().systemCache(ccfg.getName());
  affinityCfg=VisorCacheAffinityConfiguration.from(ccfg);
  rebalanceCfg=VisorCacheRebalanceConfiguration.from(ccfg);
  evictCfg=VisorCacheEvictionConfiguration.from(ccfg);
  nearCfg=VisorCacheNearConfiguration.from(ccfg);
  dfltCfg=VisorCacheDefaultConfiguration.from(ccfg);
  boolean compatibility=false;
  for (  org.apache.ignite.cluster.ClusterNode node : ignite.cluster().nodes()) {
    if (node.version().compareToIgnoreTimestamp(VER_1_4_1) <= 0) {
      compatibility=true;
      break;
    }
  }
  storeCfg=(compatibility ? new VisorCacheStoreConfiguration() : new VisorCacheStoreConfigurationV2()).from(ignite,ccfg);
  qryCfg=(compatibility ? new VisorCacheQueryConfiguration() : new VisorCacheQueryConfigurationV2()).from(ccfg);
  return this;
}
