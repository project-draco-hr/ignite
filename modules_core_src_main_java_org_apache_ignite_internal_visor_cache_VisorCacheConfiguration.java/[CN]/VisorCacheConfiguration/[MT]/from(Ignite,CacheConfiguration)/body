{
  GridCacheContext cctx=((IgniteKernal)ignite).internalCache(ccfg.getName()).context();
  boolean jdbcStore=cctx.store().configuredStore() instanceof CacheAbstractJdbcStore;
  VisorCacheConfiguration cfg=new VisorCacheConfiguration();
  cfg.name(ccfg.getName());
  cfg.mode(ccfg.getCacheMode());
  cfg.distributionMode(ccfg.getDistributionMode());
  cfg.atomicityMode(ccfg.getAtomicityMode());
  cfg.atomicWriteOrderMode(ccfg.getAtomicWriteOrderMode());
  cfg.eagerTtl(ccfg.isEagerTtl());
  cfg.writeSynchronizationMode(ccfg.getWriteSynchronizationMode());
  cfg.swapEnabled(ccfg.isSwapEnabled());
  cfg.queryIndexEnabled(ccfg.isQueryIndexEnabled());
  cfg.invalidate(ccfg.isInvalidate());
  cfg.startSize(ccfg.getStartSize());
  cfg.transactionManagerLookupClassName(ccfg.getTransactionManagerLookupClassName());
  cfg.offsetHeapMaxMemory(ccfg.getOffHeapMaxMemory());
  cfg.maxQueryIteratorCount(ccfg.getMaximumQueryIteratorCount());
  cfg.maxConcurrentAsyncOperations(ccfg.getMaxConcurrentAsyncOperations());
  cfg.memoryMode(ccfg.getMemoryMode());
  cfg.indexingSpiName(ccfg.getIndexingSpiName());
  cfg.interceptor(compactClass(ccfg.getInterceptor()));
  cfg.affinityConfiguration(VisorCacheAffinityConfiguration.from(ccfg));
  cfg.preloadConfiguration(VisorCachePreloadConfiguration.from(ccfg));
  cfg.evictConfiguration(VisorCacheEvictionConfiguration.from(ccfg));
  cfg.nearConfiguration(VisorCacheNearConfiguration.from(ccfg));
  cfg.defaultConfiguration(VisorCacheDefaultConfiguration.from(ccfg));
  cfg.storeConfiguration(VisorCacheStoreConfiguration.from(ccfg));
  cfg.writeBehind(VisorCacheWriteBehindConfiguration.from(ccfg));
  cfg.typeMeta(VisorCacheTypeMetadata.list(ccfg.getTypeMetadata()));
  cfg.jdbcStore(jdbcStore);
  cfg.readThrough(ccfg.isReadThrough());
  cfg.writeThrough(ccfg.isWriteThrough());
  cfg.statisticsEnabled(ccfg.isStatisticsEnabled());
  cfg.managementEnabled(ccfg.isManagementEnabled());
  cfg.loaderFactory(compactClass(ccfg.getCacheLoaderFactory()));
  cfg.writerFactory(compactClass(ccfg.getCacheWriterFactory()));
  cfg.expiryPolicyFactory(compactClass(ccfg.getExpiryPolicyFactory()));
  cfg.queryConfiguration(VisorCacheQueryConfiguration.from(ccfg.getQueryConfiguration()));
  return cfg;
}
