{
  ggfs.mkdirs(path("/A/B1/C1"));
  for (  Object key : metaCache.keySet())   info("Entry in cache [key=" + key + ", val="+ metaCache.get(key)+ ']');
  GridTestUtils.assertThrowsInherited(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      ggfs.rename(path("/A/B1/C1"),path("/A/B1/C1/C2"));
      return null;
    }
  }
,IgniteFsException.class,null);
  GridTestUtils.assertThrowsInherited(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      ggfs.rename(path("/A/B1/C1"),path("/A/B1/C1/D/C2"));
      return null;
    }
  }
,IgniteFsException.class,null);
  GridTestUtils.assertThrowsInherited(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      ggfs.rename(path("/A/B1/C1"),path("/A/B1/C1/D/E/C2"));
      return null;
    }
  }
,IgniteFsException.class,null);
  Collection<IgniteBiTuple<String,String>> chain=Arrays.asList(F.t("/A/B1/C1","/A/B1/C2"),F.t("/A/B1","/A/B2"),F.t("/A","/Q"),F.t("/Q/B2/C2","/Q/B2/C1"),F.t("/Q/B2","/Q/B1"),F.t("/Q","/A"),F.t("/A/B1/C1","/"),F.t("/C1","/A/B1"));
  final IgniteFsPath root=path("/");
  for (  IgniteBiTuple<String,String> e : chain) {
    final IgniteFsPath p1=path(e.get1());
    final IgniteFsPath p2=path(e.get2());
    assertTrue("Entry: " + e,ggfs.exists(p1));
    ggfs.rename(p1,p2);
    assertFalse("Entry: " + e,ggfs.exists(p1));
    assertTrue("Entry: " + e,ggfs.exists(p2));
    GridTestUtils.assertThrowsInherited(log,new Callable<Object>(){
      @Override public Object call() throws Exception {
        ggfs.rename(root,p1);
        return null;
      }
    }
,IgniteFsException.class,null);
    GridTestUtils.assertThrowsInherited(log,new Callable<Object>(){
      @Override public Object call() throws Exception {
        ggfs.rename(p1,root);
        return null;
      }
    }
,IgniteFsException.class,null);
    if (!root.equals(p2)) {
      GridTestUtils.assertThrowsInherited(log,new Callable<Object>(){
        @Override public Object call() throws Exception {
          ggfs.rename(root,p2);
          return null;
        }
      }
,IgniteFsException.class,null);
    }
    ggfs.rename(p1,p1);
    ggfs.rename(p2,p2);
  }
  assertEquals(Arrays.asList(path("/A")),sorted(ggfs.listPaths(root)));
  assertEquals(Arrays.asList(path("/A/B1")),sorted(ggfs.listPaths(path("/A"))));
  assertEquals(Arrays.asList(path("/A/B1/C1")),sorted(ggfs.listPaths(path("/A/B1"))));
  String text="Test long number: " + rnd.nextLong();
  assertEquals(text,create("/A/a",false,text));
  try (IgniteFsInputStream in0=ggfs.open(path("/A/a"))){
    ggfs.rename(path("/A/a"),path("/b"));
    assertEquals(text,IOUtils.toString(in0,UTF_8));
  }
   assertOpenFails("/A/a","File not found");
  assertEquals(text,read("/b"));
  ggfs.delete(root,true);
  assertEquals(Collections.<IgniteFsPath>emptyList(),ggfs.listPaths(root));
}
