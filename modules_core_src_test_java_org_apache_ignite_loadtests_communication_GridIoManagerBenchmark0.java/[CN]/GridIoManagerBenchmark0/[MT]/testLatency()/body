{
  final IgniteKernal sndKernal=(IgniteKernal)grid(0);
  final IgniteKernal rcvKernal=(IgniteKernal)grid(1);
  final ClusterNode sndNode=sndKernal.localNode();
  final ClusterNode rcvNode=rcvKernal.localNode();
  final GridIoManager snd=sndKernal.context().io();
  final GridIoManager rcv=rcvKernal.context().io();
  final LongAdder msgCntr=new LongAdder();
  final Integer topic=1;
  final Map<IgniteUuid,CountDownLatch> map=new ConcurrentHashMap8<>();
  rcv.addMessageListener(topic,new GridMessageListener(){
    @Override public void onMessage(    UUID nodeId,    Object msg){
      try {
        rcv.send(sndNode,topic,(MessageAdapter)msg,PUBLIC_POOL);
      }
 catch (      IgniteCheckedException e) {
        error("Failed to send message.",e);
      }
    }
  }
);
  snd.addMessageListener(topic,new GridMessageListener(){
    @Override public void onMessage(    UUID nodeId,    Object msg){
      map.get(((GridTestMessage)msg).id()).countDown();
    }
  }
);
  Timer t=new Timer("results-reporter");
  t.schedule(new TimerTask(){
    private long ts=System.currentTimeMillis();
    @Override public void run(){
      long newTs=System.currentTimeMillis();
      long qrys=msgCntr.sumThenReset();
      long time=newTs - ts;
      X.println("Communication benchmark [qps=" + qrys * 1000 / time + ", executed=" + qrys + ", time=" + time + ']');
      ts=newTs;
    }
  }
,10000,10000);
  final AtomicBoolean finish=new AtomicBoolean();
  IgniteInternalFuture<?> f=GridTestUtils.runMultiThreadedAsync(new Callable<Object>(){
    @Override public Object call() throws Exception {
      try {
        IgniteUuid msgId=IgniteUuid.randomUuid();
        while (!finish.get()) {
          CountDownLatch latch=new CountDownLatch(1);
          map.put(msgId,latch);
          snd.send(rcvNode,topic,new GridTestMessage(msgId,(String)null),PUBLIC_POOL);
          latch.await();
          msgCntr.increment();
        }
      }
 catch (      IgniteCheckedException e) {
        X.println("Message send failed",e);
      }
catch (      InterruptedException ignored) {
      }
      return null;
    }
  }
,1,"send-thread");
  Thread.sleep(TEST_TIMEOUT);
  finish.set(true);
  t.cancel();
  f.get();
}
