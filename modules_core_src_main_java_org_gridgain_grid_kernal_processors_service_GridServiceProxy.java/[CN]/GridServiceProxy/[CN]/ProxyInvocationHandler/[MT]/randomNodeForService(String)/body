{
  if (hasLocNode && ctx.service().service(name) != null)   return ctx.discovery().localNode();
  Map<UUID,Integer> snapshot=serviceTopology(name);
  if (snapshot == null || snapshot.isEmpty())   return null;
  if (snapshot.size() == 1) {
    UUID nodeId=snapshot.keySet().iterator().next();
    return prj.node(nodeId);
  }
  Collection<GridNode> nodes=prj.nodes();
  if (nodes.size() == 1) {
    GridNode n=nodes.iterator().next();
    return snapshot.containsKey(n.id()) ? n : null;
  }
  if (prj.predicate() == F.<GridNode>alwaysTrue()) {
    int idx=ThreadLocalRandom8.current().nextInt(snapshot.size());
    int i=0;
    for (    Map.Entry<UUID,Integer> e : snapshot.entrySet()) {
      if (i++ >= idx) {
        if (e.getValue() > 0)         return ctx.discovery().node(e.getKey());
      }
    }
    i=0;
    for (    Map.Entry<UUID,Integer> e : snapshot.entrySet()) {
      if (e.getValue() > 0)       return ctx.discovery().node(e.getKey());
      if (i++ == idx)       return null;
    }
  }
 else {
    List<GridNode> nodeList=new ArrayList<>(nodes.size());
    for (    GridNode n : nodes) {
      Integer cnt=snapshot.get(n.id());
      if (cnt != null && cnt > 0)       nodeList.add(n);
    }
    if (nodeList.isEmpty())     return null;
    int idx=ThreadLocalRandom8.current().nextInt(nodeList.size());
    return nodeList.get(idx);
  }
  return null;
}
