{
  int attempt=1;
  int connectAttempts=1;
  long connTimeout0=connTimeout;
  while (true) {
    IpcEndpoint clientEndpoint;
    try {
      clientEndpoint=new IpcSharedMemoryClientEndpoint(port,(int)connTimeout,log);
    }
 catch (    IgniteCheckedException e) {
      if (connectAttempts < 2 && X.hasCause(e,ConnectException.class)) {
        connectAttempts++;
        continue;
      }
      throw e;
    }
    GridHadoopCommunicationClient client=null;
    try {
      ShmemWorker worker=new ShmemWorker(clientEndpoint,false);
      shmemWorkers.add(worker);
      GridNioSession ses=worker.session();
      HandshakeFinish fin=new HandshakeFinish();
      ses.addMeta(HANDSHAKE_FINISH_META,fin);
      client=new GridHadoopTcpNioCommunicationClient(ses);
      new IgniteThread(worker).start();
      fin.await(connTimeout0);
    }
 catch (    GridHadoopHandshakeTimeoutException e) {
      if (log.isDebugEnabled())       log.debug("Handshake timed out (will retry with increased timeout) [timeout=" + connTimeout0 + ", err="+ e.getMessage()+ ", client="+ client+ ']');
      if (client != null)       client.forceClose();
      if (attempt == reconCnt || connTimeout0 > maxConnTimeout) {
        if (log.isDebugEnabled())         log.debug("Handshake timedout (will stop attempts to perform the handshake) " + "[timeout=" + connTimeout0 + ", maxConnTimeout="+ maxConnTimeout+ ", attempt="+ attempt+ ", reconCnt="+ reconCnt+ ", err="+ e.getMessage()+ ", client="+ client+ ']');
        throw e;
      }
 else {
        attempt++;
        connTimeout0*=2;
        continue;
      }
    }
catch (    RuntimeException|Error e) {
      if (log.isDebugEnabled())       log.debug("Caught exception (will close client) [err=" + e.getMessage() + ", client="+ client+ ']');
      if (client != null)       client.forceClose();
      throw e;
    }
    return client;
  }
}
