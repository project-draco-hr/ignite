{
  int threadCnt=150;
  final int keyCnt=2000;
  final int valCnt=10000;
  final Grid g=grid(0);
  final GridCache<Integer,String> c=g.cache(null);
  assertEquals(0,g.cache(null).size());
  assertEquals(0,c.queries().createSqlQuery(String.class,"1 = 1").execute().get().size());
  assertEquals(0,c.queries().createSqlQuery(Long.class,"1 = 1").execute().get().size());
  Random rnd=new Random();
  for (int i=0; i < keyCnt; i+=1 + rnd.nextInt(3)) {
    c.putx(i,String.valueOf(rnd.nextInt(valCnt)));
    if (evictsEnabled() && rnd.nextBoolean())     assertTrue(c.evict(i));
  }
  final AtomicBoolean done=new AtomicBoolean();
  GridFuture<?> fut=multithreadedAsync(new CAX(){
    @Override public void applyx() throws GridException {
      Random rnd=new Random();
      while (!done.get()) {
switch (rnd.nextInt(5)) {
case 0:
          c.putx(rnd.nextInt(keyCnt),String.valueOf(rnd.nextInt(valCnt)));
        break;
case 1:
      if (evictsEnabled())       c.evict(rnd.nextInt(keyCnt));
    break;
case 2:
  c.remove(rnd.nextInt(keyCnt));
break;
case 3:
c.get(rnd.nextInt(keyCnt));
break;
case 4:
GridCacheQuery<Map.Entry<Integer,String>> qry=c.queries().createSqlQuery(String.class,"_val between ? and ?");
int from=rnd.nextInt(valCnt);
GridCacheQueryFuture<Map.Entry<Integer,String>> fut=qry.execute(String.valueOf(from),String.valueOf(from + 250));
Collection<Map.Entry<Integer,String>> res=fut.get();
for (Map.Entry<Integer,String> ignored : res) {
}
}
}
}
}
,threadCnt);
Thread.sleep(DURATION);
done.set(true);
fut.get();
}
