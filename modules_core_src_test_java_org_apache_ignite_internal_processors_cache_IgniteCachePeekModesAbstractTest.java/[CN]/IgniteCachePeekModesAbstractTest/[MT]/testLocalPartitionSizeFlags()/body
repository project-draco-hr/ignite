{
  if (cacheMode() != LOCAL)   return;
  awaitPartitionMapExchange();
  checkEmpty();
  int part=0;
  IgniteCache<Integer,String> cache0=jcache(0);
  Set<Integer> keys=new HashSet<>();
  for (int i=0; i < 200; i++) {
    cache0.put(i,"test_val");
    keys.add(i);
  }
  try {
    int totalKeys=200;
    T2<Integer,Integer> swapKeys=swapKeysCount(0);
    T2<Integer,Integer> offheapKeys=offheapKeysCount(0);
    int totalSwap=swapKeys.get1() + swapKeys.get2();
    int totalOffheap=offheapKeys.get1() + offheapKeys.get2();
    log.info("Keys [total=" + totalKeys + ", offheap="+ offheapKeys+ ", swap="+ swapKeys+ ']');
    assertTrue(totalSwap + totalOffheap < totalKeys);
    assertEquals(totalKeys,cache0.localSize());
    assertEquals(totalKeys,cache0.localSizeLong(part,ALL));
    assertEquals(totalOffheap,cache0.localSizeLong(part,OFFHEAP));
    assertEquals(totalSwap,cache0.localSizeLong(part,SWAP));
    assertEquals(totalKeys - (totalSwap + totalOffheap),cache0.localSizeLong(part,ONHEAP));
    assertEquals(totalOffheap,cache0.sizeLong(part,OFFHEAP));
    assertEquals(totalSwap,cache0.sizeLong(part,SWAP));
    assertEquals(totalKeys - (totalSwap + totalOffheap),cache0.sizeLong(part,ONHEAP));
    assertEquals(totalOffheap,cache0.localSizeLong(part,OFFHEAP,PRIMARY));
    assertEquals(totalSwap,cache0.localSizeLong(part,SWAP,PRIMARY));
    assertEquals(totalKeys - (totalSwap + totalOffheap),cache0.localSizeLong(part,ONHEAP,PRIMARY));
    assertEquals(totalOffheap,cache0.localSizeLong(part,OFFHEAP,BACKUP));
    assertEquals(totalSwap,cache0.localSizeLong(part,SWAP,BACKUP));
    assertEquals(totalKeys - (totalSwap + totalOffheap),cache0.localSizeLong(part,ONHEAP,BACKUP));
  }
  finally {
    cache0.removeAll(keys);
  }
}
