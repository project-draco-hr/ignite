{
  ignite(0).createCache(ccfg);
  try {
    TestInterceptor2.onAfterRmv=0;
    TestInterceptor2.onBeforeRmv=0;
    TestInterceptor2.onAfterPut=0;
    TestInterceptor2.onBeforePut=0;
    TestInterceptor2.onGet=0;
    IgniteCache cache=ignite(0).cache(null).withKeepBinary();
    IgniteCache asyncCache=cache.withAsync();
    cache.put(1,10);
    cache.put(1,10);
    Integer obj=(Integer)cache.get(1);
    assertEquals((Integer)10,obj);
    asyncCache.get(1);
    obj=(Integer)asyncCache.future().get();
    assertEquals((Integer)10,obj);
    Cache.Entry<Integer,Integer> e=(Cache.Entry)cache.getEntry(1);
    assertEquals((Integer)1,e.getKey());
    assertEquals((Integer)10,e.getValue());
    asyncCache.getEntry(1);
    e=(Cache.Entry)asyncCache.future().get();
    assertEquals((Integer)1,e.getKey());
    assertEquals((Integer)10,e.getValue());
    obj=(Integer)cache.getAndRemove(1);
    assertEquals((Integer)10,obj);
    cache.put(1,10);
    assertTrue(cache.remove(1));
    assertTrue(TestInterceptor2.onAfterRmv > 0);
    assertTrue(TestInterceptor2.onBeforeRmv > 0);
    assertTrue(TestInterceptor2.onAfterPut > 0);
    assertTrue(TestInterceptor2.onBeforePut > 0);
    assertTrue(TestInterceptor2.onGet > 0);
  }
  finally {
    ignite(0).destroyCache(ccfg.getName());
  }
}
