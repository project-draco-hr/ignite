{
  assertNull(creator.reentrantLock("lock1",true,false,false));
  assertNull(other.reentrantLock("lock1",true,false,false));
  try (IgniteLock lock=creator.reentrantLock("lock1",true,false,true)){
    assertNotNull(lock);
    assertFalse(lock.isLocked());
    final Semaphore semaphore=new Semaphore(0);
    IgniteInternalFuture<?> fut=GridTestUtils.runAsync(new Callable<Object>(){
      @Override public Object call() throws Exception {
        IgniteLock lock0=other.reentrantLock("lock1",true,false,false);
        lock0.lock();
        assertTrue(lock0.isLocked());
        semaphore.release();
        U.sleep(1000);
        log.info("Release reentrant lock.");
        lock0.unlock();
        return null;
      }
    }
);
    semaphore.acquire();
    log.info("Try acquire lock.");
    assertTrue(lock.tryLock(5000,TimeUnit.MILLISECONDS));
    log.info("Finished wait.");
    fut.get();
    assertTrue(lock.isLocked());
    lock.unlock();
    assertFalse(lock.isLocked());
  }
   assertNull(creator.reentrantLock("lock1",true,false,false));
  assertNull(other.reentrantLock("lock1",true,false,false));
}
