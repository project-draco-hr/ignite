{
  if (!rs.next()) {
    assertTrue("Actual result set have to be empty.",actualRs.isEmpty());
    return;
  }
  assertTrue("Actual result set cannot be empty.",!actualRs.isEmpty());
  assertEquals("Column count have to be equal.",rs.getMetaData().getColumnCount(),actualRs.get(0).size());
  int rsRowsCnt=0;
  do {
    if (order == Order.ORDERED) {
      assertTrue("Current rows counter have to be less than size of actual rs.",rsRowsCnt < actualRs.size());
      List<?> row=actualRs.get(rsRowsCnt);
      boolean rowsAreEqual=rowEqualsCurrentRsRow(rs,row);
      assertTrue("Rows " + currentRsRow2String(rs) + " and "+ row+ " have to be equal.",rowsAreEqual);
    }
 else {
      boolean currRowIsFound=false;
      for (      List<?> row : actualRs) {
        if (rowEqualsCurrentRsRow(rs,row)) {
          currRowIsFound=true;
          break;
        }
      }
      assertTrue("A row " + currentRsRow2String(rs) + " not found at "+ actualRs+ '.',currRowIsFound);
    }
    rsRowsCnt++;
  }
 while (rs.next());
  assertEquals("Count of results.",rsRowsCnt,actualRs.size());
}
