{
  assertEquals("Rows count has to be equal.",rs1.size(),rs2.size());
switch (order) {
case ORDERED:
    for (int rowNum=0; rowNum < rs1.size(); rowNum++) {
      List<?> row1=rs1.get(rowNum);
      List<?> row2=rs2.get(rowNum);
      assertEquals("Columns count have to be equal.",row1.size(),row2.size());
      for (int colNum=0; colNum < row1.size(); colNum++)       assertEquals("Row=" + rowNum + ", column="+ colNum,row1.get(colNum),row2.get(colNum));
    }
  break;
case RANDOM:
Map<List<?>,Integer> rowsWithCnt1=extractUniqueueRowsWithCounts(rs1);
Map<List<?>,Integer> rowsWithCnt2=extractUniqueueRowsWithCounts(rs2);
assertEquals("Uniqueue rows count has to be equal.",rowsWithCnt1.size(),rowsWithCnt2.size());
for (Map.Entry<List<?>,Integer> entry1 : rowsWithCnt1.entrySet()) {
List<?> row=entry1.getKey();
Integer cnt1=entry1.getValue();
Integer cnt2=rowsWithCnt2.get(row);
assertEquals("Row has different occurance number.\nRow=" + row,cnt1,cnt2);
}
break;
default :
throw new IllegalStateException();
}
}
