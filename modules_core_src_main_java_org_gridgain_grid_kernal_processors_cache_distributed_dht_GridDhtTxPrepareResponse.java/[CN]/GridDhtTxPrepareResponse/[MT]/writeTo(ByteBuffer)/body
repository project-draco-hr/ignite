{
  commState.setBuffer(buf);
  if (!super.writeTo(buf))   return false;
  if (!commState.typeWritten) {
    if (!commState.putByte(directType()))     return false;
    commState.typeWritten=true;
  }
switch (commState.idx) {
case 9:
    if (!commState.putGridUuid(futId))     return false;
  commState.idx++;
case 10:
if (invalidParts != null) {
  if (commState.it == null) {
    if (!commState.putInt(invalidParts.size()))     return false;
    commState.it=invalidParts.iterator();
  }
  while (commState.it.hasNext() || commState.cur != NULL) {
    if (commState.cur == NULL)     commState.cur=commState.it.next();
    if (!commState.putInt((int)commState.cur))     return false;
    commState.cur=NULL;
  }
  commState.it=null;
}
 else {
  if (!commState.putInt(-1))   return false;
}
commState.idx++;
case 11:
if (!commState.putGridUuid(miniId)) return false;
commState.idx++;
case 12:
if (nearEvictedBytes != null) {
if (commState.it == null) {
if (!commState.putInt(nearEvictedBytes.size())) return false;
commState.it=nearEvictedBytes.iterator();
}
while (commState.it.hasNext() || commState.cur != NULL) {
if (commState.cur == NULL) commState.cur=commState.it.next();
if (!commState.putByteArray((byte[])commState.cur)) return false;
commState.cur=NULL;
}
commState.it=null;
}
 else {
if (!commState.putInt(-1)) return false;
}
commState.idx++;
case 13:
if (preloadEntriesBytes != null) {
if (commState.it == null) {
if (!commState.putInt(preloadEntriesBytes.size())) return false;
commState.it=preloadEntriesBytes.iterator();
}
while (commState.it.hasNext() || commState.cur != NULL) {
if (commState.cur == NULL) commState.cur=commState.it.next();
if (!commState.putByteArray((byte[])commState.cur)) return false;
commState.cur=NULL;
}
commState.it=null;
}
 else {
if (!commState.putInt(-1)) return false;
}
commState.idx++;
}
return true;
}
