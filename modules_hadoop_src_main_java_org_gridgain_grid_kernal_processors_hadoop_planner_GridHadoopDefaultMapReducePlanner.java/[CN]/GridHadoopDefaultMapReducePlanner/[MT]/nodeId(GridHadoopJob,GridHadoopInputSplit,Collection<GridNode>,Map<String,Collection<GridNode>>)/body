{
  GridHadoopFileBlock block=(GridHadoopFileBlock)split;
  if (log.isDebugEnabled())   log.debug("Mapping split to node: " + split);
  GridGgfs ggfs=ggfsForBlock(job,block);
  if (ggfs != null) {
    if (log.isDebugEnabled())     log.debug("Mapping file block according to ggfs affinity: " + block);
    Collection<GridGgfsBlockLocation> aff=ggfs.affinity(new GridGgfsPath(block.file()),block.start(),block.length());
    long maxLen=Long.MIN_VALUE;
    UUID max=null;
    for (    GridGgfsBlockLocation loc : aff) {
      if (maxLen < loc.length()) {
        maxLen=loc.length();
        max=F.first(loc.nodeIds());
      }
    }
    return max;
  }
 else {
    for (    String host : split.hosts()) {
      GridNode node=F.first(hostNodeMap.get(host));
      if (node != null)       return node.id();
    }
    if (log.isDebugEnabled())     log.debug("Could not find node by hostname, returning random node: " + split);
    int idx=ThreadLocalRandom8.current().nextInt(top.size());
    Iterator<GridNode> it=top.iterator();
    int i=0;
    while (it.hasNext()) {
      GridNode node=it.next();
      if (i == idx)       return node.id();
      i++;
    }
    return null;
  }
}
