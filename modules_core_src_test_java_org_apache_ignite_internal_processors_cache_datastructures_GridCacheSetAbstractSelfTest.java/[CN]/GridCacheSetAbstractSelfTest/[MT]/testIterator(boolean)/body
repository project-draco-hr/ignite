{
  IgniteCollectionConfiguration colCfg=config(collocated);
  final IgniteSet<Integer> set0=grid(0).set(SET_NAME,colCfg,true);
  for (int i=0; i < gridCount(); i++) {
    IgniteSet<Integer> set=grid(i).set(SET_NAME,null,false);
    assertFalse(set.iterator().hasNext());
  }
  int cnt=0;
  for (int i=0; i < gridCount(); i++) {
    Set<Integer> set=grid(i).set(SET_NAME,null,false);
    for (int j=0; j < 100; j++)     assertTrue(set.add(cnt++));
  }
  for (int i=0; i < gridCount(); i++) {
    IgniteSet<Integer> set=grid(i).set(SET_NAME,null,false);
    assertSetContent(set,cnt);
  }
  Collection<Integer> data=new HashSet<>(cnt);
  Iterator<Integer> iter=set0.iterator();
  for (int i=0; i < cnt; i++)   assertTrue(data.add(iter.next()));
  assertFalse(iter.hasNext());
  assertEquals(cnt,data.size());
  for (int i=0; i < cnt; i++)   assertTrue(data.contains(i));
  set0.clear();
  for (int i=0; i < gridCount(); i++) {
    IgniteSet<Integer> set=grid(i).set(SET_NAME,null,false);
    assertFalse(set.iterator().hasNext());
  }
  for (int i=0; i < 10; i++)   assertTrue(set0.add(i));
  iter=set0.iterator();
  while (iter.hasNext()) {
    Integer val=iter.next();
    if (val % 2 == 0)     iter.remove();
  }
  for (int i=0; i < gridCount(); i++) {
    Set<Integer> set=grid(i).set(SET_NAME,null,false);
    assertEquals(i % 2 != 0,set.contains(i));
  }
}
