{
  final StreamerBoundedTimeBatchWindow<Integer> win=new StreamerBoundedTimeBatchWindow<>();
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      win.start();
      return null;
    }
  }
,IgniteCheckedException.class,null);
  win.setBatchSize(50);
  win.setBatchTimeInterval(500);
  win.setMaximumBatches(2);
  win.start();
  for (int i=0; i < 25; i++)   win.enqueue(i);
  U.sleep(1000);
  Collection<Integer> evicted=win.pollEvictedBatch();
  assertNotNull(evicted);
  assertEquals(25,evicted.size());
  for (int i=0; i < 101; i++)   win.enqueue(i);
  evicted=win.pollEvictedBatch();
  assertNotNull(evicted);
  assertEquals(50,evicted.size());
  U.sleep(1000);
  evicted=win.pollEvictedBatch();
  assertNotNull(evicted);
  assertEquals(50,evicted.size());
  evicted=win.pollEvictedBatch();
  assertNotNull(evicted);
  assertEquals(1,evicted.size());
  checkIterator(win);
  win.setMaximumBatches(2);
  win.setBatchSize(2);
  win.setBatchTimeInterval(200);
  win.start();
  win.enqueue(1,2,3,4,5,6,7);
  checkSnapshot(win.snapshot(true),1,2,3,4,5,6,7);
  checkSnapshot(win.snapshot(false),5,6,7);
  U.sleep(400);
  checkSnapshot(win.snapshot(true),1,2,3,4,5,6,7);
  checkSnapshot(win.snapshot(false));
}
