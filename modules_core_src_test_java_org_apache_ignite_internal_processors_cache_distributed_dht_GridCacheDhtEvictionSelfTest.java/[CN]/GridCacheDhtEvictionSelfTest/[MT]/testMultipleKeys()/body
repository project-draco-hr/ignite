{
  final int keyCnt=1000;
  final Ignite primaryIgnite=grid(0);
  final Ignite backupIgnite=grid(1);
  GridNearCacheAdapter<Integer,String> nearPrimary=near(primaryIgnite);
  GridDhtCacheAdapter<Integer,String> dhtPrimary=dht(primaryIgnite);
  GridNearCacheAdapter<Integer,String> nearBackup=near(backupIgnite);
  GridDhtCacheAdapter<Integer,String> dhtBackup=dht(backupIgnite);
  Collection<Integer> keys=new ArrayList<>(keyCnt);
  for (int key=0; keys.size() < keyCnt; key++)   if (F.eqNodes(primaryIgnite.cluster().localNode(),F.first(keyNodes(key))))   keys.add(key++);
  info("Test keys: " + keys);
  for (  Integer key : keys)   nearPrimary.put(key,"v" + key,null);
  for (  Integer key : keys) {
    String val="v" + key;
    assertEquals(val,localPeek(nearPrimary,key));
    assertEquals(val,localPeek(dhtPrimary,key));
    assertEquals(val,localPeek(nearBackup,key));
    assertEquals(val,localPeek(dhtBackup,key));
  }
  final AtomicInteger cntBackup=new AtomicInteger();
  IgniteFuture<Event> futBackup=waitForLocalEvent(backupIgnite.events(),new P1<Event>(){
    @Override public boolean apply(    Event e){
      return e.node().id().equals(backupIgnite.cluster().localNode().id()) && cntBackup.incrementAndGet() == keyCnt;
    }
  }
,EVT_CACHE_ENTRY_EVICTED);
  final AtomicInteger cntPrimary=new AtomicInteger();
  IgniteFuture<Event> futPrimary=waitForLocalEvent(primaryIgnite.events(),new P1<Event>(){
    @Override public boolean apply(    Event e){
      return e.node().id().equals(primaryIgnite.cluster().localNode().id()) && cntPrimary.incrementAndGet() == keyCnt;
    }
  }
,EVT_CACHE_ENTRY_EVICTED);
  for (  Integer key : keys)   primaryIgnite.cache(null).localEvict(Collections.<Object>singleton(key));
  futBackup.get(3000);
  futPrimary.get(3000);
  info("nearBackupSize: " + nearBackup.size());
  info("dhtBackupSize: " + dhtBackup.size());
  info("nearPrimarySize: " + nearPrimary.size());
  info("dhtPrimarySize: " + dhtPrimary.size());
  for (  Integer key : keys) {
    String msg="Failed key: " + key;
    assertNull(msg,localPeek(nearBackup,key));
    assertNull(msg,localPeek(dhtBackup,key));
    assertNull(msg,nearBackup.peekEx(key));
    assertNull(msg,dhtBackup.peekEx(key));
  }
  for (  Integer key : keys) {
    String msg="Failed key: " + key;
    assertNull(msg,localPeek(nearPrimary,key));
    assertNull(msg,localPeek(dhtPrimary,key));
    assertNull(msg,nearPrimary.peekEx(key));
    assertNull(dhtPrimary.peekEx(key));
  }
}
