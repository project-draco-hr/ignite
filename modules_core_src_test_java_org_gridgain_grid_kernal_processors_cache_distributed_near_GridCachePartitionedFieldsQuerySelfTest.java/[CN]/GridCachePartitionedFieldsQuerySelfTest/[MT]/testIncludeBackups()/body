{
  GridCacheQuery<List<?>> qry=grid(0).cache(null).queries().createSqlFieldsQuery("select _KEY, name, age from Person");
  qry.includeBackups(true);
  GridCacheQueryFuture<List<?>> fut=qry.execute();
  List<List<?>> res=new ArrayList<>(fut.get());
  assertNotNull("Result",res);
  assertEquals("Result",res.size(),6);
  Collections.sort(res,new Comparator<List<?>>(){
    @Override public int compare(    List<?> row1,    List<?> row2){
      return ((Integer)row1.get(2)).compareTo((Integer)row2.get(2));
    }
  }
);
  int cnt=0;
  for (  List<?> row : res) {
    assertEquals("Row size",3,row.size());
    if (cnt == 0 || cnt == 1) {
      assertEquals("Key",new GridCacheAffinityKey<>("p1","o1"),row.get(0));
      assertEquals("Name","John White",row.get(1));
      assertEquals("Age",25,row.get(2));
    }
 else     if (cnt == 2 || cnt == 3) {
      assertEquals("Key",new GridCacheAffinityKey<>("p2","o1"),row.get(0));
      assertEquals("Name","Joe Black",row.get(1));
      assertEquals("Age",35,row.get(2));
    }
 else     if (cnt == 4 || cnt == 5) {
      assertEquals("Key",new GridCacheAffinityKey<>("p3","o2"),row.get(0));
      assertEquals("Name","Mike Green",row.get(1));
      assertEquals("Age",40,row.get(2));
    }
    cnt++;
  }
  assertEquals("Result count",6,cnt);
}
