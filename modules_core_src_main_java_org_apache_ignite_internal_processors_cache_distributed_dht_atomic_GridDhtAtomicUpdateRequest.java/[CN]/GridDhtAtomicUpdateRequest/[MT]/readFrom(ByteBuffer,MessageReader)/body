{
  reader.setBuffer(buf);
  if (!reader.beforeMessageRead())   return false;
  if (!super.readFrom(buf,reader))   return false;
switch (reader.state()) {
case 3:
    conflictExpireTimes=reader.readMessage("conflictExpireTimes");
  if (!reader.isLastRead())   return false;
reader.incrementState();
case 4:
conflictVers=reader.readCollection("conflictVers",MessageCollectionItemType.MSG);
if (!reader.isLastRead()) return false;
reader.incrementState();
case 5:
entryProcessorsBytes=reader.readCollection("entryProcessorsBytes",MessageCollectionItemType.BYTE_ARR);
if (!reader.isLastRead()) return false;
reader.incrementState();
case 6:
flags=reader.readByte("flags");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 7:
forceTransformBackups=reader.readBoolean("forceTransformBackups");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 8:
futVer=reader.readMessage("futVer");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 9:
invokeArgsBytes=reader.readObjectArray("invokeArgsBytes",MessageCollectionItemType.BYTE_ARR,byte[].class);
if (!reader.isLastRead()) return false;
reader.incrementState();
case 10:
keepBinary=reader.readBoolean("keepBinary");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 11:
keys=reader.readCollection("keys",MessageCollectionItemType.MSG);
if (!reader.isLastRead()) return false;
reader.incrementState();
case 12:
nearEntryProcessorsBytes=reader.readCollection("nearEntryProcessorsBytes",MessageCollectionItemType.BYTE_ARR);
if (!reader.isLastRead()) return false;
reader.incrementState();
case 13:
nearExpireTimes=reader.readMessage("nearExpireTimes");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 14:
nearKeys=reader.readCollection("nearKeys",MessageCollectionItemType.MSG);
if (!reader.isLastRead()) return false;
reader.incrementState();
case 15:
nearTtls=reader.readMessage("nearTtls");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 16:
nearVals=reader.readCollection("nearVals",MessageCollectionItemType.MSG);
if (!reader.isLastRead()) return false;
reader.incrementState();
case 17:
prevVals=reader.readCollection("prevVals",MessageCollectionItemType.MSG);
if (!reader.isLastRead()) return false;
reader.incrementState();
case 18:
subjId=reader.readUuid("subjId");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 19:
byte syncModeOrd;
syncModeOrd=reader.readByte("syncMode");
if (!reader.isLastRead()) return false;
syncMode=CacheWriteSynchronizationMode.fromOrdinal(syncModeOrd);
reader.incrementState();
case 20:
taskNameHash=reader.readInt("taskNameHash");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 21:
topVer=reader.readMessage("topVer");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 22:
ttls=reader.readMessage("ttls");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 23:
updateCntrs=reader.readMessage("updateCntrs");
if (!reader.isLastRead()) return false;
reader.incrementState();
case 24:
vals=reader.readCollection("vals",MessageCollectionItemType.MSG);
if (!reader.isLastRead()) return false;
reader.incrementState();
case 25:
writeVer=reader.readMessage("writeVer");
if (!reader.isLastRead()) return false;
reader.incrementState();
}
return reader.afterMessageRead(GridDhtAtomicUpdateRequest.class);
}
