{
  commState.setBuffer(buf);
  if (!super.writeTo(buf))   return false;
  if (!commState.typeWritten) {
    if (!commState.putByte(null,directType()))     return false;
    commState.typeWritten=true;
  }
switch (commState.idx) {
case 3:
    if (!commState.putLongList("drExpireTimes",drExpireTimes))     return false;
  commState.idx++;
case 4:
if (drVers != null) {
  if (commState.it == null) {
    if (!commState.putInt(null,drVers.size()))     return false;
    commState.it=drVers.iterator();
  }
  while (commState.it.hasNext() || commState.cur != NULL) {
    if (commState.cur == NULL)     commState.cur=commState.it.next();
    if (!commState.putCacheVersion(null,(GridCacheVersion)commState.cur))     return false;
    commState.cur=NULL;
  }
  commState.it=null;
}
 else {
  if (!commState.putInt(null,-1))   return false;
}
commState.idx++;
case 5:
if (!commState.putCacheVersion("futVer",futVer)) return false;
commState.idx++;
case 6:
if (invokeArgsBytes != null) {
if (commState.it == null) {
if (!commState.putInt(null,invokeArgsBytes.length)) return false;
commState.it=arrayIterator(invokeArgsBytes);
}
while (commState.it.hasNext() || commState.cur != NULL) {
if (commState.cur == NULL) commState.cur=commState.it.next();
if (!commState.putByteArray(null,(byte[])commState.cur)) return false;
commState.cur=NULL;
}
commState.it=null;
}
 else {
if (!commState.putInt(null,-1)) return false;
}
commState.idx++;
case 7:
if (keyBytes != null) {
if (commState.it == null) {
if (!commState.putInt(null,keyBytes.size())) return false;
commState.it=keyBytes.iterator();
}
while (commState.it.hasNext() || commState.cur != NULL) {
if (commState.cur == NULL) commState.cur=commState.it.next();
if (!commState.putByteArray(null,(byte[])commState.cur)) return false;
commState.cur=NULL;
}
commState.it=null;
}
 else {
if (!commState.putInt(null,-1)) return false;
}
commState.idx++;
case 8:
if (!commState.putLongList("nearExpireTimes",nearExpireTimes)) return false;
commState.idx++;
case 9:
if (!commState.putLongList("nearTtls",nearTtls)) return false;
commState.idx++;
case 10:
if (!commState.putUuid("nodeId",nodeId)) return false;
commState.idx++;
case 11:
if (!commState.putEnum("syncMode",syncMode)) return false;
commState.idx++;
case 12:
if (!commState.putLong("topVer",topVer)) return false;
commState.idx++;
case 13:
if (!commState.putLongList("ttls",ttls)) return false;
commState.idx++;
case 14:
if (valBytes != null) {
if (commState.it == null) {
if (!commState.putInt(null,valBytes.size())) return false;
commState.it=valBytes.iterator();
}
while (commState.it.hasNext() || commState.cur != NULL) {
if (commState.cur == NULL) commState.cur=commState.it.next();
if (!commState.putValueBytes(null,(GridCacheValueBytes)commState.cur)) return false;
commState.cur=NULL;
}
commState.it=null;
}
 else {
if (!commState.putInt(null,-1)) return false;
}
commState.idx++;
case 15:
if (!commState.putCacheVersion("writeVer",writeVer)) return false;
commState.idx++;
case 16:
if (nearKeyBytes != null) {
if (commState.it == null) {
if (!commState.putInt(null,nearKeyBytes.size())) return false;
commState.it=nearKeyBytes.iterator();
}
while (commState.it.hasNext() || commState.cur != NULL) {
if (commState.cur == NULL) commState.cur=commState.it.next();
if (!commState.putByteArray(null,(byte[])commState.cur)) return false;
commState.cur=NULL;
}
commState.it=null;
}
 else {
if (!commState.putInt(null,-1)) return false;
}
commState.idx++;
case 17:
if (nearValBytes != null) {
if (commState.it == null) {
if (!commState.putInt(null,nearValBytes.size())) return false;
commState.it=nearValBytes.iterator();
}
while (commState.it.hasNext() || commState.cur != NULL) {
if (commState.cur == NULL) commState.cur=commState.it.next();
if (!commState.putValueBytes(null,(GridCacheValueBytes)commState.cur)) return false;
commState.cur=NULL;
}
commState.it=null;
}
 else {
if (!commState.putInt(null,-1)) return false;
}
commState.idx++;
case 18:
if (entryProcessorsBytes != null) {
if (commState.it == null) {
if (!commState.putInt(null,entryProcessorsBytes.size())) return false;
commState.it=entryProcessorsBytes.iterator();
}
while (commState.it.hasNext() || commState.cur != NULL) {
if (commState.cur == NULL) commState.cur=commState.it.next();
if (!commState.putByteArray(null,(byte[])commState.cur)) return false;
commState.cur=NULL;
}
commState.it=null;
}
 else {
if (!commState.putInt(null,-1)) return false;
}
commState.idx++;
case 19:
if (!commState.putBoolean("forceTransformBackups",forceTransformBackups)) return false;
commState.idx++;
case 20:
if (nearEntryProcessorsBytes != null) {
if (commState.it == null) {
if (!commState.putInt(null,nearEntryProcessorsBytes.size())) return false;
commState.it=nearEntryProcessorsBytes.iterator();
}
while (commState.it.hasNext() || commState.cur != NULL) {
if (commState.cur == NULL) commState.cur=commState.it.next();
if (!commState.putByteArray(null,(byte[])commState.cur)) return false;
commState.cur=NULL;
}
commState.it=null;
}
 else {
if (!commState.putInt(null,-1)) return false;
}
commState.idx++;
case 21:
if (!commState.putUuid("subjId",subjId)) return false;
commState.idx++;
case 22:
if (!commState.putInt("taskNameHash",taskNameHash)) return false;
commState.idx++;
}
return true;
}
