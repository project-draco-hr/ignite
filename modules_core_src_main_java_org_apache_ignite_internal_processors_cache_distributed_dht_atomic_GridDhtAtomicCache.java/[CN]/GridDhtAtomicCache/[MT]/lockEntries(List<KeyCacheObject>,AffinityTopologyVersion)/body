{
  if (keys.size() == 1) {
    KeyCacheObject key=keys.get(0);
    while (true) {
      try {
        GridDhtCacheEntry entry=entryExx(key,topVer);
        GridUnsafe.monitorEnter(entry);
        if (entry.obsolete())         GridUnsafe.monitorExit(entry);
 else         return Collections.singletonList(entry);
      }
 catch (      GridDhtInvalidPartitionException e) {
        if (ctx.config().getAtomicWriteOrderMode() == CLOCK)         return Collections.singletonList(null);
 else         throw e;
      }
    }
  }
 else {
    List<GridDhtCacheEntry> locked=new ArrayList<>(keys.size());
    while (true) {
      for (      KeyCacheObject key : keys) {
        try {
          GridDhtCacheEntry entry=entryExx(key,topVer);
          locked.add(entry);
        }
 catch (        GridDhtInvalidPartitionException e) {
          if (ctx.config().getAtomicWriteOrderMode() == CLOCK)           locked.add(null);
 else           throw e;
        }
      }
      boolean retry=false;
      for (int i=0; i < locked.size(); i++) {
        GridCacheMapEntry entry=locked.get(i);
        if (entry == null)         continue;
        GridUnsafe.monitorEnter(entry);
        if (entry.obsolete()) {
          for (int j=0; j <= i; j++) {
            if (locked.get(j) != null)             GridUnsafe.monitorExit(locked.get(j));
          }
          locked.clear();
          retry=true;
          break;
        }
      }
      if (!retry)       return locked;
    }
  }
}
