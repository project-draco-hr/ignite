{
  super.start();
  CacheMetricsImpl m=new CacheMetricsImpl(ctx);
  if (ctx.dht().near() != null)   m.delegate(ctx.dht().near().metrics0());
  metrics=m;
  preldr=new GridDhtPreloader(ctx);
  preldr.start();
  ctx.io().addHandler(ctx.cacheId(),GridNearGetRequest.class,new CI2<UUID,GridNearGetRequest>(){
    @Override public void apply(    UUID nodeId,    GridNearGetRequest req){
      processNearGetRequest(nodeId,req);
    }
  }
);
  ctx.io().addHandler(ctx.cacheId(),GridNearSingleGetRequest.class,new CI2<UUID,GridNearSingleGetRequest>(){
    @Override public void apply(    UUID nodeId,    GridNearSingleGetRequest req){
      processNearSingleGetRequest(nodeId,req);
    }
  }
);
  ctx.io().addHandler(ctx.cacheId(),GridNearAtomicUpdateRequest.class,new CI2<UUID,GridNearAtomicUpdateRequest>(){
    @Override public void apply(    UUID nodeId,    GridNearAtomicUpdateRequest req){
      processNearAtomicUpdateRequest(nodeId,req);
    }
  }
);
  ctx.io().addHandler(ctx.cacheId(),GridNearAtomicUpdateResponse.class,new CI2<UUID,GridNearAtomicUpdateResponse>(){
    @Override public void apply(    UUID nodeId,    GridNearAtomicUpdateResponse res){
      processNearAtomicUpdateResponse(nodeId,res);
    }
  }
);
  ctx.io().addHandler(ctx.cacheId(),GridDhtAtomicUpdateRequest.class,new CI2<UUID,GridDhtAtomicUpdateRequest>(){
    @Override public void apply(    UUID nodeId,    GridDhtAtomicUpdateRequest req){
      processDhtAtomicUpdateRequest(nodeId,req);
    }
  }
);
  ctx.io().addHandler(ctx.cacheId(),GridDhtAtomicUpdateResponse.class,new CI2<UUID,GridDhtAtomicUpdateResponse>(){
    @Override public void apply(    UUID nodeId,    GridDhtAtomicUpdateResponse res){
      processDhtAtomicUpdateResponse(nodeId,res);
    }
  }
);
  ctx.io().addHandler(ctx.cacheId(),GridDhtAtomicDeferredUpdateResponse.class,new CI2<UUID,GridDhtAtomicDeferredUpdateResponse>(){
    @Override public void apply(    UUID nodeId,    GridDhtAtomicDeferredUpdateResponse res){
      processDhtAtomicDeferredUpdateResponse(nodeId,res);
    }
  }
);
  if (near == null) {
    ctx.io().addHandler(ctx.cacheId(),GridNearGetResponse.class,new CI2<UUID,GridNearGetResponse>(){
      @Override public void apply(      UUID nodeId,      GridNearGetResponse res){
        processNearGetResponse(nodeId,res);
      }
    }
);
    ctx.io().addHandler(ctx.cacheId(),GridNearSingleGetResponse.class,new CI2<UUID,GridNearSingleGetResponse>(){
      @Override public void apply(      UUID nodeId,      GridNearSingleGetResponse res){
        processNearSingleGetResponse(nodeId,res);
      }
    }
);
  }
}
