{
  super.start();
  deferredUpdateMessageSender=new GridDeferredAckMessageSender(ctx.time(),ctx.closures()){
    @Override public int getTimeout(){
      return DEFERRED_UPDATE_RESPONSE_TIMEOUT;
    }
    @Override public int getBufferSize(){
      return DEFERRED_UPDATE_RESPONSE_BUFFER_SIZE;
    }
    @Override public void finish(    UUID nodeId,    ConcurrentLinkedDeque8<GridCacheVersion> vers){
      GridDhtAtomicDeferredUpdateResponse msg=new GridDhtAtomicDeferredUpdateResponse(ctx.cacheId(),vers,ctx.deploymentEnabled());
      try {
        ctx.kernalContext().gateway().readLock();
        try {
          ctx.io().send(nodeId,msg,ctx.ioPolicy());
          if (msgLog.isDebugEnabled()) {
            msgLog.debug("Sent deferred DHT update response [futIds=" + msg.futureVersions() + ", node="+ nodeId+ ']');
          }
        }
  finally {
          ctx.kernalContext().gateway().readUnlock();
        }
      }
 catch (      IllegalStateException ignored) {
        if (msgLog.isDebugEnabled()) {
          msgLog.debug("Failed to send deferred DHT update response, node is stopping [" + "futIds=" + msg.futureVersions() + ", node="+ nodeId+ ']');
        }
      }
catch (      ClusterTopologyCheckedException ignored) {
        if (msgLog.isDebugEnabled()) {
          msgLog.debug("Failed to send deferred DHT update response, node left [" + "futIds=" + msg.futureVersions() + ", node="+ nodeId+ ']');
        }
      }
catch (      IgniteCheckedException e) {
        U.error(log,"Failed to send deferred DHT update response to remote node [" + "futIds=" + msg.futureVersions() + ", node="+ nodeId+ ']',e);
      }
    }
  }
;
  CacheMetricsImpl m=new CacheMetricsImpl(ctx);
  if (ctx.dht().near() != null)   m.delegate(ctx.dht().near().metrics0());
  metrics=m;
  preldr=new GridDhtPreloader(ctx);
  preldr.start();
  ctx.io().addHandler(ctx.cacheId(),GridNearGetRequest.class,new CI2<UUID,GridNearGetRequest>(){
    @Override public void apply(    UUID nodeId,    GridNearGetRequest req){
      processNearGetRequest(nodeId,req);
    }
  }
);
  ctx.io().addHandler(ctx.cacheId(),GridNearSingleGetRequest.class,new CI2<UUID,GridNearSingleGetRequest>(){
    @Override public void apply(    UUID nodeId,    GridNearSingleGetRequest req){
      processNearSingleGetRequest(nodeId,req);
    }
  }
);
  ctx.io().addHandler(ctx.cacheId(),GridNearAtomicUpdateRequest.class,new CI2<UUID,GridNearAtomicUpdateRequest>(){
    @Override public void apply(    UUID nodeId,    GridNearAtomicUpdateRequest req){
      processNearAtomicUpdateRequest(nodeId,req);
    }
    @Override public String toString(){
      return "GridNearAtomicUpdateRequest handler " + "[msgIdx=" + GridNearAtomicUpdateRequest.CACHE_MSG_IDX + ']';
    }
  }
);
  ctx.io().addHandler(ctx.cacheId(),GridNearAtomicUpdateResponse.class,new CI2<UUID,GridNearAtomicUpdateResponse>(){
    @Override public void apply(    UUID nodeId,    GridNearAtomicUpdateResponse res){
      processNearAtomicUpdateResponse(nodeId,res);
    }
    @Override public String toString(){
      return "GridNearAtomicUpdateResponse handler " + "[msgIdx=" + GridNearAtomicUpdateResponse.CACHE_MSG_IDX + ']';
    }
  }
);
  ctx.io().addHandler(ctx.cacheId(),GridDhtAtomicUpdateRequest.class,new CI2<UUID,GridDhtAtomicUpdateRequest>(){
    @Override public void apply(    UUID nodeId,    GridDhtAtomicUpdateRequest req){
      processDhtAtomicUpdateRequest(nodeId,req);
    }
    @Override public String toString(){
      return "GridDhtAtomicUpdateRequest handler " + "[msgIdx=" + GridDhtAtomicUpdateRequest.CACHE_MSG_IDX + ']';
    }
  }
);
  ctx.io().addHandler(ctx.cacheId(),GridDhtAtomicUpdateResponse.class,new CI2<UUID,GridDhtAtomicUpdateResponse>(){
    @Override public void apply(    UUID nodeId,    GridDhtAtomicUpdateResponse res){
      processDhtAtomicUpdateResponse(nodeId,res);
    }
    @Override public String toString(){
      return "GridDhtAtomicUpdateResponse handler " + "[msgIdx=" + GridDhtAtomicUpdateResponse.CACHE_MSG_IDX + ']';
    }
  }
);
  ctx.io().addHandler(ctx.cacheId(),GridDhtAtomicDeferredUpdateResponse.class,new CI2<UUID,GridDhtAtomicDeferredUpdateResponse>(){
    @Override public void apply(    UUID nodeId,    GridDhtAtomicDeferredUpdateResponse res){
      processDhtAtomicDeferredUpdateResponse(nodeId,res);
    }
    @Override public String toString(){
      return "GridDhtAtomicDeferredUpdateResponse handler " + "[msgIdx=" + GridDhtAtomicDeferredUpdateResponse.CACHE_MSG_IDX + ']';
    }
  }
);
  if (near == null) {
    ctx.io().addHandler(ctx.cacheId(),GridNearGetResponse.class,new CI2<UUID,GridNearGetResponse>(){
      @Override public void apply(      UUID nodeId,      GridNearGetResponse res){
        processNearGetResponse(nodeId,res);
      }
    }
);
    ctx.io().addHandler(ctx.cacheId(),GridNearSingleGetResponse.class,new CI2<UUID,GridNearSingleGetResponse>(){
      @Override public void apply(      UUID nodeId,      GridNearSingleGetResponse res){
        processNearSingleGetResponse(nodeId,res);
      }
    }
);
  }
}
