{
  AffinityTopologyVersion topVer=canRemap ? ctx.affinity().affinityTopologyVersion() : ctx.shared().exchange().readyAffinityVersion();
  final IgniteCacheExpiryPolicy expiry=skipVals ? null : expiryPolicy(expiryPlc);
  if (!forcePrimary && ctx.affinityNode()) {
    Map<K,V> locVals=U.newHashMap(keys.size());
    boolean success=true;
    for (    KeyCacheObject key : keys) {
      GridCacheEntryEx entry=null;
      while (true) {
        try {
          entry=ctx.isSwapOrOffheapEnabled() ? entryEx(key) : peekEx(key);
          if (entry != null) {
            boolean isNew=entry.isNewLocked();
            CacheObject v=null;
            GridCacheVersion ver=null;
            if (needVer) {
              T2<CacheObject,GridCacheVersion> res=entry.innerGetVersioned(null,null,true,true,false,!skipVals,subjId,null,taskName,expiry,true);
              if (res != null) {
                v=res.get1();
                ver=res.get2();
              }
            }
 else {
              v=entry.innerGet(null,null,true,false,false,!skipVals,false,subjId,null,taskName,expiry,!deserializeBinary);
            }
            if (v == null) {
              GridCacheVersion obsoleteVer=context().versions().next();
              if (isNew && entry.markObsoleteIfEmpty(obsoleteVer))               removeEntry(entry);
              success=false;
            }
 else             ctx.addResult(locVals,key,v,skipVals,false,deserializeBinary,true,ver);
          }
 else           success=false;
          break;
        }
 catch (        GridCacheEntryRemovedException ignored) {
        }
catch (        GridDhtInvalidPartitionException ignored) {
          success=false;
          break;
        }
catch (        IgniteCheckedException e) {
          return new GridFinishedFuture<>(e);
        }
 finally {
          if (entry != null)           ctx.evicts().touch(entry,topVer);
        }
      }
      if (!success)       break;
 else       if (!skipVals && ctx.config().isStatisticsEnabled())       metrics0().onRead(true);
    }
    if (success) {
      sendTtlUpdateRequest(expiry);
      return new GridFinishedFuture<>(locVals);
    }
  }
  if (expiry != null)   expiry.reset();
  GridPartitionedGetFuture<K,V> fut=new GridPartitionedGetFuture<>(ctx,keys,topVer,!skipStore,forcePrimary,subjId,taskName,deserializeBinary,expiry,skipVals,canRemap,needVer,false);
  fut.init();
  return fut;
}
