{
  A.notNull(keys,"keys",entryProcessor,"entryProcessor");
  if (keyCheck)   validateCacheKeys(keys);
  Map<? extends K,EntryProcessor<K,V,Object>> invokeMap=CU.invokeMap(keys,entryProcessor);
  CacheOperationContext opCtx=ctx.operationContextPerCall();
  final boolean keepBinary=opCtx != null && opCtx.isKeepBinary();
  IgniteInternalFuture<Map<K,EntryProcessorResult<T>>> resFut=updateAllAsync0(null,invokeMap,args,null,null,false,false,null,true);
  return resFut.chain(new CX1<IgniteInternalFuture<Map<K,EntryProcessorResult<T>>>,Map<K,EntryProcessorResult<T>>>(){
    @Override public Map<K,EntryProcessorResult<T>> applyx(    IgniteInternalFuture<Map<K,EntryProcessorResult<T>>> fut) throws IgniteCheckedException {
      Map<Object,EntryProcessorResult> resMap=(Map)fut.get();
      return ctx.unwrapInvokeResult(resMap,keepBinary);
    }
  }
);
}
