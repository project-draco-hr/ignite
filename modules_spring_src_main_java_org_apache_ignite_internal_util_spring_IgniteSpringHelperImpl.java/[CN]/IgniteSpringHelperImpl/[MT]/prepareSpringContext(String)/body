{
  GenericApplicationContext springCtx=new GenericApplicationContext();
  BeanFactoryPostProcessor postProc=new BeanFactoryPostProcessor(){
    /** 
 * @param beanFactory The bean factory used by the application context.
 * @param beanName Bean name.
 * @param def Registered BeanDefinition.
 * @throws BeansException in case of errors.
 */
    private void processBeanDefinition(    ConfigurableListableBeanFactory beanFactory,    String beanName,    BeanDefinition def) throws BeansException {
      if (def.getBeanClassName() != null) {
        try {
          Class.forName(def.getBeanClassName());
          MutablePropertyValues vals=def.getPropertyValues();
          for (          PropertyValue val : new ArrayList<>(vals.getPropertyValueList())) {
            for (            String excludedProp : excludedProps) {
              if (val.getName().equals(excludedProp)) {
                vals.removePropertyValue(val);
                return;
              }
            }
            if (val.getValue() instanceof Iterable)             for (            Object beanDef : (Iterable)val.getValue())             if (beanDef instanceof BeanDefinitionHolder)             processBeanDefinition(beanFactory,beanName,((BeanDefinitionHolder)beanDef).getBeanDefinition());
          }
        }
 catch (        ClassNotFoundException ignored) {
          ((BeanDefinitionRegistry)beanFactory).removeBeanDefinition(beanName);
        }
      }
    }
    /** 
 * {@inheritDoc} 
 */
    @Override public void postProcessBeanFactory(    ConfigurableListableBeanFactory beanFactory) throws BeansException {
      for (      String beanName : beanFactory.getBeanDefinitionNames())       processBeanDefinition(beanFactory,beanName,beanFactory.getBeanDefinition(beanName));
    }
  }
;
  springCtx.addBeanFactoryPostProcessor(postProc);
  return springCtx;
}
