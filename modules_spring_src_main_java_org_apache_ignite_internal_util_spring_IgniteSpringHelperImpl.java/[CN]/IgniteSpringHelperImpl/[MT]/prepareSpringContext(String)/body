{
  GenericApplicationContext springCtx=new GenericApplicationContext();
  BeanFactoryPostProcessor postProc=new BeanFactoryPostProcessor(){
    /** 
 * @param def Registered BeanDefinition.
 * @throws BeansException in case of errors.
 */
    private void processNested(    BeanDefinition def) throws BeansException {
      MutablePropertyValues vals=def.getPropertyValues();
      for (      PropertyValue val : new ArrayList<>(vals.getPropertyValueList())) {
        for (        String excludedProp : excludedProps) {
          if (val.getName().equals(excludedProp)) {
            vals.removePropertyValue(val);
            return;
          }
        }
        if (val.getValue() instanceof Collection) {
          Collection<?> nestedVals=(Collection)val.getValue();
          for (          Object item : new ArrayList<>(nestedVals))           if (item instanceof BeanDefinitionHolder) {
            BeanDefinitionHolder holder=(BeanDefinitionHolder)item;
            try {
              if (holder.getBeanDefinition().getBeanClassName() != null)               Class.forName(holder.getBeanDefinition().getBeanClassName());
              processNested(holder.getBeanDefinition());
            }
 catch (            ClassNotFoundException ignored) {
              nestedVals.remove(item);
            }
          }
        }
      }
    }
    /** 
 * {@inheritDoc} 
 */
    @Override public void postProcessBeanFactory(    ConfigurableListableBeanFactory beanFactory) throws BeansException {
      for (      String beanName : beanFactory.getBeanDefinitionNames())       try {
        BeanDefinition def=beanFactory.getBeanDefinition(beanName);
        if (def.getBeanClassName() != null)         Class.forName(def.getBeanClassName());
        processNested(def);
      }
 catch (      ClassNotFoundException ignored) {
        ((BeanDefinitionRegistry)beanFactory).removeBeanDefinition(beanName);
      }
    }
  }
;
  springCtx.addBeanFactoryPostProcessor(postProc);
  return springCtx;
}
