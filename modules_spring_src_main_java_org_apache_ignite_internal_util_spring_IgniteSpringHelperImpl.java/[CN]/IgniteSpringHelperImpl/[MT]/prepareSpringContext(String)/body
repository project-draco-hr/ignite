{
  GenericApplicationContext springCtx=new GenericApplicationContext();
  BeanFactoryPostProcessor postProc=new BeanFactoryPostProcessor(){
    @Override public void postProcessBeanFactory(    ConfigurableListableBeanFactory beanFactory) throws BeansException {
      for (      String beanName : beanFactory.getBeanDefinitionNames()) {
        BeanDefinition def=beanFactory.getBeanDefinition(beanName);
        if (def.getBeanClassName() != null) {
          try {
            Class.forName(def.getBeanClassName());
          }
 catch (          ClassNotFoundException ignored) {
            ((BeanDefinitionRegistry)beanFactory).removeBeanDefinition(beanName);
            continue;
          }
        }
        MutablePropertyValues vals=def.getPropertyValues();
        for (        PropertyValue val : new ArrayList<>(vals.getPropertyValueList())) {
          for (          String excludedProp : excludedProps) {
            if (val.getName().equals(excludedProp))             vals.removePropertyValue(val);
          }
        }
      }
    }
  }
;
  springCtx.addBeanFactoryPostProcessor(postProc);
  return springCtx;
}
