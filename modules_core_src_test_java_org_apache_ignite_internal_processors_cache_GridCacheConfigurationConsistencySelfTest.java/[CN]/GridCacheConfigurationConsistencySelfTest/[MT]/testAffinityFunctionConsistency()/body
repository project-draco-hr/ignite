{
  cacheEnabled=true;
  cacheMode=PARTITIONED;
  backups=1;
  aff=new CacheRendezvousAffinityFunction(false,100);
  startGrid(1);
  aff=new CacheRendezvousAffinityFunction(true,100);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return startGrid(2);
    }
  }
,IgniteCheckedException.class,"Affinity include neighbors mismatch");
  backups=2;
  aff=new CacheRendezvousAffinityFunction(false,100);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return startGrid(2);
    }
  }
,IgniteCheckedException.class,"Affinity key backups mismatch");
  backups=1;
  aff=new CacheRendezvousAffinityFunction(false,1000);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return startGrid(2);
    }
  }
,IgniteCheckedException.class,"Affinity partitions count mismatch");
  CacheRendezvousAffinityFunction aff0=new CacheRendezvousAffinityFunction(false,100);
  aff0.setHashIdResolver(new CacheAffinityNodeIdHashResolver());
  aff=aff0;
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return startGrid(2);
    }
  }
,IgniteCheckedException.class,"Partitioned cache affinity hash ID resolver class mismatch");
}
