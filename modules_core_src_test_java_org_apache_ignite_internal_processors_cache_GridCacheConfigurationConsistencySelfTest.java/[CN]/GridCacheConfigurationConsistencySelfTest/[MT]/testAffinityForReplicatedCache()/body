{
  cacheEnabled=true;
  aff=new CachePartitionFairAffinity();
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return startGrid(1);
    }
  }
,IgniteCheckedException.class,null);
  aff=new CacheConsistentHashAffinityFunction(true);
  backups=Integer.MAX_VALUE;
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return startGrid(1);
    }
  }
,IgniteCheckedException.class,null);
  aff=new CacheConsistentHashAffinityFunction(false,100);
  startGrid(1);
  aff=new CacheConsistentHashAffinityFunction(false,200);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return startGrid(2);
    }
  }
,IgniteCheckedException.class,"Affinity partitions count mismatch");
}
