{
  Ignite ignite=startGrid(1);
  final ClusterNode node=ignite.cluster().localNode();
  final GridStringLogger strLog=new GridStringLogger(false,log);
  CU.checkAttributeMismatch(strLog,"cache",node.id(),"cacheMode","Cache mode",LOCAL,PARTITIONED,false);
  assertTrue("No expected message in log: " + strLog.toString(),strLog.toString().contains("Cache mode mismatch"));
  strLog.reset();
  GridTestUtils.assertThrows(log,new Callable<Void>(){
    /** 
 * {@inheritDoc} 
 */
    @Override public Void call() throws Exception {
      CU.checkAttributeMismatch(strLog,"cache",node.id(),"cacheMode","Cache mode",LOCAL,PARTITIONED,true);
      return null;
    }
  }
,IgniteCheckedException.class,"Cache mode mismatch");
  final CacheConfiguration cfg1=defaultCacheConfiguration();
  cfg1.setCacheMode(LOCAL);
  final CacheConfiguration cfg2=defaultCacheConfiguration();
  cfg2.setCacheMode(PARTITIONED);
  CU.checkAttributeMismatch(strLog,cfg1,cfg2,node.id(),new T2<>("cacheMode","Cache mode"),false);
  assertTrue("No expected message in log: " + strLog.toString(),strLog.toString().contains("Cache mode mismatch"));
  GridTestUtils.assertThrows(log,new Callable<Void>(){
    /** 
 * {@inheritDoc} 
 */
    @Override public Void call() throws Exception {
      CU.checkAttributeMismatch(strLog,cfg1,cfg2,node.id(),new T2<>("cacheMode","Cache mode"),true);
      return null;
    }
  }
,IgniteCheckedException.class,"Cache mode mismatch");
}
