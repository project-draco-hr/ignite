{
  cacheEnabled=true;
  initCache=new C1<CacheConfiguration,Void>(){
    /** 
 * {@inheritDoc} 
 */
    @Override public Void apply(    CacheConfiguration cfg){
      cfg.setAtomicSequenceReserveSize(1000);
      cfg.setCloner(new CacheCloner(){
        @Nullable @Override public <T>T cloneValue(        T val){
          return null;
        }
      }
);
      cfg.setDefaultLockTimeout(1000);
      cfg.setDefaultQueryTimeout(1000);
      cfg.setDefaultTimeToLive(1000);
      return null;
    }
  }
;
  startGrid(1);
  useStrLog=true;
  initCache=new C1<CacheConfiguration,Void>(){
    /** 
 * {@inheritDoc} 
 */
    @Override public Void apply(    CacheConfiguration cfg){
      cfg.setAtomicSequenceReserveSize(2 * 1000);
      cfg.setCloner(new CacheCloner(){
        @Nullable @Override public <T>T cloneValue(        T val){
          return null;
        }
      }
);
      cfg.setDefaultLockTimeout(2 * 1000);
      cfg.setDefaultQueryTimeout(2 * 1000);
      cfg.setDefaultTimeToLive(2 * 1000);
      return null;
    }
  }
;
  startGrid(2);
  String log=strLog.toString();
  assertTrue(log.contains("Atomic sequence reserve size mismatch"));
  assertTrue(log.contains("Cache cloner mismatch"));
  assertTrue(log.contains("Default lock timeout"));
  assertTrue(log.contains("Default query timeout"));
  assertTrue(log.contains("Default time to live"));
}
