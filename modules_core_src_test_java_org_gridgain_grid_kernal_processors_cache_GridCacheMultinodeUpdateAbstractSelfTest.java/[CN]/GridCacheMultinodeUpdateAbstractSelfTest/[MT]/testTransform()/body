{
  GridCache<Integer,Integer> cache=grid(0).cache(null);
  final Integer key=primaryKey(cache);
  cache.put(key,0);
  final int THREADS=gridCount();
  final int ITERATIONS_PER_THREAD=1000;
  Integer expVal=0;
  for (int i=0; i < iterations(); i++) {
    log.info("Iteration: " + i);
    final AtomicInteger gridIdx=new AtomicInteger();
    GridTestUtils.runMultiThreaded(new Callable<Void>(){
      @Override public Void call() throws Exception {
        int idx=gridIdx.incrementAndGet() - 1;
        final GridCache<Integer,Integer> cache=grid(idx).cache(null);
        for (int i=0; i < ITERATIONS_PER_THREAD && !failed; i++)         cache.transform(key,new IncClosure());
        return null;
      }
    }
,THREADS,"transform");
    assertFalse("Got null in transform.",failed);
    expVal+=ITERATIONS_PER_THREAD * THREADS;
    for (int j=0; j < gridCount(); j++) {
      Integer val=(Integer)grid(j).cache(null).get(key);
      assertEquals("Unexpected value for grid " + j,expVal,val);
    }
  }
}
