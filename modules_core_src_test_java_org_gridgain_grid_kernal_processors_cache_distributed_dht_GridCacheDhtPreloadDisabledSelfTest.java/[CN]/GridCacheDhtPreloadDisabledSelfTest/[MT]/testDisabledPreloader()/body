{
  try {
    Grid grid1=startGrid(0);
    GridCache<Integer,String> cache1=grid1.cache(null);
    int keyCnt=10;
    putKeys(cache1,keyCnt);
    for (int i=0; i < keyCnt; i++) {
      assertNull(near(cache1).peekEx(i));
      assertNotNull((dht(cache1).peekEx(i)));
      assertEquals(Integer.toString(i),cache1.peek(i));
    }
    int nodeCnt=3;
    List<Grid> grids=new ArrayList<>(nodeCnt);
    startGrids(nodeCnt,1,grids);
    for (    Grid g : grids) {
      GridCache<Integer,String> c=g.cache(null);
      for (int i=0; i < keyCnt; i++)       assertNull(c.peek(i));
    }
    Collection<Integer> keys=new LinkedList<>();
    for (int i=0; i < keyCnt; i++)     if (cache1.affinity().mapKeyToNode(i).equals(grid1.cluster().localNode()))     keys.add(i);
    info(">>> Finished checking nodes [keyCnt=" + keyCnt + ", nodeCnt="+ nodeCnt+ ", grids="+ U.grids2names(grids)+ ']');
    for (Iterator<Grid> it=grids.iterator(); it.hasNext(); ) {
      Grid g=it.next();
      it.remove();
      stopGrid(g.name());
      for (      Grid gg : grids) {
        GridCache<Integer,String> c=gg.cache(null);
        for (int i=0; i < keyCnt; i++)         assertNull(c.peek(i));
      }
    }
    for (    Integer i : keys)     assertEquals(i.toString(),cache1.peek(i));
  }
 catch (  Error|Exception e) {
    error("Test failed.",e);
    throw e;
  }
 finally {
    stopAllGrids();
  }
}
