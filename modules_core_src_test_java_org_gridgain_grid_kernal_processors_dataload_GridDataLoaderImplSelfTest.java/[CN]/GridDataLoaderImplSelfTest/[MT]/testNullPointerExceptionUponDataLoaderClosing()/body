{
  try {
    startGrids(5);
    final CyclicBarrier barrier=new CyclicBarrier(2);
    multithreadedAsync(new Callable<Object>(){
      @Override public Object call() throws Exception {
        U.awaitQuiet(barrier);
        G.stopAll(true);
        return null;
      }
    }
,1);
    Grid g4=grid(4);
    GridDataLoader<Object,Object> dataLdr=g4.dataLoader(null);
    dataLdr.perNodeBufferSize(32);
    for (int i=0; i < 100000; i+=2) {
      dataLdr.addData(i,i);
      dataLdr.removeData(i + 1);
    }
    U.awaitQuiet(barrier);
    info("Closing data loader.");
    try {
      dataLdr.close(true);
    }
 catch (    IllegalStateException ignore) {
    }
  }
  finally {
    G.stopAll(true);
  }
}
