{
  ccfg=new CacheConfiguration();
  ccfg.setCacheMode(PARTITIONED);
  ccfg.setBackups(1);
  ccfg.setAtomicityMode(ATOMIC);
  ccfg.setWriteSynchronizationMode(FULL_SYNC);
  ccfg.setAtomicWriteOrderMode(writeOrder);
  ccfg.setRebalanceMode(SYNC);
  IgniteEx ignite0=startGrid(0);
  IgniteEx ignite1=startGrid(1);
  ccfg.setNearConfiguration(nearCfg);
  client=true;
  ccfg.setNearConfiguration(null);
  Ignite ignite2=startGrid(2);
  assertTrue(ignite2.configuration().isClientMode());
  final Map<Integer,Integer> map=new HashMap<>();
  final int KEYS=putAll ? 100 : 1;
  for (int i=0; i < KEYS; i++)   map.put(i,i);
  TestCommunicationSpi spi=(TestCommunicationSpi)ignite2.configuration().getCommunicationSpi();
  spi.blockMessages(GridNearAtomicUpdateRequest.class,ignite0.localNode().id());
  spi.blockMessages(GridNearAtomicUpdateRequest.class,ignite1.localNode().id());
  final IgniteCache<Integer,Integer> cache=ignite2.cache(null);
  assertEquals(writeOrder,cache.getConfiguration(CacheConfiguration.class).getAtomicWriteOrderMode());
  IgniteInternalFuture<?> putFut=GridTestUtils.runAsync(new Callable<Object>(){
    @Override public Object call() throws Exception {
      Thread.currentThread().setName("put-thread");
      if (putAll)       cache.putAll(map);
 else       cache.put(0,0);
      return null;
    }
  }
);
  assertFalse(putFut.isDone());
  client=false;
  IgniteEx ignite3=startGrid(3);
  log.info("Stop block1.");
  spi.stopBlock();
  putFut.get();
  checkData(map,null,cache,4);
  ignite3.close();
  map.clear();
  for (int i=0; i < KEYS; i++)   map.put(i,i + 1);
  spi.blockMessages(GridNearAtomicUpdateRequest.class,ignite0.localNode().id());
  putFut=GridTestUtils.runAsync(new Callable<Object>(){
    @Override public Object call() throws Exception {
      Thread.currentThread().setName("put-thread");
      if (putAll)       cache.putAll(map);
 else       cache.put(0,1);
      return null;
    }
  }
);
  assertFalse(putFut.isDone());
  client=false;
  startGrid(3);
  log.info("Stop block2.");
  spi.stopBlock();
  putFut.get();
  checkData(map,null,cache,4);
  for (int i=0; i < KEYS; i++)   map.put(i,i + 2);
  if (putAll)   cache.putAll(map);
 else   cache.put(0,2);
  checkData(map,null,cache,4);
}
