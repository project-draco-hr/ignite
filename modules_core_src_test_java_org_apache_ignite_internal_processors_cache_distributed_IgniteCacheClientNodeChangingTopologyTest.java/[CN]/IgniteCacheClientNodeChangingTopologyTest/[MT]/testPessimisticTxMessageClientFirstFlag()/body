{
  ccfg=new CacheConfiguration();
  ccfg.setCacheMode(PARTITIONED);
  ccfg.setBackups(1);
  ccfg.setAtomicityMode(TRANSACTIONAL);
  ccfg.setWriteSynchronizationMode(FULL_SYNC);
  ccfg.setRebalanceMode(SYNC);
  IgniteEx ignite0=startGrid(0);
  IgniteEx ignite1=startGrid(1);
  IgniteEx ignite2=startGrid(2);
  client=true;
  Ignite ignite3=startGrid(3);
  assertTrue(ignite3.configuration().isClientMode());
  TestCommunicationSpi spi=(TestCommunicationSpi)ignite3.configuration().getCommunicationSpi();
  spi.record(GridNearLockRequest.class);
  IgniteCache<Integer,Integer> cache=ignite3.cache(null);
  try (Transaction tx=ignite3.transactions().txStart(PESSIMISTIC,REPEATABLE_READ)){
    cache.put(1,1);
    cache.put(2,2);
    cache.put(3,3);
    tx.commit();
  }
   checkClientLockMessages(spi.recordedMessages(),3);
  Map<Integer,Integer> map=new HashMap<>();
  map.put(4,4);
  map.put(5,5);
  map.put(6,6);
  map.put(7,7);
  try (Transaction tx=ignite3.transactions().txStart(PESSIMISTIC,REPEATABLE_READ)){
    cache.putAll(map);
    tx.commit();
  }
   checkClientLockMessages(spi.recordedMessages(),4);
  spi.record(null);
  TestCommunicationSpi spi0=(TestCommunicationSpi)ignite0.configuration().getCommunicationSpi();
  spi0.record(GridNearLockRequest.class);
  List<Integer> keys=primaryKeys(ignite1.cache(null),3,0);
  IgniteCache<Integer,Integer> cache0=ignite0.cache(null);
  try (Transaction tx=ignite0.transactions().txStart(PESSIMISTIC,REPEATABLE_READ)){
    cache0.put(keys.get(0),0);
    cache0.put(keys.get(1),1);
    cache0.put(keys.get(2),2);
    tx.commit();
  }
   List<Object> msgs=spi0.recordedMessages();
  assertEquals(3,msgs.size());
  for (  Object msg : msgs)   assertFalse(((GridNearLockRequest)msg).firstClientRequest());
}
