{
  ccfg=new CacheConfiguration();
  ccfg.setCacheMode(PARTITIONED);
  ccfg.setBackups(1);
  ccfg.setAtomicityMode(TRANSACTIONAL);
  ccfg.setWriteSynchronizationMode(FULL_SYNC);
  ccfg.setRebalanceMode(SYNC);
  IgniteEx ignite0=startGrid(0);
  IgniteEx ignite1=startGrid(1);
  IgniteEx ignite2=startGrid(2);
  client=true;
  Ignite ignite3=startGrid(3);
  assertTrue(ignite3.configuration().isClientMode());
  TestCommunicationSpi spi=(TestCommunicationSpi)ignite3.configuration().getCommunicationSpi();
  IgniteCache<Integer,Integer> cache=ignite3.cache(null);
  List<Integer> keys0=primaryKeys(ignite0.cache(null),2,0);
  List<Integer> keys1=primaryKeys(ignite1.cache(null),2,0);
  List<Integer> keys2=primaryKeys(ignite2.cache(null),2,0);
  LinkedHashMap<Integer,Integer> map=new LinkedHashMap<>();
  map.put(keys0.get(0),1);
  map.put(keys1.get(0),2);
  map.put(keys2.get(0),3);
  map.put(keys0.get(1),4);
  map.put(keys1.get(1),5);
  map.put(keys2.get(1),6);
  spi.record(GridNearTxPrepareRequest.class);
  try (Transaction tx=ignite3.transactions().txStart(OPTIMISTIC,REPEATABLE_READ)){
    for (    Map.Entry<Integer,Integer> e : map.entrySet())     cache.put(e.getKey(),e.getValue());
    tx.commit();
  }
   checkClientPrepareMessages(spi.recordedMessages(),6);
  checkData(map,null,cache,4);
  cache.putAll(map);
  checkClientPrepareMessages(spi.recordedMessages(),6);
  spi.record(null);
  checkData(map,null,cache,4);
  IgniteCache<Integer,Integer> cache0=ignite0.cache(null);
  TestCommunicationSpi spi0=(TestCommunicationSpi)ignite0.configuration().getCommunicationSpi();
  spi0.record(GridNearTxPrepareRequest.class);
  cache0.putAll(map);
  spi0.record(null);
  List<Object> msgs=spi0.recordedMessages();
  assertEquals(4,msgs.size());
  for (  Object msg : msgs)   assertFalse(((GridNearTxPrepareRequest)msg).firstClientRequest());
  checkData(map,null,cache,4);
}
