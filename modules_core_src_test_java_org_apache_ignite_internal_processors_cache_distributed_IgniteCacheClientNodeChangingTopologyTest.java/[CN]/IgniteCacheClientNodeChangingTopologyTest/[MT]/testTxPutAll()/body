{
  ccfg=new CacheConfiguration();
  ccfg.setCacheMode(PARTITIONED);
  ccfg.setBackups(1);
  ccfg.setAtomicityMode(TRANSACTIONAL);
  ccfg.setWriteSynchronizationMode(FULL_SYNC);
  ccfg.setRebalanceMode(SYNC);
  IgniteEx ignite0=startGrid(0);
  IgniteEx ignite1=startGrid(1);
  client=true;
  Ignite ignite2=startGrid(2);
  assertTrue(ignite2.configuration().isClientMode());
  final Map<Integer,Integer> map=new HashMap<>();
  for (int i=0; i < 100; i++)   map.put(i,i);
  TestCommunicationSpi spi=(TestCommunicationSpi)ignite2.configuration().getCommunicationSpi();
  spi.blockMessages(GridNearTxPrepareRequest.class,ignite0.localNode().id());
  spi.blockMessages(GridNearTxPrepareRequest.class,ignite1.localNode().id());
  final IgniteCache<Integer,Integer> cache=ignite2.cache(null);
  IgniteInternalFuture<?> putFut=GridTestUtils.runAsync(new Callable<Object>(){
    @Override public Object call() throws Exception {
      Thread.currentThread().setName("put-thread");
      cache.putAll(map);
      return null;
    }
  }
);
  assertFalse(putFut.isDone());
  client=false;
  IgniteEx ignite3=startGrid(3);
  log.info("Stop block.");
  spi.stopBlock();
  putFut.get();
  checkData(map,4);
  map.clear();
  for (int i=0; i < 100; i++)   map.put(i,i + 1);
  cache.putAll(map);
  checkData(map,4);
}
