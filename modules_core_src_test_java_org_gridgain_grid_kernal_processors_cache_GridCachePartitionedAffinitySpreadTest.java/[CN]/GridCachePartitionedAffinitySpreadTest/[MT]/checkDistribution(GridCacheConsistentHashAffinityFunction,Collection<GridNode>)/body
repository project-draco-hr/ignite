{
  Map<GridNode,Integer> parts=new HashMap<>(nodes.size());
  for (int part=0; part < aff.getPartitions(); part++) {
    Collection<GridNode> affNodes=aff.nodes(part,nodes,0);
    assertEquals(1,affNodes.size());
    GridNode node=F.first(affNodes);
    parts.put(node,parts.get(node) != null ? parts.get(node) + 1 : 1);
  }
  int min=Integer.MAX_VALUE;
  int max=Integer.MIN_VALUE;
  int total=0;
  float mean=0;
  float m2=0;
  int n=0;
  for (  GridNode node : nodes) {
    int partsCnt=parts.get(node) != null ? parts.get(node) : 0;
    total+=partsCnt;
    if (partsCnt < min)     min=partsCnt;
    if (partsCnt > max)     max=partsCnt;
    n++;
    float delta=partsCnt - mean;
    mean+=delta / n;
    m2+=delta * (partsCnt - mean);
  }
  m2/=(n - 1);
  assertEquals(aff.getPartitions(),total);
  System.out.printf("%6s, %6s, %6s, %6s, %8.4f\n",nodes.size(),F.first(nodes).attribute(DFLT_REPLICA_COUNT_ATTR_NAME),min,max,Math.sqrt(m2));
}
