{
  A.notEmpty(entries,"entries");
  checkSecurityPermission(SecurityPermission.CACHE_PUT);
  enterBusy();
  try {
    GridFutureAdapter<Object> resFut=new GridFutureAdapter<>();
    resFut.listen(rmvActiveFut);
    activeFuts.add(resFut);
    Collection<KeyCacheObject> keys=null;
    if (entries.size() > 1) {
      keys=new GridConcurrentHashSet<>(entries.size(),U.capacity(entries.size()),1);
      for (      Map.Entry<K,V> entry : entries)       keys.add(cacheObjProc.toCacheKeyObject(cacheObjCtx,entry.getKey(),true));
    }
    Collection<? extends DataStreamerEntry> entries0=F.viewReadOnly(entries,new C1<Entry<K,V>,DataStreamerEntry>(){
      @Override public DataStreamerEntry apply(      Entry<K,V> e){
        KeyCacheObject key=cacheObjProc.toCacheKeyObject(cacheObjCtx,e.getKey(),true);
        CacheObject val=cacheObjProc.toCacheObject(cacheObjCtx,e.getValue(),true);
        return new DataStreamerEntry(key,val);
      }
    }
);
    load0(entries0,resFut,keys,0);
    return new IgniteCacheFutureImpl<>(resFut);
  }
 catch (  IgniteDataStreamerTimeoutException e) {
    throw e;
  }
catch (  IgniteException e) {
    return new IgniteFinishedFutureImpl<>(e);
  }
 finally {
    leaveBusy();
  }
}
