{
  GridComputeTaskSession ses=new GridTestTaskSession(GridUuid.randomUuid());
  List<ClusterNode> allNodes=(List<ClusterNode>)getSpiContext().nodes();
  List<UUID> orderedNodes=getSpi().getNodeIds(ses);
  checkCyclicBalancing(getSpi(),allNodes,orderedNodes,ses);
  UUID doomed=orderedNodes.get(0);
  if (getSpiContext().localNode().id().equals(doomed))   doomed=orderedNodes.get(1);
  getSpiContext().removeNode(doomed);
  assertTrue(allNodes.remove(new GridTestNode(doomed)));
  orderedNodes=getSpi().getNodeIds(ses);
  assertFalse("Balancer uses removed node",orderedNodes.contains(doomed));
  checkCyclicBalancing(getSpi(),allNodes,orderedNodes,ses);
  ClusterNode newNode=new GridTestNode(UUID.randomUUID());
  getSpiContext().addNode(newNode);
  assertTrue(allNodes.add(newNode));
  boolean foundNewNode=false;
  for (int i=0; i < allNodes.size(); i++) {
    ClusterNode node=getSpi().getBalancedNode(ses,allNodes,new GridTestJob());
    if (newNode.id().equals(node.id())) {
      foundNewNode=true;
      break;
    }
  }
  assertTrue("Balancer doesn't use added node",foundNewNode);
  orderedNodes=getSpi().getNodeIds(ses);
  checkCyclicBalancing(getSpi(),allNodes,orderedNodes,ses);
}
