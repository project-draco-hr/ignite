{
  b=(byte)val;
  bRaw=(byte)(val + 1);
  s=(short)val;
  sRaw=(short)(val + 1);
  i=val;
  iRaw=i + 1;
  l=val;
  lRaw=i + 1;
  f=val + 0.5f;
  fRaw=f + 1;
  d=val + 0.5f;
  dRaw=d + 1;
  c=(char)val;
  cRaw=(char)(val + 1);
  bool=true;
  boolRaw=false;
  str=String.valueOf(i);
  strRaw=String.valueOf(iRaw);
  uuid=new UUID(i,i);
  uuidRaw=new UUID(iRaw,iRaw);
  date=new Date(i);
  dateRaw=new Date(iRaw);
  e=TestEnum.values()[i % TestEnum.values().length];
  eRaw=TestEnum.values()[iRaw % TestEnum.values().length];
  bArr=new byte[]{b,(byte)(b + 1)};
  bArrRaw=new byte[]{bRaw,(byte)(bRaw + 1)};
  sArr=new short[]{s,(short)(s + 1)};
  sArrRaw=new short[]{sRaw,(short)(sRaw + 1)};
  iArr=new int[]{i,i + 1};
  iArrRaw=new int[]{iRaw,iRaw + 1};
  lArr=new long[]{l,l + 1};
  lArrRaw=new long[]{lRaw,lRaw + 1};
  fArr=new float[]{f,f + 1};
  fArrRaw=new float[]{fRaw,fRaw + 1};
  dArr=new double[]{d,d + 1};
  dArrRaw=new double[]{dRaw,dRaw + 1};
  cArr=new char[]{c,(char)(c + 1)};
  cArrRaw=new char[]{cRaw,(char)(cRaw + 1)};
  boolArr=new boolean[]{true,true};
  boolArrRaw=new boolean[]{true,true};
  strArr=new String[]{str,str + "1"};
  strArrRaw=new String[]{strRaw,strRaw + "1"};
  uuidArr=new UUID[]{uuid,new UUID(uuid.getMostSignificantBits() + 1,uuid.getLeastSignificantBits() + 1)};
  uuidArrRaw=new UUID[]{uuidRaw,new UUID(uuidRaw.getMostSignificantBits() + 1,uuidRaw.getLeastSignificantBits() + 1)};
  dateArr=new Date[]{date,new Date(date.getTime() + 1)};
  dateArrRaw=new Date[]{dateRaw,new Date(dateRaw.getTime() + 1)};
  objArr=new Object[]{uuid,new UUID(uuid.getMostSignificantBits() + 1,uuid.getLeastSignificantBits() + 1)};
  objArrRaw=new Object[]{uuidRaw,new UUID(uuidRaw.getMostSignificantBits() + 1,uuidRaw.getLeastSignificantBits() + 1)};
  col=Arrays.asList(str,str + "1");
  colRaw=Arrays.asList(strRaw,strRaw + "1");
  map=new HashMap<>();
  map.put(1,str);
  map.put(2,str + "1");
  mapRaw=new HashMap<>();
  mapRaw.put(1,strRaw);
  mapRaw.put(2,strRaw + "1");
  if (createInner) {
    portable1=new GridClientTestPortable(val + 1,false);
    portable2=portable1;
    portableRaw1=new GridClientTestPortable(val + 2,false);
    portableRaw2=portableRaw1;
  }
}
