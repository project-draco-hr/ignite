{
  Collection<URL> hadoopUrls=hadoopJars;
  if (hadoopUrls != null)   return hadoopUrls;
synchronized (GridHadoopClassLoader.class) {
    hadoopUrls=hadoopJars;
    if (hadoopUrls != null)     return hadoopUrls;
    hadoopUrls=new ArrayList<>();
    String hadoopPrefix=hadoopHome();
    if (F.isEmpty(hadoopPrefix))     throw new IgniteCheckedException("Failed resolve Hadoop installation location. Either HADOOP_PREFIX or " + "HADOOP_HOME environment variables must be set.");
    String commonHome=getEnv("HADOOP_COMMON_HOME",hadoopPrefix + "/share/hadoop/common");
    String hdfsHome=getEnv("HADOOP_HDFS_HOME",hadoopPrefix + "/share/hadoop/hdfs");
    String mapredHome=getEnv("HADOOP_MAPRED_HOME",hadoopPrefix + "/share/hadoop/mapreduce");
    try {
      addUrls(hadoopUrls,new File(commonHome + "/lib"),null);
      addUrls(hadoopUrls,new File(hdfsHome + "/lib"),null);
      addUrls(hadoopUrls,new File(mapredHome + "/lib"),null);
      addUrls(hadoopUrls,new File(hdfsHome),"hadoop-hdfs-");
      addUrls(hadoopUrls,new File(commonHome),"hadoop-common-");
      addUrls(hadoopUrls,new File(commonHome),"hadoop-auth-");
      addUrls(hadoopUrls,new File(commonHome + "/lib"),"hadoop-auth-");
      addUrls(hadoopUrls,new File(mapredHome),"hadoop-mapreduce-client-common");
      addUrls(hadoopUrls,new File(mapredHome),"hadoop-mapreduce-client-core");
    }
 catch (    Exception e) {
      throw new IgniteCheckedException(e);
    }
    hadoopJars=hadoopUrls;
    return hadoopUrls;
  }
}
