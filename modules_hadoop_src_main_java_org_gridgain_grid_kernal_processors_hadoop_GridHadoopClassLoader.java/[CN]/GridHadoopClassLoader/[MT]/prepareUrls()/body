{
  if (hadoopUrls != null)   return;
synchronized (GridHadoopClassLoader.class) {
    URLClassLoader appLdr=(URLClassLoader)GridHadoopClassLoader.class.getClassLoader();
    List<URL> hadoopUrlLst=new ArrayList<>();
    for (    URL url : appLdr.getURLs()) {
      String normUrl=url.toString().replace('\\','/');
      hadoopUrlLst.add(url);
    }
    String hadoopPrefix=getEnv("HADOOP_PREFIX",getEnv("HADOOP_HOME",null));
    if (F.isEmpty(hadoopPrefix))     throw new GridException("Hadoop is not found");
    String commonHome=getEnv("HADOOP_COMMON_HOME",hadoopPrefix + "/share/hadoop/common");
    String hdfsHome=getEnv("HADOOP_HDFS_HOME",hadoopPrefix + "/share/hadoop/hdfs");
    String mapredHome=getEnv("HADOOP_MAPRED_HOME",hadoopPrefix + "/share/hadoop/mapreduce");
    try {
      addUrls(hadoopUrlLst,new File(commonHome + "/lib"),null);
      addUrls(hadoopUrlLst,new File(hdfsHome + "/lib"),null);
      addUrls(hadoopUrlLst,new File(mapredHome + "/lib"),null);
      addUrls(hadoopUrlLst,new File(hdfsHome),"hadoop-hdfs-");
      addUrls(hadoopUrlLst,new File(commonHome),"hadoop-common-");
      addUrls(hadoopUrlLst,new File(commonHome),"hadoop-auth-");
      addUrls(hadoopUrlLst,new File(commonHome + "/lib"),"hadoop-auth-");
      addUrls(hadoopUrlLst,new File(mapredHome),"hadoop-mapreduce-client-common");
      addUrls(hadoopUrlLst,new File(mapredHome),"hadoop-mapreduce-client-core");
    }
 catch (    MalformedURLException e) {
      throw new GridException("",e);
    }
    hadoopUrls=hadoopUrlLst.toArray(new URL[hadoopUrlLst.size()]);
  }
}
