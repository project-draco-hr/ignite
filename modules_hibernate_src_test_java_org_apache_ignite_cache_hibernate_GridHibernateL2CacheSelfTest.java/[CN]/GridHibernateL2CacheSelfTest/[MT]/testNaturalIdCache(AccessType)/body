{
  createSessionFactories(accessType);
  Map<String,Integer> nameToId=new HashMap<>();
  try {
    Session ses=sesFactory1.openSession();
    try {
      Transaction tx=ses.beginTransaction();
      for (int i=0; i < 3; i++) {
        String name="name-" + i;
        ses.save(new Entity(i,name));
        nameToId.put(name,i);
      }
      tx.commit();
    }
  finally {
      ses.close();
    }
    ses=sesFactory1.openSession();
    try {
      for (      Map.Entry<String,Integer> e : nameToId.entrySet())       ((Entity)ses.bySimpleNaturalId(Entity.class).load(e.getKey())).getId();
    }
  finally {
      ses.close();
    }
    assertNaturalIdCache(sesFactory2,nameToId,"name-100");
    assertNaturalIdCache(sesFactory1,nameToId,"name-100");
    if (accessType == AccessType.READ_ONLY)     return;
    ses=sesFactory1.openSession();
    try {
      Transaction tx=ses.beginTransaction();
      Entity e1=(Entity)ses.load(Entity.class,1);
      nameToId.remove(e1.getName());
      e1.setName("name-1-changed1");
      nameToId.put(e1.getName(),e1.getId());
      tx.commit();
    }
  finally {
      ses.close();
    }
    assertNaturalIdCache(sesFactory2,nameToId,"name-1");
    assertNaturalIdCache(sesFactory1,nameToId,"name-1");
    ses=sesFactory2.openSession();
    try {
      Transaction tx=ses.beginTransaction();
      Entity e1=(Entity)ses.load(Entity.class,1);
      nameToId.remove(e1.getName());
      e1.setName("name-1-changed2");
      nameToId.put(e1.getName(),e1.getId());
      tx.commit();
    }
  finally {
      ses.close();
    }
    assertNaturalIdCache(sesFactory2,nameToId,"name-1-changed1");
    assertNaturalIdCache(sesFactory1,nameToId,"name-1-changed1");
    ses=sesFactory1.openSession();
    Transaction tx=ses.beginTransaction();
    try {
      Entity e1=(Entity)ses.load(Entity.class,1);
      e1.setName("name-0");
      tx.commit();
      fail("Commit must fail.");
    }
 catch (    ConstraintViolationException e) {
      log.info("Expected exception: " + e);
      tx.rollback();
    }
 finally {
      ses.close();
    }
    assertNaturalIdCache(sesFactory2,nameToId);
    assertNaturalIdCache(sesFactory1,nameToId);
    ses=sesFactory2.openSession();
    try {
      tx=ses.beginTransaction();
      Entity e2=(Entity)ses.load(Entity.class,2);
      ses.delete(e2);
      nameToId.remove(e2.getName());
      tx.commit();
    }
  finally {
      ses.close();
    }
    assertNaturalIdCache(sesFactory2,nameToId,"name-2");
    assertNaturalIdCache(sesFactory1,nameToId,"name-2");
  }
  finally {
    cleanup();
  }
}
