{
  CacheProjection prj;
  if (portableEnabled()) {
    prj=cache.projection(new IgnitePredicate<Entry<PortableObject,PortableObject>>(){
      @Override public boolean apply(      Entry<PortableObject,PortableObject> e){
        Key key=e.getKey().deserialize();
        Person val=e.peek().deserialize();
        assertNotNull(e.version());
        assertEquals(key.id,(Integer)val.salary);
        return key.id % 100 != 0;
      }
    }
);
  }
 else {
    prj=cache.projection(new IgnitePredicate<Entry<Key,Person>>(){
      @Override public boolean apply(      Entry<Key,Person> e){
        Key key=e.getKey();
        Person val=e.peek();
        assertNotNull(e.version());
        assertEquals(key.id,(Integer)val.salary);
        return key.id % 100 != 0;
      }
    }
);
  }
  CacheQuery<Map.Entry<Key,Person>> qry=prj.queries().createScanQuery(new IgniteBiPredicate<Key,Person>(){
    @Override public boolean apply(    Key key,    Person p){
      assertEquals(key.id,(Integer)p.salary);
      return key.id % 2 == 0;
    }
  }
);
  Collection<Map.Entry<Key,Person>> res=qry.execute().get();
  assertEquals(expCnt,res.size());
}
