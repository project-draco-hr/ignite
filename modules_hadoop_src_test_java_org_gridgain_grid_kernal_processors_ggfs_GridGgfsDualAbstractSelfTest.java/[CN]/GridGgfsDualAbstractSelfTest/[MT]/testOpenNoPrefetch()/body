{
  create(ggfsSecondary,paths(DIR,SUBDIR),paths(FILE));
  final int blockSize=GGFS_BLOCK_SIZE;
  GridGgfsOutputStream out=ggfsSecondary.append(FILE,false);
  int totalWritten=0;
  while (totalWritten < blockSize * 2 + chunk.length) {
    out.write(chunk);
    totalWritten+=chunk.length;
  }
  out.close();
  awaitFileClose(ggfsSecondary,FILE);
  int totalRead=0;
  GridGgfsInputStream in=ggfs.open(FILE,blockSize);
  final byte[] readBuf=new byte[1024];
  while (totalRead + readBuf.length <= blockSize) {
    in.read(readBuf);
    totalRead+=readBuf.length;
  }
  in.seek(blockSize * 2);
  totalRead=0;
  while (totalRead < totalWritten - blockSize * 2) {
    in.read(readBuf);
    totalRead+=readBuf.length;
  }
  in.close();
  U.sleep(200);
  ggfsSecondary.delete(FILE,false);
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      GridGgfsInputStream in0=ggfs.open(FILE,256);
      in0.seek(blockSize);
      try {
        in0.read(readBuf);
      }
  finally {
        U.closeQuiet(in0);
      }
      return null;
    }
  }
,IOException.class,"Failed to read data due to secondary file system exception: /dir/subdir/file");
}
