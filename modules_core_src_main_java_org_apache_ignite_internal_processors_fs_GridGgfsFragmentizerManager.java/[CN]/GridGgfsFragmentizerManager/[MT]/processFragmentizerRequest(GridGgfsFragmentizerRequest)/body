{
  req.finishUnmarshal(ggfsCtx.kernalContext().config().getMarshaller(),null);
  Collection<GridGgfsFileAffinityRange> ranges=req.fragmentRanges();
  IgniteUuid fileId=req.fileId();
  GridGgfsFileInfo fileInfo=ggfsCtx.meta().info(fileId);
  if (fileInfo == null) {
    if (log.isDebugEnabled())     log.debug("Failed to find file info for fragmentizer request: " + req);
    return;
  }
  if (log.isDebugEnabled())   log.debug("Moving file ranges for fragmentizer request [req=" + req + ", fileInfo="+ fileInfo+ ']');
  for (  GridGgfsFileAffinityRange range : ranges) {
    try {
      GridGgfsFileInfo updated;
switch (range.status()) {
case RANGE_STATUS_INITIAL:
{
          updated=ggfsCtx.meta().updateInfo(fileId,updateRange(range,RANGE_STATUS_MOVING));
          if (updated == null) {
            ggfsCtx.data().cleanBlocks(fileInfo,range,true);
            continue;
          }
        }
case RANGE_STATUS_MOVING:
{
        ggfsCtx.data().spreadBlocks(fileInfo,range);
        updated=ggfsCtx.meta().updateInfo(fileId,updateRange(range,RANGE_STATUS_MOVED));
        if (updated == null) {
          ggfsCtx.data().cleanBlocks(fileInfo,range,true);
          continue;
        }
      }
case RANGE_STATUS_MOVED:
{
      ggfsCtx.data().cleanBlocks(fileInfo,range,false);
      updated=ggfsCtx.meta().updateInfo(fileId,deleteRange(range));
      if (updated == null)       ggfsCtx.data().cleanBlocks(fileInfo,range,true);
    }
}
}
 catch (GridGgfsInvalidRangeException e) {
if (log.isDebugEnabled()) log.debug("Failed to update file range " + "[range=" + range + "fileId="+ fileId+ ", err="+ e.getMessage()+ ']');
}
}
}
