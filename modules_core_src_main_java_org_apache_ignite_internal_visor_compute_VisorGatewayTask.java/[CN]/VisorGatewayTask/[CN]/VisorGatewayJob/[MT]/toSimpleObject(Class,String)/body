{
  if (val == null || val.equals("null"))   return null;
  if (String.class == cls)   return val;
  if (Boolean.class == cls || Boolean.TYPE == cls)   return Boolean.parseBoolean(val);
  if (Integer.class == cls || Integer.TYPE == cls)   return Integer.parseInt(val);
  if (Long.class == cls || Long.TYPE == cls)   return Long.parseLong(val);
  if (UUID.class == cls)   return UUID.fromString(val);
  if (IgniteUuid.class == cls)   return IgniteUuid.fromString(val);
  if (Byte.class == cls || Byte.TYPE == cls)   return Byte.parseByte(val);
  if (Short.class == cls || Short.TYPE == cls)   return Short.parseShort(val);
  if (Float.class == cls || Float.TYPE == cls)   return Float.parseFloat(val);
  if (Double.class == cls || Double.TYPE == cls)   return Double.parseDouble(val);
  if (BigDecimal.class == cls)   return new BigDecimal(val);
  if (Collection.class == cls)   return Arrays.asList(val.split(";"));
  if (Set.class == cls)   return new HashSet<>(Arrays.asList(val.split(";")));
  if (Object[].class == cls)   return val.split(";");
  if (byte[].class == cls) {
    String[] els=val.split(";");
    if (els.length == 0 || (els.length == 1 && els[0].length() == 0))     return new byte[0];
    byte[] res=new byte[els.length];
    for (int i=0; i < els.length; i++)     res[i]=Byte.valueOf(els[i]);
    return res;
  }
  return val;
}
