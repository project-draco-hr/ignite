{
  VisorCacheEvictionConfig cfg=new VisorCacheEvictionConfig();
  Integer policyMaxSize=null;
  final GridCacheEvictionPolicy policy=ccfg.getEvictionPolicy();
  if (policy instanceof GridCacheLruEvictionPolicyMBean)   policyMaxSize=((GridCacheLruEvictionPolicyMBean)policy).getMaxSize();
 else   if (policy instanceof GridCacheRandomEvictionPolicyMBean)   policyMaxSize=((GridCacheRandomEvictionPolicyMBean)policy).getMaxSize();
 else   if (policy instanceof GridCacheFifoEvictionPolicyMBean)   policyMaxSize=((GridCacheFifoEvictionPolicyMBean)policy).getMaxSize();
  cfg.policy(compactClass(ccfg.getEvictionPolicy()));
  cfg.policyMaxSize(policyMaxSize);
  cfg.filter(compactClass(ccfg.getEvictionFilter()));
  cfg.synchronizedConcurrencyLevel(ccfg.getEvictSynchronizedConcurrencyLevel());
  cfg.synchronizedTimeout(ccfg.getEvictSynchronizedTimeout());
  cfg.synchronizedKeyBufferSize(ccfg.getEvictSynchronizedKeyBufferSize());
  cfg.evictSynchronized(ccfg.isEvictSynchronized());
  cfg.nearSynchronized(ccfg.isEvictNearSynchronized());
  cfg.maxOverflowRatio(ccfg.getEvictMaxOverflowRatio());
  return cfg;
}
