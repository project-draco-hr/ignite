{
  GridCompoundFuture<IgniteTx,Boolean> res=new GridCompoundFuture<>(context().kernalContext(),new IgniteReducer<IgniteTx,Boolean>(){
    @Override public boolean collect(    IgniteTx e){
      return true;
    }
    @Override public Boolean reduce(){
      return true;
    }
  }
);
  for (  IgniteTxEx<K,V> tx : txs()) {
    if (tx.concurrency() == PESSIMISTIC) {
      if (tx.topologyVersion() > 0 && tx.topologyVersion() < topVer)       res.add(tx.finishFuture());
    }
 else     if (tx.concurrency() == OPTIMISTIC) {
      IgniteTxState state=tx.state();
      long txTopVer=tx.topologyVersion();
      if ((state == PREPARING || state == PREPARED || state == COMMITTING) && txTopVer > 0 && txTopVer < topVer) {
        res.add(tx.finishFuture());
      }
    }
  }
  res.markInitialized();
  return res;
}
