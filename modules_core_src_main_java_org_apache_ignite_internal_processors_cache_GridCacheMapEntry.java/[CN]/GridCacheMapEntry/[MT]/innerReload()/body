{
  CU.checkStore(cctx);
  GridCacheVersion startVer;
  boolean wasNew;
synchronized (this) {
    checkObsolete();
    startVer=ver;
    wasNew=isNew();
  }
  String taskName=cctx.kernalContext().job().currentTaskName();
  CacheObject ret=cctx.toCacheObject(readThrough(null,key,true,cctx.localNodeId(),taskName));
  boolean touch=false;
  try {
synchronized (this) {
      long ttl=ttlExtras();
      GridCacheVersion nextVer=cctx.versions().nextForLoad(ver);
      if (wasNew && !isNew())       return ret;
      if (startVer.equals(ver)) {
        CacheObject old=rawGetOrUnmarshalUnlocked(false);
        if (log.isTraceEnabled()) {
          log.trace("innerReload releaseSwap [key=" + key + ", entry="+ System.identityHashCode(this)+ ", old="+ old+ ", ptr="+ offHeapPointer()+ ']');
        }
        releaseSwap();
        long expTime=CU.toExpireTime(ttl);
        ret=cctx.kernalContext().cacheObjects().prepareForCache(ret,cctx);
        if (ret != null) {
          updateIndex(ret,expTime,nextVer,old);
          if (cctx.deferredDelete() && !isInternal() && !detached()&& deletedUnlocked())           deletedUnlocked(false);
        }
 else {
          clearIndex(old);
          if (cctx.deferredDelete() && !isInternal() && !detached()&& !deletedUnlocked())           deletedUnlocked(true);
        }
        update(ret,expTime,ttl,nextVer,true);
        touch=true;
        return ret;
      }
    }
    touch=true;
    return ret;
  }
  finally {
    if (touch)     cctx.evicts().touch(this,cctx.affinity().affinityTopologyVersion());
  }
}
