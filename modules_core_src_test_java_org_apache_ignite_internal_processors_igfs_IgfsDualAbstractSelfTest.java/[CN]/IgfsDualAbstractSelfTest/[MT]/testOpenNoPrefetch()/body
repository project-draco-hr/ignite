{
  create(igfsSecondary,paths(DIR,SUBDIR),paths(FILE));
  final int blockSize=IGFS_BLOCK_SIZE;
  int totalWritten=0;
  try (OutputStream out=igfsSecondary.openOutputStream(FILE.toString(),false)){
    while (totalWritten < blockSize * 2 + chunk.length) {
      out.write(chunk);
      totalWritten+=chunk.length;
    }
  }
   awaitFileClose(igfsSecondaryFileSystem,FILE);
  int totalRead=0;
  IgfsInputStream in=igfs.open(FILE,blockSize);
  final byte[] readBuf=new byte[1024];
  while (totalRead + readBuf.length <= blockSize) {
    in.read(readBuf);
    totalRead+=readBuf.length;
  }
  in.seek(blockSize * 2);
  totalRead=0;
  while (totalRead < totalWritten - blockSize * 2) {
    in.read(readBuf);
    totalRead+=readBuf.length;
  }
  U.sleep(300);
  igfsSecondary.delete(FILE.toString(),false);
  U.sleep(300);
  final IgfsInputStream in0=in;
  GridTestUtils.assertThrows(log,new Callable<Object>(){
    @Override public Object call() throws Exception {
      in0.seek(blockSize);
      try {
        in0.read(readBuf);
      }
  finally {
        U.closeQuiet(in0);
      }
      return null;
    }
  }
,IOException.class,"Failed to read data due to secondary file system exception: " + "Failed to retrieve file's data block (corrupted file?) [path=/dir/subdir/file, blockIdx=1");
}
