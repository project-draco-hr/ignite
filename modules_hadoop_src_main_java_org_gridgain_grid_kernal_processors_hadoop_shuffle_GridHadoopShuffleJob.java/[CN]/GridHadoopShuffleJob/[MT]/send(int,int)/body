{
  final GridFutureAdapterEx<?> fut=new GridFutureAdapterEx<>();
  GridHadoopShuffleMessage msg=msgs[idx];
  final long msgId=msg.id();
  sentMsgs.putIfAbsent(msgId,new GridBiTuple<GridHadoopShuffleMessage,GridFutureAdapterEx<?>>(msg,fut));
  try {
    io.apply(reduceAddrs[idx],msg);
  }
 catch (  GridClosureException e) {
    fut.onDone(U.unwrap(e));
  }
  fut.listenAsync(new GridInClosure<GridFuture<?>>(){
    @Override public void apply(    GridFuture<?> f){
      try {
        f.get();
        sentMsgs.remove(msgId);
      }
 catch (      GridException e) {
        log.error("Failed to send message.",e);
      }
    }
  }
);
  msgs[idx]=newBufMinSize == 0 ? null : new GridHadoopShuffleMessage(job.id(),idx,Math.max(4 * 1024,newBufMinSize));
}
