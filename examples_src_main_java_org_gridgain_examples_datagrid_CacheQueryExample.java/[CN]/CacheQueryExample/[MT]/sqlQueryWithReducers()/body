{
  GridCacheProjection<GridCacheAffinityKey<UUID>,Person> cache=GridGain.grid().cache(CACHE_NAME);
  GridCacheQuery<Map.Entry<GridCacheAffinityKey<UUID>,Person>> qry=cache.queries().createSqlQuery(Person.class,"from Person, Organization where Person.orgId = Organization.id and " + "lower(Organization.name) = lower(?)");
  Collection<GridBiTuple<Double,Integer>> res=qry.execute(new GridReducer<Map.Entry<GridCacheAffinityKey<UUID>,Person>,GridBiTuple<Double,Integer>>(){
    private double sum;
    private int cnt;
    @Override public boolean collect(    Map.Entry<GridCacheAffinityKey<UUID>,Person> e){
      sum+=e.getValue().salary;
      cnt++;
      return true;
    }
    @Override public GridBiTuple<Double,Integer> reduce(){
      return new GridBiTuple<>(sum,cnt);
    }
  }
,"GridGain").get();
  double sum=0.0d;
  int cnt=0;
  for (  GridBiTuple<Double,Integer> t : res) {
    sum+=t.get1();
    cnt+=t.get2();
  }
  double avg=sum / cnt;
  print("Average salary for 'GridGain' employees: " + avg);
}
