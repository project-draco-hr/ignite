{
  ByteBuffer tmp=ByteBuffer.allocate(10 * 1024);
  GridClientCacheRequest req=new GridClientCacheRequest(CAS);
  req.key("key");
  req.value(1);
  req.value2(2);
  req.clientId(UUID.randomUUID());
  for (int i=0; i < 5; i++)   tmp.put(clientRequestPacket(req));
  tmp.flip();
  for (int splitPos=0; splitPos < tmp.remaining(); splitPos++) {
    ByteBuffer[] split=split(tmp,splitPos);
    tmp.flip();
    GridNioSession ses=new GridMockNioSession();
    ses.addMeta(MARSHALLER.ordinal(),new GridClientOptimizedMarshaller());
    GridTcpRestParser parser=new GridTcpRestParser();
    Collection<GridClientCacheRequest> lst=new ArrayList<>(5);
    for (    ByteBuffer buf : split) {
      GridClientCacheRequest r;
      while (buf.hasRemaining() && (r=(GridClientCacheRequest)parser.decode(ses,buf)) != null)       lst.add(r);
      assertTrue("Parser has left unparsed bytes.",buf.remaining() == 0);
    }
    assertEquals(5,lst.size());
    for (    GridClientCacheRequest res : lst) {
      assertEquals("Invalid operation",req.operation(),res.operation());
      assertEquals("Invalid clientId",req.clientId(),res.clientId());
      assertEquals("Invalid key",req.key(),res.key());
      assertEquals("Invalid value 1",req.value(),res.value());
      assertEquals("Invalid value 2",req.value2(),res.value2());
    }
  }
}
