{
  if (folder != null) {
    folder=null;
    dirPaths.poll();
  }
  if (timeoutTask != null) {
    U.interrupt(timeoutTask);
    U.join(timeoutTask,log);
  }
  while (!dirPaths.isEmpty()) {
    curDirPath=dirPaths.peek();
    if (new File(curDirPath).exists())     folder=new File(curDirPath);
 else {
      if (getGridGainHome() != null && !getGridGainHome().isEmpty()) {
        folder=new File(getGridGainHome(),curDirPath);
        if (!folder.mkdirs() && !folder.exists()) {
          dirPaths.poll();
          if (!dirPaths.isEmpty())           continue;
 else           throw new GridSpiException("Checkpoint directory does not exist and cannot be created : " + folder);
        }
      }
 else {
        String tmpDirPath=System.getProperty("java.io.tmpdir");
        if (tmpDirPath == null)         throw new GridSpiException("System property 'java.io.tmpdir' is invalid.");
        folder=new File(tmpDirPath,DFLT_TMP_DIR);
        if (!folder.mkdirs() && !folder.exists())         throw new GridSpiException("Failed to create checkpoint directory: " + folder);
      }
      if (log.isDebugEnabled())       log.debug("Created shared filesystem checkpoint directory: " + folder.getAbsolutePath());
    }
    break;
  }
  if (folder != null) {
    Map<File,GridSharedFsTimeData> files=new HashMap<>();
    for (    File file : getFiles()) {
      if (file.exists()) {
        if (log.isDebugEnabled())         log.debug("Checking checkpoint file: " + file.getAbsolutePath());
        try {
          GridSharedFsCheckpointData data=GridSharedFsUtils.read(file,marsh,log);
          if (data.getHost().equals(host)) {
            files.put(file,new GridSharedFsTimeData(data.getExpireTime(),file.lastModified(),data.getKey()));
            if (log.isDebugEnabled())             log.debug("Registered existing checkpoint from: " + file.getAbsolutePath());
          }
        }
 catch (        GridException e) {
          U.error(log,"Failed to unmarshal objects in checkpoint file (ignoring): " + file.getAbsolutePath(),e);
        }
catch (        IOException e) {
          U.error(log,"IO error reading checkpoint file (ignoring): " + file.getAbsolutePath(),e);
        }
      }
    }
    timeoutTask=new GridSharedFsTimeoutTask(gridName,marsh,log);
    timeoutTask.setCheckpointListener(lsnr);
    timeoutTask.add(files);
    timeoutTask.start();
  }
  return folder;
}
