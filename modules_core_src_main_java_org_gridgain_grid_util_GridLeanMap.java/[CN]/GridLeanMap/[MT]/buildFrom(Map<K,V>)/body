{
  Iterator<Entry<K,V>> iter=m.entrySet().iterator();
  if (m.isEmpty())   map=null;
 else   if (m.size() == 1) {
    Entry<K,V> e=iter.next();
    map=new Map1<>(e.getKey(),e.getValue());
  }
 else   if (m.size() == 2) {
    Entry<K,V> e1=iter.next();
    Entry<K,V> e2=iter.next();
    map=new Map2<>(e1.getKey(),e1.getValue(),e2.getKey(),e2.getValue());
  }
 else   if (m.size() == 3) {
    Entry<K,V> e1=iter.next();
    Entry<K,V> e2=iter.next();
    Entry<K,V> e3=iter.next();
    map=new Map3<>(e1.getKey(),e1.getValue(),e2.getKey(),e2.getValue(),e3.getKey(),e3.getValue());
  }
 else   if (m.size() == 4) {
    Entry<K,V> e1=iter.next();
    Entry<K,V> e2=iter.next();
    Entry<K,V> e3=iter.next();
    Entry<K,V> e4=iter.next();
    map=new Map4<>(e1.getKey(),e1.getValue(),e2.getKey(),e2.getValue(),e3.getKey(),e3.getValue(),e4.getKey(),e4.getValue());
  }
 else   if (m.size() == 5) {
    Entry<K,V> e1=iter.next();
    Entry<K,V> e2=iter.next();
    Entry<K,V> e3=iter.next();
    Entry<K,V> e4=iter.next();
    Entry<K,V> e5=iter.next();
    map=new Map5<>(e1.getKey(),e1.getValue(),e2.getKey(),e2.getValue(),e3.getKey(),e3.getValue(),e4.getKey(),e4.getValue(),e5.getKey(),e5.getValue());
  }
 else   map=new LeanHashMap<>(m);
}
