{
  idxMgr=cctx.kernalContext().indexing();
  spi=cctx.config().getIndexingSpiName();
  space=cctx.name();
  maxIterCnt=cctx.config().getMaximumQueryIteratorCount();
  cctx.events().addListener(new GridLocalEventListener(){
    @Override public void onEvent(    GridEvent evt){
      UUID nodeId=((GridDiscoveryEvent)evt).eventNode().id();
      Map<Long,GridFutureAdapter<QueryResult<K,V>>> futs=qryIters.remove(nodeId);
      if (futs != null) {
        for (        GridFutureAdapter<QueryResult<K,V>> fut : futs.values()) {
          fut.listenAsync(new CIX1<GridFuture<QueryResult<K,V>>>(){
            @Override public void applyx(            GridFuture<QueryResult<K,V>> f) throws GridException {
              f.get().iter.close();
            }
          }
);
        }
      }
      Map<Long,GridFutureAdapter<GridIndexingFieldsResult>> fieldsFuts=fieldsQryRes.remove(nodeId);
      if (fieldsFuts != null) {
        for (        GridFutureAdapter<GridIndexingFieldsResult> fut : fieldsFuts.values()) {
          fut.listenAsync(new CIX1<GridFuture<GridIndexingFieldsResult>>(){
            @Override public void applyx(            GridFuture<GridIndexingFieldsResult> f) throws GridException {
              f.get().iterator().close();
            }
          }
);
        }
      }
    }
  }
,EVT_NODE_LEFT,EVT_NODE_FAILED);
}
