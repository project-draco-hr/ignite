{
  idxMgr=cctx.kernalContext().indexing();
  spi=cctx.config().getIndexingSpiName();
  space=cctx.name();
  maxIterCnt=cctx.config().getMaximumQueryIteratorCount();
  cctx.events().addListener(new GridLocalEventListener(){
    @Override public void onEvent(    IgniteEvent evt){
      UUID nodeId=((IgniteDiscoveryEvent)evt).eventNode().id();
      Map<Long,GridFutureAdapter<QueryResult<K,V>>> futs=qryIters.remove(nodeId);
      if (futs != null) {
        for (        Map.Entry<Long,GridFutureAdapter<QueryResult<K,V>>> entry : futs.entrySet()) {
          final Object recipient=recipient(nodeId,entry.getKey());
          entry.getValue().listenAsync(new CIX1<IgniteFuture<QueryResult<K,V>>>(){
            @Override public void applyx(            IgniteFuture<QueryResult<K,V>> f) throws GridException {
              f.get().closeIfNotShared(recipient);
            }
          }
);
        }
      }
      Map<Long,GridFutureAdapter<FieldsResult>> fieldsFuts=fieldsQryRes.remove(nodeId);
      if (fieldsFuts != null) {
        for (        Map.Entry<Long,GridFutureAdapter<FieldsResult>> entry : fieldsFuts.entrySet()) {
          final Object recipient=recipient(nodeId,entry.getKey());
          entry.getValue().listenAsync(new CIX1<IgniteFuture<FieldsResult>>(){
            @Override public void applyx(            IgniteFuture<FieldsResult> f) throws GridException {
              f.get().closeIfNotShared(recipient);
            }
          }
);
        }
      }
    }
  }
,EVT_NODE_LEFT,EVT_NODE_FAILED);
}
