{
  if (it == null)   return new GridEmptyCloseableIterator<>();
  return new GridIteratorAdapter<IgniteBiTuple<K,V>>(){
    private IgniteBiTuple<K,V> next;
{
      advance();
    }
    @Override public boolean hasNextX(){
      return next != null;
    }
    @Override public IgniteBiTuple<K,V> nextX(){
      if (next == null)       throw new NoSuchElementException();
      IgniteBiTuple<K,V> next0=next;
      advance();
      return next0;
    }
    @Override public void removeX(){
      throw new UnsupportedOperationException();
    }
    private void advance(){
      next=null;
      while (it.hasNext()) {
        final LazySwapEntry e=new LazySwapEntry(it.next());
        if (prjPred != null) {
          GridCacheEntry<K,V> cacheEntry=new GridCacheScanSwapEntry(e);
          if (!prjPred.apply((GridCacheEntry<Object,Object>)cacheEntry))           continue;
        }
        if (filter != null) {
          K key=(K)cctx.unwrapPortableIfNeeded(e.key(),keepPortable);
          V val=(V)cctx.unwrapPortableIfNeeded(e.value(),keepPortable);
          if (!filter.apply(key,val))           continue;
        }
        next=new IgniteBiTuple<>(e.key(),e.value());
        break;
      }
    }
  }
;
}
