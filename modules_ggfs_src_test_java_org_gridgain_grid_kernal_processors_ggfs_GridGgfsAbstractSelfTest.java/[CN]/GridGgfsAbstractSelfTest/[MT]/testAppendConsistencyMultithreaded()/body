{
  final AtomicBoolean stop=new AtomicBoolean();
  final AtomicInteger chunksCtr=new AtomicInteger();
  final AtomicReference<Exception> err=new AtomicReference<>();
  ggfs.create(FILE,false).close();
  int threadCnt=5;
  GridFuture<?> fut=multithreadedAsync(new Runnable(){
    @Override public void run(){
      while (!stop.get()) {
        GridGgfsOutputStream os=null;
        try {
          os=ggfs.append(FILE,false);
          os.write(chunk);
          U.sleep(50);
          os.close();
          chunksCtr.incrementAndGet();
        }
 catch (        GridException ignore) {
          try {
            U.sleep(10);
          }
 catch (          GridInterruptedException ignored) {
          }
        }
catch (        IOException e) {
          err.compareAndSet(null,e);
        }
 finally {
          U.closeQuiet(os);
        }
      }
    }
  }
,threadCnt);
  long startTime=U.currentTimeMillis();
  while (chunksCtr.get() < 50 && U.currentTimeMillis() - startTime < 60 * 1000)   U.sleep(100);
  stop.set(true);
  fut.get();
  awaitFileClose(ggfs,FILE);
  if (err.get() != null)   throw err.get();
  byte[][] data=new byte[chunksCtr.get()][];
  Arrays.fill(data,chunk);
  checkFileContent(ggfs,FILE,data);
}
