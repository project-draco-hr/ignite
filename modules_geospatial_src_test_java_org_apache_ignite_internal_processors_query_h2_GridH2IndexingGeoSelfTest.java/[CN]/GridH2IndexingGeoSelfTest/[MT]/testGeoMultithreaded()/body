{
  final IgniteCache<Integer,EnemyCamp> cache1=grid(0).cache(null);
  final IgniteCache<Integer,EnemyCamp> cache2=grid(1).cache(null);
  final IgniteCache<Integer,EnemyCamp> cache3=grid(2).cache(null);
  final String[] points=new String[CNT];
  WKTReader r=new WKTReader();
  ThreadLocalRandom rnd=ThreadLocalRandom.current();
  for (int idx=0; idx < CNT; idx++) {
    int x=rnd.nextInt(1,100);
    int y=rnd.nextInt(1,100);
    cache1.getAndPut(idx,new EnemyCamp(r.read("POINT(" + x + " "+ y+ ")"),Integer.toString(idx)));
    points[idx]=Integer.toString(idx);
  }
  Thread.sleep(200);
  final AtomicBoolean stop=new AtomicBoolean();
  final AtomicReference<Exception> err=new AtomicReference<>();
  IgniteInternalFuture<?> putFut=GridTestUtils.runMultiThreadedAsync(new Callable<Void>(){
    @Override public Void call() throws Exception {
      WKTReader r=new WKTReader();
      ThreadLocalRandom rnd=ThreadLocalRandom.current();
      while (!stop.get()) {
        int cacheIdx=rnd.nextInt(0,3);
        IgniteCache<Integer,EnemyCamp> cache=cacheIdx == 0 ? cache1 : cacheIdx == 1 ? cache2 : cache3;
        int idx=rnd.nextInt(CNT);
        int x=rnd.nextInt(1,100);
        int y=rnd.nextInt(1,100);
        cache.getAndPut(idx,new EnemyCamp(r.read("POINT(" + x + " "+ y+ ")"),Integer.toString(idx)));
        U.sleep(50);
      }
      return null;
    }
  }
,Runtime.getRuntime().availableProcessors(),"put-thread");
  IgniteInternalFuture<?> qryFut=GridTestUtils.runMultiThreadedAsync(new Callable<Void>(){
    @Override public Void call() throws Exception {
      WKTReader r=new WKTReader();
      ThreadLocalRandom rnd=ThreadLocalRandom.current();
      while (!stop.get()) {
        try {
          int cacheIdx=rnd.nextInt(0,3);
          IgniteCache<Integer,EnemyCamp> cache=cacheIdx == 0 ? cache1 : cacheIdx == 1 ? cache2 : cache3;
          SqlQuery<Integer,EnemyCamp> qry=new SqlQuery<>(EnemyCamp.class,"coords && ?");
          Collection<Cache.Entry<Integer,EnemyCamp>> res=cache.query(qry.setArgs(r.read("POLYGON((0 0, 0 100, 100 100, 100 0, 0 0))"))).getAll();
          checkPoints(res,points);
          U.sleep(5);
        }
 catch (        Exception e) {
          err.set(e);
          stop.set(true);
          break;
        }
      }
      return null;
    }
  }
,4,"qry-thread");
  U.sleep(60000L);
  stop.set(true);
  putFut.get();
  qryFut.get();
  Exception err0=err.get();
  if (err0 != null)   throw err0;
}
