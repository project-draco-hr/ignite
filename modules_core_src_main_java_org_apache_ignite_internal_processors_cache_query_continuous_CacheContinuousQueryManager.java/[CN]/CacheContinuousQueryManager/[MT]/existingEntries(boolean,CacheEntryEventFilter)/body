{
  final Iterator<Cache.Entry<?,?>> it=cctx.cache().igniteIterator(keepBinary);
  final Cache cache=cctx.kernalContext().cache().jcache(cctx.name());
  return new Iterable<CacheEntryEvent<?,?>>(){
    @Override public Iterator<CacheEntryEvent<?,?>> iterator(){
      return new Iterator<CacheEntryEvent<?,?>>(){
        private CacheQueryEntryEvent<?,?> next;
{
          advance();
        }
        @Override public boolean hasNext(){
          return next != null;
        }
        @Override public CacheEntryEvent<?,?> next(){
          if (!hasNext())           throw new NoSuchElementException();
          CacheEntryEvent next0=next;
          advance();
          return next0;
        }
        @Override public void remove(){
          throw new UnsupportedOperationException();
        }
        private void advance(){
          next=null;
          while (next == null) {
            if (!it.hasNext())             break;
            Cache.Entry e=it.next();
            next=new CacheEntryEventImpl(cache,CREATED,e.getKey(),e.getValue());
            if (filter != null && !filter.evaluate(next))             next=null;
          }
        }
      }
;
    }
  }
;
}
