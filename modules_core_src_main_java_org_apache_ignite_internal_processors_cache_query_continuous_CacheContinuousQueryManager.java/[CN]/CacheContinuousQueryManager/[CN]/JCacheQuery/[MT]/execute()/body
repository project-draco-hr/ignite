{
  if (!onStart)   cctx.config().addCacheEntryListenerConfiguration(cfg);
  CacheEntryListener locLsnrImpl=(CacheEntryListener)cfg.getCacheEntryListenerFactory().create();
  if (locLsnrImpl == null)   throw new IgniteCheckedException("Local CacheEntryListener is mandatory and can't be null.");
  byte types=0;
  types|=locLsnrImpl instanceof CacheEntryCreatedListener ? CREATED_FLAG : 0;
  types|=locLsnrImpl instanceof CacheEntryUpdatedListener ? UPDATED_FLAG : 0;
  types|=locLsnrImpl instanceof CacheEntryRemovedListener ? REMOVED_FLAG : 0;
  types|=locLsnrImpl instanceof CacheEntryExpiredListener ? EXPIRED_FLAG : 0;
  if (types == 0)   throw new IgniteCheckedException("Listener must implement one of CacheEntryListener sub-interfaces.");
  CacheEntryUpdatedListener locLsnr=new JCacheQueryLocalListener(locLsnrImpl,log);
  CacheEntryEventFilter fltr=null;
  if (cfg.getCacheEntryEventFilterFactory() != null) {
    fltr=(CacheEntryEventFilter)cfg.getCacheEntryEventFilterFactory().create();
    if (!(fltr instanceof Serializable))     throw new IgniteCheckedException("Cache entry event filter must implement java.io.Serializable: " + fltr);
  }
  CacheEntryEventSerializableFilter rmtFilter=new JCacheQueryRemoteFilter(fltr,types);
  routineId=executeQuery0(locLsnr,rmtFilter,ContinuousQuery.DFLT_PAGE_SIZE,ContinuousQuery.DFLT_TIME_INTERVAL,ContinuousQuery.DFLT_AUTO_UNSUBSCRIBE,false,false,cfg.isOldValueRequired(),cfg.isSynchronous(),false,false);
}
