{
  try {
    GridCacheAtomicSequence s=cache().dataStructures().atomicSequence(STRUCTURE_NAME,1,true);
    IgniteFuture<?> fut=GridTestUtils.runMultiThreadedAsync(new CA(){
      @Override public void apply(){
        try {
          String name=UUID.randomUUID().toString();
          for (int i=0; i < TOP_CHANGE_CNT; i++) {
            try {
              Ignite g=startGrid(name);
              assertTrue(g.cache(null).dataStructures().atomicSequence(STRUCTURE_NAME,1,false).get() > 0);
            }
  finally {
              if (i != TOP_CHANGE_CNT - 1)               stopGrid(name);
            }
          }
        }
 catch (        Exception e) {
          throw F.wrap(e);
        }
      }
    }
,TOP_CHANGE_THREAD_CNT,"topology-change-thread");
    long old=s.get();
    while (!fut.isDone()) {
      assertEquals(old,s.get());
      long val=s.incrementAndGet();
      assertTrue(val > old);
      old=val;
    }
    fut.get();
  }
  finally {
    cache().dataStructures().removeAtomicSequence(STRUCTURE_NAME);
  }
}
