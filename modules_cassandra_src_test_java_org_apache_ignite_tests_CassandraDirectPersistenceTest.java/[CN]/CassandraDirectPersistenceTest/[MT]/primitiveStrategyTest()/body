{
  CacheStore store1=CacheStoreHelper.createCacheStore("longTypes",new ClassPathResource("org/apache/ignite/tests/persistence/primitive/persistence-settings-1.xml"),CassandraHelper.getAdminDataSrc());
  CacheStore store2=CacheStoreHelper.createCacheStore("stringTypes",new ClassPathResource("org/apache/ignite/tests/persistence/primitive/persistence-settings-2.xml"),CassandraHelper.getAdminDataSrc());
  Collection<CacheEntryImpl<Long,Long>> longEntries=TestsHelper.generateLongsEntries();
  Collection<CacheEntryImpl<String,String>> strEntries=TestsHelper.generateStringsEntries();
  Collection<Long> fakeLongKeys=TestsHelper.getKeys(longEntries);
  fakeLongKeys.add(-1L);
  fakeLongKeys.add(-2L);
  fakeLongKeys.add(-3L);
  fakeLongKeys.add(-4L);
  Collection<String> fakeStrKeys=TestsHelper.getKeys(strEntries);
  fakeStrKeys.add("-1");
  fakeStrKeys.add("-2");
  fakeStrKeys.add("-3");
  fakeStrKeys.add("-4");
  LOGGER.info("Running PRIMITIVE strategy write tests");
  LOGGER.info("Running single operation write tests");
  store1.write(longEntries.iterator().next());
  store2.write(strEntries.iterator().next());
  LOGGER.info("Single operation write tests passed");
  LOGGER.info("Running bulk operation write tests");
  store1.writeAll(longEntries);
  store2.writeAll(strEntries);
  LOGGER.info("Bulk operation write tests passed");
  LOGGER.info("PRIMITIVE strategy write tests passed");
  LOGGER.info("Running PRIMITIVE strategy read tests");
  LOGGER.info("Running single operation read tests");
  LOGGER.info("Running real keys read tests");
  Long longVal=(Long)store1.load(longEntries.iterator().next().getKey());
  if (!longEntries.iterator().next().getValue().equals(longVal))   throw new RuntimeException("Long values was incorrectly deserialized from Cassandra");
  String strVal=(String)store2.load(strEntries.iterator().next().getKey());
  if (!strEntries.iterator().next().getValue().equals(strVal))   throw new RuntimeException("String values was incorrectly deserialized from Cassandra");
  LOGGER.info("Running fake keys read tests");
  longVal=(Long)store1.load(-1L);
  if (longVal != null)   throw new RuntimeException("Long value with fake key '-1' was found in Cassandra");
  strVal=(String)store2.load("-1");
  if (strVal != null)   throw new RuntimeException("String value with fake key '-1' was found in Cassandra");
  LOGGER.info("Single operation read tests passed");
  LOGGER.info("Running bulk operation read tests");
  LOGGER.info("Running real keys read tests");
  Map longValues=store1.loadAll(TestsHelper.getKeys(longEntries));
  if (!TestsHelper.checkCollectionsEqual(longValues,longEntries))   throw new RuntimeException("Long values was incorrectly deserialized from Cassandra");
  Map strValues=store2.loadAll(TestsHelper.getKeys(strEntries));
  if (!TestsHelper.checkCollectionsEqual(strValues,strEntries))   throw new RuntimeException("String values was incorrectly deserialized from Cassandra");
  LOGGER.info("Running fake keys read tests");
  longValues=store1.loadAll(fakeLongKeys);
  if (!TestsHelper.checkCollectionsEqual(longValues,longEntries))   throw new RuntimeException("Long values was incorrectly deserialized from Cassandra");
  strValues=store2.loadAll(fakeStrKeys);
  if (!TestsHelper.checkCollectionsEqual(strValues,strEntries))   throw new RuntimeException("String values was incorrectly deserialized from Cassandra");
  LOGGER.info("Bulk operation read tests passed");
  LOGGER.info("PRIMITIVE strategy read tests passed");
  LOGGER.info("Running PRIMITIVE strategy delete tests");
  LOGGER.info("Deleting real keys");
  store1.delete(longEntries.iterator().next().getKey());
  store1.deleteAll(TestsHelper.getKeys(longEntries));
  store2.delete(strEntries.iterator().next().getKey());
  store2.deleteAll(TestsHelper.getKeys(strEntries));
  LOGGER.info("Deleting fake keys");
  store1.delete(-1L);
  store2.delete("-1");
  store1.deleteAll(fakeLongKeys);
  store2.deleteAll(fakeStrKeys);
  LOGGER.info("PRIMITIVE strategy delete tests passed");
}
