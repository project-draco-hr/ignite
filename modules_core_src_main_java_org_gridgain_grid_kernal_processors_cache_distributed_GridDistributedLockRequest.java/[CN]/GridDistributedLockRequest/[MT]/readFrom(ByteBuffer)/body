{
  commState.setBuffer(buf);
  if (!super.readFrom(buf))   return false;
switch (commState.idx) {
case 8:
    if (commState.readSize == -1) {
      if (buf.remaining() < 4)       return false;
      commState.readSize=commState.getInt(null);
    }
  if (commState.readSize >= 0) {
    if (drVersByIdx == null)     drVersByIdx=new GridCacheVersion[commState.readSize];
    for (int i=commState.readItems; i < commState.readSize; i++) {
      GridCacheVersion _val=commState.getCacheVersion(null);
      if (_val == CACHE_VER_NOT_READ)       return false;
      drVersByIdx[i]=(GridCacheVersion)_val;
      commState.readItems++;
    }
  }
commState.readSize=-1;
commState.readItems=0;
commState.idx++;
case 9:
IgniteUuid futId0=commState.getGridUuid("futId");
if (futId0 == GRID_UUID_NOT_READ) return false;
futId=futId0;
commState.idx++;
case 10:
byte[] grpLockKeyBytes0=commState.getByteArray("grpLockKeyBytes");
if (grpLockKeyBytes0 == BYTE_ARR_NOT_READ) return false;
grpLockKeyBytes=grpLockKeyBytes0;
commState.idx++;
case 11:
if (buf.remaining() < 1) return false;
isInTx=commState.getBoolean("isInTx");
commState.idx++;
case 12:
if (buf.remaining() < 1) return false;
isInvalidate=commState.getBoolean("isInvalidate");
commState.idx++;
case 13:
if (buf.remaining() < 1) return false;
isRead=commState.getBoolean("isRead");
commState.idx++;
case 14:
if (buf.remaining() < 1) return false;
byte isolation0=commState.getByte("isolation");
isolation=GridCacheTxIsolation.fromOrdinal(isolation0);
commState.idx++;
case 15:
if (commState.readSize == -1) {
if (buf.remaining() < 4) return false;
commState.readSize=commState.getInt(null);
}
if (commState.readSize >= 0) {
if (keyBytes == null) keyBytes=new ArrayList<>(commState.readSize);
for (int i=commState.readItems; i < commState.readSize; i++) {
byte[] _val=commState.getByteArray(null);
if (_val == BYTE_ARR_NOT_READ) return false;
keyBytes.add((byte[])_val);
commState.readItems++;
}
}
commState.readSize=-1;
commState.readItems=0;
commState.idx++;
case 16:
GridCacheVersion nearXidVer0=commState.getCacheVersion("nearXidVer");
if (nearXidVer0 == CACHE_VER_NOT_READ) return false;
nearXidVer=nearXidVer0;
commState.idx++;
case 17:
UUID nodeId0=commState.getUuid("nodeId");
if (nodeId0 == UUID_NOT_READ) return false;
nodeId=nodeId0;
commState.idx++;
case 18:
if (buf.remaining() < 1) return false;
partLock=commState.getBoolean("partLock");
commState.idx++;
case 19:
boolean[] retVals0=commState.getBooleanArray("retVals");
if (retVals0 == BOOLEAN_ARR_NOT_READ) return false;
retVals=retVals0;
commState.idx++;
case 20:
if (buf.remaining() < 8) return false;
threadId=commState.getLong("threadId");
commState.idx++;
case 21:
if (buf.remaining() < 8) return false;
timeout=commState.getLong("timeout");
commState.idx++;
case 22:
if (buf.remaining() < 4) return false;
txSize=commState.getInt("txSize");
commState.idx++;
case 23:
byte[] writeEntriesBytes0=commState.getByteArray("writeEntriesBytes");
if (writeEntriesBytes0 == BYTE_ARR_NOT_READ) return false;
writeEntriesBytes=writeEntriesBytes0;
commState.idx++;
}
return true;
}
