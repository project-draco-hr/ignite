{
  final Collection<PojoDescriptor> selPojos=checkedPojos();
  if (selPojos.isEmpty()) {
    MessageBox.warningDialog(owner,"Please select tables to generate XML and POJOs files!");
    return;
  }
  if (!checkInput(outFolderTf,true,"Output folder should not be empty!"))   return;
  lockUI(genLayerPnl,genPnl,prevBtn,nextBtn);
  final String outFolder=outFolderTf.getText();
  final String pkg=pkgTf.getText();
  final File destFolder=new File(outFolder);
  final boolean constructor=pojoConstructorCh.isSelected();
  final boolean includeKeys=pojoIncludeKeysCh.isSelected();
  final boolean generateAliases=generateAliasesCh.isSelected();
  final boolean singleXml=xmlSingleFileCh.isSelected();
  Runnable task=new Task<Void>(){
    /** 
 * @param pojo POJO descriptor to check.
 * @param selected Selected flag.
 * @param msg Message to show in case of check failed.
 */
    private void checkEmpty(    final PojoDescriptor pojo,    boolean selected,    String msg){
      if (!selected) {
        Platform.runLater(new Runnable(){
          @Override public void run(){
            TableView.TableViewSelectionModel<PojoDescriptor> selMdl=pojosTbl.getSelectionModel();
            selMdl.clearSelection();
            selMdl.select(pojo);
            pojosTbl.scrollTo(selMdl.getSelectedIndex());
          }
        }
);
        throw new IllegalStateException(msg + pojo.table());
      }
    }
    /** 
 * {@inheritDoc} 
 */
    @Override protected Void call() throws Exception {
      long started=System.currentTimeMillis();
      if (!destFolder.exists() && !destFolder.mkdirs())       throw new IOException("Failed to create output folder: " + destFolder);
      Collection<PojoDescriptor> all=new ArrayList<>();
      ConfirmCallable askOverwrite=new ConfirmCallable(owner,"File already exists: %s\nOverwrite?");
      for (      PojoDescriptor pojo : selPojos) {
        if (pojo.checked()) {
          checkEmpty(pojo,pojo.hasFields(),"No fields selected for type: ");
          checkEmpty(pojo,pojo.hasKeyFields(),"No key fields selected for type: ");
          checkEmpty(pojo,pojo.hasValueFields(includeKeys),"No value fields selected for type: ");
          all.add(pojo);
        }
      }
      for (      PojoDescriptor pojo : all) {
        if (!singleXml)         XmlGenerator.generate(pkg,pojo,includeKeys,generateAliases,new File(destFolder,pojo.table() + ".xml"),askOverwrite);
        CodeGenerator.pojos(pojo,outFolder,pkg,constructor,includeKeys,askOverwrite);
      }
      if (singleXml)       XmlGenerator.generate(pkg,all,includeKeys,generateAliases,new File(outFolder,"ignite-type-metadata.xml"),askOverwrite);
      CodeGenerator.snippet(all,pkg,includeKeys,generateAliases,outFolder,askOverwrite);
      perceptualDelay(started);
      return null;
    }
    /** 
 * Running of command with reading of first printed line.
 * @param cmdLine Process to run.
 * @return First printed by command line.
 */
    private String execAndReadLine(    Process cmdLine){
      InputStream stream=cmdLine.getInputStream();
      Charset cs=Charset.defaultCharset();
      try (BufferedReader reader=new BufferedReader(cs == null ? new InputStreamReader(stream) : new InputStreamReader(stream,cs))){
        return reader.readLine();
      }
 catch (      IOException ignored) {
        return null;
      }
    }
    /** 
 * Start specified command in separate process.
 * @param commands Executable file and command parameters in array.
 * @return Process instance for run command.
 */
    private Process startProcess(    List<String> commands) throws IOException {
      ProcessBuilder builder=new ProcessBuilder(commands);
      Map<String,String> environment=builder.environment();
      environment.clear();
      environment.putAll(System.getenv());
      return builder.start();
    }
    /** 
 * Convert specified command parameters to system specific parameters.
 * @param cmd Path to executable file.
 * @param parameters Params for created process.
 * @return List of converted system specific parameters.
 */
    private List<String> toCommandLine(    String cmd,    String... parameters){
      boolean isWin=U.isWindows();
      List<String> params=new ArrayList<>(parameters.length + 1);
      params.add(cmd.replace('/',File.separatorChar).replace('\\',File.separatorChar));
      for (      String parameter : parameters) {
        if (isWin) {
          if (parameter.contains("\""))           params.add(parameter.replace("\"","\\\""));
 else           if (parameter.isEmpty())           params.add("\"\"");
 else           params.add(parameter);
        }
 else         params.add(parameter);
      }
      return params;
    }
    /** 
 * Create process for run specified command.
 * @param execPath Path to executable file.
 * @param params Params for created process.
 * @return Process instance for run command.
 */
    private Process createProcess(    String execPath,    String... params) throws IOException {
      if (F.isEmpty(execPath))       throw new IllegalArgumentException("Executable not specified");
      return startProcess(toCommandLine(execPath,params));
    }
    /** 
 * Compare two version strings.
 * @param v1 Version string 1.
 * @param v2 Version string 2.
 * @return The value 0 if the argument version is equal to this version.
 * A value less than 0 if this version is less than the version argument.
 * A value greater than 0 if this version is greater than the version argument.
 */
    private int compareVersionNumbers(    String v1,    String v2){
      if (v1 == null && v2 == null)       return 0;
      if (v1 == null)       return -1;
      if (v2 == null)       return 1;
      String[] part1=v1.split("[._-]");
      String[] part2=v2.split("[._-]");
      int idx=0;
      while (idx < part1.length && idx < part2.length) {
        String p1=part1[idx];
        String p2=part2[idx];
        int cmp=p1.matches("\\d+") && p2.matches("\\d+") ? Integer.valueOf(p1).compareTo(Integer.valueOf(p2)) : part1[idx].compareTo(part2[idx]);
        if (cmp != 0)         return cmp;
        idx+=1;
      }
      if (part1.length == part2.length)       return 0;
 else {
        boolean left=part1.length > idx;
        String[] parts=left ? part1 : part2;
        while (idx < parts.length) {
          String p=parts[idx];
          int cmp=p.matches("\\d+") ? Integer.valueOf(p).compareTo(0) : 1;
          if (cmp != 0)           return left ? cmp : -cmp;
          idx+=1;
        }
        return 0;
      }
    }
    /** 
 * Check that system has Nautilus.
 * @return {@code True} when Nautilus is installed or {@code false} otherwise.
 * @throws IOException If failed to detect Nautilus.
 */
    private boolean canUseNautilus() throws IOException {
      if (U.isUnix() || new File("/usr/bin/xdg-mime").canExecute() || new File("/usr/bin/nautilus").canExecute()) {
        String appName=execAndReadLine(createProcess("xdg-mime","query","default","inode/directory"));
        if (appName == null || !appName.matches("nautilus.*\\.desktop"))         return false;
 else {
          String ver=execAndReadLine(createProcess("nautilus","--version"));
          if (ver != null) {
            Matcher m=Pattern.compile("GNOME nautilus ([0-9.]+)").matcher(ver);
            return m.find() && compareVersionNumbers(m.group(1),"3") >= 0;
          }
 else           return false;
        }
      }
 else       return false;
    }
    /** 
 * Open specified folder with selection of specified file in system file manager.
 * @param dir Opened folder.
 */
    private void openFolder(    File dir) throws IOException {
      if (U.isWindows())       Runtime.getRuntime().exec("explorer /root," + dir.getAbsolutePath());
 else       if (U.isMacOs())       createProcess("open",dir.getAbsolutePath());
 else       if (canUseNautilus())       createProcess("nautilus",dir.getAbsolutePath());
 else {
        String path=dir.getAbsolutePath();
        if (HAS_XDG_OPEN)         createProcess("/usr/bin/xdg-open",path);
 else         if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.OPEN))         Desktop.getDesktop().open(new File(path));
 else         MessageBox.warningDialog(owner,"This action isn't supported on the current platform" + ((U.isLinux() || U.isUnix() || U.isSolaris()) ? ".\nTo fix this issue you should install library libgnome2-0." : ""));
      }
    }
    /** 
 * {@inheritDoc} 
 */
    @Override protected void succeeded(){
      super.succeeded();
      unlockUI(genLayerPnl,genPnl,prevBtn,nextBtn);
      if (MessageBox.confirmDialog(owner,"Generation complete!\n\n" + "Reveal output folder in system default file browser?"))       try {
        openFolder(destFolder);
      }
 catch (      Exception e) {
        MessageBox.errorDialog(owner,"Failed to open folder with results.",e);
      }
    }
    /** 
 * {@inheritDoc} 
 */
    @Override protected void cancelled(){
      super.cancelled();
      unlockUI(genLayerPnl,genPnl,prevBtn,nextBtn);
      MessageBox.warningDialog(owner,"Generation canceled.");
    }
    /** 
 * {@inheritDoc} 
 */
    @Override protected void failed(){
      super.succeeded();
      unlockUI(genLayerPnl,genPnl,prevBtn,nextBtn);
      MessageBox.errorDialog(owner,"Generation failed.",getException());
    }
  }
;
  exec.submit(task);
}
