{
  if (log.isDebugEnabled())   log.debug("Starting DHT preloader...");
  cctx.io().addHandler(GridDhtPartitionsSingleMessage.class,new MessageHandler<GridDhtPartitionsSingleMessage<K,V>>(){
    @Override public void onMessage(    GridNode node,    GridDhtPartitionsSingleMessage<K,V> msg){
      processSinglePartitionUpdate(node,msg);
    }
  }
);
  cctx.io().addHandler(GridDhtPartitionsFullMessage.class,new MessageHandler<GridDhtPartitionsFullMessage<K,V>>(){
    @Override public void onMessage(    GridNode node,    GridDhtPartitionsFullMessage<K,V> msg){
      processFullPartitionUpdate(node,msg);
    }
  }
);
  cctx.io().addHandler(GridDhtPartitionsSingleRequest.class,new MessageHandler<GridDhtPartitionsSingleRequest<K,V>>(){
    @Override public void onMessage(    GridNode node,    GridDhtPartitionsSingleRequest<K,V> msg){
      processSinglePartitionRequest(node,msg);
    }
  }
);
  cctx.io().addHandler(GridDhtForceKeysRequest.class,new MessageHandler<GridDhtForceKeysRequest<K,V>>(){
    @Override public void onMessage(    GridNode node,    GridDhtForceKeysRequest<K,V> msg){
      processForceKeysRequest(node,msg);
    }
  }
);
  cctx.io().addHandler(GridDhtForceKeysResponse.class,new MessageHandler<GridDhtForceKeysResponse<K,V>>(){
    @Override public void onMessage(    GridNode node,    GridDhtForceKeysResponse<K,V> msg){
      processForceKeyResponse(node,msg);
    }
  }
);
  cctx.io().addHandler(GridDhtAffinityAssignmentRequest.class,new MessageHandler<GridDhtAffinityAssignmentRequest<K,V>>(){
    @Override protected void onMessage(    GridNode node,    GridDhtAffinityAssignmentRequest<K,V> msg){
      processAffinityAssignmentRequest(node,msg);
    }
  }
);
  cctx.io().addHandler(GridDhtAffinityAssignmentResponse.class,new MessageHandler<GridDhtAffinityAssignmentResponse<K,V>>(){
    @Override protected void onMessage(    GridNode node,    GridDhtAffinityAssignmentResponse<K,V> msg){
      processAffinityAssignmentResponse(node,msg);
    }
  }
);
  supplyPool=new GridDhtPartitionSupplyPool<>(cctx,busyLock);
  demandPool=new GridDhtPartitionDemandPool<>(cctx,busyLock);
  cctx.events().addListener(discoLsnr,EVT_NODE_JOINED,EVT_NODE_LEFT,EVT_NODE_FAILED);
}
