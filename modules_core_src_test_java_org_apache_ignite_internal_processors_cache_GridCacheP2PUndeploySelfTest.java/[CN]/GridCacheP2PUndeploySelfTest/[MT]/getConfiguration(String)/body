{
  IgniteConfiguration cfg=super.getConfiguration(gridName);
  cfg.setNetworkTimeout(2000);
  TcpDiscoverySpi spi=new TcpDiscoverySpi();
  spi.setIpFinder(ipFinder);
  cfg.setDiscoverySpi(spi);
  cfg.setMarshaller(new JdkMarshaller());
  FileSwapSpaceSpi swap=new FileSwapSpaceSpi();
  swap.setWriteBufferSize(1);
  cfg.setSwapSpaceSpi(swap);
  CacheConfiguration repCacheCfg=defaultCacheConfiguration();
  repCacheCfg.setName("replicated");
  repCacheCfg.setCacheMode(REPLICATED);
  repCacheCfg.setRebalanceMode(mode);
  repCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);
  repCacheCfg.setAtomicityMode(TRANSACTIONAL);
  if (offheap)   repCacheCfg.setOffHeapMaxMemory(OFFHEAP);
 else   repCacheCfg.setSwapEnabled(true);
  CacheConfiguration partCacheCfg=defaultCacheConfiguration();
  partCacheCfg.setName("partitioned");
  partCacheCfg.setCacheMode(PARTITIONED);
  partCacheCfg.setRebalanceMode(mode);
  partCacheCfg.setAffinity(new GridCacheModuloAffinityFunction(11,1));
  partCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);
  partCacheCfg.setAtomicityMode(TRANSACTIONAL);
  if (offheap)   partCacheCfg.setOffHeapMaxMemory(OFFHEAP);
 else   partCacheCfg.setSwapEnabled(true);
  cfg.setCacheConfiguration(repCacheCfg,partCacheCfg);
  cfg.setDeploymentMode(SHARED);
  cfg.setPeerClassLoadingLocalClassPathExclude(GridCacheP2PUndeploySelfTest.class.getName());
  cfg.setUserAttributes(F.asMap(GridCacheModuloAffinityFunction.IDX_ATTR,idxGen.getAndIncrement()));
  return cfg;
}
