{
  GridKernalContext ctx=igniteContext();
  CacheConfiguration cfg=cacheConfiguration();
  if (cfgStore != null && !cfg.isWriteThrough() && !cfg.isReadThrough()) {
    U.quietAndWarn(log,"Persistence store is configured, but both read-through and write-through are disabled. This " + "configuration makes sense if the store implements loadCache method only. If this is the " + "case, ignore this warning. Otherwise, fix the configuration for cache: "+ cfg.getName(),"Persistence store is configured, but both read-through and write-through are disabled.");
  }
  writeThrough=cfg.isWriteThrough();
  this.cfgStore=cfgStore;
  store=cacheStoreWrapper(ctx,cfgStore,cfg);
  singleThreadGate=store == null ? null : new CacheStoreBalancingWrapper<>(store);
  ThreadLocal<SessionData> sesHolder0=null;
  if (cfgStore != null) {
    sesHolder0=((Map<CacheStore,ThreadLocal>)sesHolders).get(cfgStore);
    if (sesHolder0 == null) {
      sesHolder0=new ThreadLocal<>();
      locSes=new ThreadLocalSession(sesHolder0);
      if (ctx.resource().injectStoreSession(cfgStore,locSes))       sesHolders.put(cfgStore,sesHolder0);
    }
 else     locSes=new ThreadLocalSession(sesHolder0);
  }
  sesHolder=sesHolder0;
  locStore=U.hasAnnotation(cfgStore,CacheLocalStore.class);
  sesLsnrs=createSessionListeners(cfg.getCacheStoreSessionListenerFactories());
  if (sesLsnrs == null)   sesLsnrs=createSessionListeners(ctx.config().getCacheStoreSessionListenerFactories());
}
