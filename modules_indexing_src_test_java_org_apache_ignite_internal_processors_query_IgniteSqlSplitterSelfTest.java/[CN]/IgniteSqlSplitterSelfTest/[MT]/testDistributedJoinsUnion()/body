{
  CacheConfiguration ccfg=cacheConfig("persOrg",true,Integer.class,Person2.class,Integer.class,Organization.class);
  IgniteCache<Integer,Object> c=ignite(0).getOrCreateCache(ccfg);
  try {
    c.put(1,new Organization("o1"));
    c.put(2,new Organization("o2"));
    c.put(3,new Person2(1,"p1"));
    c.put(4,new Person2(2,"p2"));
    c.put(5,new Person2(3,"p3"));
    String select="select o.name n1, p.name n2 from Person2 p, Organization o where p.orgId = o._key and o._key=1" + " union select o.name n1, p.name n2 from Person2 p, Organization o where p.orgId = o._key and o._key=2";
    String plan=(String)c.query(new SqlFieldsQuery("explain " + select).setDistributedJoins(true).setEnforceJoinOrder(true)).getAll().get(0).get(0);
    X.println("Plan : " + plan);
    assertEquals(2,StringUtils.countOccurrencesOf(plan,"batched"));
    assertEquals(2,StringUtils.countOccurrencesOf(plan,"batched:unicast"));
    assertEquals(2,c.query(new SqlFieldsQuery(select).setDistributedJoins(true).setEnforceJoinOrder(false)).getAll().size());
    select="select * from (" + select + ")";
    plan=(String)c.query(new SqlFieldsQuery("explain " + select).setDistributedJoins(true).setEnforceJoinOrder(true)).getAll().get(0).get(0);
    X.println("Plan : " + plan);
    assertEquals(2,StringUtils.countOccurrencesOf(plan,"batched"));
    assertEquals(2,StringUtils.countOccurrencesOf(plan,"batched:unicast"));
    assertEquals(2,c.query(new SqlFieldsQuery(select).setDistributedJoins(true).setEnforceJoinOrder(false)).getAll().size());
  }
  finally {
    c.destroy();
  }
}
