{
  BinaryTypeConfiguration typeCfg=new BinaryTypeConfiguration();
  typeCfg.setTypeName("org.apache.ignite.internal.portable.test.GridPortableTestClass2");
  typeCfg.setIdMapper(new BinaryIdMapper(){
    @Override public int typeId(    String clsName){
      return 100;
    }
    @Override public int fieldId(    int typeId,    String fieldName){
      return 0;
    }
  }
);
  BinaryMarshaller marsh=portableMarshaller(Arrays.asList(new BinaryTypeConfiguration("org.apache.ignite.internal.portable.test.*"),typeCfg));
  PortableContext ctx=portableContext(marsh);
  Map<Integer,Class> typeIds=U.field(ctx,"userTypes");
  assertEquals(3,typeIds.size());
  assertTrue(typeIds.containsKey("gridportabletestclass1".hashCode()));
  assertTrue(typeIds.containsKey("innerclass".hashCode()));
  assertFalse(typeIds.containsKey("gridportabletestclass2".hashCode()));
  Map<String,BinaryIdMapper> typeMappers=U.field(ctx,"typeMappers");
  assertEquals(100,typeMappers.get("GridPortableTestClass2").typeId("GridPortableTestClass2"));
}
