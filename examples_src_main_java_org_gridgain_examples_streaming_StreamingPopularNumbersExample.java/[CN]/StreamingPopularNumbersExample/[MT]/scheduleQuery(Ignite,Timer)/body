{
  TimerTask task=new TimerTask(){
    @Override public void run(){
      final GridStreamer streamer=g.streamer("popular-numbers");
      try {
        Collection<GridStreamerIndexEntry<Integer,Integer,Long>> col=streamer.context().reduce(new IgniteClosure<GridStreamerContext,Collection<GridStreamerIndexEntry<Integer,Integer,Long>>>(){
          @Override public Collection<GridStreamerIndexEntry<Integer,Integer,Long>> apply(          GridStreamerContext ctx){
            GridStreamerIndex<Integer,Integer,Long> view=ctx.<Integer>window().index();
            return view.entries(-1 * POPULAR_NUMBERS_CNT);
          }
        }
,new PopularNumbersReducer());
        for (        GridStreamerIndexEntry<Integer,Integer,Long> cntr : col)         System.out.printf("%3d=%d\n",cntr.key(),cntr.value());
        System.out.println("----------------");
      }
 catch (      GridException e) {
        e.printStackTrace();
      }
    }
  }
;
  timer.schedule(task,3000,3000);
  return task;
}
