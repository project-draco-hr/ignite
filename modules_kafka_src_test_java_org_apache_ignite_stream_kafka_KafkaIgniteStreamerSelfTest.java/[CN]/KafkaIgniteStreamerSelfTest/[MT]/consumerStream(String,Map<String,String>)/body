{
  KafkaStreamer<String,String,String> kafkaStmr=null;
  final Ignite ignite=grid();
  try (IgniteDataStreamer<String,String> stmr=ignite.dataStreamer(null)){
    stmr.allowOverwrite(true);
    stmr.autoFlushFrequency(10);
    kafkaStmr=new KafkaStreamer<>();
    IgniteCache<String,String> cache=ignite.cache(null);
    kafkaStmr.setIgnite(ignite);
    kafkaStmr.setStreamer(stmr);
    kafkaStmr.setTopic(topic);
    kafkaStmr.setThreads(4);
    kafkaStmr.setConsumerConfig(createDefaultConsumerConfig(KafkaEmbeddedBroker.getZKAddress(),"groupX"));
    StringDecoder stringDecoder=new StringDecoder(new VerifiableProperties());
    kafkaStmr.setKeyDecoder(stringDecoder);
    kafkaStmr.setValueDecoder(stringDecoder);
    kafkaStmr.start();
    final CountDownLatch latch=new CountDownLatch(CNT);
    IgniteBiPredicate<UUID,CacheEvent> locLsnr=new IgniteBiPredicate<UUID,CacheEvent>(){
      @Override public boolean apply(      UUID uuid,      CacheEvent evt){
        latch.countDown();
        return true;
      }
    }
;
    ignite.events(ignite.cluster().forCacheNodes(null)).remoteListen(locLsnr,null,EVT_CACHE_OBJECT_PUT);
    latch.await();
    for (    Map.Entry<String,String> entry : keyValueMap.entrySet()) {
      final String key=entry.getKey();
      final String value=entry.getValue();
      final String cacheValue=cache.get(key);
      assertEquals(value,cacheValue);
    }
  }
  finally {
    kafkaStmr.stop();
  }
}
