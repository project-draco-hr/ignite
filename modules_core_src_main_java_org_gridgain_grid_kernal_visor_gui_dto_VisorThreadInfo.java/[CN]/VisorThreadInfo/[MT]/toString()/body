{
  StringBuilder sb=new StringBuilder("\"" + name + "\""+ " Id="+ id+ " "+ state);
  if (lockName != null)   sb.append(" on ").append(lockName);
  if (lockOwnerName != null)   sb.append(" owned by \"").append(lockOwnerName).append("\" Id=").append(lockOwnerId);
  if (suspended)   sb.append(" (suspended)");
  if (inNative)   sb.append(" (in native)");
  sb.append('\n');
  int maxFrames=Math.min(stackTrace.length,MAX_FRAMES);
  for (int i=0; i < maxFrames; i++) {
    StackTraceElement ste=stackTrace[i];
    sb.append("\tat ").append(ste.toString()).append('\n');
    if (i == 0 && lock != null) {
switch (state) {
case BLOCKED:
        sb.append("\t-  blocked on ").append(lock).append('\n');
      break;
case WAITING:
    sb.append("\t-  waiting on ").append(lock).append('\n');
  break;
case TIMED_WAITING:
sb.append("\t-  waiting on ").append(lock).append('\n');
break;
default :
}
}
for (VisorThreadMonitorInfo mi : lockedMonitors) {
if (mi.stackDepth() == i) sb.append("\t-  locked ").append(mi).append('\n');
}
}
if (maxFrames < stackTrace.length) {
sb.append("\t...").append('\n');
}
if (locks.length > 0) {
sb.append("\n\tNumber of locked synchronizers = ").append(locks.length).append('\n');
for (VisorThreadLockInfo li : locks) sb.append("\t- ").append(li).append('\n');
}
sb.append('\n');
return sb.toString();
}
