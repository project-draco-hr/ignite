{
  GridClientFutureAdapter<Integer> fut=new GridClientFutureAdapter<>();
  List<GridClientFutureAdapter<Integer>> chained=new ArrayList<>();
  GridClientFutureAdapter<Integer> cur=fut;
  for (int i=0; i < chainSize; i++) {
    cur=cur.chain(new GridClientFutureCallback<Integer,Integer>(){
      @Override public Integer onComplete(      GridClientFuture<Integer> f) throws GridClientException {
        assertTrue("Expects callback future is finished.",f.isDone());
        return f.get() + 1;
      }
    }
);
    chained.add(cur);
  }
  long start;
  for (  GridClientFuture<Integer> f : chained) {
    assertFalse(f.isDone());
    start=System.currentTimeMillis();
    try {
      f.get(waitDelay,TimeUnit.MILLISECONDS);
      fail("Expects chained future not finished yet.");
    }
 catch (    GridClientFutureTimeoutException ignore) {
    }
    assertTrue(System.currentTimeMillis() - start >= waitDelay);
  }
  start=System.currentTimeMillis();
  fut.onDone(0);
  assertEquals("Check chain-based increment value.",chainSize,chained.get(chainSize - 1).get().intValue());
  info("Time consumption for " + chainSize + " chained futures: "+ (System.currentTimeMillis() - start));
}
