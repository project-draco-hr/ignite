{
  byte type=in.readByte();
  Object res;
switch (type) {
case TYPE_NULL:
    res=null;
  break;
case TYPE_BYTE:
res=in.readByte();
break;
case TYPE_BOOLEAN:
res=in.readBoolean();
break;
case TYPE_INT:
res=in.readInt();
break;
case TYPE_LONG:
res=in.readLong();
break;
case TYPE_FLOAT:
res=in.readFloat();
break;
case TYPE_DOUBLE:
res=in.readDouble();
break;
case TYPE_SHORT:
res=in.readShort();
break;
case TYPE_CHAR:
res=in.readChar();
break;
case TYPE_STRING:
res=readString();
break;
case TYPE_UUID:
res=readUuid();
break;
case TYPE_LIST:
res=readCollection();
break;
case TYPE_MAP:
res=readMap();
break;
case TYPE_BYTE_ARRAY:
res=readByteArray();
break;
case TYPE_BOOLEAN_ARRAY:
res=readBooleanArray();
break;
case TYPE_SHORT_ARRAY:
res=readShortArray();
break;
case TYPE_CHAR_ARRAY:
res=readCharArray();
break;
case TYPE_INT_ARRAY:
res=readIntArray();
break;
case TYPE_LONG_ARRAY:
res=readLongArray();
break;
case TYPE_FLOAT_ARRAY:
res=readFloatArray();
break;
case TYPE_DOUBLE_ARRAY:
res=readDoubleArray();
break;
case TYPE_USER_OBJECT:
res=readPortable();
break;
default :
throw new IOException("Invalid type: " + type);
}
return (T)res;
}
