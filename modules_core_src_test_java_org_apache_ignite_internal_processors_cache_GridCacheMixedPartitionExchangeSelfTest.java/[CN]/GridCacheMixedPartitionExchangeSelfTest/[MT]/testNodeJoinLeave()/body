{
  try {
    cache=true;
    startGrids(4);
    awaitPartitionMapExchange();
    final AtomicBoolean finished=new AtomicBoolean();
    IgniteInternalFuture<Long> fut=GridTestUtils.runMultiThreadedAsync(new IgniteCallable<Object>(){
      @Override public Object call() throws Exception {
        Random rnd=new Random();
        int keys=100;
        while (!finished.get()) {
          int g=rnd.nextInt(4);
          int key=rnd.nextInt(keys);
          IgniteCache<Integer,Integer> prj=grid(g).jcache(null);
          try (Transaction tx=grid(g).transactions().txStart(PESSIMISTIC,REPEATABLE_READ)){
            Integer val=prj.get(key);
            val=val == null ? 1 : val + 1;
            prj.put(key,val);
            tx.commit();
          }
         }
        return null;
      }
    }
,4,"async-runner");
    cache=false;
    for (int r=0; r < 3; r++) {
      for (int i=4; i < 8; i++)       startGrid(i);
      for (int i=4; i < 8; i++)       stopGrid(i);
    }
    cache=true;
    startGrid(4);
    U.sleep(500);
    finished.set(true);
    fut.get();
    AffinityTopologyVersion topVer=new AffinityTopologyVersion(grid(0).cluster().topologyVersion());
    assertEquals(29,topVer.topologyVersion());
    for (int i=0; i < 4; i++) {
      IgniteKernal grid=(IgniteKernal)grid(i);
      GridCacheContext<Object,Object> cctx=grid.internalCache(null).context();
      IgniteInternalFuture<AffinityTopologyVersion> verFut=cctx.affinity().affinityReadyFuture(topVer);
      assertEquals(topVer,verFut.get());
      assertEquals(topVer,cctx.topologyVersionFuture().get());
    }
  }
  finally {
    stopAllGrids();
  }
}
