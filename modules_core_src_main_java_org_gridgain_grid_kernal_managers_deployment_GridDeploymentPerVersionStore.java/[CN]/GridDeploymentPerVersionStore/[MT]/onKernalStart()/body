{
  Collection<SharedDeployment> undeployed=new LinkedList<>();
synchronized (mux) {
    for (Iterator<List<SharedDeployment>> i1=cache.values().iterator(); i1.hasNext(); ) {
      List<SharedDeployment> deps=i1.next();
      for (Iterator<SharedDeployment> i2=deps.iterator(); i2.hasNext(); ) {
        SharedDeployment dep=i2.next();
        for (        UUID nodeId : dep.getParticipantNodeIds())         if (ctx.discovery().node(nodeId) == null)         dep.removeParticipant(nodeId);
        if (!dep.hasParticipants()) {
          if (dep.deployMode() == SHARED) {
            if (!dep.undeployed()) {
              dep.undeploy();
              i2.remove();
              dep.onRemoved();
              undeployed.add(dep);
              if (log.isDebugEnabled())               log.debug("Undeployed class loader as there are no participating nodes: " + dep);
            }
          }
 else           if (log.isDebugEnabled())           log.debug("Preserving deployment without node participants: " + dep);
        }
 else         if (log.isDebugEnabled())         log.debug("Keeping deployment as it still has participants: " + dep);
      }
      if (deps.isEmpty())       i1.remove();
    }
  }
  recordUndeployed(null,undeployed);
  if (log.isDebugEnabled())   log.debug("Registered deployment discovery listener: " + discoLsnr);
}
