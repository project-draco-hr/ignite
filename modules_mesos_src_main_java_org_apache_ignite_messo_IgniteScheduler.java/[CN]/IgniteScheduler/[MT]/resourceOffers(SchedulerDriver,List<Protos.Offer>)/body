{
  log.info("resourceOffers() with {} offers",offers.size());
  for (  Protos.Offer offer : offers) {
    Pair<Double,Double> cpuMem=checkOffer(offer);
    if (cpuMem == null) {
      schedulerDriver.declineOffer(offer.getId());
      continue;
    }
    Protos.TaskID taskId=Protos.TaskID.newBuilder().setValue(Integer.toString(taskIdGenerator.incrementAndGet())).build();
    log.info("Launching task {}",taskId.getValue());
    Protos.ContainerInfo.DockerInfo.Builder docker=Protos.ContainerInfo.DockerInfo.newBuilder().setImage(IMAGE).setNetwork(Protos.ContainerInfo.DockerInfo.Network.HOST);
    Protos.ContainerInfo.Builder cont=Protos.ContainerInfo.newBuilder();
    cont.setType(Protos.ContainerInfo.Type.DOCKER);
    cont.setDocker(docker.build());
    Protos.TaskInfo task=Protos.TaskInfo.newBuilder().setName("task " + taskId.getValue()).setTaskId(taskId).setSlaveId(offer.getSlaveId()).addResources(Protos.Resource.newBuilder().setName(CPUS).setType(Protos.Value.Type.SCALAR).setScalar(Protos.Value.Scalar.newBuilder().setValue(cpuMem._1))).addResources(Protos.Resource.newBuilder().setName(MEM).setType(Protos.Value.Type.SCALAR).setScalar(Protos.Value.Scalar.newBuilder().setValue(cpuMem._2))).setContainer(cont).setCommand(Protos.CommandInfo.newBuilder().setShell(false)).build();
    schedulerDriver.launchTasks(Collections.singletonList(offer.getId()),Collections.singletonList(task),Protos.Filters.newBuilder().setRefuseSeconds(1).build());
  }
}
