{
  GridClientData dfltData=client.data();
  GridClientData namedData=client.data(CACHE_NAME);
  grid().cache(null).resetMetrics();
  grid().cache(CACHE_NAME).resetMetrics();
  grid().cache(null).putx("key1","val1");
  grid().cache(null).putx("key2","val2");
  grid().cache(null).putx("key2","val3");
  assertEquals("val1",grid().cache(null).get("key1"));
  assertEquals("val3",grid().cache(null).get("key2"));
  assertEquals("val3",grid().cache(null).get("key2"));
  grid().cache(CACHE_NAME).putx("key1","val1");
  grid().cache(CACHE_NAME).putx("key2","val2");
  grid().cache(CACHE_NAME).putx("key2","val3");
  assertEquals("val1",grid().cache(CACHE_NAME).get("key1"));
  assertEquals("val3",grid().cache(CACHE_NAME).get("key2"));
  assertEquals("val3",grid().cache(CACHE_NAME).get("key2"));
  GridClientDataMetrics m=dfltData.metrics();
  CacheMetricsMxBean metrics=grid().cache(null).metrics();
  assertNotNull(m);
  assertEquals(metrics.getCacheGets(),m.reads());
  assertEquals(metrics.getCachePuts(),m.writes());
  m=dfltData.metricsAsync().get();
  assertNotNull(m);
  assertEquals(metrics.getCacheGets(),m.reads());
  assertEquals(metrics.getCachePuts(),m.writes());
  m=namedData.metrics();
  metrics=grid().cache(CACHE_NAME).metrics();
  assertNotNull(m);
  assertEquals(metrics.getCacheGets(),m.reads());
  assertEquals(metrics.getCachePuts(),m.writes());
  m=namedData.metricsAsync().get();
  assertNotNull(m);
  assertEquals(metrics.getCacheGets(),m.reads());
  assertEquals(metrics.getCachePuts(),m.writes());
}
