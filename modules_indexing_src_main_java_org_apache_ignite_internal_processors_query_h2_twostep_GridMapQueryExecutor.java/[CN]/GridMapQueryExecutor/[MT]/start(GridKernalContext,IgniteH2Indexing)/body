{
  this.ctx=ctx;
  this.h2=h2;
  log=ctx.log(GridMapQueryExecutor.class);
  final UUID locNodeId=ctx.localNodeId();
  ctx.event().addLocalEventListener(new GridLocalEventListener(){
    @Override public void onEvent(    final Event evt){
      UUID nodeId=((DiscoveryEvent)evt).eventNode().id();
      GridH2QueryContext.clearAfterDeadNode(locNodeId,nodeId);
      NodeResults nodeRess=qryRess.remove(nodeId);
      if (nodeRess == null)       return;
      for (      QueryResults ress : nodeRess.results().values())       ress.cancel();
    }
  }
,EventType.EVT_NODE_FAILED,EventType.EVT_NODE_LEFT);
  ctx.io().addMessageListener(GridTopic.TOPIC_QUERY,new GridMessageListener(){
    @Override public void onMessage(    UUID nodeId,    Object msg){
      if (!busyLock.enterBusy())       return;
      try {
        if (msg instanceof GridCacheQueryMarshallable)         ((GridCacheQueryMarshallable)msg).unmarshall(ctx.config().getMarshaller(),ctx);
        GridMapQueryExecutor.this.onMessage(nodeId,msg);
      }
  finally {
        busyLock.leaveBusy();
      }
    }
  }
);
}
