{
  int duration=150 * 1000;
  int qryThreadNum=4;
  int restartThreadsNum=2;
  final int nodeLifeTime=2 * 1000;
  final int logFreq=50;
  startGridsMultiThreaded(GRID_CNT);
  final AtomicIntegerArray locks=new AtomicIntegerArray(GRID_CNT);
  fillCaches();
  final List<List<?>> pRes=grid(0).cache("pu").query(new SqlFieldsQuery(PARTITIONED_QRY)).getAll();
  Thread.sleep(3000);
  assertEquals(pRes,grid(0).cache("pu").query(new SqlFieldsQuery(PARTITIONED_QRY)).getAll());
  final List<List<?>> rRes=grid(0).cache("co").query(new SqlFieldsQuery(REPLICATED_QRY)).getAll();
  final AtomicInteger qryCnt=new AtomicInteger();
  final AtomicBoolean qrysDone=new AtomicBoolean();
  IgniteInternalFuture<?> fut1=multithreadedAsync(new CAX(){
    @Override public void applyx() throws IgniteCheckedException {
      GridRandom rnd=new GridRandom();
      while (!qrysDone.get()) {
        int g;
        do {
          g=rnd.nextInt(locks.length());
        }
 while (!locks.compareAndSet(g,0,1));
        if (rnd.nextBoolean()) {
          IgniteCache<?,?> cache=grid(g).cache("pu");
          assertEquals(pRes,cache.query(new SqlFieldsQuery(PARTITIONED_QRY)).getAll());
        }
 else {
          IgniteCache<?,?> cache=grid(g).cache("co");
          assertEquals(rRes,cache.query(new SqlFieldsQuery(REPLICATED_QRY)).getAll());
        }
        locks.set(g,0);
        int c=qryCnt.incrementAndGet();
        if (c % logFreq == 0)         info("Executed queries: " + c);
      }
    }
  }
,qryThreadNum);
  final AtomicInteger restartCnt=new AtomicInteger();
  final AtomicBoolean restartsDone=new AtomicBoolean();
  IgniteInternalFuture<?> fut2=multithreadedAsync(new Callable<Object>(){
    @SuppressWarnings({"BusyWait"}) @Override public Object call() throws Exception {
      GridRandom rnd=new GridRandom();
      while (!restartsDone.get()) {
        int g;
        do {
          g=rnd.nextInt(locks.length());
        }
 while (!locks.compareAndSet(g,0,-1));
        stopGrid(g);
        Thread.sleep(rnd.nextInt(nodeLifeTime));
        startGrid(g);
        Thread.sleep(rnd.nextInt(nodeLifeTime));
        locks.set(g,0);
        int c=restartCnt.incrementAndGet();
        if (c % logFreq == 0)         info("Node restarts: " + c);
      }
      return true;
    }
  }
,restartThreadsNum);
  Thread.sleep(duration);
  info("Stopping..");
  restartsDone.set(true);
  fut2.get();
  info("Restarts stopped.");
  qrysDone.set(true);
  fut1.get();
  info("Queries stopped.");
}
