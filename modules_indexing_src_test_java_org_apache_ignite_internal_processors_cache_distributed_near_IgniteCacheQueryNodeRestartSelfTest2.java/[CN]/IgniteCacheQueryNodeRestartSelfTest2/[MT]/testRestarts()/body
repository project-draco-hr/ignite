{
  fail("https://issues.apache.org/jira/browse/IGNITE-1452");
  int duration=90 * 1000;
  int qryThreadNum=4;
  int restartThreadsNum=2;
  final int nodeLifeTime=2 * 1000;
  final int logFreq=10;
  startGridsMultiThreaded(GRID_CNT);
  final AtomicIntegerArray locks=new AtomicIntegerArray(GRID_CNT);
  fillCaches();
  final List<List<?>> pRes=grid(0).cache("pu").query(new SqlFieldsQuery(PARTITIONED_QRY)).getAll();
  Thread.sleep(3000);
  assertEquals(pRes,grid(0).cache("pu").query(new SqlFieldsQuery(PARTITIONED_QRY)).getAll());
  final List<List<?>> rRes=grid(0).cache("co").query(new SqlFieldsQuery(REPLICATED_QRY)).getAll();
  assertFalse(pRes.isEmpty());
  assertFalse(rRes.isEmpty());
  final AtomicInteger qryCnt=new AtomicInteger();
  final AtomicBoolean qrysDone=new AtomicBoolean();
  IgniteInternalFuture<?> fut1=multithreadedAsync(new CAX(){
    @Override public void applyx() throws IgniteCheckedException {
      GridRandom rnd=new GridRandom();
      while (!qrysDone.get()) {
        int g;
        do {
          g=rnd.nextInt(locks.length());
        }
 while (!locks.compareAndSet(g,0,1));
        if (rnd.nextBoolean()) {
          IgniteCache<?,?> cache=grid(g).cache("pu");
          SqlFieldsQuery qry=new SqlFieldsQuery(PARTITIONED_QRY);
          boolean smallPageSize=rnd.nextBoolean();
          if (smallPageSize)           qry.setPageSize(3);
          try {
            assertEquals(pRes,cache.query(qry).getAll());
          }
 catch (          CacheException e) {
            assertTrue("On large page size must retry.",smallPageSize);
            boolean failedOnRemoteFetch=false;
            for (Throwable th=e; th != null; th=th.getCause()) {
              if (!(th instanceof CacheException))               continue;
              if (th.getMessage() != null && th.getMessage().startsWith("Failed to fetch data from node:")) {
                failedOnRemoteFetch=true;
                break;
              }
            }
            if (!failedOnRemoteFetch) {
              e.printStackTrace();
              fail("Must fail inside of GridResultPage.fetchNextPage or subclass.");
            }
          }
        }
 else {
          IgniteCache<?,?> cache=grid(g).cache("co");
          assertEquals(rRes,cache.query(new SqlFieldsQuery(REPLICATED_QRY)).getAll());
        }
        locks.set(g,0);
        int c=qryCnt.incrementAndGet();
        if (c % logFreq == 0)         info("Executed queries: " + c);
      }
    }
  }
,qryThreadNum,"query-thread");
  final AtomicInteger restartCnt=new AtomicInteger();
  final AtomicBoolean restartsDone=new AtomicBoolean();
  IgniteInternalFuture<?> fut2=multithreadedAsync(new Callable<Object>(){
    @SuppressWarnings({"BusyWait"}) @Override public Object call() throws Exception {
      GridRandom rnd=new GridRandom();
      while (!restartsDone.get()) {
        int g;
        do {
          g=rnd.nextInt(locks.length());
        }
 while (!locks.compareAndSet(g,0,-1));
        log.info("Stop node: " + g);
        stopGrid(g);
        Thread.sleep(rnd.nextInt(nodeLifeTime));
        log.info("Start node: " + g);
        startGrid(g);
        Thread.sleep(rnd.nextInt(nodeLifeTime));
        locks.set(g,0);
        int c=restartCnt.incrementAndGet();
        if (c % logFreq == 0)         info("Node restarts: " + c);
      }
      return true;
    }
  }
,restartThreadsNum,"restart-thread");
  Thread.sleep(duration);
  info("Stopping..");
  restartsDone.set(true);
  fut2.get();
  info("Restarts stopped.");
  qrysDone.set(true);
  fut1.get();
  info("Queries stopped.");
}
