{
  if (log.isInfoEnabled() && spi.statsPrintFreq > 0) {
    int failedNodesSize;
    int leavingNodesSize;
synchronized (mux) {
      failedNodesSize=failedNodes.size();
      leavingNodesSize=leavingNodes.size();
    }
    Runtime runtime=Runtime.getRuntime();
    TcpDiscoveryNode coord=resolveCoordinator();
    log.info("Discovery SPI statistics [statistics=" + spi.stats + ", spiState="+ spiStateCopy()+ ", coord="+ coord+ ", topSize="+ ring.allNodes().size()+ ", leavingNodesSize="+ leavingNodesSize+ ", failedNodesSize="+ failedNodesSize+ ", msgWorker.queue.size="+ (msgWorker != null ? msgWorker.queueSize() : "N/A")+ ", clients="+ ring.clientNodes().size()+ ", clientWorkers="+ clientMsgWorkers.size()+ ", lastUpdate="+ (locNode != null ? U.format(locNode.lastUpdateTime()) : "N/A")+ ", heapFree="+ runtime.freeMemory() / (1024 * 1024) + "M, heapTotal=" + runtime.maxMemory() / (1024 * 1024) + "M]");
  }
}
