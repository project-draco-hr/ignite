{
  File out=new File(pkgFolder,type + ".java");
  if (out.exists()) {
    MessageBox.Result choice=askOverwrite.confirm(out.getName());
    if (CANCEL == choice)     throw new IllegalStateException("POJO generation was canceled!");
    if (NO == choice || NO_TO_ALL == choice)     return;
  }
  Collection<String> src=new ArrayList<>(256);
  add0(src,"/*");
  add0(src," * Licensed to the Apache Software Foundation (ASF) under one or more");
  add0(src," * contributor license agreements.  See the NOTICE file distributed with");
  add0(src," * this work for additional information regarding copyright ownership.");
  add0(src," * The ASF licenses this file to You under the Apache License, Version 2.0");
  add0(src," * (the \"License\"); you may not use this file except in compliance with");
  add0(src," * the License.  You may obtain a copy of the License at");
  add0(src," *");
  add0(src," *      http://www.apache.org/licenses/LICENSE-2.0");
  add0(src," *");
  add0(src," * Unless required by applicable law or agreed to in writing, software");
  add0(src," * distributed under the License is distributed on an \"AS IS\" BASIS,");
  add0(src," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
  add0(src," * See the License for the specific language governing permissions and");
  add0(src," * limitations under the License.");
  add0(src," */");
  add0(src,"");
  add0(src,"package " + pkg + ";");
  add0(src,"");
  add0(src,"import java.io.*;");
  add0(src,"");
  add0(src,"/**");
  add0(src," * " + type + " definition.");
  add0(src," *");
  add0(src," * Code generated by Apache Ignite Schema Load utility: " + new SimpleDateFormat("MM/DD/YYYY").format(new Date()) + ".");
  add0(src," */");
  add0(src,"public class " + type + " implements Serializable {");
  add1(src,"/** */");
  add1(src,"private static final long serialVersionUID = 0L;");
  add0(src,"");
  for (  PojoField field : fields) {
    String fldName=field.javaName();
    add1(src,"/** Value for " + fldName + ". */");
    add1(src,"private " + javaTypeName(field) + " "+ fldName+ ";");
    add0(src,"");
  }
  if (constructor) {
    add1(src,"/**");
    add1(src," * Empty constructor.");
    add1(src," */");
    add1(src,"public " + type + "() {");
    add2(src,"// No-op.");
    add1(src,"}");
    add0(src,"");
    add1(src,"/**");
    add1(src," * Full constructor.");
    add1(src," */");
    add1(src,"public " + type + "(");
    Iterator<PojoField> it=fields.iterator();
    while (it.hasNext()) {
      PojoField field=it.next();
      add2(src,javaTypeName(field) + " " + field.javaName()+ (it.hasNext() ? "," : ""));
    }
    add1(src,") {");
    for (    PojoField field : fields)     add2(src,String.format("this.%1$s = %1$s;",field.javaName()));
    add1(src,"}");
    add0(src,"");
  }
  for (  PojoField field : fields) {
    String fldName=field.javaName();
    String fldType=javaTypeName(field);
    String mtdName=capitalizeFirst(fldName);
    add1(src,"/**");
    add1(src," * Gets " + fldName + ".");
    add1(src," *");
    add1(src," * @return Value for " + fldName + ".");
    add1(src," */");
    add1(src,"public " + fldType + " get"+ mtdName+ "() {");
    add2(src,"return " + fldName + ";");
    add1(src,"}");
    add0(src,"");
    add1(src,"/**");
    add1(src," * Sets " + fldName + ".");
    add1(src," *");
    add1(src," * @param " + fldName + " New value for "+ fldName+ ".");
    add1(src," */");
    add1(src,"public void set" + mtdName + "("+ fldType+ " "+ fldName+ ") {");
    add2(src,"this." + fldName + " = "+ fldName+ ";");
    add1(src,"}");
    add0(src,"");
  }
  add1(src,"/** {@inheritDoc} */");
  add1(src,"@Override public boolean equals(Object o) {");
  add2(src,"if (this == o)");
  add3(src,"return true;");
  add0(src,"");
  add2(src,"if (!(o instanceof " + type + "))");
  add3(src,"return false;");
  add0(src,"");
  add2(src,String.format("%1$s that = (%1$s)o;",type));
  for (  PojoField field : fields) {
    add0(src,"");
    String javaType=javaTypeName(field);
    if (field.primitive()) {
      String fmt="if (%1$s != that.%1$s)";
      if ("double".equals(javaType))       fmt="if (Double.compare(%1$s, that.%1$s) != 0)";
 else       if ("float".equals(javaType))       fmt="if (Float.compare(%1$s, that.%1$s) != 0)";
      add2(src,String.format(fmt,field.javaName()));
    }
 else     add2(src,String.format("if (%1$s != null ? !%1$s.equals(that.%1$s) : that.%1$s != null)",field.javaName()));
    add3(src,"return false;");
  }
  add0(src,"");
  add2(src,"return true;");
  add1(src,"}");
  add0(src,"");
  add1(src,"/** {@inheritDoc} */");
  add1(src,"@Override public int hashCode() {");
  Iterator<PojoField> it=fields.iterator();
  add2(src,String.format("int res = %1$s != null ? %1$s.hashCode() : 0;",it.next().javaName()));
  if (it.hasNext()) {
    add0(src,"");
    while (it.hasNext())     add2(src,String.format("res = 31 * res + (%1$s != null ? %1$s.hashCode() : 0);",it.next().javaName()));
  }
  add0(src,"");
  add2(src,"return res;");
  add1(src,"}");
  add0(src,"");
  add1(src,"/** {@inheritDoc} */");
  add1(src,"@Override public String toString() {");
  it=fields.iterator();
  add2(src,String.format("return \"%1$s [%2$s=\" + %2$s +",type,it.next().javaName()));
  while (it.hasNext())   add3(src,String.format("\", %1$s=\" + %1$s +",it.next().javaName()));
  add3(src,"\"]\";");
  add1(src,"}");
  add0(src,"}");
  try (Writer writer=new BufferedWriter(new FileWriter(out))){
    for (    String line : src)     writer.write(line + '\n');
  }
 }
