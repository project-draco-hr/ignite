{
  final int mapSize=1000;
  Map<Integer,String> tst=new ConcurrentLinkedHashMap<>(10,0.75f,1,1000);
  Map<Integer,String> map=new LinkedHashMap<Integer,String>(10,0.75f,false){
    @Override protected boolean removeEldestEntry(    Map.Entry<Integer,String> eldest){
      return size() > mapSize;
    }
  }
;
  for (int i=0; i < mapSize; i++) {
    tst.put(i,"value" + i);
    map.put(i,"value" + i);
  }
  Random rnd1=new Random();
  int iterCnt=100000;
  int keyCnt=10000;
  for (int i=0; i < iterCnt; i++) {
    int key=rnd1.nextInt(keyCnt);
    tst.put(key,"value" + key);
    map.put(key,"value" + key);
  }
  Iterator<Map.Entry<Integer,String>> tstIt=tst.entrySet().iterator();
  for (  Map.Entry<Integer,String> entry : map.entrySet()) {
    assertTrue("No enough elements in key set",tstIt.hasNext());
    Map.Entry<Integer,String> tstEntry=tstIt.next();
    assertEquals("Key mismatch",tstEntry.getKey(),entry.getKey());
    assertEquals("Value mismatch",tstEntry.getValue(),entry.getValue());
  }
  assertEquals("Invalid map size",mapSize,tst.size());
}
