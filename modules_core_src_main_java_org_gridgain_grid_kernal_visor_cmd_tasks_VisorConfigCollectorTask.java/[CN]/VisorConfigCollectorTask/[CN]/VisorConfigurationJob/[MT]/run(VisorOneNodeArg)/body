{
  final GridConfiguration c=g.configuration();
  final GridProductLicense lic=g.product().license();
  final VisorBasicConfig basic=new VisorBasicConfig(c.getGridName(),getProperty(GG_HOME,c.getGridGainHome()),getProperty(GG_LOCAL_HOST,c.getLocalHost()),g.localNode().id(),compactClass(c.getMarshaller()),compactObject(c.getDeploymentMode()),boolValue(GG_DAEMON,c.isDaemon()),g.isJmxRemoteEnabled(),g.isRestartEnabled(),c.getNetworkTimeout(),c.getLicenseUrl(),compactClass(c.getGridLogger()),c.getDiscoveryStartupDelay(),compactClass(c.getMBeanServer()),boolValue(GG_NO_ASCII,false),boolValue(GG_NO_DISCO_ORDER,false),boolValue(GG_NO_SHUTDOWN_HOOK,false),getProperty(GG_PROG_NAME),boolValue(GG_QUIET,true),getProperty(GG_SUCCESS_FILE),boolValue(GG_UPDATE_NOTIFIER,true));
  final VisorMetricsConfig metrics=new VisorMetricsConfig(c.getMetricsExpireTime(),c.getMetricsHistorySize(),c.getMetricsLogFrequency());
  final VisorSpisConfig spis=new VisorSpisConfig(collectSpiInfo(c.getDiscoverySpi()),collectSpiInfo(c.getCommunicationSpi()),collectSpiInfo(c.getEventStorageSpi()),collectSpiInfo(c.getCollisionSpi()),collectSpiInfo(c.getAuthenticationSpi()),collectSpiInfo(c.getSecureSessionSpi()),collectSpiInfo(c.getDeploymentSpi()),collectSpiInfo(c.getCheckpointSpi()),collectSpiInfo(c.getFailoverSpi()),collectSpiInfo(c.getLoadBalancingSpi()),collectSpiInfo(c.getSwapSpaceSpi()),collectSpiInfo(c.getIndexingSpi()));
  final VisorPeerToPeerConfig p2p=new VisorPeerToPeerConfig(c.isPeerClassLoadingEnabled(),c.getPeerClassLoadingMissedResourcesCacheSize(),compactArray(c.getPeerClassLoadingLocalClassPathExclude()));
  final VisorEmailConfig email=new VisorEmailConfig(getProperty(GG_SMTP_HOST,c.getSmtpHost()),intValue(GG_SMTP_PORT,c.getSmtpPort()),getProperty(GG_SMTP_USERNAME,c.getSmtpUsername()),getProperty(GG_ADMIN_EMAILS,compactArray(c.getAdminEmails())),getProperty(GG_SMTP_FROM,c.getSmtpFromEmail()),boolValue(GG_SMTP_SSL,c.isSmtpSsl()),boolValue(GG_SMTP_STARTTLS,c.isSmtpStartTls()));
  final VisorLifecycleConfig lifecycle=new VisorLifecycleConfig(compactArray(c.getLifecycleBeans()),boolValue(GG_LIFECYCLE_EMAIL_NOTIFY,c.isLifeCycleEmailNotification()));
  final VisorExecServiceConfig execSvc=new VisorExecServiceConfig(compactClass(c.getExecutorService()),c.getExecutorServiceShutdown(),compactClass(c.getSystemExecutorService()),c.getSystemExecutorServiceShutdown(),compactClass(c.getPeerClassLoadingExecutorService()),c.getPeerClassLoadingExecutorServiceShutdown());
  final VisorSegmentationConfig seg=new VisorSegmentationConfig(c.getSegmentationPolicy(),compactArray(c.getSegmentationResolvers()),c.getSegmentCheckFrequency(),c.isWaitForSegmentOnStart(),c.isAllSegmentationResolversPassRequired());
  final VisorRestConfig rest=new VisorRestConfig(c.isRestEnabled(),c.isRestTcpSslEnabled(),c.getRestAccessibleFolders(),c.getRestJettyPath(),getProperty(GG_JETTY_HOST),intValue(GG_JETTY_PORT,null),c.getRestTcpHost(),c.getRestTcpPort(),compactClass(c.getRestTcpSslContextFactory()));
  final List<VisorCacheConfig> caches=new ArrayList<>(c.getCacheConfiguration().length);
  for (  GridCacheConfiguration cacheCfg : c.getCacheConfiguration()) {
    GridCacheAffinityFunction affFunc=cacheCfg.getAffinity();
    Integer dfltReplicas=null;
    Boolean excludeNeighbors=null;
    if (affFunc instanceof GridCacheConsistentHashAffinityFunction) {
      GridCacheConsistentHashAffinityFunction hashAffFunc=(GridCacheConsistentHashAffinityFunction)affFunc;
      dfltReplicas=hashAffFunc.getDefaultReplicas();
      excludeNeighbors=hashAffFunc.isExcludeNeighbors();
    }
    VisorAffinityConfig affinity=new VisorAffinityConfig(compactClass(cacheCfg.getAffinity()),compactClass(cacheCfg.getAffinityMapper()),cacheCfg.getBackups(),affFunc == null ? null : affFunc.partitions(),dfltReplicas,excludeNeighbors);
    VisorPreloadConfig preload=new VisorPreloadConfig(cacheCfg.getPreloadMode(),cacheCfg.getPreloadBatchSize(),cacheCfg.getPreloadThreadPoolSize(),cacheCfg.getPreloadPartitionedDelay(),cacheCfg.getPreloadThrottle(),cacheCfg.getPreloadTimeout());
    Integer policyMaxSize=null;
    final GridCacheEvictionPolicy policy=cacheCfg.getEvictionPolicy();
    if (policy instanceof GridCacheLruEvictionPolicyMBean)     policyMaxSize=((GridCacheLruEvictionPolicyMBean)policy).getMaxSize();
 else     if (policy instanceof GridCacheRandomEvictionPolicyMBean)     policyMaxSize=((GridCacheRandomEvictionPolicyMBean)policy).getMaxSize();
 else     if (policy instanceof GridCacheFifoEvictionPolicyMBean)     policyMaxSize=((GridCacheFifoEvictionPolicyMBean)policy).getMaxSize();
    VisorEvictionConfig evict=new VisorEvictionConfig(compactClass(cacheCfg.getEvictionPolicy()),policyMaxSize,compactClass(cacheCfg.getEvictionFilter()),cacheCfg.getEvictSynchronizedConcurrencyLevel(),cacheCfg.getEvictSynchronizedTimeout(),cacheCfg.getEvictSynchronizedKeyBufferSize(),cacheCfg.isEvictSynchronized(),cacheCfg.isEvictNearSynchronized(),cacheCfg.getEvictMaxOverflowRatio());
    VisorNearCacheConfig near=new VisorNearCacheConfig(GridCacheUtils.isNearEnabled(cacheCfg),cacheCfg.getNearStartSize(),compactClass(cacheCfg.getNearEvictionPolicy()));
    VisorDefaultConfig dflt=new VisorDefaultConfig(cacheCfg.getDefaultTxIsolation(),cacheCfg.getDefaultTxConcurrency(),cacheCfg.getDefaultTxTimeout(),cacheCfg.getDefaultLockTimeout(),cacheCfg.getDefaultQueryTimeout());
    VisorDgcConfig dgc=new VisorDgcConfig(cacheCfg.getDgcFrequency(),cacheCfg.isDgcRemoveLocks(),cacheCfg.getDgcSuspectLockTimeout());
    VisorStoreConfig store=new VisorStoreConfig(compactClass(cacheCfg.getStore()),cacheCfg.isStoreValueBytes());
    VisorWriteBehindConfig writeBehind=new VisorWriteBehindConfig(cacheCfg.isWriteBehindEnabled(),cacheCfg.getWriteBehindBatchSize(),cacheCfg.getWriteBehindFlushFrequency(),cacheCfg.getWriteBehindFlushSize(),cacheCfg.getWriteBehindFlushThreadCount());
    final GridDrSenderCacheConfiguration sender=cacheCfg.getDrSenderConfiguration();
    VisorDrSenderConfig drSenderCfg=null;
    if (sender != null)     drSenderCfg=new VisorDrSenderConfig(sender.getMode(),sender.getBatchSendSize(),sender.getBatchSendFrequency(),sender.getMaxBatches(),sender.getSenderHubLoadBalancingMode(),sender.getStateTransferThrottle(),sender.getStateTransferThreadsCount());
    final GridDrReceiverCacheConfiguration receiver=cacheCfg.getDrReceiverConfiguration();
    VisorDrReceiverConfig drReceiverCfg=null;
    if (receiver != null)     drReceiverCfg=new VisorDrReceiverConfig(compactClass(receiver.getConflictResolver()),receiver.getConflictResolverMode());
    caches.add(new VisorCacheConfig(cacheCfg.getName(),cacheCfg.getCacheMode(),cacheCfg.getDistributionMode(),cacheCfg.getAtomicityMode(),cacheCfg.getAtomicSequenceReserveSize(),cacheCfg.getAtomicWriteOrderMode(),cacheCfg.getDefaultTimeToLive(),cacheCfg.isEagerTtl(),cacheCfg.getRefreshAheadRatio(),cacheCfg.getWriteSynchronizationMode(),cacheCfg.getAtomicSequenceReserveSize(),cacheCfg.isSwapEnabled(),cacheCfg.isQueryIndexEnabled(),cacheCfg.isBatchUpdateOnCommit(),cacheCfg.isInvalidate(),cacheCfg.getStartSize(),compactClass(cacheCfg.getCloner()),cacheCfg.getTransactionManagerLookupClassName(),cacheCfg.isTxSerializableEnabled(),cacheCfg.getOffHeapMaxMemory(),cacheCfg.getMaximumQueryIteratorCount(),cacheCfg.getMaxConcurrentAsyncOperations(),cacheCfg.getPessimisticTxLogSize(),cacheCfg.getPessimisticTxLogLinger(),cacheCfg.getMemoryMode(),cacheCfg.getIndexingSpiName(),affinity,preload,evict,near,dflt,dgc,store,writeBehind,drSenderCfg,drReceiverCfg));
  }
  final List<VisorGgfsConfig> ggfss=new ArrayList<>();
  if (c.getGgfsConfiguration() != null)   for (  GridGgfsConfiguration ggfs : c.getGgfsConfiguration()) {
    ggfss.add(new VisorGgfsConfig(ggfs.getName(),ggfs.getMetaCacheName(),ggfs.getDataCacheName(),ggfs.getBlockSize(),ggfs.getPrefetchBlocks(),ggfs.getStreamBufferSize(),ggfs.getPerNodeBatchSize(),ggfs.getPerNodeParallelBatchCount(),ggfs.getSecondaryHadoopFileSystemUri(),ggfs.getSecondaryHadoopFileSystemConfigPath(),ggfs.getDefaultMode(),ggfs.getPathModes(),compactClass(ggfs.getDualModePutExecutorService()),ggfs.getDualModePutExecutorServiceShutdown(),ggfs.getDualModeMaxPendingPutsSize(),ggfs.getMaximumTaskRangeLength(),ggfs.getFragmentizerConcurrentFiles(),ggfs.getFragmentizerLocalWritesRatio(),ggfs.isFragmentizerEnabled(),ggfs.getFragmentizerThrottlingBlockLength(),ggfs.getFragmentizerThrottlingDelay(),ggfs.getIpcEndpointConfiguration(),ggfs.isIpcEndpointEnabled(),ggfs.getMaxSpaceSize(),ggfs.getManagementPort(),ggfs.getSequentialReadsBeforePrefetch(),ggfs.getTrashPurgeTimeout()));
  }
  final List<VisorStreamerConfig> streamers=new ArrayList<>();
  if (c.getStreamerConfiguration() != null)   for (  GridStreamerConfiguration streamer : c.getStreamerConfiguration())   streamers.add(new VisorStreamerConfig(streamer.getName(),compactClass(streamer.getRouter()),streamer.isAtLeastOnce(),streamer.getMaximumFailoverAttempts(),streamer.getMaximumConcurrentSessions(),streamer.isExecutorServiceShutdown()));
  VisorDrSenderHubConfig senderHub=null;
  if (c.getDrSenderHubConfiguration() != null) {
    GridDrSenderHubConfiguration hCfg=c.getDrSenderHubConfiguration();
    List<VisorDrSenderHubConnectionConfig> hubConnections=new ArrayList<>();
    for (    GridDrSenderHubConnectionConfiguration cCfg : hCfg.getConnectionConfiguration()) {
      hubConnections.add(new VisorDrSenderHubConnectionConfig(c.getDataCenterId(),cCfg.getReceiverHubAddresses(),cCfg.getLocalOutboundHost(),cCfg.getReceiverHubLoadBalancingMode(),cCfg.getIgnoredDataCenterIds()));
    }
    senderHub=new VisorDrSenderHubConfig(hubConnections,hCfg.getMaxFailedConnectAttempts(),hCfg.getMaxErrors(),hCfg.getHealthCheckFrequency(),hCfg.getSystemRequestTimeout(),hCfg.getReadTimeout(),hCfg.getMaxQueueSize(),hCfg.getReconnectOnFailureTimeout(),hCfg.getCacheNames());
  }
  VisorDrReceiverHubConfig receiverHub=null;
  if (c.getDrReceiverHubConfiguration() != null) {
    GridDrReceiverHubConfiguration hCfg=c.getDrReceiverHubConfiguration();
    receiverHub=new VisorDrReceiverHubConfig(hCfg.getLocalInboundHost(),hCfg.getLocalInboundPort(),hCfg.getSelectorCount(),hCfg.getWorkerThreads(),hCfg.getMessageQueueLimit(),hCfg.isTcpNodelay(),hCfg.isDirectBuffer(),hCfg.getIdleTimeout(),hCfg.getWriteTimeout(),hCfg.getFlushFrequency(),hCfg.getPerNodeBufferSize(),hCfg.getPerNodeParallelLoadOperations());
  }
  return new VisorGridConfig(lic,basic,metrics,spis,p2p,email,lifecycle,execSvc,seg,compactArray(c.getIncludeProperties()),c.getIncludeEventTypes(),rest,c.getUserAttributes(),caches,ggfss,streamers,senderHub,receiverHub,new HashMap<>(getenv()),getProperties());
}
