{
  cache.removeAll(keys);
  log.info("Test invokeAll [keys=" + keys + ", txMode="+ txMode+ ']');
  IncrementProcessor incProcessor=new IncrementProcessor();
{
    Transaction tx=startTx(txMode);
    Map<Integer,EntryProcessorResult<Integer>> resMap=cache.invokeAll(keys,incProcessor);
    if (tx != null)     tx.commit();
    Map<Object,Object> exp=new HashMap<>();
    for (    Integer key : keys)     exp.put(key,-1);
    checkResult(resMap,exp);
    for (    Integer key : keys)     checkValue(key,1);
  }
{
    Transaction tx=startTx(txMode);
    Map<Integer,EntryProcessorResult<TestValue>> resMap=cache.invokeAll(keys,new UserClassValueProcessor());
    if (tx != null)     tx.commit();
    Map<Object,Object> exp=new HashMap<>();
    for (    Integer key : keys)     exp.put(key,new TestValue("1"));
    checkResult(resMap,exp);
    for (    Integer key : keys)     checkValue(key,1);
  }
{
    Transaction tx=startTx(txMode);
    Map<Integer,EntryProcessorResult<Collection<TestValue>>> resMap=cache.invokeAll(keys,new CollectionReturnProcessor());
    if (tx != null)     tx.commit();
    Map<Object,Object> exp=new HashMap<>();
    for (    Integer key : keys) {
      List<TestValue> expCol=new ArrayList<>();
      for (int i=0; i < 10; i++)       expCol.add(new TestValue("2"));
      exp.put(key,expCol);
    }
    checkResult(resMap,exp);
    for (    Integer key : keys)     checkValue(key,1);
  }
{
    Transaction tx=startTx(txMode);
    Map<Integer,EntryProcessorResult<Integer>> resMap=cache.invokeAll(keys,incProcessor);
    if (tx != null)     tx.commit();
    Map<Object,Object> exp=new HashMap<>();
    for (    Integer key : keys)     exp.put(key,1);
    checkResult(resMap,exp);
    for (    Integer key : keys)     checkValue(key,2);
  }
{
    Transaction tx=startTx(txMode);
    Map<Integer,EntryProcessorResult<Integer>> resMap=cache.invokeAll(keys,new ArgumentsSumProcessor(),10,20,30);
    if (tx != null)     tx.commit();
    Map<Object,Object> exp=new HashMap<>();
    for (    Integer key : keys)     exp.put(key,3);
    checkResult(resMap,exp);
    for (    Integer key : keys)     checkValue(key,62);
  }
{
    Transaction tx=startTx(txMode);
    Map<Integer,EntryProcessorResult<Integer>> resMap=cache.invokeAll(keys,new ExceptionProcessor(null));
    if (tx != null)     tx.commit();
    for (    Integer key : keys) {
      final EntryProcessorResult<Integer> res=resMap.get(key);
      assertNotNull("No result for " + key);
      GridTestUtils.assertThrows(log,new Callable<Void>(){
        @Override public Void call() throws Exception {
          res.get();
          return null;
        }
      }
,EntryProcessorException.class,"Test processor exception.");
    }
    for (    Integer key : keys)     checkValue(key,62);
  }
{
    Transaction tx=startTx(txMode);
    Map<Integer,EntryProcessor<Integer,Integer,Integer>> invokeMap=new HashMap<>();
    for (    Integer key : keys) {
switch (key % 4) {
case 0:
        invokeMap.put(key,new IncrementProcessor());
      break;
case 1:
    invokeMap.put(key,new RemoveProcessor(62));
  break;
case 2:
invokeMap.put(key,new ArgumentsSumProcessor());
break;
case 3:
invokeMap.put(key,new ExceptionProcessor(62));
break;
default :
fail();
}
}
Map<Integer,EntryProcessorResult<Integer>> resMap=cache.invokeAll(invokeMap,10,20,30);
if (tx != null) tx.commit();
for (Integer key : keys) {
final EntryProcessorResult<Integer> res=resMap.get(key);
switch (key % 4) {
case 0:
{
assertNotNull("No result for " + key,res);
assertEquals(62,(int)res.get());
checkValue(key,63);
break;
}
case 1:
{
assertNull(res);
checkValue(key,null);
break;
}
case 2:
{
assertNotNull("No result for " + key,res);
assertEquals(3,(int)res.get());
checkValue(key,122);
break;
}
case 3:
{
assertNotNull("No result for " + key,res);
GridTestUtils.assertThrows(log,new Callable<Void>(){
@Override public Void call() throws Exception {
res.get();
return null;
}
}
,EntryProcessorException.class,"Test processor exception.");
checkValue(key,62);
break;
}
}
}
}
cache.invokeAll(keys,new IncrementProcessor());
{
Transaction tx=startTx(txMode);
Map<Integer,EntryProcessorResult<Integer>> resMap=cache.invokeAll(keys,new RemoveProcessor(null));
if (tx != null) tx.commit();
assertEquals("Unexpected results: " + resMap,0,resMap.size());
for (Integer key : keys) checkValue(key,null);
}
IgniteCache<Integer,Integer> asyncCache=cache.withAsync();
assertTrue(asyncCache.isAsync());
assertNull(asyncCache.invokeAll(keys,new IncrementProcessor()));
IgniteFuture<Map<Integer,EntryProcessorResult<Integer>>> fut=asyncCache.future();
Map<Integer,EntryProcessorResult<Integer>> resMap=fut.get();
Map<Object,Object> exp=new HashMap<>();
for (Integer key : keys) exp.put(key,-1);
checkResult(resMap,exp);
for (Integer key : keys) checkValue(key,1);
Map<Integer,EntryProcessor<Integer,Integer,Integer>> invokeMap=new HashMap<>();
for (Integer key : keys) invokeMap.put(key,incProcessor);
assertNull(asyncCache.invokeAll(invokeMap));
fut=asyncCache.future();
resMap=fut.get();
for (Integer key : keys) exp.put(key,1);
checkResult(resMap,exp);
for (Integer key : keys) checkValue(key,2);
}
