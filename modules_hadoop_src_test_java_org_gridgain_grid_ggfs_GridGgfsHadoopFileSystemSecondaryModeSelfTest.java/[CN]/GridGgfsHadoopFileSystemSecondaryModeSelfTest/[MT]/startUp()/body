{
  startUpSecondary();
  IgniteFsConfiguration ggfsCfg=new IgniteFsConfiguration();
  ggfsCfg.setDataCacheName("partitioned");
  ggfsCfg.setMetaCacheName("replicated");
  ggfsCfg.setName("ggfs");
  ggfsCfg.setBlockSize(512 * 1024);
  ggfsCfg.setDefaultMode(mode);
  ggfsCfg.setPathModes(pathModes);
  ggfsCfg.setIpcEndpointConfiguration(new HashMap<String,String>(){
{
      put("type","tcp");
      put("port","10500");
    }
  }
);
  ggfsCfg.setManagementPort(-1);
  ggfsCfg.setSecondaryFileSystem(new GridGgfsHadoopFileSystemWrapper("ggfs://ggfs-secondary:ggfs-grid-secondary@127.0.0.1:11500/","modules/core/src/test/config/hadoop/core-site-loopback-secondary.xml"));
  GridCacheConfiguration cacheCfg=defaultCacheConfiguration();
  cacheCfg.setName("partitioned");
  cacheCfg.setCacheMode(PARTITIONED);
  cacheCfg.setDistributionMode(GridCacheDistributionMode.PARTITIONED_ONLY);
  cacheCfg.setWriteSynchronizationMode(GridCacheWriteSynchronizationMode.FULL_SYNC);
  cacheCfg.setAffinityMapper(new IgniteFsGroupDataBlocksKeyMapper(128));
  cacheCfg.setBackups(0);
  cacheCfg.setQueryIndexEnabled(false);
  cacheCfg.setAtomicityMode(TRANSACTIONAL);
  GridCacheConfiguration metaCacheCfg=defaultCacheConfiguration();
  metaCacheCfg.setName("replicated");
  metaCacheCfg.setCacheMode(REPLICATED);
  metaCacheCfg.setWriteSynchronizationMode(GridCacheWriteSynchronizationMode.FULL_SYNC);
  metaCacheCfg.setQueryIndexEnabled(false);
  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);
  IgniteConfiguration cfg=new IgniteConfiguration();
  cfg.setGridName("ggfs-grid");
  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();
  discoSpi.setIpFinder(new TcpDiscoveryVmIpFinder(true));
  cfg.setDiscoverySpi(discoSpi);
  cfg.setCacheConfiguration(metaCacheCfg,cacheCfg);
  cfg.setGgfsConfiguration(ggfsCfg);
  cfg.setLocalHost("127.0.0.1");
  G.start(cfg);
  Configuration fsCfg=new Configuration();
  fsCfg.addResource(U.resolveGridGainUrl("modules/core/src/test/config/hadoop/core-site-loopback.xml"));
  fsCfg.setBoolean("fs.ggfs.impl.disable.cache",true);
  fs=(GridGgfsHadoopFileSystem)FileSystem.get(new URI("ggfs://ggfs:ggfs-grid@/"),fsCfg);
}
