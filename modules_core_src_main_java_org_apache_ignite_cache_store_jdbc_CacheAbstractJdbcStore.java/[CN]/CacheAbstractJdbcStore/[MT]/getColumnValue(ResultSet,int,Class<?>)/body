{
  if (type == int.class)   return rs.getInt(colIdx);
  if (type == long.class)   return rs.getLong(colIdx);
  if (type == double.class)   return rs.getDouble(colIdx);
  if (type == boolean.class)   return rs.getBoolean(colIdx);
  if (type == byte.class)   return rs.getByte(colIdx);
  if (type == short.class)   return rs.getShort(colIdx);
  if (type == float.class)   return rs.getFloat(colIdx);
  if (type == Integer.class || type == Long.class || type == Double.class || type == Byte.class || type == Short.class || type == Float.class) {
    Object val=rs.getObject(colIdx);
    if (val != null) {
      Number num=(Number)val;
      if (type == Integer.class)       return num.intValue();
 else       if (type == Long.class)       return num.longValue();
 else       if (type == Double.class)       return num.doubleValue();
 else       if (type == Byte.class)       return num.byteValue();
 else       if (type == Short.class)       return num.shortValue();
 else       if (type == Float.class)       return num.floatValue();
    }
 else     return EMPTY_COLUMN_VALUE;
  }
  Object val=rs.getObject(colIdx);
  if (type == UUID.class && val != null) {
    if (val instanceof UUID)     return val;
    if (val instanceof byte[]) {
      ByteBuffer bb=ByteBuffer.wrap((byte[])val);
      long most=bb.getLong();
      long least=bb.getLong();
      return new UUID(most,least);
    }
    if (val instanceof String)     return UUID.fromString((String)val);
  }
  return val;
}
