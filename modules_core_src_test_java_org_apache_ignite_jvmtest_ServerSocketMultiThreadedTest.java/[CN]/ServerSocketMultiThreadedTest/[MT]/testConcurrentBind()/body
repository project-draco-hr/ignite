{
  final AtomicInteger bindExCnt=new AtomicInteger();
  final AtomicInteger sockExCnt=new AtomicInteger();
  final AtomicInteger okCnt=new AtomicInteger();
  final CyclicBarrier finishBarrier=new CyclicBarrier(THREADS_CNT,new Runnable(){
    private int i;
    @Override public void run(){
      if (++i % 250 == 0)       X.println("Finished iteration [threadName=" + Thread.currentThread().getName() + ", iter="+ i+ ']');
    }
  }
);
  final InetAddress addr=InetAddress.getByName("127.0.0.1");
  GridTestUtils.runMultiThreaded(new Callable<Object>(){
    @Nullable @Override public Object call() throws Exception {
      ServerSocket srvSock=null;
      for (int i=0; i < ITER_CNT; i++) {
        try {
          srvSock=new ServerSocket(60000,0,addr);
          okCnt.incrementAndGet();
        }
 catch (        BindException ignore) {
          bindExCnt.incrementAndGet();
        }
catch (        SocketException ignore) {
          sockExCnt.incrementAndGet();
        }
 finally {
          finishBarrier.await();
          U.closeQuiet(srvSock);
        }
      }
      return null;
    }
  }
,THREADS_CNT,"binder");
  X.println("Test stats [bindExCnt=" + bindExCnt.get() + ", sockExCnt="+ sockExCnt.get()+ ", okCnt="+ okCnt+ ']');
}
