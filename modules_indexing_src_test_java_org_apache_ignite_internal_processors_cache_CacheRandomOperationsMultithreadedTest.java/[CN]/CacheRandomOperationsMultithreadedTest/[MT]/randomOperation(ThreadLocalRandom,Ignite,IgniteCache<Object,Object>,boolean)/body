{
  int r0=rnd.nextInt(100);
  if (r0 == 0)   cache.clear();
 else   if (r0 == 1)   cache.size();
switch (rnd.nextInt(14)) {
case 0:
{
      cache.put(key(rnd),value(rnd));
      break;
    }
case 1:
{
    cache.getAndPut(key(rnd),value(rnd));
    break;
  }
case 2:
{
  cache.get(key(rnd));
  break;
}
case 3:
{
cache.remove(key(rnd));
break;
}
case 4:
{
cache.getAndRemove(key(rnd));
break;
}
case 5:
{
Map<Object,Object> map=new TreeMap<>();
for (int i=0; i < 50; i++) map.put(key(rnd),value(rnd));
cache.putAll(map);
break;
}
case 6:
{
cache.getAll(keys(50,rnd));
break;
}
case 7:
{
cache.removeAll(keys(50,rnd));
break;
}
case 8:
{
cache.putIfAbsent(key(rnd),value(rnd));
break;
}
case 9:
{
cache.getAndPutIfAbsent(key(rnd),value(rnd));
break;
}
case 10:
{
cache.replace(key(rnd),value(rnd));
break;
}
case 11:
{
cache.getAndReplace(key(rnd),value(rnd));
break;
}
case 12:
{
ScanQuery<Object,Object> qry=new ScanQuery<>();
qry.setFilter(new TestFilter());
List<Cache.Entry<Object,Object>> res=cache.query(qry).getAll();
assertTrue(res.size() >= 0);
break;
}
case 13:
{
if (indexing) {
SqlQuery<Object,Object> qry=new SqlQuery<>(TestData.class,"where val1 > ?");
qry.setArgs(KEYS / 2);
List<Cache.Entry<Object,Object>> res=cache.query(qry).getAll();
assertTrue(res.size() >= 0);
}
break;
}
default :
fail();
}
}
