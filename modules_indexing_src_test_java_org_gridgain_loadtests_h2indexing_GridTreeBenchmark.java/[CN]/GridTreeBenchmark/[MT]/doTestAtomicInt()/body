{
  final AtomicInteger[] cnts=new AtomicInteger[8];
  for (int i=0; i < cnts.length; i++)   cnts[i]=new AtomicInteger();
  final Thread[] ths=new Thread[THREADS];
  final CyclicBarrier barrier=new CyclicBarrier(THREADS + 1);
  final AtomicInteger cnt=new AtomicInteger();
  for (int i=0; i < ths.length; i++) {
    ths[i]=new Thread(new Runnable(){
      @Override public void run(){
        int idx=cnt.getAndIncrement();
        AtomicInteger x=cnts[idx % cnts.length];
        try {
          barrier.await();
        }
 catch (        Exception e) {
          throw new IllegalStateException(e);
        }
        for (int i=0; i < ITERATIONS; i++)         x.incrementAndGet();
      }
    }
);
    ths[i].start();
  }
  barrier.await();
  long start=System.currentTimeMillis();
  for (  Thread t : ths)   t.join();
  long time=System.currentTimeMillis() - start;
  System.out.println(time);
}
