{
  String homeVal=IgniteSystemProperties.getString(homeVariable);
  if (!F.isEmpty(homeVal) && new File(homeVal).isDirectory()) {
    X.println(homeVariable + " is set to: " + homeVal);
    return;
  }
  List<String> urls=F.asList("http://archive.apache.org/dist/","http://apache-mirror.rbc.ru/pub/apache/","http://www.eu.apache.org/dist/","http://www.us.apache.org/dist/");
  String tmpPath=System.getProperty("java.io.tmpdir");
  X.println("tmp: " + tmpPath);
  File install=new File(tmpPath + File.separatorChar + "__hadoop");
  File home=new File(install,destName);
  X.println("Setting " + homeVariable + " to "+ home.getAbsolutePath());
  System.setProperty(homeVariable,home.getAbsolutePath());
  File successFile=new File(home,"__success");
  if (home.exists()) {
    if (successFile.exists()) {
      X.println(appName + " distribution already exists.");
      return;
    }
    X.println(appName + " distribution is invalid and it will be deleted.");
    if (!U.delete(home))     throw new IOException("Failed to delete directory: " + install.getAbsolutePath());
  }
  for (  String url : urls) {
    if (!(install.exists() || install.mkdirs()))     throw new IOException("Failed to create directory: " + install.getAbsolutePath());
    URL u=new URL(url + downloadPath);
    X.println("Attempting to download from: " + u);
    try {
      URLConnection c=u.openConnection();
      c.connect();
      try (TarArchiveInputStream in=new TarArchiveInputStream(new GzipCompressorInputStream(new BufferedInputStream(c.getInputStream(),32 * 1024)))){
        TarArchiveEntry entry;
        while ((entry=in.getNextTarEntry()) != null) {
          File dest=new File(install,entry.getName());
          if (entry.isDirectory()) {
            if (!dest.mkdirs())             throw new IllegalStateException();
          }
 else           if (entry.isSymbolicLink()) {
            Path theLinkItself=Paths.get(install.getAbsolutePath(),entry.getName());
            Path linkTarget=Paths.get(entry.getLinkName());
            Files.createSymbolicLink(theLinkItself,linkTarget);
          }
 else {
            File parent=dest.getParentFile();
            if (!(parent.exists() || parent.mkdirs()))             throw new IllegalStateException();
            X.print(" [" + dest);
            try (BufferedOutputStream out=new BufferedOutputStream(new FileOutputStream(dest,false),128 * 1024)){
              U.copy(in,out);
              out.flush();
            }
             Files.setPosixFilePermissions(dest.toPath(),modeToPermissionSet(entry.getMode()));
            X.println("]");
          }
        }
      }
       if (successFile.createNewFile())       return;
    }
 catch (    Exception e) {
      e.printStackTrace();
      U.delete(install);
    }
  }
  throw new IllegalStateException("Failed to install " + appName + ".");
}
