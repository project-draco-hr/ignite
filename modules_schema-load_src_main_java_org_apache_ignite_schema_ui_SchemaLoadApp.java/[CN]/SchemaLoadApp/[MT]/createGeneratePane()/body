{
  genPnl=paneEx(10,10,0,10);
  genPnl.addColumn();
  genPnl.addColumn(100,100,Double.MAX_VALUE,Priority.ALWAYS);
  genPnl.addColumn(35,35,35,Priority.NEVER);
  genPnl.addRow(100,100,Double.MAX_VALUE,Priority.ALWAYS);
  genPnl.addRows(7);
  TableColumn<SchemaItem,Boolean> useCol=booleanColumn("Use","use","If checked then this field will be part of key object");
  TableColumn<SchemaItem,String> schemaCol=tableColumn("Schema","schema","Schema name in database");
  TableColumn<SchemaItem,String> tblCol=tableColumn("Table","table","Table name in database");
  TableColumn<SchemaItem,String> keyClsCol=textColumn("Key Class","keyClass","Key class name");
  TableColumn<SchemaItem,String> valClsCol=textColumn("Value Class","valueClass","Value class name");
  schemesTbl=tableView("Tables not found in database",useCol,schemaCol,tblCol,keyClsCol,valClsCol);
  TableColumn<PojoField,Boolean> keyCol=booleanColumn("Key","key","If checked then this field will be part of key object");
  TableColumn<PojoField,String> dbNameCol=tableColumn("DB Name","dbName","Field name in database");
  TableColumn<PojoField,String> dbTypeNameCol=tableColumn("DB Type","dbTypeName","Field type in database");
  TableColumn<PojoField,String> javaNameCol=textColumn("Ignite Name","javaName","Field name in POJO class");
  TableColumn<PojoField,String> javaTypeNameCol=customColumn("Java Type","javaTypeName","Field java type in POJO class",JavaTypeCell.forTableColumn());
  final TableView<PojoField> fieldsTbl=tableView("Select table to see table columns",keyCol,dbNameCol,dbTypeNameCol,javaNameCol,javaTypeNameCol);
  final Button upBtn=button(imageView("navigate_up",24),"Move selected row up",new EventHandler<ActionEvent>(){
    @Override public void handle(    ActionEvent evt){
      TableView.TableViewSelectionModel<PojoField> selMdl=fieldsTbl.getSelectionModel();
      int selIdx=selMdl.getSelectedIndex();
      if (selIdx > 0) {
        ObservableList<PojoField> items=fieldsTbl.getItems();
        int newId=selIdx - 1;
        items.add(newId,items.remove(selIdx));
        if (newId == 0)         fieldsTbl.requestFocus();
        selMdl.select(newId);
      }
    }
  }
);
  upBtn.setDisable(true);
  final Button downBtn=button(imageView("navigate_down",24),"Move selected row down",new EventHandler<ActionEvent>(){
    @Override public void handle(    ActionEvent evt){
      TableView.TableViewSelectionModel<PojoField> selMdl=fieldsTbl.getSelectionModel();
      int selIdx=selMdl.getSelectedIndex();
      ObservableList<PojoField> items=fieldsTbl.getItems();
      int maxIdx=items.size() - 1;
      if (selIdx < maxIdx) {
        int newId=selIdx + 1;
        items.add(newId,items.remove(selIdx));
        if (newId == maxIdx)         fieldsTbl.requestFocus();
        selMdl.select(newId);
      }
    }
  }
);
  downBtn.setDisable(true);
  fieldsTbl.getSelectionModel().selectedIndexProperty().addListener(new ChangeListener<Number>(){
    @Override public void changed(    ObservableValue<? extends Number> observable,    Number oldVal,    Number newVal){
      upBtn.setDisable(newVal == null || newVal.intValue() == 0);
      downBtn.setDisable(newVal == null || newVal.intValue() == fieldsTbl.getItems().size() - 1);
    }
  }
);
  genPnl.add(splitPane(schemesTbl,borderPane(null,fieldsTbl,null,null,vBox(10,upBtn,downBtn)),0.6),3);
  final GridPaneEx keyValPnl=paneEx(0,0,0,0);
  keyValPnl.addColumn(100,100,Double.MAX_VALUE,Priority.ALWAYS);
  keyValPnl.addColumn();
  keyValPnl.addColumn(100,100,Double.MAX_VALUE,Priority.ALWAYS);
  keyValPnl.addColumn();
  pkgTf=genPnl.addLabeled("Package:",textField("Package that will be used for POJOs generation"),2);
  outFolderTf=genPnl.addLabeled("Output Folder:",textField("Output folder for POJOs and XML files"));
  genPnl.add(button("...","Select output folder",new EventHandler<ActionEvent>(){
    /** 
 * {@inheritDoc} 
 */
    @Override public void handle(    ActionEvent evt){
      DirectoryChooser dc=new DirectoryChooser();
      File folder=dc.showDialog(owner);
      if (folder != null)       outFolderTf.setText(folder.getAbsolutePath());
    }
  }
));
  pojoIncludeKeysCh=genPnl.add(checkBox("Include key fields into value POJOs","If selected then include key fields into value object",true),3);
  pojoConstructorCh=genPnl.add(checkBox("Generate constructors for POJOs","If selected then generate empty and full constructors for POJOs",false),3);
  xmlSingleFileCh=genPnl.add(checkBox("Write all configurations to a single XML file","If selected then all configurations will be saved into the file 'Ignite.xml'",true),3);
  openFolderCh=genPnl.add(checkBox("Reveal output folder","Open output folder in system file manager after generation complete",true),3);
  GridPaneEx regexPnl=paneEx(0,0,0,0);
  regexPnl.addColumn();
  regexPnl.addColumn(100,100,Double.MAX_VALUE,Priority.ALWAYS);
  regexPnl.addColumn();
  regexPnl.addColumn(100,100,Double.MAX_VALUE,Priority.ALWAYS);
  regexPnl.add(new Label("Replace Ignite name for selected or all tables:"),4);
  regexTf=regexPnl.addLabeled("  Regexp:",textField("Regular expression. For example: (\\w+)"));
  replaceTf=regexPnl.addLabeled("  Replace with:",textField("Replace text. For example: $1_Suffix"));
  final Button renBtn=button("Rename","Replace Ignite names by provided regular expression for current table",new EventHandler<ActionEvent>(){
    /** 
 * {@inheritDoc} 
 */
    @Override public void handle(    ActionEvent evt){
      if (curPojo == null) {
        MessageBox.warningDialog(owner,"Please select table to rename Ignite names!");
        return;
      }
      if (checkInput(regexTf,false,"Regular expression should not be empty!"))       return;
      String regex=regexTf.getText();
      String replace=replaceTf.getText();
      try {
        for (        PojoField field : curPojo.fields())         field.javaName(field.javaName().replaceAll(regex,replace));
      }
 catch (      Exception e) {
        MessageBox.errorDialog(owner,"Failed to rename Ignite names!",e);
      }
    }
  }
);
  renBtn.setDisable(true);
  final Button revertBtn=button("Revert","Revert changes to Ignite names for current table",new EventHandler<ActionEvent>(){
    /** 
 * {@inheritDoc} 
 */
    @Override public void handle(    ActionEvent evt){
      if (curPojo != null)       curPojo.revertJavaNames();
 else       MessageBox.warningDialog(owner,"Please select table to revert changes to Ignite names!");
    }
  }
);
  revertBtn.setDisable(true);
  regexPnl.add(buttonsPane(Pos.BOTTOM_RIGHT,false,renBtn,button("Rename All","Replace Ignite names by provided regular expression for all selected tables",new EventHandler<ActionEvent>(){
    /** 
 * {@inheritDoc} 
 */
    @Override public void handle(    ActionEvent evt){
      if (checkInput(regexTf,false,"Regular expression should not be empty!"))       return;
      Collection<PojoDescriptor> selItems=selectedItems();
      if (selItems.isEmpty()) {
        MessageBox.warningDialog(owner,"Please select tables to rename Ignite names!");
        return;
      }
      if (!MessageBox.confirmDialog(owner,"Are you sure you want to rename Ignite names in all selected tables?"))       return;
      String regex=regexTf.getText();
      String replace=replaceTf.getText();
      try {
        for (        PojoDescriptor pojo : selItems)         for (        PojoField field : pojo.fields())         field.javaName(field.javaName().replaceAll(regex,replace));
      }
 catch (      Exception e) {
        MessageBox.errorDialog(owner,"Failed to rename Ignite names!",e);
      }
    }
  }
),revertBtn,button("Revert All","Revert changes to Ignite names for all selected tables",new EventHandler<ActionEvent>(){
    /** 
 * {@inheritDoc} 
 */
    @Override public void handle(    ActionEvent evt){
      Collection<PojoDescriptor> selItems=selectedItems();
      if (selItems.isEmpty()) {
        MessageBox.warningDialog(owner,"Please select tables to revert Ignite names!");
        return;
      }
      if (!MessageBox.confirmDialog(owner,"Are you sure you want to revert Ignite names for all selected tables?"))       return;
      for (      PojoDescriptor pojo : selItems)       pojo.revertJavaNames();
    }
  }
)),4);
  genPnl.add(regexPnl,3);
  genLayerPnl=stackPane(genPnl);
}
