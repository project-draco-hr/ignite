{
  runInAllDataModes(new TestRunnable(){
    @Override public void run() throws Exception {
      final IgniteCache cache=jcache().withKeepBinary().withAsync();
      Set keys=new LinkedHashSet(){
{
          for (int i=0; i < CNT; i++)           add(key(i));
        }
      }
;
      try (Transaction tx=testedGrid().transactions().txStart(conc,isolation)){
        for (        final Object key : keys) {
          cache.invoke(key,NOOP_ENTRY_PROC);
          Object res=cache.future().get();
          assertNull(res);
          cache.get(key);
          assertNull(cache.future().get());
        }
        tx.commit();
      }
       for (      final Object key : keys) {
        Object res;
        try (Transaction tx=testedGrid().transactions().txStart(conc,isolation)){
          cache.invoke(key,INC_ENTRY_PROC_BINARY_OBJ,dataMode);
          res=cache.future().get();
          tx.commit();
        }
         assertNull(res);
        cache.get(key);
        assertEquals(value(0),deserializeBinary(cache.future().get()));
        try (Transaction tx=testedGrid().transactions().txStart(conc,isolation)){
          cache.invoke(key,INC_ENTRY_PROC_BINARY_OBJ,dataMode);
          tx.commit();
        }
         res=cache.future().get();
        assertEquals(value(0),deserializeBinary(res));
        cache.get(key);
        assertEquals(value(1),deserializeBinary(cache.future().get()));
        try (Transaction tx=testedGrid().transactions().txStart(conc,isolation)){
          cache.remove(key);
          assertTrue((Boolean)cache.future().get());
          tx.commit();
        }
       }
      interceptorBinaryObjExp=atomicityMode() == TRANSACTIONAL;
      try {
        for (        final Object key : keys) {
          Object res;
          try (Transaction tx=testedGrid().transactions().txStart(conc,isolation)){
            cache.invoke(key,INC_ENTRY_PROC_USER_OBJ,dataMode);
            res=cache.future().get();
            tx.commit();
          }
           assertNull(res);
          cache.get(key);
          assertEquals(value(0),deserializeBinary(cache.future().get()));
          try (Transaction tx=testedGrid().transactions().txStart(conc,isolation)){
            cache.invoke(key,INC_ENTRY_PROC_USER_OBJ,dataMode);
            res=cache.future().get();
            tx.commit();
          }
           cache.get(key);
          assertEquals(value(1),deserializeBinary(cache.future().get()));
          try (Transaction tx=testedGrid().transactions().txStart(conc,isolation)){
            cache.remove(key);
            assertTrue((Boolean)cache.future().get());
            tx.commit();
          }
         }
      }
  finally {
        interceptorBinaryObjExp=true;
      }
    }
  }
,PLANE_OBJECT,SERIALIZABLE);
}
