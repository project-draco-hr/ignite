{
  runInAllDataModes(new TestRunnable(){
    @Override public void run() throws Exception {
      final IgniteCache cache=jcache().withKeepBinary().withAsync();
      final Set keys=new LinkedHashSet(){
{
          for (int i=0; i < CNT; i++)           add(key(i));
        }
      }
;
      cache.invokeAll(keys,NOOP_ENTRY_PROC);
      Map<Object,EntryProcessorResult<Object>> resMap=(Map<Object,EntryProcessorResult<Object>>)cache.future().get();
      for (      Map.Entry<Object,EntryProcessorResult<Object>> e : resMap.entrySet()) {
        assertTrue("Wrong key type, binary object expected: " + e.getKey(),e.getKey() instanceof BinaryObject);
        assertNull(e.getValue().get());
      }
      cache.invokeAll(keys,INC_ENTRY_PROC_BINARY_OBJ,dataMode);
      resMap=(Map<Object,EntryProcessorResult<Object>>)cache.future().get();
      checkInvokeAllAsyncResult(cache,resMap,null,value(0),true);
      cache.invokeAll(keys,INC_ENTRY_PROC_BINARY_OBJ,dataMode);
      resMap=(Map<Object,EntryProcessorResult<Object>>)cache.future().get();
      checkInvokeAllAsyncResult(cache,resMap,value(0),value(1),true);
      cache.removeAll(keys);
      cache.future().get();
      interceptorBinaryObjExp=atomicityMode() == TRANSACTIONAL;
      try {
        cache.invokeAll(keys,INC_ENTRY_PROC_USER_OBJ,dataMode);
        resMap=(Map<Object,EntryProcessorResult<Object>>)cache.future().get();
        checkInvokeAllAsyncResult(cache,resMap,null,value(0),false);
        cache.invokeAll(keys,INC_ENTRY_PROC_USER_OBJ,dataMode);
        resMap=(Map<Object,EntryProcessorResult<Object>>)cache.future().get();
        checkInvokeAllAsyncResult(cache,resMap,value(0),value(1),false);
        cache.removeAll(keys);
        cache.future().get();
      }
  finally {
        interceptorBinaryObjExp=true;
      }
    }
  }
,PLANE_OBJECT,SERIALIZABLE);
}
