{
  pending.remove(fut);
  try {
    T t=fut.get();
    try {
      if (rdc != null && !rdc.collect(t) && !res.isMarked())       res.compareAndSet(null,rdc.reduce(),false,true);
    }
 catch (    RuntimeException e) {
      U.error(null,"Failed to execute compound future reducer: " + this,e);
      onDone(e);
    }
catch (    AssertionError e) {
      U.error(null,"Failed to execute compound future reducer: " + this,e);
      onDone(e);
      throw e;
    }
  }
 catch (  IgniteTxOptimisticCheckedException e) {
    err.compareAndSet(null,e);
  }
catch (  ClusterTopologyCheckedException e) {
    err.compareAndSet(null,e);
  }
catch (  IgniteFutureCancelledCheckedException e) {
    err.compareAndSet(null,e);
  }
catch (  IgniteCheckedException e) {
    err.compareAndSet(null,e);
  }
catch (  RuntimeException e) {
    U.error(null,"Failed to execute compound future reducer: " + this,e);
    err.compareAndSet(null,e);
  }
catch (  AssertionError e) {
    U.error(null,"Failed to execute compound future reducer: " + this,e);
    onDone(e);
    throw e;
  }
  lsnrCalls.incrementAndGet();
  checkComplete();
}
