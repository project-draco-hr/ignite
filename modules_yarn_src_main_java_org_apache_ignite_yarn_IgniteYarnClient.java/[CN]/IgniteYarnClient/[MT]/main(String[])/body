{
  checkArguments(args);
  String pathAppMasterJar=args[0];
  ClusterProperties props=ClusterProperties.from(args.length == 2 ? args[1] : null);
  YarnConfiguration conf=new YarnConfiguration();
  YarnClient yarnClient=YarnClient.createYarnClient();
  yarnClient.init(conf);
  yarnClient.start();
  YarnClientApplication app=yarnClient.createApplication();
  FileSystem fs=FileSystem.get(conf);
  Path ignite;
  if (props.ignitePath() == null)   ignite=getIgnite(props,fs);
 else   ignite=new Path(props.ignitePath());
  Path appJar=IgniteYarnUtils.copyLocalToHdfs(fs,pathAppMasterJar,props.igniteWorkDir() + File.separator + IgniteYarnUtils.JAR_NAME);
  ContainerLaunchContext amContainer=Records.newRecord(ContainerLaunchContext.class);
  amContainer.setCommands(Collections.singletonList(Environment.JAVA_HOME.$() + "/bin/java -Xmx512m " + ApplicationMaster.class.getName()+ IgniteYarnUtils.SPACE+ ignite.toUri()+ IgniteYarnUtils.YARN_LOG_OUT));
  LocalResource appMasterJar=IgniteYarnUtils.setupFile(appJar,fs,LocalResourceType.FILE);
  amContainer.setLocalResources(Collections.singletonMap(IgniteYarnUtils.JAR_NAME,appMasterJar));
  Map<String,String> appMasterEnv=props.toEnvs();
  setupAppMasterEnv(appMasterEnv,conf);
  amContainer.setEnvironment(appMasterEnv);
  Resource capability=Records.newRecord(Resource.class);
  capability.setMemory(512);
  capability.setVirtualCores(1);
  ApplicationSubmissionContext appContext=app.getApplicationSubmissionContext();
  appContext.setApplicationName("ignition");
  appContext.setAMContainerSpec(amContainer);
  appContext.setResource(capability);
  appContext.setQueue("default");
  ApplicationId appId=appContext.getApplicationId();
  yarnClient.submitApplication(appContext);
  log.log(Level.INFO,"Submitted application. Application id: {0}",appId);
  ApplicationReport appReport=yarnClient.getApplicationReport(appId);
  YarnApplicationState appState=appReport.getYarnApplicationState();
  while (appState == YarnApplicationState.NEW || appState == YarnApplicationState.NEW_SAVING || appState == YarnApplicationState.SUBMITTED || appState == YarnApplicationState.ACCEPTED) {
    TimeUnit.SECONDS.sleep(1L);
    appReport=yarnClient.getApplicationReport(appId);
    if (appState != YarnApplicationState.ACCEPTED && appReport.getYarnApplicationState() == YarnApplicationState.ACCEPTED)     log.log(Level.INFO,"Application {0} is ACCEPTED.",appId);
    appState=appReport.getYarnApplicationState();
  }
  log.log(Level.INFO,"Application {0} is {1}.",new Object[]{appId,appState});
}
