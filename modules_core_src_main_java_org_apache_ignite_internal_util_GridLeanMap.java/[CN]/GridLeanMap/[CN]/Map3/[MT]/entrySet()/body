{
  return new AbstractSet<Entry<K,V>>(){
    @Override public Iterator<Entry<K,V>> iterator(){
      return new Iterator<Entry<K,V>>(){
        private int idx;
        private Entry<K,V> next;
{
          if (k1 != null) {
            idx=1;
            next=e(k1,v1);
          }
 else           if (k2 != null) {
            idx=2;
            next=e(k2,v2);
          }
 else           if (k3 != null) {
            idx=3;
            next=e(k3,v3);
          }
        }
        @Override public boolean hasNext(){
          return next != null;
        }
        @SuppressWarnings("fallthrough") @Override public Entry<K,V> next(){
          if (!hasNext())           throw new NoSuchElementException();
          Entry<K,V> old=next;
          next=null;
switch (idx) {
case 1:
            if (k2 != null) {
              idx=2;
              next=e(k2,v2);
              break;
            }
case 2:
          if (k3 != null) {
            idx=3;
            next=e(k3,v3);
            break;
          }
      }
      return old;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}
@Override public int size(){
  return Map3.this.size();
}
}
;
}
