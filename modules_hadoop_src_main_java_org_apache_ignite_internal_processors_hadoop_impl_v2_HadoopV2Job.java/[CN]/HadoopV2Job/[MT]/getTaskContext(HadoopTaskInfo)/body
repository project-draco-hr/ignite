{
  T2<HadoopTaskType,Integer> locTaskId=new T2<>(info.type(),info.taskNumber());
  GridFutureAdapter<HadoopTaskContext> fut=ctxs.get(locTaskId);
  if (fut != null)   return fut.get();
  GridFutureAdapter<HadoopTaskContext> old=ctxs.putIfAbsent(locTaskId,fut=new GridFutureAdapter<>());
  if (old != null)   return old.get();
  Class<? extends HadoopTaskContext> cls=taskCtxClsPool.poll();
  try {
    if (cls == null) {
      HadoopClassLoader ldr=new HadoopClassLoader(rsrcMgr.classPath(),HadoopClassLoader.nameForTask(info,false),libNames,helper);
      cls=(Class<? extends HadoopTaskContext>)ldr.loadClass(HadoopV2TaskContext.class.getName());
      fullCtxClsQueue.add(cls);
    }
    Constructor<?> ctr=cls.getConstructor(HadoopTaskInfo.class,HadoopJob.class,HadoopJobId.class,UUID.class,DataInput.class);
    if (jobConfData == null) synchronized (jobConf) {
      if (jobConfData == null) {
        ByteArrayOutputStream buf=new ByteArrayOutputStream();
        jobConf.write(new DataOutputStream(buf));
        jobConfData=buf.toByteArray();
      }
    }
    HadoopTaskContext res=(HadoopTaskContext)ctr.newInstance(info,this,jobId,locNodeId,new DataInputStream(new ByteArrayInputStream(jobConfData)));
    fut.onDone(res);
    return res;
  }
 catch (  Throwable e) {
    IgniteCheckedException te=transformException(e);
    fut.onDone(te);
    if (e instanceof Error)     throw (Error)e;
    throw te;
  }
}
